{"version":3,"file":"worldwind-tutorials.js","mappings":"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","sources":["webpack://worldwind-tutorials/webpack/universalModuleDefinition","webpack://worldwind-tutorials/../../node_modules/@js-joda/core/dist/js-joda.esm.js","webpack://worldwind-tutorials/../../../../../Trace.common.kt","webpack://worldwind-tutorials/../../../../../AtomicFU.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Preconditions.kt","webpack://worldwind-tutorials/../../../../../DayOfWeek.kt","webpack://worldwind-tutorials/../../../../../Exceptions.kt","webpack://worldwind-tutorials/../../../../../LocalDate.kt","webpack://worldwind-tutorials/../../../../../LocalDateTime.kt","webpack://worldwind-tutorials/../../../../../Month.kt","webpack://worldwind-tutorials/../../../../../dateCalculations.kt","webpack://worldwind-tutorials/../../../../../InstantSerializers.kt","webpack://worldwind-tutorials/../../../../../LocalDateSerializers.kt","webpack://worldwind-tutorials/../../../../../LocalDateTimeSerializers.kt","webpack://worldwind-tutorials/../../../../../TimeZoneSerializers.kt","webpack://worldwind-tutorials/../../../../../Instant.kt","webpack://worldwind-tutorials/../../../../../JSJodaExceptions.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/dynamic.kt","webpack://worldwind-tutorials/../../../../../TimeZone.kt","webpack://worldwind-tutorials/../../../../../UtcOffset.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Standard.kt","webpack://worldwind-tutorials/../../../../../Clock.kt","webpack://worldwind-tutorials/../../../../../runtime/long.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Strings.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/FloorDivMod.kt","webpack://worldwind-tutorials/../../../../../mathJs.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/time/Duration.kt","webpack://worldwind-tutorials/../../../../../<js-code>","webpack://worldwind-tutorials/../../../../worldwind-tutorials/build/generated/moko/jsMain/src/earth/worldwind/tutorials/MR.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/AbstractTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/BasicTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/CameraViewTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/EllipsesTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Angle.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/LabelsTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/LookAtViewTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/MGRSGraticuleTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/PathsTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/PlacemarksTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/PolygonsTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/ShowTessellationTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/SightlineTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/SurfaceImageTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/WmsLayerTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/commonMain/kotlin/earth.worldwind.tutorials/WmtsLayerTutorial.kt","webpack://worldwind-tutorials/../../../../worldwind-tutorials/src/jsMain/kotlin/earth/worldwind/tutorials/Main.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Collections.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/math.kt","webpack://worldwind-tutorials/../../../../worldwind/build/generated/moko/jsMain/src/earth/worldwind/MR.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/GoToAnimator.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/PickedObject.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/PickedObjectList.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Maps.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/WorldWind.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/BasicDrawableTerrain.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawContext.kt","webpack://worldwind-tutorials/../../../../../builtins/Library.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Collections.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawShapeState.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableLambda.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableLines.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableQueue.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableScreenTexture.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableShape.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableSightline.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableSurfaceColor.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableSurfaceShape.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableSurfaceTexture.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/draw/DrawableTessellation.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/frame/BasicFrameController.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/frame/Frame.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/BoundingBox.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/BoundingSphere.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Camera.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Ellipsoid.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Frustum.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Line.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Location.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/LookAt.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Matrix3.kt","webpack://worldwind-tutorials/../../../../../src/generated/_ArraysJs.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Matrix4.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Offset.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Plane.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Position.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Range.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Sector.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/TileMatrix.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/TileMatrixSet.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Vec2.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Vec3.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/Viewport.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/MGRSCoord.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/MGRSCoordConverter.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/PolarCoordConverter.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/TMCoord.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/TMCoordConverter.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/UPSCoord.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/UPSCoordConverter.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/UTMCoord.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/geom/coords/UTMCoordConverter.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/Globe.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/elevation/ElevationModel.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/elevation/coverage/AbstractElevationCoverage.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/elevation/coverage/AbstractTiledElevationCoverage.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sets.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/elevation/coverage/BasicElevationCoverage.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/projection/Wgs84Projection.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/terrain/BasicTerrain.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/comparisons/Comparisons.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/terrain/BasicTessellator.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/globe/terrain/TerrainTile.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/AbstractLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/BackgroundLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/LayerList.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/RenderableLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/ShowTessellationLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/atmosphere/AbstractAtmosphereProgram.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/atmosphere/AtmosphereLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/atmosphere/DrawableGroundAtmosphere.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/atmosphere/DrawableSkyAtmosphere.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/atmosphere/GroundProgram.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/atmosphere/SkyProgram.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/AbstractGraticuleLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/AbstractGraticuleTile.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/AbstractUTMGraticuleLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/GraticuleRenderingParams.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/GraticuleSupport.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/GridElement.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/MGRSGraticuleLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/MGRSGridZone.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/string.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/MGRSOverview.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/UTMMetricScaleSupport.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/UTMSquareGrid.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/UTMSquareSector.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/graticule/UTMSquareZone.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/mercator/AbstractMercatorImageTile.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/mercator/MercatorSector.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/mercator/MercatorTiledImageLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/mercator/MercatorTiledSurfaceImage.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/mercator/google/GoogleLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/starfield/StarFieldLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/layer/starfield/StarFieldProgram.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/WmsElevationCoverage.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/WmsLayerConfig.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/WmsLayerFactory.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/LevelSet.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/WmsTileFactory.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/WmtsLayerFactory.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Strings.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/regex/RegexExtensions.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/WmtsTileFactory.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsAttribution.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsAuthorityUrl.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsBoundingBox.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsCapabilities.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsCapability.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsException.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsContactAddress.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsContactInformation.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsContactPersonPrimary.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsDcpType.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsDimension.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsGeographicBoundingBox.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsIdentifier.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsInfoUrl.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsLogoUrl.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsMetadataUrl.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsOnlineResource.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsRequest.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsRequestOperation.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsService.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wms/WmsStyle.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsAddress.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsBoundingBox.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsConstraint.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsContactInfo.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsDcp.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsHttp.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsHttpMethod.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsOnlineResource.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsOperation.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsOperationsMetadata.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsPhone.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsServiceContact.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsServiceIdentification.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/OwsServiceProvider.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsCapabilities.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsContents.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsDimension.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsLegendURL.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsResourceUrl.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsStyle.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsTheme.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsTileMatrix.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsTileMatrixLimits.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsTileMatrixSet.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/ogc/wmts/WmtsTileMatrixSetLink.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/AbstractRenderable.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/Color.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/Framebuffer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/RenderContext.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/Texture.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/buffer/AbstractBufferObject.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/buffer/FloatBufferObject.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/buffer/ShortBufferObject.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/image/ImageOptions.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/program/AbstractShaderProgram.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/program/BasicShaderProgram.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/program/SightlineProgram.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/render/program/SurfaceTextureProgram.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/AbstractShape.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/Ellipse.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/Label.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/OmnidirectionalSightline.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/Path.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/Placemark.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/PlacemarkAttributes.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/Polygon.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/ShapeAttributes.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/SurfaceImage.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/TextAttributes.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/render/Font.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/shape/TiledSurfaceImage.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/AbsentResourceList.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/AbstractSource.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/BasicPool.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/Level.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/LevelSetConfig.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/LruMemoryCache.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/MessageTable.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/SunPosition.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/Tile.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/format/ExponentFormatter.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/format/Specification.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Lazy.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/format/StringFormat.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/GLU.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/error/Error.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/ActiveRegion.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/CachedVertex.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/Dict.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/DictNode.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/GLUface.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/GLUhalfEdge.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/GLUmesh.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/GLUtessellatorImpl.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/GLUvertex.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/Normal.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/PriorityQ.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/PriorityQHeap.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/PriorityQSort.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/Render.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/Sweep.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/TessState.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/http/DefaultHttpClient.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/kgl/Kgl.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/math/WWMath.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/BasicWorldWindowController.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/PanRecognizer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/PinchRecognizer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/RotationRecognizer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/TiltRecognizer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/KeyboardControls.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/WorldWindow.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/render/RenderResourceCache.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/WorldWindowController.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/ClickRecognizer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/DragRecognizer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/GestureRecognizer.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/MutableCollections.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/SelectDragDetector.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/TapRecognizer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/gesture/TouchWrapper.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/globe/elevation/ElevationSource.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/globe/elevation/coverage/TiledElevationCoverage.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/layer/AbstractTiledImageLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/layer/TiledImageLayer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/layer/mercator/MercatorImageTile.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/render/TextRenderer.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/render/image/CanvasTexture.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/render/image/ImageSource.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/render/image/ImageTexture.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/render/image/ImageTile.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/util/Logger.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/util/SynchronizedPool.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/util/kgl/WebKgl.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/util/locale/Locale.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Arrays.kt","webpack://worldwind-tutorials/../../../../../runtime/kotlinHacks.kt","webpack://worldwind-tutorials/../../../../../SerialFormat.kt","webpack://worldwind-tutorials/../../../../../Serializers.kt","webpack://worldwind-tutorials/../../../../../Platform.common.kt","webpack://worldwind-tutorials/../../../../worldwind/src/jsMain/kotlin/earth/worldwind/util/format/ConvertToInstant.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/Geom.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/Mesh.kt","webpack://worldwind-tutorials/../../../../worldwind/src/commonMain/kotlin/earth/worldwind/util/glu/tessellator/TessMono.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/org.w3c/org.khronos.webgl.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/CoroutineContext.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sequences.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_OneToManyTitlecaseMappings.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Char.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/char.kt","webpack://worldwind-tutorials/../../../../../src/generated/_TitlecaseMappings.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/CharCode.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Ranges.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Sequences.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Iterables.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/kotlin/ExceptionsH.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractList.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractMap.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractSet.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/ArrayDeque.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/IndexedValue.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Iterators.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/ReversedViews.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/SequenceBuilder.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/internal/progressionUtil.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/PrimitiveRanges.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/ProgressionIterators.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/Progressions.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/Ranges.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Appendable.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Indent.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringNumberConversions.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/stringsCode.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringBuilder.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/time/DurationUnit.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/DeepRecursive.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Result.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Tuples.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UByte.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UByteArray.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UInt.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UIntArray.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/ULong.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UnsignedUtils.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/ULongArray.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UShort.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UShortArray.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UStrings.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/runtime/primitiveCompanionObjects.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableList.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArrayList.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArraySorting.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashMap.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashSet.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalHashCodeMap.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashMap.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashSet.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/console.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/coroutines/cancellation/CancellationException.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/dom/EventListener.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/numbers.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/JsClass.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KClassImpl.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KTypeImpl.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/primitives.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/reflection.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/sequence.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/CharacterCodingExceptionJs.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/StringBuilderJs.kt","webpack://worldwind-tutorials/../../../../../src/generated/_WhitespaceChars.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/numberConversions.kt","webpack://worldwind-tutorials/../../../../../src/generated/_DigitChars.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/regex.kt","webpack://worldwind-tutorials/../../../../../src/generated/_ComparisonsJs.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/utf8Encoding.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/throwableExtensions.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/time/DurationUnit.kt","webpack://worldwind-tutorials/../../../../../builtins/Char.kt","webpack://worldwind-tutorials/../../../../../builtins/Enum.kt","webpack://worldwind-tutorials/../../../../../runtime/arrays.kt","webpack://worldwind-tutorials/../../../../../runtime/noPackageHacks.kt","webpack://worldwind-tutorials/../../../../../runtime/bitUtils.kt","webpack://worldwind-tutorials/../../../../../runtime/charSequence.kt","webpack://worldwind-tutorials/../../../../../runtime/collectionsHacks.kt","webpack://worldwind-tutorials/../../../../../runtime/compareTo.kt","webpack://worldwind-tutorials/../../../../../runtime/coreRuntime.kt","webpack://worldwind-tutorials/../../../../../runtime/hacks.kt","webpack://worldwind-tutorials/../../../../../runtime/longjs.kt","webpack://worldwind-tutorials/../../../../../runtime/numberConversion.kt","webpack://worldwind-tutorials/../../../../../runtime/rangeTo.kt","webpack://worldwind-tutorials/../../../../../runtime/reflectRuntime.kt","webpack://worldwind-tutorials/../../../../../runtime/typeCheckUtils.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/js.arrays/fill.kt","webpack://worldwind-tutorials/../../../../../src/generated/_CharCategories.kt","webpack://worldwind-tutorials/../../../../../src/generated/_LetterChars.kt","webpack://worldwind-tutorials/../../../../../src/generated/_OtherLowercaseChars.kt","webpack://worldwind-tutorials/../../../../../src/kotlin/coroutines_13/CoroutineImpl.kt","webpack://worldwind-tutorials/../../../../../src/kotlin/coroutines_13/IntrinsicsJs.kt","webpack://worldwind-tutorials/../../../../../src/kotlin/exceptions.kt","webpack://worldwind-tutorials/../../../../../src/kotlin/jsOperators.kt","webpack://worldwind-tutorials/../../../../../src/kotlin/text/numberConversions_js-ir.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractCollection.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/PrimitiveIterators.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/Continuation.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/core/builtins/src/kotlin/Unit.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/EqualityComparator.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/regexp.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalMap.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/kotlin/MathH.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KTypeHelpers.kt","webpack://worldwind-tutorials/../../../../../src/kotlin/reflection_js-ir.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Maps.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/MapWithDefault.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Sets.kt","webpack://worldwind-tutorials/../../../../../src/generated/_CollectionsJs.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/coroutines/ContinuationInterceptor.kt","webpack://worldwind-tutorials/../../../../../SerialDescriptor.kt","webpack://worldwind-tutorials/../../../../../Decoding.kt","webpack://worldwind-tutorials/../../../../../PluginHelperInterfaces.kt","webpack://worldwind-tutorials/../../../../../PolymorphicSerializer.kt","webpack://worldwind-tutorials/../../../../../ContextAware.kt","webpack://worldwind-tutorials/../../../../../AbstractPolymorphicSerializer.kt","webpack://worldwind-tutorials/../../../../../SerializationExceptions.kt","webpack://worldwind-tutorials/../../../../../Platform.kt","webpack://worldwind-tutorials/../../../../../Primitives.kt","webpack://worldwind-tutorials/../../../../../BuiltinSerializers.kt","webpack://worldwind-tutorials/../../../../../SerializersCache.kt","webpack://worldwind-tutorials/../../../../../SerialDescriptors.kt","webpack://worldwind-tutorials/../../../../../SerialKinds.kt","webpack://worldwind-tutorials/../../../../../BuiltInSerializers.kt","webpack://worldwind-tutorials/../../../../../CollectionDescriptors.kt","webpack://worldwind-tutorials/../../../../../CollectionSerializers.kt","webpack://worldwind-tutorials/../../../../../ElementMarker.kt","webpack://worldwind-tutorials/../../../../../InlineClassDescriptor.kt","webpack://worldwind-tutorials/../../../../../NullableSerializer.kt","webpack://worldwind-tutorials/../../../../../ObjectSerializer.kt","webpack://worldwind-tutorials/../../../../../PluginGeneratedSerialDescriptor.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/HashCode.kt","webpack://worldwind-tutorials/../../../../../PrimitiveArraysSerializers.kt","webpack://worldwind-tutorials/../../../../../Tagged.kt","webpack://worldwind-tutorials/../../../../../Tuples.kt","webpack://worldwind-tutorials/../../../../../ValueClasses.kt","webpack://worldwind-tutorials/../../../../../SerializersModule.kt","webpack://worldwind-tutorials/../../../../../SerializersModuleBuilders.kt","webpack://worldwind-tutorials/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/AssociatedObjects.kt","webpack://worldwind-tutorials/../../../../../AbstractDecoder.kt","webpack://worldwind-tutorials/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_UArrays.kt","webpack://worldwind-tutorials/../../../../../JsonInternalDependencies.kt","webpack://worldwind-tutorials/../../../../../PluginExceptions.kt","webpack://worldwind-tutorials/../../../../../Json.kt","webpack://worldwind-tutorials/../../../../../JsonConfiguration.kt","webpack://worldwind-tutorials/../../../../../JsonElement.kt","webpack://worldwind-tutorials/../../../../../StringOps.kt","webpack://worldwind-tutorials/../../../../../JsonElementSerializers.kt","webpack://worldwind-tutorials/../../../../../JsonElementMarker.kt","webpack://worldwind-tutorials/../../../../../JsonExceptions.kt","webpack://worldwind-tutorials/../../../../../AbstractJsonLexer.kt","webpack://worldwind-tutorials/../../../../../JsonNamesMap.kt","webpack://worldwind-tutorials/../../../../../JsonPath.kt","webpack://worldwind-tutorials/../../../../../JsonTreeReader.kt","webpack://worldwind-tutorials/../../../../../Polymorphic.kt","webpack://worldwind-tutorials/../../../../../TreeJsonEncoder.kt","webpack://worldwind-tutorials/../../../../../TreeJsonDecoder.kt","webpack://worldwind-tutorials/../../../../../SchemaCache.kt","webpack://worldwind-tutorials/../../../../../StreamingJsonDecoder.kt","webpack://worldwind-tutorials/../../../../../StreamingJsonEncoder.kt","webpack://worldwind-tutorials/../../../../../WriteMode.kt","webpack://worldwind-tutorials/../../../../../StringJsonLexer.kt","webpack://worldwind-tutorials/../../../../../JsonSchemaCache.kt","webpack://worldwind-tutorials/../../../../../createMapForCache.kt","webpack://worldwind-tutorials/../../../../../Job.kt","webpack://worldwind-tutorials/../../../../../CancellableContinuation.kt","webpack://worldwind-tutorials/../../../../../Channel.kt","webpack://worldwind-tutorials/../../../../../AbstractCoroutine.kt","webpack://worldwind-tutorials/../../../../../Builders.common.kt","webpack://worldwind-tutorials/../../../../../CompletionHandler.kt","webpack://worldwind-tutorials/../../../../../DispatchedTask.kt","webpack://worldwind-tutorials/../../../../../CancellableContinuationImpl.kt","webpack://worldwind-tutorials/../../../../../AtomicFU.common.kt","webpack://worldwind-tutorials/../../../../../CompletableDeferred.kt","webpack://worldwind-tutorials/../../../../../CompletionState.kt","webpack://worldwind-tutorials/../../../../../CoroutineDispatcher.kt","webpack://worldwind-tutorials/../../../../../CoroutineExceptionHandler.kt","webpack://worldwind-tutorials/../../../../../CoroutineName.kt","webpack://worldwind-tutorials/../../../../../CoroutineScope.kt","webpack://worldwind-tutorials/../../../../../EventLoop.common.kt","webpack://worldwind-tutorials/../../../../../Exceptions.common.kt","webpack://worldwind-tutorials/../../../../../JobSupport.kt","webpack://worldwind-tutorials/../../../../../Concurrent.kt","webpack://worldwind-tutorials/../../../../../LinkedList.kt","webpack://worldwind-tutorials/../../../../../Synchronized.kt","webpack://worldwind-tutorials/../../../../../MainCoroutineDispatcher.kt","webpack://worldwind-tutorials/../../../../../Supervisor.kt","webpack://worldwind-tutorials/../../../../../Unconfined.kt","webpack://worldwind-tutorials/../../../../../AbstractChannel.kt","webpack://worldwind-tutorials/../../../../../InlineList.kt","webpack://worldwind-tutorials/../../../../../ArrayChannel.kt","webpack://worldwind-tutorials/../../../../../SystemProps.common.kt","webpack://worldwind-tutorials/../../../../../SystemProps.kt","webpack://worldwind-tutorials/../../../../../Channels.common.kt","webpack://worldwind-tutorials/../../../../../ConflatedChannel.kt","webpack://worldwind-tutorials/../../../../../OnUndeliveredElement.kt","webpack://worldwind-tutorials/../../../../../LinkedListChannel.kt","webpack://worldwind-tutorials/../../../../../RendezvousChannel.kt","webpack://worldwind-tutorials/../../../../../SharedFlow.kt","webpack://worldwind-tutorials/../../../../../AbstractSharedFlow.kt","webpack://worldwind-tutorials/../../../../../SafeCollector.common.kt","webpack://worldwind-tutorials/../../../../../Share.kt","webpack://worldwind-tutorials/../../../../../ArrayQueue.kt","webpack://worldwind-tutorials/../../../../../DispatchedContinuation.kt","webpack://worldwind-tutorials/../../../../../CoroutineContext.kt","webpack://worldwind-tutorials/../../../../../ThreadContext.kt","webpack://worldwind-tutorials/../../../../../Scopes.kt","webpack://worldwind-tutorials/../../../../../Symbol.kt","webpack://worldwind-tutorials/../../../../../Cancellable.kt","webpack://worldwind-tutorials/../../../../../Undispatched.kt","webpack://worldwind-tutorials/../../../../../Window.kt","webpack://worldwind-tutorials/../../../../../CoroutineExceptionHandlerImpl.kt","webpack://worldwind-tutorials/../../../../../Debug.kt","webpack://worldwind-tutorials/../../../../../Dispatchers.kt","webpack://worldwind-tutorials/../../../../../EventLoop.kt","webpack://worldwind-tutorials/../../../../../JSDispatcher.kt","webpack://worldwind-tutorials/../../../../../SafeCollector.kt","webpack://worldwind-tutorials/../../../../../StackTraceRecovery.kt","webpack://worldwind-tutorials/../../../../../ThreadLocal.kt","webpack://worldwind-tutorials/../../../../../CoroutineStart.kt","webpack://worldwind-tutorials/../../../../../ProbesSupport.kt","webpack://worldwind-tutorials/../../../../../CompletionHandler.common.kt","webpack://worldwind-tutorials/../../../../../runtime/coroutineInternalJS.kt","webpack://worldwind-tutorials/../../../../../SchedulerTask.kt","webpack://worldwind-tutorials/../../../../../Promise.kt","webpack://worldwind-tutorials/../../../../../Delay.kt","webpack://worldwind-tutorials/../../../../../HttpRequest.kt","webpack://worldwind-tutorials/../../../../../HttpClientEngine.kt","webpack://worldwind-tutorials/../../../../../HttpClient.kt","webpack://worldwind-tutorials/../../../../../HttpClientConfig.kt","webpack://worldwind-tutorials/../../../../../HttpClientCall.kt","webpack://worldwind-tutorials/../../../../../SavedCall.kt","webpack://worldwind-tutorials/../../../../../utils.kt","webpack://worldwind-tutorials/../../../../../ObservableContent.kt","webpack://worldwind-tutorials/../../../../../Utils.kt","webpack://worldwind-tutorials/../../../../../HttpClientEngineBase.kt","webpack://worldwind-tutorials/../../../../../HttpClientEngineCapability.kt","webpack://worldwind-tutorials/../../../../../HttpClientEngineConfig.kt","webpack://worldwind-tutorials/../../../../../BodyProgress.kt","webpack://worldwind-tutorials/../../../../../DefaultResponseValidation.kt","webpack://worldwind-tutorials/../../../../../DefaultTransform.kt","webpack://worldwind-tutorials/../../../../../HttpCallValidator.kt","webpack://worldwind-tutorials/../../../../../HttpClientPlugin.kt","webpack://worldwind-tutorials/../../../../../HttpPlainText.kt","webpack://worldwind-tutorials/../../../../../HttpRedirect.kt","webpack://worldwind-tutorials/../../../../../HttpRequestLifecycle.kt","webpack://worldwind-tutorials/../../../../../HttpSend.kt","webpack://worldwind-tutorials/../../../../../HttpTimeout.kt","webpack://worldwind-tutorials/../../../../../DelegatedCall.kt","webpack://worldwind-tutorials/../../../../../WebSockets.kt","webpack://worldwind-tutorials/../../../../../DefaultHttpRequest.kt","webpack://worldwind-tutorials/../../../../../HttpRequestPipeline.kt","webpack://worldwind-tutorials/../../../../../RequestBody.kt","webpack://worldwind-tutorials/../../../../../DefaultHttpResponse.kt","webpack://worldwind-tutorials/../../../../../HttpResponse.kt","webpack://worldwind-tutorials/../../../../../HttpResponsePipeline.kt","webpack://worldwind-tutorials/../../../../../HttpStatement.kt","webpack://worldwind-tutorials/../../../../../ByteChannelUtils.kt","webpack://worldwind-tutorials/../../../../../ClientEvents.kt","webpack://worldwind-tutorials/../../../../../Content.kt","webpack://worldwind-tutorials/../../../../../headers.kt","webpack://worldwind-tutorials/../../../../../HttpClientJs.kt","webpack://worldwind-tutorials/../../../../../Js.kt","webpack://worldwind-tutorials/../../../../../JsClientEngine.kt","webpack://worldwind-tutorials/../../../../../JsUtils.kt","webpack://worldwind-tutorials/../../../../../ReadableStream.kt","webpack://worldwind-tutorials/../../../../../BrowserFetch.kt","webpack://worldwind-tutorials/../../../../../NodeFetch.kt","webpack://worldwind-tutorials/../../../../../DefaultTransformJs.kt","webpack://worldwind-tutorials/../../../../../JsWebSocketSession.kt","webpack://worldwind-tutorials/../../../../../ExceptionUtilsJs.kt","webpack://worldwind-tutorials/../../../../../Events.kt","webpack://worldwind-tutorials/../../../../../Codecs.kt","webpack://worldwind-tutorials/../../../../../Input.kt","webpack://worldwind-tutorials/../../../../../Buffer.kt","webpack://worldwind-tutorials/../../../../../ContentTypes.kt","webpack://worldwind-tutorials/../../../../../HeaderValueWithParameters.kt","webpack://worldwind-tutorials/../../../../../Headers.kt","webpack://worldwind-tutorials/../../../../../HttpHeaderValueParser.kt","webpack://worldwind-tutorials/../../../../../HttpHeaders.kt","webpack://worldwind-tutorials/../../../../../HttpMethod.kt","webpack://worldwind-tutorials/../../../../../HttpProtocolVersion.kt","webpack://worldwind-tutorials/../../../../../HttpStatusCode.kt","webpack://worldwind-tutorials/../../../../../Parameters.kt","webpack://worldwind-tutorials/../../../../../Query.kt","webpack://worldwind-tutorials/../../../../../URLBuilder.kt","webpack://worldwind-tutorials/../../../../../URLUtils.kt","webpack://worldwind-tutorials/../../../../../URLBuilderJs.kt","webpack://worldwind-tutorials/../../../../../UrlDecodedParametersBuilder.kt","webpack://worldwind-tutorials/../../../../../URLParser.kt","webpack://worldwind-tutorials/../../../../../URLProtocol.kt","webpack://worldwind-tutorials/../../../../../Url.kt","webpack://worldwind-tutorials/../../../../../OutgoingContent.kt","webpack://worldwind-tutorials/../../../../../TextContent.kt","webpack://worldwind-tutorials/../../../../../Strings.kt","webpack://worldwind-tutorials/../../../../../HttpMessageProperties.kt","webpack://worldwind-tutorials/../../../../../ByteReadChannelJs.kt","webpack://worldwind-tutorials/../../../../../Pool.kt","webpack://worldwind-tutorials/../../../../../ByteChannelSequential.kt","webpack://worldwind-tutorials/../../../../../ByteWriteChannel.kt","webpack://worldwind-tutorials/../../../../../CloseElement.kt","webpack://worldwind-tutorials/../../../../../Coroutines.kt","webpack://worldwind-tutorials/../../../../../ByteChannelJS.kt","webpack://worldwind-tutorials/../../../../../Encoding.kt","webpack://worldwind-tutorials/../../../../../CharsetJS.kt","webpack://worldwind-tutorials/../../../../../BufferUtilsJs.kt","webpack://worldwind-tutorials/../../../../../TextDecoders.kt","webpack://worldwind-tutorials/../../../../../Output.kt","webpack://worldwind-tutorials/../../../../../Builder.kt","webpack://worldwind-tutorials/../../../../../MemoryJs.kt","webpack://worldwind-tutorials/../../../../../BufferAppend.kt","webpack://worldwind-tutorials/../../../../../BufferFactory.kt","webpack://worldwind-tutorials/../../../../../BufferPrimitives.kt","webpack://worldwind-tutorials/../../../../../MemoryFactoryJs.kt","webpack://worldwind-tutorials/../../../../../Buffers.kt","webpack://worldwind-tutorials/../../../../../BytePacketBuilder.kt","webpack://worldwind-tutorials/../../../../../ByteReadPacket.kt","webpack://worldwind-tutorials/../../../../../UTF8.kt","webpack://worldwind-tutorials/../../../../../InputArrays.kt","webpack://worldwind-tutorials/../../../../../ChunkBuffer.kt","webpack://worldwind-tutorials/../../../../../Decoder.kt","webpack://worldwind-tutorials/../../../../../EncodeResult.kt","webpack://worldwind-tutorials/../../../../../ByteOrder.kt","webpack://worldwind-tutorials/../../../../../Memory.kt","webpack://worldwind-tutorials/../../../../../Unsafe.kt","webpack://worldwind-tutorials/../../../../../AwaitingSlot.kt","webpack://worldwind-tutorials/../../../../../SequentialCopyTo.kt","webpack://worldwind-tutorials/../../../../../ByteArrayPool.kt","webpack://worldwind-tutorials/../../../../../ExceptionUtils.kt","webpack://worldwind-tutorials/../../../../../ISO88591.kt","webpack://worldwind-tutorials/../../../../../DecodeBuffer.kt","webpack://worldwind-tutorials/../../../../../PacketJS.kt","webpack://worldwind-tutorials/../../../../../StringsJS.kt","webpack://worldwind-tutorials/../../../../../IOException.kt","webpack://worldwind-tutorials/../../../../../TextDecoder.kt","webpack://worldwind-tutorials/../../../../../TextDecoderFallback.kt","webpack://worldwind-tutorials/../../../../../Win1252Table.kt","webpack://worldwind-tutorials/../../../../../DefaultPool.kt","webpack://worldwind-tutorials/../../../../../Numbers.kt","webpack://worldwind-tutorials/../../../../../PacketDirect.kt","webpack://worldwind-tutorials/../../../../../ByteReadChannel.kt","webpack://worldwind-tutorials/../../../../../InputPrimitives.kt","webpack://worldwind-tutorials/../../../../../MemoryPrimitivesJs.kt","webpack://worldwind-tutorials/../../../../../OutputPrimitives.kt","webpack://worldwind-tutorials/../../../../../ByteChannelCtor.kt","webpack://worldwind-tutorials/../../../../../Attributes.kt","webpack://worldwind-tutorials/../../../../../ByteChannels.kt","webpack://worldwind-tutorials/../../../../../CaseInsensitiveMap.kt","webpack://worldwind-tutorials/../../../../../Collections.kt","webpack://worldwind-tutorials/../../../../../CoroutinesUtils.kt","webpack://worldwind-tutorials/../../../../../DelegatingMutableSet.kt","webpack://worldwind-tutorials/../../../../../StringValues.kt","webpack://worldwind-tutorials/../../../../../Text.kt","webpack://worldwind-tutorials/../../../../../CopyOnWriteHashMap.kt","webpack://worldwind-tutorials/../../../../../Date.kt","webpack://worldwind-tutorials/../../../../../DebugPipelineContext.kt","webpack://worldwind-tutorials/../../../../../PhaseContent.kt","webpack://worldwind-tutorials/../../../../../Pipeline.kt","webpack://worldwind-tutorials/../../../../../PipelineContext.kt","webpack://worldwind-tutorials/../../../../../PipelineContext.js.kt","webpack://worldwind-tutorials/../../../../../PipelinePhase.kt","webpack://worldwind-tutorials/../../../../../PipelinePhaseRelation.kt","webpack://worldwind-tutorials/../../../../../SuspendFunctionGun.kt","webpack://worldwind-tutorials/../../../../../StackTraceRecover.kt","webpack://worldwind-tutorials/../../../../../StackTraceRecoverJs.kt","webpack://worldwind-tutorials/../../../../../Type.kt","webpack://worldwind-tutorials/../../../../../AttributesJs.kt","webpack://worldwind-tutorials/../../../../../PlatformUtilsJs.kt","webpack://worldwind-tutorials/../../../../../DateJs.kt","webpack://worldwind-tutorials/../../../../../TypeInfoJs.kt","webpack://worldwind-tutorials/../../../../../Charset.kt","webpack://worldwind-tutorials/../../../../../CloseReason.kt","webpack://worldwind-tutorials/../../../../../FrameType.kt","webpack://worldwind-tutorials/../../../../../FrameJs.kt","webpack://worldwind-tutorials/../../../../../FrameCommon.kt","webpack://worldwind-tutorials/../../../../../FileResource.kt","webpack://worldwind-tutorials/../../../../../ImageResource.kt","webpack://worldwind-tutorials/../../../../../ioUtil.kt","webpack://worldwind-tutorials/../../../../../Uri.kt","webpack://worldwind-tutorials/../../../../../NotCachedHolder.kt","webpack://worldwind-tutorials/../../../../../PathSegments.kt","webpack://worldwind-tutorials/../../../../../UriCodec.kt","webpack://worldwind-tutorials/../../../../../UriSyntaxException.kt","webpack://worldwind-tutorials/../../../../../constants.kt","webpack://worldwind-tutorials/../../../../../AbstractPart.kt","webpack://worldwind-tutorials/../../../../../Part.kt","webpack://worldwind-tutorials/../../../../../PathPart.kt","webpack://worldwind-tutorials/../../../../../AbstractHierarchicalUri.kt","webpack://worldwind-tutorials/../../../../../HierarchicalUri.kt","webpack://worldwind-tutorials/../../../../../OpaqueUri.kt","webpack://worldwind-tutorials/../../../../../StringUri.kt","webpack://worldwind-tutorials/../../../../../NamespaceContext.kt","webpack://worldwind-tutorials/../../../../../XmlReader.kt","webpack://worldwind-tutorials/../../../../../DomReader.kt","webpack://worldwind-tutorials/../../../../../commondomutil.kt","webpack://worldwind-tutorials/../../../../../DomWriter.kt","webpack://worldwind-tutorials/../../../../../Namespace.kt","webpack://worldwind-tutorials/../../../../../QName.kt","webpack://worldwind-tutorials/../../../../../SimpleNamespaceContext.kt","webpack://worldwind-tutorials/../../../../../XMLConstants.kt","webpack://worldwind-tutorials/../../../../../XmlBufferedReader.kt","webpack://worldwind-tutorials/../../../../../XmlBufferedReaderBase.kt","webpack://worldwind-tutorials/../../../../../XmlDelegatingReader.kt","webpack://worldwind-tutorials/../../../../../XmlEvent.kt","webpack://worldwind-tutorials/../../../../../_IOException.kt","webpack://worldwind-tutorials/../../../../../XmlException.kt","webpack://worldwind-tutorials/../../../../../XmlUtil.kt","webpack://worldwind-tutorials/../../../../../XmlWriter.kt","webpack://worldwind-tutorials/../../../../../KtXmlWriter.kt","webpack://worldwind-tutorials/../../../../../XmlVersion.kt","webpack://worldwind-tutorials/../../../../../NamespaceHolder.kt","webpack://worldwind-tutorials/../../../../../PlatformXmlWriterBase.kt","webpack://worldwind-tutorials/../../../../../NamedNodeMap.kt","webpack://worldwind-tutorials/../../../../../Node.kt","webpack://worldwind-tutorials/../../../../../NodeList.kt","webpack://worldwind-tutorials/../../../../../XmlReaderExt.kt","webpack://worldwind-tutorials/../../../../../jsMultiplatform.kt","webpack://worldwind-tutorials/../../../../../JSCompactFragment.kt","webpack://worldwind-tutorials/../../../../../XMLFragmentStreamReader.kt","webpack://worldwind-tutorials/../../../../../jsDomutil.kt","webpack://worldwind-tutorials/../../../../../EventType.kt","webpack://worldwind-tutorials/../../../../../XmlStreaming.kt","webpack://worldwind-tutorials/../../../../../XmlReaderNS.kt","webpack://worldwind-tutorials/../../../../../XmlDescriptor.kt","webpack://worldwind-tutorials/../../../../../CompactFragmentSerializer.kt","webpack://worldwind-tutorials/../../../../../PolyBaseInfo.kt","webpack://worldwind-tutorials/../../../../../XML.kt","webpack://worldwind-tutorials/../../../../../XmlConfig.kt","webpack://worldwind-tutorials/../../../../../XmlSerializationPolicy.kt","webpack://worldwind-tutorials/../../../../../defaultPlatformModule.kt","webpack://worldwind-tutorials/../../../../../XMLDecoder.kt","webpack://worldwind-tutorials/../../../../../XmlCodecBase.kt","webpack://worldwind-tutorials/../../../../../XmlExceptions.kt","webpack://worldwind-tutorials/../../../../../annotations.kt","webpack://worldwind-tutorials/../../../../../DummyDecoder.kt","webpack://worldwind-tutorials/../../../../../XmlQNameSerializer.kt","webpack://worldwind-tutorials/../../../../../XmlOrderNode.kt","webpack://worldwind-tutorials/../../../../../XmlOrderConstraint.kt","webpack://worldwind-tutorials/../../../../../XmlTypeDescriptor.kt","webpack://worldwind-tutorials/../../../../../compatJs.kt","webpack://worldwind-tutorials/../../../../../InputKind.kt","webpack://worldwind-tutorials/webpack/bootstrap","webpack://worldwind-tutorials/webpack/runtime/define property getters","webpack://worldwind-tutorials/webpack/runtime/global","webpack://worldwind-tutorials/webpack/runtime/hasOwnProperty shorthand","webpack://worldwind-tutorials/webpack/runtime/make namespace object","webpack://worldwind-tutorials/webpack/runtime/publicPath","webpack://worldwind-tutorials/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"worldwind-tutorials\"] = factory();\n\telse\n\t\troot[\"worldwind-tutorials\"] = factory();\n})(this, () => {\nreturn ","//! @version @js-joda/core - 3.2.0\n//! @copyright (c) 2015-present, Philipp Thürwächter, Pattrick Hüper & js-joda contributors\n//! @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n//! @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nfunction createErrorType(name, init, superErrorClass) {\n  if (superErrorClass === void 0) {\n    superErrorClass = Error;\n  }\n\n  function JsJodaException(message) {\n    if (!Error.captureStackTrace) {\n      this.stack = new Error().stack;\n    } else {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.message = message;\n    init && init.apply(this, arguments);\n\n    this.toString = function () {\n      return this.name + \": \" + this.message;\n    };\n  }\n\n  JsJodaException.prototype = Object.create(superErrorClass.prototype);\n  JsJodaException.prototype.name = name;\n  JsJodaException.prototype.constructor = JsJodaException;\n  return JsJodaException;\n}\n\nvar DateTimeException = createErrorType('DateTimeException', messageWithCause);\nvar DateTimeParseException = createErrorType('DateTimeParseException', messageForDateTimeParseException);\nvar UnsupportedTemporalTypeException = createErrorType('UnsupportedTemporalTypeException', null, DateTimeException);\nvar ArithmeticException = createErrorType('ArithmeticException');\nvar IllegalArgumentException = createErrorType('IllegalArgumentException');\nvar IllegalStateException = createErrorType('IllegalStateException');\nvar NullPointerException = createErrorType('NullPointerException');\n\nfunction messageWithCause(message, cause) {\n  if (cause === void 0) {\n    cause = null;\n  }\n\n  var msg = message || this.name;\n\n  if (cause !== null && cause instanceof Error) {\n    msg += '\\n-------\\nCaused by: ' + cause.stack + '\\n-------\\n';\n  }\n\n  this.message = msg;\n}\n\nfunction messageForDateTimeParseException(message, text, index, cause) {\n  if (text === void 0) {\n    text = '';\n  }\n\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (cause === void 0) {\n    cause = null;\n  }\n\n  var msg = message || this.name;\n  msg += ': ' + text + ', at index: ' + index;\n\n  if (cause !== null && cause instanceof Error) {\n    msg += '\\n-------\\nCaused by: ' + cause.stack + '\\n-------\\n';\n  }\n\n  this.message = msg;\n\n  this.parsedString = function () {\n    return text;\n  };\n\n  this.errorIndex = function () {\n    return index;\n  };\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nfunction assert(assertion, msg, error) {\n  if (!assertion) {\n    if (error) {\n      throw new error(msg);\n    } else {\n      throw new Error(msg);\n    }\n  }\n}\nfunction requireNonNull(value, parameterName) {\n  if (value == null) {\n    throw new NullPointerException(parameterName + ' must not be null');\n  }\n\n  return value;\n}\nfunction requireInstance(value, _class, parameterName) {\n  if (!(value instanceof _class)) {\n    throw new IllegalArgumentException(parameterName + ' must be an instance of ' + (_class.name ? _class.name : _class) + (value && value.constructor && value.constructor.name ? ', but is ' + value.constructor.name : ''));\n  }\n\n  return value;\n}\nfunction abstractMethodFail(methodName) {\n  throw new TypeError('abstract method \"' + methodName + '\" is not implemented');\n}\n\nvar assert$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    assert: assert,\n    requireNonNull: requireNonNull,\n    requireInstance: requireInstance,\n    abstractMethodFail: abstractMethodFail\n});\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\nvar MIN_SAFE_INTEGER = -9007199254740991;\nvar MathUtil = function () {\n  function MathUtil() {}\n\n  MathUtil.intDiv = function intDiv(x, y) {\n    var r = x / y;\n    r = MathUtil.roundDown(r);\n    return MathUtil.safeZero(r);\n  };\n\n  MathUtil.intMod = function intMod(x, y) {\n    var r = x - MathUtil.intDiv(x, y) * y;\n    r = MathUtil.roundDown(r);\n    return MathUtil.safeZero(r);\n  };\n\n  MathUtil.roundDown = function roundDown(r) {\n    if (r < 0) {\n      return Math.ceil(r);\n    } else {\n      return Math.floor(r);\n    }\n  };\n\n  MathUtil.floorDiv = function floorDiv(x, y) {\n    var r = Math.floor(x / y);\n    return MathUtil.safeZero(r);\n  };\n\n  MathUtil.floorMod = function floorMod(x, y) {\n    var r = x - MathUtil.floorDiv(x, y) * y;\n    return MathUtil.safeZero(r);\n  };\n\n  MathUtil.safeAdd = function safeAdd(x, y) {\n    MathUtil.verifyInt(x);\n    MathUtil.verifyInt(y);\n\n    if (x === 0) {\n      return MathUtil.safeZero(y);\n    }\n\n    if (y === 0) {\n      return MathUtil.safeZero(x);\n    }\n\n    var r = MathUtil.safeToInt(x + y);\n\n    if (r === x || r === y) {\n      throw new ArithmeticException('Invalid addition beyond MAX_SAFE_INTEGER!');\n    }\n\n    return r;\n  };\n\n  MathUtil.safeSubtract = function safeSubtract(x, y) {\n    MathUtil.verifyInt(x);\n    MathUtil.verifyInt(y);\n\n    if (x === 0 && y === 0) {\n      return 0;\n    } else if (x === 0) {\n      return MathUtil.safeZero(-1 * y);\n    } else if (y === 0) {\n      return MathUtil.safeZero(x);\n    }\n\n    return MathUtil.safeToInt(x - y);\n  };\n\n  MathUtil.safeMultiply = function safeMultiply(x, y) {\n    MathUtil.verifyInt(x);\n    MathUtil.verifyInt(y);\n\n    if (x === 1) {\n      return MathUtil.safeZero(y);\n    }\n\n    if (y === 1) {\n      return MathUtil.safeZero(x);\n    }\n\n    if (x === 0 || y === 0) {\n      return 0;\n    }\n\n    var r = MathUtil.safeToInt(x * y);\n\n    if (r / y !== x || x === MIN_SAFE_INTEGER && y === -1 || y === MIN_SAFE_INTEGER && x === -1) {\n      throw new ArithmeticException('Multiplication overflows: ' + x + ' * ' + y);\n    }\n\n    return r;\n  };\n\n  MathUtil.parseInt = function (_parseInt) {\n    function parseInt(_x) {\n      return _parseInt.apply(this, arguments);\n    }\n\n    parseInt.toString = function () {\n      return _parseInt.toString();\n    };\n\n    return parseInt;\n  }(function (value) {\n    var r = parseInt(value);\n    return MathUtil.safeToInt(r);\n  });\n\n  MathUtil.safeToInt = function safeToInt(value) {\n    MathUtil.verifyInt(value);\n    return MathUtil.safeZero(value);\n  };\n\n  MathUtil.verifyInt = function verifyInt(value) {\n    if (value == null) {\n      throw new ArithmeticException(\"Invalid value: '\" + value + \"', using null or undefined as argument\");\n    }\n\n    if (isNaN(value)) {\n      throw new ArithmeticException('Invalid int value, using NaN as argument');\n    }\n\n    if (value % 1 !== 0) {\n      throw new ArithmeticException(\"Invalid value: '\" + value + \"' is a float\");\n    }\n\n    if (value > MAX_SAFE_INTEGER || value < MIN_SAFE_INTEGER) {\n      throw new ArithmeticException('Calculation overflows an int: ' + value);\n    }\n  };\n\n  MathUtil.safeZero = function safeZero(value) {\n    return value === 0 ? 0 : +value;\n  };\n\n  MathUtil.compareNumbers = function compareNumbers(a, b) {\n    if (a < b) {\n      return -1;\n    }\n\n    if (a > b) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  MathUtil.smi = function smi(int) {\n    return int >>> 1 & 0x40000000 | int & 0xBFFFFFFF;\n  };\n\n  MathUtil.hash = function hash(number) {\n    if (number !== number || number === Infinity) {\n      return 0;\n    }\n\n    var result = number;\n\n    while (number > 0xFFFFFFFF) {\n      number /= 0xFFFFFFFF;\n      result ^= number;\n    }\n\n    return MathUtil.smi(result);\n  };\n\n  MathUtil.hashCode = function hashCode() {\n    var result = 17;\n\n    for (var _len = arguments.length, numbers = new Array(_len), _key = 0; _key < _len; _key++) {\n      numbers[_key] = arguments[_key];\n    }\n\n    for (var _i = 0, _numbers = numbers; _i < _numbers.length; _i++) {\n      var n = _numbers[_i];\n      result = (result << 5) - result + MathUtil.hash(n);\n    }\n\n    return MathUtil.hash(result);\n  };\n\n  return MathUtil;\n}();\nMathUtil.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nMathUtil.MIN_SAFE_INTEGER = MIN_SAFE_INTEGER;\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar Enum = function () {\n  function Enum(name) {\n    this._name = name;\n  }\n\n  var _proto = Enum.prototype;\n\n  _proto.equals = function equals(other) {\n    return this === other;\n  };\n\n  _proto.toString = function toString() {\n    return this._name;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return Enum;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalAmount = function () {\n  function TemporalAmount() {}\n\n  var _proto = TemporalAmount.prototype;\n\n  _proto.get = function get(unit) {\n    abstractMethodFail('get');\n  };\n\n  _proto.units = function units() {\n    abstractMethodFail('units');\n  };\n\n  _proto.addTo = function addTo(temporal) {\n    abstractMethodFail('addTo');\n  };\n\n  _proto.subtractFrom = function subtractFrom(temporal) {\n    abstractMethodFail('subtractFrom');\n  };\n\n  return TemporalAmount;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalUnit = function () {\n  function TemporalUnit() {}\n\n  var _proto = TemporalUnit.prototype;\n\n  _proto.duration = function duration() {\n    abstractMethodFail('duration');\n  };\n\n  _proto.isDurationEstimated = function isDurationEstimated() {\n    abstractMethodFail('isDurationEstimated');\n  };\n\n  _proto.isDateBased = function isDateBased() {\n    abstractMethodFail('isDateBased');\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    abstractMethodFail('isTimeBased');\n  };\n\n  _proto.isSupportedBy = function isSupportedBy(temporal) {\n    abstractMethodFail('isSupportedBy');\n  };\n\n  _proto.addTo = function addTo(dateTime, periodToAdd) {\n    abstractMethodFail('addTo');\n  };\n\n  _proto.between = function between(temporal1, temporal2) {\n    abstractMethodFail('between');\n  };\n\n  return TemporalUnit;\n}();\n\nvar Duration = function (_TemporalAmount) {\n  _inheritsLoose(Duration, _TemporalAmount);\n\n  function Duration(seconds, nanos) {\n    var _this;\n\n    _this = _TemporalAmount.call(this) || this;\n    _this._seconds = MathUtil.safeToInt(seconds);\n    _this._nanos = MathUtil.safeToInt(nanos);\n    return _this;\n  }\n\n  Duration.ofDays = function ofDays(days) {\n    return Duration._create(MathUtil.safeMultiply(days, LocalTime.SECONDS_PER_DAY), 0);\n  };\n\n  Duration.ofHours = function ofHours(hours) {\n    return Duration._create(MathUtil.safeMultiply(hours, LocalTime.SECONDS_PER_HOUR), 0);\n  };\n\n  Duration.ofMinutes = function ofMinutes(minutes) {\n    return Duration._create(MathUtil.safeMultiply(minutes, LocalTime.SECONDS_PER_MINUTE), 0);\n  };\n\n  Duration.ofSeconds = function ofSeconds(seconds, nanoAdjustment) {\n    if (nanoAdjustment === void 0) {\n      nanoAdjustment = 0;\n    }\n\n    var secs = MathUtil.safeAdd(seconds, MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND));\n    var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n    return Duration._create(secs, nos);\n  };\n\n  Duration.ofMillis = function ofMillis(millis) {\n    var secs = MathUtil.intDiv(millis, 1000);\n    var mos = MathUtil.intMod(millis, 1000);\n\n    if (mos < 0) {\n      mos += 1000;\n      secs--;\n    }\n\n    return Duration._create(secs, mos * 1000000);\n  };\n\n  Duration.ofNanos = function ofNanos(nanos) {\n    var secs = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_SECOND);\n    var nos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_SECOND);\n\n    if (nos < 0) {\n      nos += LocalTime.NANOS_PER_SECOND;\n      secs--;\n    }\n\n    return this._create(secs, nos);\n  };\n\n  Duration.of = function of(amount, unit) {\n    return Duration.ZERO.plus(amount, unit);\n  };\n\n  Duration.from = function from(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount);\n    var duration = Duration.ZERO;\n    amount.units().forEach(function (unit) {\n      duration = duration.plus(amount.get(unit), unit);\n    });\n    return duration;\n  };\n\n  Duration.between = function between(startInclusive, endExclusive) {\n    requireNonNull(startInclusive, 'startInclusive');\n    requireNonNull(endExclusive, 'endExclusive');\n    var secs = startInclusive.until(endExclusive, ChronoUnit.SECONDS);\n    var nanos = 0;\n\n    if (startInclusive.isSupported(ChronoField.NANO_OF_SECOND) && endExclusive.isSupported(ChronoField.NANO_OF_SECOND)) {\n      try {\n        var startNos = startInclusive.getLong(ChronoField.NANO_OF_SECOND);\n        nanos = endExclusive.getLong(ChronoField.NANO_OF_SECOND) - startNos;\n\n        if (secs > 0 && nanos < 0) {\n          nanos += LocalTime.NANOS_PER_SECOND;\n        } else if (secs < 0 && nanos > 0) {\n          nanos -= LocalTime.NANOS_PER_SECOND;\n        } else if (secs === 0 && nanos !== 0) {\n          var adjustedEnd = endExclusive.with(ChronoField.NANO_OF_SECOND, startNos);\n          secs = startInclusive.until(adjustedEnd, ChronoUnit.SECONDS);\n        }\n      } catch (e) {}\n    }\n\n    return this.ofSeconds(secs, nanos);\n  };\n\n  Duration.parse = function parse(text) {\n    requireNonNull(text, 'text');\n    var PATTERN = new RegExp('([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?', 'i');\n    var matches = PATTERN.exec(text);\n\n    if (matches !== null) {\n      if ('T' === matches[3] === false) {\n        var negate = '-' === matches[1];\n        var dayMatch = matches[2];\n        var hourMatch = matches[4];\n        var minuteMatch = matches[5];\n        var secondMatch = matches[6];\n        var fractionMatch = matches[7];\n\n        if (dayMatch != null || hourMatch != null || minuteMatch != null || secondMatch != null) {\n          var daysAsSecs = Duration._parseNumber(text, dayMatch, LocalTime.SECONDS_PER_DAY, 'days');\n\n          var hoursAsSecs = Duration._parseNumber(text, hourMatch, LocalTime.SECONDS_PER_HOUR, 'hours');\n\n          var minsAsSecs = Duration._parseNumber(text, minuteMatch, LocalTime.SECONDS_PER_MINUTE, 'minutes');\n\n          var seconds = Duration._parseNumber(text, secondMatch, 1, 'seconds');\n\n          var negativeSecs = secondMatch != null && secondMatch.charAt(0) === '-';\n\n          var nanos = Duration._parseFraction(text, fractionMatch, negativeSecs ? -1 : 1);\n\n          try {\n            return Duration._create(negate, daysAsSecs, hoursAsSecs, minsAsSecs, seconds, nanos);\n          } catch (ex) {\n            throw new DateTimeParseException('Text cannot be parsed to a Duration: overflow', text, 0, ex);\n          }\n        }\n      }\n    }\n\n    throw new DateTimeParseException('Text cannot be parsed to a Duration', text, 0);\n  };\n\n  Duration._parseNumber = function _parseNumber(text, parsed, multiplier, errorText) {\n    if (parsed == null) {\n      return 0;\n    }\n\n    try {\n      if (parsed[0] === '+') {\n        parsed = parsed.substring(1);\n      }\n\n      return MathUtil.safeMultiply(parseFloat(parsed), multiplier);\n    } catch (ex) {\n      throw new DateTimeParseException('Text cannot be parsed to a Duration: ' + errorText, text, 0, ex);\n    }\n  };\n\n  Duration._parseFraction = function _parseFraction(text, parsed, negate) {\n    if (parsed == null || parsed.length === 0) {\n      return 0;\n    }\n\n    parsed = (parsed + '000000000').substring(0, 9);\n    return parseFloat(parsed) * negate;\n  };\n\n  Duration._create = function _create() {\n    if (arguments.length <= 2) {\n      return Duration._createSecondsNanos(arguments[0], arguments[1]);\n    } else {\n      return Duration._createNegateDaysHoursMinutesSecondsNanos(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n    }\n  };\n\n  Duration._createNegateDaysHoursMinutesSecondsNanos = function _createNegateDaysHoursMinutesSecondsNanos(negate, daysAsSecs, hoursAsSecs, minsAsSecs, secs, nanos) {\n    var seconds = MathUtil.safeAdd(daysAsSecs, MathUtil.safeAdd(hoursAsSecs, MathUtil.safeAdd(minsAsSecs, secs)));\n\n    if (negate) {\n      return Duration.ofSeconds(seconds, nanos).negated();\n    }\n\n    return Duration.ofSeconds(seconds, nanos);\n  };\n\n  Duration._createSecondsNanos = function _createSecondsNanos(seconds, nanoAdjustment) {\n    if (seconds === void 0) {\n      seconds = 0;\n    }\n\n    if (nanoAdjustment === void 0) {\n      nanoAdjustment = 0;\n    }\n\n    if (seconds === 0 && nanoAdjustment === 0) {\n      return Duration.ZERO;\n    }\n\n    return new Duration(seconds, nanoAdjustment);\n  };\n\n  var _proto = Duration.prototype;\n\n  _proto.get = function get(unit) {\n    if (unit === ChronoUnit.SECONDS) {\n      return this._seconds;\n    } else if (unit === ChronoUnit.NANOS) {\n      return this._nanos;\n    } else {\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n  };\n\n  _proto.units = function units() {\n    return [ChronoUnit.SECONDS, ChronoUnit.NANOS];\n  };\n\n  _proto.isZero = function isZero() {\n    return this._seconds === 0 && this._nanos === 0;\n  };\n\n  _proto.isNegative = function isNegative() {\n    return this._seconds < 0;\n  };\n\n  _proto.seconds = function seconds() {\n    return this._seconds;\n  };\n\n  _proto.nano = function nano() {\n    return this._nanos;\n  };\n\n  _proto.withSeconds = function withSeconds(seconds) {\n    return Duration._create(seconds, this._nanos);\n  };\n\n  _proto.withNanos = function withNanos(nanoOfSecond) {\n    ChronoField.NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);\n    return Duration._create(this._seconds, nanoOfSecond);\n  };\n\n  _proto.plusDuration = function plusDuration(duration) {\n    requireNonNull(duration, 'duration');\n    return this.plus(duration.seconds(), duration.nano());\n  };\n\n  _proto.plus = function plus(durationOrNumber, unitOrNumber) {\n    if (arguments.length === 1) {\n      return this.plusDuration(durationOrNumber);\n    } else if (arguments.length === 2 && unitOrNumber instanceof TemporalUnit) {\n      return this.plusAmountUnit(durationOrNumber, unitOrNumber);\n    } else {\n      return this.plusSecondsNanos(durationOrNumber, unitOrNumber);\n    }\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(amountToAdd, 'amountToAdd');\n    requireNonNull(unit, 'unit');\n\n    if (unit === ChronoUnit.DAYS) {\n      return this.plusSecondsNanos(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY), 0);\n    }\n\n    if (unit.isDurationEstimated()) {\n      throw new UnsupportedTemporalTypeException('Unit must not have an estimated duration');\n    }\n\n    if (amountToAdd === 0) {\n      return this;\n    }\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this.plusNanos(amountToAdd);\n\n        case ChronoUnit.MICROS:\n          return this.plusSecondsNanos(MathUtil.intDiv(amountToAdd, 1000000 * 1000) * 1000, MathUtil.intMod(amountToAdd, 1000000 * 1000) * 1000);\n\n        case ChronoUnit.MILLIS:\n          return this.plusMillis(amountToAdd);\n\n        case ChronoUnit.SECONDS:\n          return this.plusSeconds(amountToAdd);\n      }\n\n      return this.plusSecondsNanos(MathUtil.safeMultiply(unit.duration().seconds(), amountToAdd), 0);\n    }\n\n    var duration = unit.duration().multipliedBy(amountToAdd);\n    return this.plusSecondsNanos(duration.seconds(), duration.nano());\n  };\n\n  _proto.plusDays = function plusDays(daysToAdd) {\n    return this.plusSecondsNanos(MathUtil.safeMultiply(daysToAdd, LocalTime.SECONDS_PER_DAY), 0);\n  };\n\n  _proto.plusHours = function plusHours(hoursToAdd) {\n    return this.plusSecondsNanos(MathUtil.safeMultiply(hoursToAdd, LocalTime.SECONDS_PER_HOUR), 0);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutesToAdd) {\n    return this.plusSecondsNanos(MathUtil.safeMultiply(minutesToAdd, LocalTime.SECONDS_PER_MINUTE), 0);\n  };\n\n  _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n    return this.plusSecondsNanos(secondsToAdd, 0);\n  };\n\n  _proto.plusMillis = function plusMillis(millisToAdd) {\n    return this.plusSecondsNanos(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * 1000000);\n  };\n\n  _proto.plusNanos = function plusNanos(nanosToAdd) {\n    return this.plusSecondsNanos(0, nanosToAdd);\n  };\n\n  _proto.plusSecondsNanos = function plusSecondsNanos(secondsToAdd, nanosToAdd) {\n    requireNonNull(secondsToAdd, 'secondsToAdd');\n    requireNonNull(nanosToAdd, 'nanosToAdd');\n\n    if (secondsToAdd === 0 && nanosToAdd === 0) {\n      return this;\n    }\n\n    var epochSec = MathUtil.safeAdd(this._seconds, secondsToAdd);\n    epochSec = MathUtil.safeAdd(epochSec, MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND));\n    nanosToAdd = MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n    var nanoAdjustment = MathUtil.safeAdd(this._nanos, nanosToAdd);\n    return Duration.ofSeconds(epochSec, nanoAdjustment);\n  };\n\n  _proto.minus = function minus(durationOrNumber, unit) {\n    if (arguments.length === 1) {\n      return this.minusDuration(durationOrNumber);\n    } else {\n      return this.minusAmountUnit(durationOrNumber, unit);\n    }\n  };\n\n  _proto.minusDuration = function minusDuration(duration) {\n    requireNonNull(duration, 'duration');\n    var secsToSubtract = duration.seconds();\n    var nanosToSubtract = duration.nano();\n\n    if (secsToSubtract === MIN_SAFE_INTEGER) {\n      return this.plus(MAX_SAFE_INTEGER, -nanosToSubtract);\n    }\n\n    return this.plus(-secsToSubtract, -nanosToSubtract);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(amountToSubtract, 'amountToSubtract');\n    requireNonNull(unit, 'unit');\n    return amountToSubtract === MIN_SAFE_INTEGER ? this.plusAmountUnit(MAX_SAFE_INTEGER, unit) : this.plusAmountUnit(-amountToSubtract, unit);\n  };\n\n  _proto.minusDays = function minusDays(daysToSubtract) {\n    return daysToSubtract === MIN_SAFE_INTEGER ? this.plusDays(MAX_SAFE_INTEGER) : this.plusDays(-daysToSubtract);\n  };\n\n  _proto.minusHours = function minusHours(hoursToSubtract) {\n    return hoursToSubtract === MIN_SAFE_INTEGER ? this.plusHours(MAX_SAFE_INTEGER) : this.plusHours(-hoursToSubtract);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutesToSubtract) {\n    return minutesToSubtract === MIN_SAFE_INTEGER ? this.plusMinutes(MAX_SAFE_INTEGER) : this.plusMinutes(-minutesToSubtract);\n  };\n\n  _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n    return secondsToSubtract === MIN_SAFE_INTEGER ? this.plusSeconds(MAX_SAFE_INTEGER) : this.plusSeconds(-secondsToSubtract);\n  };\n\n  _proto.minusMillis = function minusMillis(millisToSubtract) {\n    return millisToSubtract === MIN_SAFE_INTEGER ? this.plusMillis(MAX_SAFE_INTEGER) : this.plusMillis(-millisToSubtract);\n  };\n\n  _proto.minusNanos = function minusNanos(nanosToSubtract) {\n    return nanosToSubtract === MIN_SAFE_INTEGER ? this.plusNanos(MAX_SAFE_INTEGER) : this.plusNanos(-nanosToSubtract);\n  };\n\n  _proto.multipliedBy = function multipliedBy(multiplicand) {\n    if (multiplicand === 0) {\n      return Duration.ZERO;\n    }\n\n    if (multiplicand === 1) {\n      return this;\n    }\n\n    var secs = MathUtil.safeMultiply(this._seconds, multiplicand);\n    var nos = MathUtil.safeMultiply(this._nanos, multiplicand);\n    secs = secs + MathUtil.intDiv(nos, LocalTime.NANOS_PER_SECOND);\n    nos = MathUtil.intMod(nos, LocalTime.NANOS_PER_SECOND);\n    return Duration.ofSeconds(secs, nos);\n  };\n\n  _proto.dividedBy = function dividedBy(divisor) {\n    if (divisor === 0) {\n      throw new ArithmeticException('Cannot divide by zero');\n    }\n\n    if (divisor === 1) {\n      return this;\n    }\n\n    var secs = MathUtil.intDiv(this._seconds, divisor);\n    var secsMod = MathUtil.roundDown((this._seconds / divisor - secs) * LocalTime.NANOS_PER_SECOND);\n    var nos = MathUtil.intDiv(this._nanos, divisor);\n    nos = secsMod + nos;\n    return Duration.ofSeconds(secs, nos);\n  };\n\n  _proto.negated = function negated() {\n    return this.multipliedBy(-1);\n  };\n\n  _proto.abs = function abs() {\n    return this.isNegative() ? this.negated() : this;\n  };\n\n  _proto.addTo = function addTo(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (this._seconds !== 0) {\n      temporal = temporal.plus(this._seconds, ChronoUnit.SECONDS);\n    }\n\n    if (this._nanos !== 0) {\n      temporal = temporal.plus(this._nanos, ChronoUnit.NANOS);\n    }\n\n    return temporal;\n  };\n\n  _proto.subtractFrom = function subtractFrom(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (this._seconds !== 0) {\n      temporal = temporal.minus(this._seconds, ChronoUnit.SECONDS);\n    }\n\n    if (this._nanos !== 0) {\n      temporal = temporal.minus(this._nanos, ChronoUnit.NANOS);\n    }\n\n    return temporal;\n  };\n\n  _proto.toDays = function toDays() {\n    return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_DAY);\n  };\n\n  _proto.toHours = function toHours() {\n    return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n  };\n\n  _proto.toMinutes = function toMinutes() {\n    return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n  };\n\n  _proto.toMillis = function toMillis() {\n    var millis = Math.round(MathUtil.safeMultiply(this._seconds, 1000));\n    millis = MathUtil.safeAdd(millis, MathUtil.intDiv(this._nanos, 1000000));\n    return millis;\n  };\n\n  _proto.toNanos = function toNanos() {\n    var totalNanos = MathUtil.safeMultiply(this._seconds, LocalTime.NANOS_PER_SECOND);\n    totalNanos = MathUtil.safeAdd(totalNanos, this._nanos);\n    return totalNanos;\n  };\n\n  _proto.compareTo = function compareTo(otherDuration) {\n    requireNonNull(otherDuration, 'otherDuration');\n    requireInstance(otherDuration, Duration, 'otherDuration');\n    var cmp = MathUtil.compareNumbers(this._seconds, otherDuration.seconds());\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    return this._nanos - otherDuration.nano();\n  };\n\n  _proto.equals = function equals(otherDuration) {\n    if (this === otherDuration) {\n      return true;\n    }\n\n    if (otherDuration instanceof Duration) {\n      return this.seconds() === otherDuration.seconds() && this.nano() === otherDuration.nano();\n    }\n\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    if (this === Duration.ZERO) {\n      return 'PT0S';\n    }\n\n    var hours = MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n    var minutes = MathUtil.intDiv(MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_HOUR), LocalTime.SECONDS_PER_MINUTE);\n    var secs = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n    var rval = 'PT';\n\n    if (hours !== 0) {\n      rval += hours + 'H';\n    }\n\n    if (minutes !== 0) {\n      rval += minutes + 'M';\n    }\n\n    if (secs === 0 && this._nanos === 0 && rval.length > 2) {\n      return rval;\n    }\n\n    if (secs < 0 && this._nanos > 0) {\n      if (secs === -1) {\n        rval += '-0';\n      } else {\n        rval += secs + 1;\n      }\n    } else {\n      rval += secs;\n    }\n\n    if (this._nanos > 0) {\n      rval += '.';\n      var nanoString;\n\n      if (secs < 0) {\n        nanoString = '' + (2 * LocalTime.NANOS_PER_SECOND - this._nanos);\n      } else {\n        nanoString = '' + (LocalTime.NANOS_PER_SECOND + this._nanos);\n      }\n\n      nanoString = nanoString.slice(1, nanoString.length);\n      rval += nanoString;\n\n      while (rval.charAt(rval.length - 1) === '0') {\n        rval = rval.slice(0, rval.length - 1);\n      }\n    }\n\n    rval += 'S';\n    return rval;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return Duration;\n}(TemporalAmount);\nfunction _init() {\n  Duration.ZERO = new Duration(0, 0);\n}\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\nvar YearConstants = function YearConstants() {};\nfunction _init$1() {\n  YearConstants.MIN_VALUE = -999999;\n  YearConstants.MAX_VALUE = 999999;\n}\n\nvar ChronoUnit = function (_TemporalUnit) {\n  _inheritsLoose(ChronoUnit, _TemporalUnit);\n\n  function ChronoUnit(name, estimatedDuration) {\n    var _this;\n\n    _this = _TemporalUnit.call(this) || this;\n    _this._name = name;\n    _this._duration = estimatedDuration;\n    return _this;\n  }\n\n  var _proto = ChronoUnit.prototype;\n\n  _proto.duration = function duration() {\n    return this._duration;\n  };\n\n  _proto.isDurationEstimated = function isDurationEstimated() {\n    return this.isDateBased() || this === ChronoUnit.FOREVER;\n  };\n\n  _proto.isDateBased = function isDateBased() {\n    return this.compareTo(ChronoUnit.DAYS) >= 0 && this !== ChronoUnit.FOREVER;\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    return this.compareTo(ChronoUnit.DAYS) < 0;\n  };\n\n  _proto.isSupportedBy = function isSupportedBy(temporal) {\n    if (this === ChronoUnit.FOREVER) {\n      return false;\n    }\n\n    try {\n      temporal.plus(1, this);\n      return true;\n    } catch (e) {\n      try {\n        temporal.plus(-1, this);\n        return true;\n      } catch (e2) {\n        return false;\n      }\n    }\n  };\n\n  _proto.addTo = function addTo(temporal, amount) {\n    return temporal.plus(amount, this);\n  };\n\n  _proto.between = function between(temporal1, temporal2) {\n    return temporal1.until(temporal2, this);\n  };\n\n  _proto.toString = function toString() {\n    return this._name;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    return this.duration().compareTo(other.duration());\n  };\n\n  return ChronoUnit;\n}(TemporalUnit);\nfunction _init$2() {\n  ChronoUnit.NANOS = new ChronoUnit('Nanos', Duration.ofNanos(1));\n  ChronoUnit.MICROS = new ChronoUnit('Micros', Duration.ofNanos(1000));\n  ChronoUnit.MILLIS = new ChronoUnit('Millis', Duration.ofNanos(1000000));\n  ChronoUnit.SECONDS = new ChronoUnit('Seconds', Duration.ofSeconds(1));\n  ChronoUnit.MINUTES = new ChronoUnit('Minutes', Duration.ofSeconds(60));\n  ChronoUnit.HOURS = new ChronoUnit('Hours', Duration.ofSeconds(3600));\n  ChronoUnit.HALF_DAYS = new ChronoUnit('HalfDays', Duration.ofSeconds(43200));\n  ChronoUnit.DAYS = new ChronoUnit('Days', Duration.ofSeconds(86400));\n  ChronoUnit.WEEKS = new ChronoUnit('Weeks', Duration.ofSeconds(7 * 86400));\n  ChronoUnit.MONTHS = new ChronoUnit('Months', Duration.ofSeconds(31556952 / 12));\n  ChronoUnit.YEARS = new ChronoUnit('Years', Duration.ofSeconds(31556952));\n  ChronoUnit.DECADES = new ChronoUnit('Decades', Duration.ofSeconds(31556952 * 10));\n  ChronoUnit.CENTURIES = new ChronoUnit('Centuries', Duration.ofSeconds(31556952 * 100));\n  ChronoUnit.MILLENNIA = new ChronoUnit('Millennia', Duration.ofSeconds(31556952 * 1000));\n  ChronoUnit.ERAS = new ChronoUnit('Eras', Duration.ofSeconds(31556952 * (YearConstants.MAX_VALUE + 1)));\n  ChronoUnit.FOREVER = new ChronoUnit('Forever', Duration.ofSeconds(MathUtil.MAX_SAFE_INTEGER, 999999999));\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nvar TemporalField = function () {\n  function TemporalField() {}\n\n  var _proto = TemporalField.prototype;\n\n  _proto.isDateBased = function isDateBased() {\n    abstractMethodFail('isDateBased');\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    abstractMethodFail('isTimeBased');\n  };\n\n  _proto.baseUnit = function baseUnit() {\n    abstractMethodFail('baseUnit');\n  };\n\n  _proto.rangeUnit = function rangeUnit() {\n    abstractMethodFail('rangeUnit');\n  };\n\n  _proto.range = function range() {\n    abstractMethodFail('range');\n  };\n\n  _proto.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    abstractMethodFail('rangeRefinedBy');\n  };\n\n  _proto.getFrom = function getFrom(temporal) {\n    abstractMethodFail('getFrom');\n  };\n\n  _proto.adjustInto = function adjustInto(temporal, newValue) {\n    abstractMethodFail('adjustInto');\n  };\n\n  _proto.isSupportedBy = function isSupportedBy(temporal) {\n    abstractMethodFail('isSupportedBy');\n  };\n\n  _proto.displayName = function displayName() {\n    abstractMethodFail('displayName');\n  };\n\n  _proto.equals = function equals(other) {\n    abstractMethodFail('equals');\n  };\n\n  _proto.name = function name() {\n    abstractMethodFail('name');\n  };\n\n  return TemporalField;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ValueRange = function () {\n  function ValueRange(minSmallest, minLargest, maxSmallest, maxLargest) {\n    assert(!(minSmallest > minLargest), 'Smallest minimum value \\'' + minSmallest + '\\' must be less than largest minimum value \\'' + minLargest + '\\'', IllegalArgumentException);\n    assert(!(maxSmallest > maxLargest), 'Smallest maximum value \\'' + maxSmallest + '\\' must be less than largest maximum value \\'' + maxLargest + '\\'', IllegalArgumentException);\n    assert(!(minLargest > maxLargest), 'Minimum value \\'' + minLargest + '\\' must be less than maximum value \\'' + maxLargest + '\\'', IllegalArgumentException);\n    this._minSmallest = minSmallest;\n    this._minLargest = minLargest;\n    this._maxLargest = maxLargest;\n    this._maxSmallest = maxSmallest;\n  }\n\n  var _proto = ValueRange.prototype;\n\n  _proto.isFixed = function isFixed() {\n    return this._minSmallest === this._minLargest && this._maxSmallest === this._maxLargest;\n  };\n\n  _proto.minimum = function minimum() {\n    return this._minSmallest;\n  };\n\n  _proto.largestMinimum = function largestMinimum() {\n    return this._minLargest;\n  };\n\n  _proto.maximum = function maximum() {\n    return this._maxLargest;\n  };\n\n  _proto.smallestMaximum = function smallestMaximum() {\n    return this._maxSmallest;\n  };\n\n  _proto.isValidValue = function isValidValue(value) {\n    return this.minimum() <= value && value <= this.maximum();\n  };\n\n  _proto.checkValidValue = function checkValidValue(value, field) {\n    var msg;\n\n    if (!this.isValidValue(value)) {\n      if (field != null) {\n        msg = 'Invalid value for ' + field + ' (valid values ' + this.toString() + '): ' + value;\n      } else {\n        msg = 'Invalid value (valid values ' + this.toString() + '): ' + value;\n      }\n\n      return assert(false, msg, DateTimeException);\n    }\n\n    return value;\n  };\n\n  _proto.checkValidIntValue = function checkValidIntValue(value, field) {\n    if (this.isValidIntValue(value) === false) {\n      throw new DateTimeException('Invalid int value for ' + field + ': ' + value);\n    }\n\n    return value;\n  };\n\n  _proto.isValidIntValue = function isValidIntValue(value) {\n    return this.isIntValue() && this.isValidValue(value);\n  };\n\n  _proto.isIntValue = function isIntValue() {\n    return this.minimum() >= MathUtil.MIN_SAFE_INTEGER && this.maximum() <= MathUtil.MAX_SAFE_INTEGER;\n  };\n\n  _proto.equals = function equals(other) {\n    if (other === this) {\n      return true;\n    }\n\n    if (other instanceof ValueRange) {\n      return this._minSmallest === other._minSmallest && this._minLargest === other._minLargest && this._maxSmallest === other._maxSmallest && this._maxLargest === other._maxLargest;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return MathUtil.hashCode(this._minSmallest, this._minLargest, this._maxSmallest, this._maxLargest);\n  };\n\n  _proto.toString = function toString() {\n    var str = this.minimum() + (this.minimum() !== this.largestMinimum() ? '/' + this.largestMinimum() : '');\n    str += ' - ';\n    str += this.smallestMaximum() + (this.smallestMaximum() !== this.maximum() ? '/' + this.maximum() : '');\n    return str;\n  };\n\n  ValueRange.of = function of() {\n    if (arguments.length === 2) {\n      return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[1]);\n    } else if (arguments.length === 3) {\n      return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[2]);\n    } else if (arguments.length === 4) {\n      return new ValueRange(arguments[0], arguments[1], arguments[2], arguments[3]);\n    } else {\n      return assert(false, 'Invalid number of arguments ' + arguments.length, IllegalArgumentException);\n    }\n  };\n\n  return ValueRange;\n}();\n\nvar ChronoField = function (_TemporalField) {\n  _inheritsLoose(ChronoField, _TemporalField);\n\n  ChronoField.byName = function byName(fieldName) {\n    for (var prop in ChronoField) {\n      if (ChronoField[prop]) {\n        if (ChronoField[prop] instanceof ChronoField && ChronoField[prop].name() === fieldName) {\n          return ChronoField[prop];\n        }\n      }\n    }\n  };\n\n  function ChronoField(name, baseUnit, rangeUnit, range) {\n    var _this;\n\n    _this = _TemporalField.call(this) || this;\n    _this._name = name;\n    _this._baseUnit = baseUnit;\n    _this._rangeUnit = rangeUnit;\n    _this._range = range;\n    return _this;\n  }\n\n  var _proto = ChronoField.prototype;\n\n  _proto.name = function name() {\n    return this._name;\n  };\n\n  _proto.baseUnit = function baseUnit() {\n    return this._baseUnit;\n  };\n\n  _proto.rangeUnit = function rangeUnit() {\n    return this._rangeUnit;\n  };\n\n  _proto.range = function range() {\n    return this._range;\n  };\n\n  _proto.displayName = function displayName() {\n    return this.toString();\n  };\n\n  _proto.checkValidValue = function checkValidValue(value) {\n    return this.range().checkValidValue(value, this);\n  };\n\n  _proto.checkValidIntValue = function checkValidIntValue(value) {\n    return this.range().checkValidIntValue(value, this);\n  };\n\n  _proto.isDateBased = function isDateBased() {\n    var dateBased = this === ChronoField.DAY_OF_WEEK || this === ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH || this === ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR || this === ChronoField.DAY_OF_MONTH || this === ChronoField.DAY_OF_YEAR || this === ChronoField.EPOCH_DAY || this === ChronoField.ALIGNED_WEEK_OF_MONTH || this === ChronoField.ALIGNED_WEEK_OF_YEAR || this === ChronoField.MONTH_OF_YEAR || this === ChronoField.YEAR_OF_ERA || this === ChronoField.YEAR || this === ChronoField.ERA;\n    return dateBased;\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    var timeBased = this === ChronoField.NANO_OF_SECOND || this === ChronoField.NANO_OF_DAY || this === ChronoField.MICRO_OF_SECOND || this === ChronoField.MICRO_OF_DAY || this === ChronoField.MILLI_OF_SECOND || this === ChronoField.MILLI_OF_DAY || this === ChronoField.SECOND_OF_MINUTE || this === ChronoField.SECOND_OF_DAY || this === ChronoField.MINUTE_OF_HOUR || this === ChronoField.MINUTE_OF_DAY || this === ChronoField.HOUR_OF_AMPM || this === ChronoField.CLOCK_HOUR_OF_AMPM || this === ChronoField.HOUR_OF_DAY || this === ChronoField.CLOCK_HOUR_OF_DAY || this === ChronoField.AMPM_OF_DAY;\n    return timeBased;\n  };\n\n  _proto.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    return temporal.range(this);\n  };\n\n  _proto.getFrom = function getFrom(temporal) {\n    return temporal.getLong(this);\n  };\n\n  _proto.toString = function toString() {\n    return this.name();\n  };\n\n  _proto.equals = function equals(other) {\n    return this === other;\n  };\n\n  _proto.adjustInto = function adjustInto(temporal, newValue) {\n    return temporal.with(this, newValue);\n  };\n\n  _proto.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(this);\n  };\n\n  return ChronoField;\n}(TemporalField);\nfunction _init$3() {\n  ChronoField.NANO_OF_SECOND = new ChronoField('NanoOfSecond', ChronoUnit.NANOS, ChronoUnit.SECONDS, ValueRange.of(0, 999999999));\n  ChronoField.NANO_OF_DAY = new ChronoField('NanoOfDay', ChronoUnit.NANOS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000000000 - 1));\n  ChronoField.MICRO_OF_SECOND = new ChronoField('MicroOfSecond', ChronoUnit.MICROS, ChronoUnit.SECONDS, ValueRange.of(0, 999999));\n  ChronoField.MICRO_OF_DAY = new ChronoField('MicroOfDay', ChronoUnit.MICROS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000000 - 1));\n  ChronoField.MILLI_OF_SECOND = new ChronoField('MilliOfSecond', ChronoUnit.MILLIS, ChronoUnit.SECONDS, ValueRange.of(0, 999));\n  ChronoField.MILLI_OF_DAY = new ChronoField('MilliOfDay', ChronoUnit.MILLIS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000 - 1));\n  ChronoField.SECOND_OF_MINUTE = new ChronoField('SecondOfMinute', ChronoUnit.SECONDS, ChronoUnit.MINUTES, ValueRange.of(0, 59));\n  ChronoField.SECOND_OF_DAY = new ChronoField('SecondOfDay', ChronoUnit.SECONDS, ChronoUnit.DAYS, ValueRange.of(0, 86400 - 1));\n  ChronoField.MINUTE_OF_HOUR = new ChronoField('MinuteOfHour', ChronoUnit.MINUTES, ChronoUnit.HOURS, ValueRange.of(0, 59));\n  ChronoField.MINUTE_OF_DAY = new ChronoField('MinuteOfDay', ChronoUnit.MINUTES, ChronoUnit.DAYS, ValueRange.of(0, 24 * 60 - 1));\n  ChronoField.HOUR_OF_AMPM = new ChronoField('HourOfAmPm', ChronoUnit.HOURS, ChronoUnit.HALF_DAYS, ValueRange.of(0, 11));\n  ChronoField.CLOCK_HOUR_OF_AMPM = new ChronoField('ClockHourOfAmPm', ChronoUnit.HOURS, ChronoUnit.HALF_DAYS, ValueRange.of(1, 12));\n  ChronoField.HOUR_OF_DAY = new ChronoField('HourOfDay', ChronoUnit.HOURS, ChronoUnit.DAYS, ValueRange.of(0, 23));\n  ChronoField.CLOCK_HOUR_OF_DAY = new ChronoField('ClockHourOfDay', ChronoUnit.HOURS, ChronoUnit.DAYS, ValueRange.of(1, 24));\n  ChronoField.AMPM_OF_DAY = new ChronoField('AmPmOfDay', ChronoUnit.HALF_DAYS, ChronoUnit.DAYS, ValueRange.of(0, 1));\n  ChronoField.DAY_OF_WEEK = new ChronoField('DayOfWeek', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n  ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH = new ChronoField('AlignedDayOfWeekInMonth', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n  ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR = new ChronoField('AlignedDayOfWeekInYear', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n  ChronoField.DAY_OF_MONTH = new ChronoField('DayOfMonth', ChronoUnit.DAYS, ChronoUnit.MONTHS, ValueRange.of(1, 28, 31), 'day');\n  ChronoField.DAY_OF_YEAR = new ChronoField('DayOfYear', ChronoUnit.DAYS, ChronoUnit.YEARS, ValueRange.of(1, 365, 366));\n  ChronoField.EPOCH_DAY = new ChronoField('EpochDay', ChronoUnit.DAYS, ChronoUnit.FOREVER, ValueRange.of(Math.floor(YearConstants.MIN_VALUE * 365.25), Math.floor(YearConstants.MAX_VALUE * 365.25)));\n  ChronoField.ALIGNED_WEEK_OF_MONTH = new ChronoField('AlignedWeekOfMonth', ChronoUnit.WEEKS, ChronoUnit.MONTHS, ValueRange.of(1, 4, 5));\n  ChronoField.ALIGNED_WEEK_OF_YEAR = new ChronoField('AlignedWeekOfYear', ChronoUnit.WEEKS, ChronoUnit.YEARS, ValueRange.of(1, 53));\n  ChronoField.MONTH_OF_YEAR = new ChronoField('MonthOfYear', ChronoUnit.MONTHS, ChronoUnit.YEARS, ValueRange.of(1, 12), 'month');\n  ChronoField.PROLEPTIC_MONTH = new ChronoField('ProlepticMonth', ChronoUnit.MONTHS, ChronoUnit.FOREVER, ValueRange.of(YearConstants.MIN_VALUE * 12, YearConstants.MAX_VALUE * 12 + 11));\n  ChronoField.YEAR_OF_ERA = new ChronoField('YearOfEra', ChronoUnit.YEARS, ChronoUnit.FOREVER, ValueRange.of(1, YearConstants.MAX_VALUE, YearConstants.MAX_VALUE + 1));\n  ChronoField.YEAR = new ChronoField('Year', ChronoUnit.YEARS, ChronoUnit.FOREVER, ValueRange.of(YearConstants.MIN_VALUE, YearConstants.MAX_VALUE), 'year');\n  ChronoField.ERA = new ChronoField('Era', ChronoUnit.ERAS, ChronoUnit.FOREVER, ValueRange.of(0, 1));\n  ChronoField.INSTANT_SECONDS = new ChronoField('InstantSeconds', ChronoUnit.SECONDS, ChronoUnit.FOREVER, ValueRange.of(MIN_SAFE_INTEGER, MAX_SAFE_INTEGER));\n  ChronoField.OFFSET_SECONDS = new ChronoField('OffsetSeconds', ChronoUnit.SECONDS, ChronoUnit.FOREVER, ValueRange.of(-18 * 3600, 18 * 3600));\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalQueries = function () {\n  function TemporalQueries() {}\n\n  TemporalQueries.zoneId = function zoneId() {\n    return TemporalQueries.ZONE_ID;\n  };\n\n  TemporalQueries.chronology = function chronology() {\n    return TemporalQueries.CHRONO;\n  };\n\n  TemporalQueries.precision = function precision() {\n    return TemporalQueries.PRECISION;\n  };\n\n  TemporalQueries.zone = function zone() {\n    return TemporalQueries.ZONE;\n  };\n\n  TemporalQueries.offset = function offset() {\n    return TemporalQueries.OFFSET;\n  };\n\n  TemporalQueries.localDate = function localDate() {\n    return TemporalQueries.LOCAL_DATE;\n  };\n\n  TemporalQueries.localTime = function localTime() {\n    return TemporalQueries.LOCAL_TIME;\n  };\n\n  return TemporalQueries;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalAccessor = function () {\n  function TemporalAccessor() {}\n\n  var _proto = TemporalAccessor.prototype;\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.chronology() || _query === TemporalQueries.precision()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  _proto.get = function get(field) {\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (this.isSupported(field)) {\n        return field.range();\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  return TemporalAccessor;\n}();\n\nvar TemporalQuery = function (_Enum) {\n  _inheritsLoose(TemporalQuery, _Enum);\n\n  function TemporalQuery() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  var _proto = TemporalQuery.prototype;\n\n  _proto.queryFrom = function queryFrom(temporal) {\n    abstractMethodFail('queryFrom');\n  };\n\n  return TemporalQuery;\n}(Enum);\nfunction createTemporalQuery(name, queryFromFunction) {\n  var ExtendedTemporalQuery = function (_TemporalQuery) {\n    _inheritsLoose(ExtendedTemporalQuery, _TemporalQuery);\n\n    function ExtendedTemporalQuery() {\n      return _TemporalQuery.apply(this, arguments) || this;\n    }\n\n    return ExtendedTemporalQuery;\n  }(TemporalQuery);\n\n  ExtendedTemporalQuery.prototype.queryFrom = queryFromFunction;\n  return new ExtendedTemporalQuery(name);\n}\n\nvar DayOfWeek = function (_TemporalAccessor) {\n  _inheritsLoose(DayOfWeek, _TemporalAccessor);\n\n  function DayOfWeek(ordinal, name) {\n    var _this;\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this._ordinal = ordinal;\n    _this._name = name;\n    return _this;\n  }\n\n  var _proto = DayOfWeek.prototype;\n\n  _proto.ordinal = function ordinal() {\n    return this._ordinal;\n  };\n\n  _proto.name = function name() {\n    return this._name;\n  };\n\n  DayOfWeek.values = function values() {\n    return ENUMS.slice();\n  };\n\n  DayOfWeek.valueOf = function valueOf(name) {\n    var ordinal = 0;\n\n    for (ordinal; ordinal < ENUMS.length; ordinal++) {\n      if (ENUMS[ordinal].name() === name) {\n        break;\n      }\n    }\n\n    return DayOfWeek.of(ordinal + 1);\n  };\n\n  DayOfWeek.of = function of(dayOfWeek) {\n    if (dayOfWeek < 1 || dayOfWeek > 7) {\n      throw new DateTimeException('Invalid value for DayOfWeek: ' + dayOfWeek);\n    }\n\n    return ENUMS[dayOfWeek - 1];\n  };\n\n  DayOfWeek.from = function from(temporal) {\n    assert(temporal != null, 'temporal', NullPointerException);\n\n    if (temporal instanceof DayOfWeek) {\n      return temporal;\n    }\n\n    try {\n      return DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));\n    } catch (ex) {\n      if (ex instanceof DateTimeException) {\n        throw new DateTimeException('Unable to obtain DayOfWeek from TemporalAccessor: ' + temporal + ', type ' + (temporal.constructor != null ? temporal.constructor.name : ''), ex);\n      } else {\n        throw ex;\n      }\n    }\n  };\n\n  _proto.value = function value() {\n    return this._ordinal + 1;\n  };\n\n  _proto.displayName = function displayName(style, locale) {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented yet!');\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    if (field instanceof ChronoField) {\n      return field === ChronoField.DAY_OF_WEEK;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field === ChronoField.DAY_OF_WEEK) {\n      return field.range();\n    } else if (field instanceof ChronoField) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    if (field === ChronoField.DAY_OF_WEEK) {\n      return this.value();\n    }\n\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field === ChronoField.DAY_OF_WEEK) {\n      return this.value();\n    } else if (field instanceof ChronoField) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.plus = function plus(days) {\n    var amount = MathUtil.floorMod(days, 7);\n    return ENUMS[MathUtil.floorMod(this._ordinal + (amount + 7), 7)];\n  };\n\n  _proto.minus = function minus(days) {\n    return this.plus(-1 * MathUtil.floorMod(days, 7));\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.DAYS;\n    } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    assert(_query != null, 'query', NullPointerException);\n    return _query.queryFrom(this);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    return temporal.with(ChronoField.DAY_OF_WEEK, this.value());\n  };\n\n  _proto.equals = function equals(other) {\n    return this === other;\n  };\n\n  _proto.toString = function toString() {\n    return this._name;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, DayOfWeek, 'other');\n    return this._ordinal - other._ordinal;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return DayOfWeek;\n}(TemporalAccessor);\nvar ENUMS;\nfunction _init$4() {\n  DayOfWeek.MONDAY = new DayOfWeek(0, 'MONDAY');\n  DayOfWeek.TUESDAY = new DayOfWeek(1, 'TUESDAY');\n  DayOfWeek.WEDNESDAY = new DayOfWeek(2, 'WEDNESDAY');\n  DayOfWeek.THURSDAY = new DayOfWeek(3, 'THURSDAY');\n  DayOfWeek.FRIDAY = new DayOfWeek(4, 'FRIDAY');\n  DayOfWeek.SATURDAY = new DayOfWeek(5, 'SATURDAY');\n  DayOfWeek.SUNDAY = new DayOfWeek(6, 'SUNDAY');\n  DayOfWeek.FROM = createTemporalQuery('DayOfWeek.FROM', function (temporal) {\n    return DayOfWeek.from(temporal);\n  });\n  ENUMS = [DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY];\n}\n\nvar Month = function (_TemporalAccessor) {\n  _inheritsLoose(Month, _TemporalAccessor);\n\n  function Month(value, name) {\n    var _this;\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this._value = MathUtil.safeToInt(value);\n    _this._name = name;\n    return _this;\n  }\n\n  var _proto = Month.prototype;\n\n  _proto.value = function value() {\n    return this._value;\n  };\n\n  _proto.ordinal = function ordinal() {\n    return this._value - 1;\n  };\n\n  _proto.name = function name() {\n    return this._name;\n  };\n\n  _proto.displayName = function displayName(style, locale) {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented yet!');\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    if (null === field) {\n      return false;\n    }\n\n    if (field instanceof ChronoField) {\n      return field === ChronoField.MONTH_OF_YEAR;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    if (field === ChronoField.MONTH_OF_YEAR) {\n      return this.value();\n    }\n\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field === ChronoField.MONTH_OF_YEAR) {\n      return this.value();\n    } else if (field instanceof ChronoField) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.plus = function plus(months) {\n    var amount = MathUtil.intMod(months, 12) + 12;\n    var newMonthVal = MathUtil.intMod(this.value() + amount, 12);\n    newMonthVal = newMonthVal === 0 ? 12 : newMonthVal;\n    return Month.of(newMonthVal);\n  };\n\n  _proto.minus = function minus(months) {\n    return this.plus(-1 * MathUtil.intMod(months, 12));\n  };\n\n  _proto.length = function length(leapYear) {\n    switch (this) {\n      case Month.FEBRUARY:\n        return leapYear ? 29 : 28;\n\n      case Month.APRIL:\n      case Month.JUNE:\n      case Month.SEPTEMBER:\n      case Month.NOVEMBER:\n        return 30;\n\n      default:\n        return 31;\n    }\n  };\n\n  _proto.minLength = function minLength() {\n    switch (this) {\n      case Month.FEBRUARY:\n        return 28;\n\n      case Month.APRIL:\n      case Month.JUNE:\n      case Month.SEPTEMBER:\n      case Month.NOVEMBER:\n        return 30;\n\n      default:\n        return 31;\n    }\n  };\n\n  _proto.maxLength = function maxLength() {\n    switch (this) {\n      case Month.FEBRUARY:\n        return 29;\n\n      case Month.APRIL:\n      case Month.JUNE:\n      case Month.SEPTEMBER:\n      case Month.NOVEMBER:\n        return 30;\n\n      default:\n        return 31;\n    }\n  };\n\n  _proto.firstDayOfYear = function firstDayOfYear(leapYear) {\n    var leap = leapYear ? 1 : 0;\n\n    switch (this) {\n      case Month.JANUARY:\n        return 1;\n\n      case Month.FEBRUARY:\n        return 32;\n\n      case Month.MARCH:\n        return 60 + leap;\n\n      case Month.APRIL:\n        return 91 + leap;\n\n      case Month.MAY:\n        return 121 + leap;\n\n      case Month.JUNE:\n        return 152 + leap;\n\n      case Month.JULY:\n        return 182 + leap;\n\n      case Month.AUGUST:\n        return 213 + leap;\n\n      case Month.SEPTEMBER:\n        return 244 + leap;\n\n      case Month.OCTOBER:\n        return 274 + leap;\n\n      case Month.NOVEMBER:\n        return 305 + leap;\n\n      case Month.DECEMBER:\n      default:\n        return 335 + leap;\n    }\n  };\n\n  _proto.firstMonthOfQuarter = function firstMonthOfQuarter() {\n    switch (this) {\n      case Month.JANUARY:\n      case Month.FEBRUARY:\n      case Month.MARCH:\n        return Month.JANUARY;\n\n      case Month.APRIL:\n      case Month.MAY:\n      case Month.JUNE:\n        return Month.APRIL;\n\n      case Month.JULY:\n      case Month.AUGUST:\n      case Month.SEPTEMBER:\n        return Month.JULY;\n\n      case Month.OCTOBER:\n      case Month.NOVEMBER:\n      case Month.DECEMBER:\n      default:\n        return Month.OCTOBER;\n    }\n  };\n\n  _proto.query = function query(_query) {\n    assert(_query != null, 'query() parameter must not be null', DateTimeException);\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.MONTHS;\n    }\n\n    return _TemporalAccessor.prototype.query.call(this, _query);\n  };\n\n  _proto.toString = function toString() {\n    switch (this) {\n      case Month.JANUARY:\n        return 'JANUARY';\n\n      case Month.FEBRUARY:\n        return 'FEBRUARY';\n\n      case Month.MARCH:\n        return 'MARCH';\n\n      case Month.APRIL:\n        return 'APRIL';\n\n      case Month.MAY:\n        return 'MAY';\n\n      case Month.JUNE:\n        return 'JUNE';\n\n      case Month.JULY:\n        return 'JULY';\n\n      case Month.AUGUST:\n        return 'AUGUST';\n\n      case Month.SEPTEMBER:\n        return 'SEPTEMBER';\n\n      case Month.OCTOBER:\n        return 'OCTOBER';\n\n      case Month.NOVEMBER:\n        return 'NOVEMBER';\n\n      case Month.DECEMBER:\n        return 'DECEMBER';\n\n      default:\n        return 'unknown Month, value: ' + this.value();\n    }\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.MONTH_OF_YEAR, this.value());\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, Month, 'other');\n    return this._value - other._value;\n  };\n\n  _proto.equals = function equals(other) {\n    return this === other;\n  };\n\n  Month.valueOf = function valueOf(name) {\n    var ordinal = 0;\n\n    for (ordinal; ordinal < MONTHS.length; ordinal++) {\n      if (MONTHS[ordinal].name() === name) {\n        break;\n      }\n    }\n\n    return Month.of(ordinal + 1);\n  };\n\n  Month.values = function values() {\n    return MONTHS.slice();\n  };\n\n  Month.of = function of(month) {\n    if (month < 1 || month > 12) {\n      assert(false, 'Invalid value for MonthOfYear: ' + month, DateTimeException);\n    }\n\n    return MONTHS[month - 1];\n  };\n\n  Month.from = function from(temporal) {\n    if (temporal instanceof Month) {\n      return temporal;\n    }\n\n    try {\n      return Month.of(temporal.get(ChronoField.MONTH_OF_YEAR));\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain Month from TemporalAccessor: ' + temporal + ' of type ' + (temporal && temporal.constructor != null ? temporal.constructor.name : ''), ex);\n    }\n  };\n\n  return Month;\n}(TemporalAccessor);\nvar MONTHS;\nfunction _init$5() {\n  Month.JANUARY = new Month(1, 'JANUARY');\n  Month.FEBRUARY = new Month(2, 'FEBRUARY');\n  Month.MARCH = new Month(3, 'MARCH');\n  Month.APRIL = new Month(4, 'APRIL');\n  Month.MAY = new Month(5, 'MAY');\n  Month.JUNE = new Month(6, 'JUNE');\n  Month.JULY = new Month(7, 'JULY');\n  Month.AUGUST = new Month(8, 'AUGUST');\n  Month.SEPTEMBER = new Month(9, 'SEPTEMBER');\n  Month.OCTOBER = new Month(10, 'OCTOBER');\n  Month.NOVEMBER = new Month(11, 'NOVEMBER');\n  Month.DECEMBER = new Month(12, 'DECEMBER');\n  MONTHS = [Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY, Month.JUNE, Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER];\n}\n\nvar PATTERN = /([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?/;\nvar Period = function (_TemporalAmount) {\n  _inheritsLoose(Period, _TemporalAmount);\n\n  function Period(years, months, days) {\n    var _this;\n\n    _this = _TemporalAmount.call(this) || this;\n\n    var _years = MathUtil.safeToInt(years);\n\n    var _months = MathUtil.safeToInt(months);\n\n    var _days = MathUtil.safeToInt(days);\n\n    if (_years === 0 && _months === 0 && _days === 0) {\n      if (!Period.ZERO) {\n        _this._years = _years;\n        _this._months = _months;\n        _this._days = _days;\n        Period.ZERO = _assertThisInitialized(_this);\n      }\n\n      return Period.ZERO || _assertThisInitialized(_this);\n    }\n\n    _this._years = _years;\n    _this._months = _months;\n    _this._days = _days;\n    return _this;\n  }\n\n  Period.ofYears = function ofYears(years) {\n    return Period.create(years, 0, 0);\n  };\n\n  Period.ofMonths = function ofMonths(months) {\n    return Period.create(0, months, 0);\n  };\n\n  Period.ofWeeks = function ofWeeks(weeks) {\n    return Period.create(0, 0, MathUtil.safeMultiply(weeks, 7));\n  };\n\n  Period.ofDays = function ofDays(days) {\n    return Period.create(0, 0, days);\n  };\n\n  Period.of = function of(years, months, days) {\n    return Period.create(years, months, days);\n  };\n\n  Period.from = function from(amount) {\n    if (amount instanceof Period) {\n      return amount;\n    }\n\n    requireNonNull(amount, 'amount');\n    var years = 0;\n    var months = 0;\n    var days = 0;\n    var units = amount.units();\n\n    for (var i = 0; i < units.length; i++) {\n      var unit = units[i];\n      var unitAmount = amount.get(unit);\n\n      if (unit === ChronoUnit.YEARS) {\n        years = MathUtil.safeToInt(unitAmount);\n      } else if (unit === ChronoUnit.MONTHS) {\n        months = MathUtil.safeToInt(unitAmount);\n      } else if (unit === ChronoUnit.DAYS) {\n        days = MathUtil.safeToInt(unitAmount);\n      } else {\n        throw new DateTimeException('Unit must be Years, Months or Days, but was ' + unit);\n      }\n    }\n\n    return Period.create(years, months, days);\n  };\n\n  Period.between = function between(startDate, endDate) {\n    requireNonNull(startDate, 'startDate');\n    requireNonNull(endDate, 'endDate');\n    requireInstance(startDate, LocalDate, 'startDate');\n    requireInstance(endDate, LocalDate, 'endDate');\n    return startDate.until(endDate);\n  };\n\n  Period.parse = function parse(text) {\n    requireNonNull(text, 'text');\n\n    try {\n      return Period._parse(text);\n    } catch (ex) {\n      if (ex instanceof ArithmeticException) {\n        throw new DateTimeParseException('Text cannot be parsed to a Period', text, 0, ex);\n      } else {\n        throw ex;\n      }\n    }\n  };\n\n  Period._parse = function _parse(text) {\n    var matches = PATTERN.exec(text);\n\n    if (matches != null) {\n      var negate = '-' === matches[1] ? -1 : 1;\n      var yearMatch = matches[2];\n      var monthMatch = matches[3];\n      var weekMatch = matches[4];\n      var dayMatch = matches[5];\n\n      if (yearMatch != null || monthMatch != null || weekMatch != null || dayMatch != null) {\n        var years = Period._parseNumber(text, yearMatch, negate);\n\n        var months = Period._parseNumber(text, monthMatch, negate);\n\n        var weeks = Period._parseNumber(text, weekMatch, negate);\n\n        var days = Period._parseNumber(text, dayMatch, negate);\n\n        days = MathUtil.safeAdd(days, MathUtil.safeMultiply(weeks, 7));\n        return Period.create(years, months, days);\n      }\n    }\n\n    throw new DateTimeParseException('Text cannot be parsed to a Period', text, 0);\n  };\n\n  Period._parseNumber = function _parseNumber(text, str, negate) {\n    if (str == null) {\n      return 0;\n    }\n\n    var val = MathUtil.parseInt(str);\n    return MathUtil.safeMultiply(val, negate);\n  };\n\n  Period.create = function create(years, months, days) {\n    return new Period(years, months, days);\n  };\n\n  var _proto = Period.prototype;\n\n  _proto.units = function units() {\n    return [ChronoUnit.YEARS, ChronoUnit.MONTHS, ChronoUnit.DAYS];\n  };\n\n  _proto.chronology = function chronology() {\n    return IsoChronology.INSTANCE;\n  };\n\n  _proto.get = function get(unit) {\n    if (unit === ChronoUnit.YEARS) {\n      return this._years;\n    }\n\n    if (unit === ChronoUnit.MONTHS) {\n      return this._months;\n    }\n\n    if (unit === ChronoUnit.DAYS) {\n      return this._days;\n    }\n\n    throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n  };\n\n  _proto.isZero = function isZero() {\n    return this === Period.ZERO;\n  };\n\n  _proto.isNegative = function isNegative() {\n    return this._years < 0 || this._months < 0 || this._days < 0;\n  };\n\n  _proto.years = function years() {\n    return this._years;\n  };\n\n  _proto.months = function months() {\n    return this._months;\n  };\n\n  _proto.days = function days() {\n    return this._days;\n  };\n\n  _proto.withYears = function withYears(years) {\n    if (years === this._years) {\n      return this;\n    }\n\n    return Period.create(years, this._months, this._days);\n  };\n\n  _proto.withMonths = function withMonths(months) {\n    if (months === this._months) {\n      return this;\n    }\n\n    return Period.create(this._years, months, this._days);\n  };\n\n  _proto.withDays = function withDays(days) {\n    if (days === this._days) {\n      return this;\n    }\n\n    return Period.create(this._years, this._months, days);\n  };\n\n  _proto.plus = function plus(amountToAdd) {\n    var amount = Period.from(amountToAdd);\n    return Period.create(MathUtil.safeAdd(this._years, amount._years), MathUtil.safeAdd(this._months, amount._months), MathUtil.safeAdd(this._days, amount._days));\n  };\n\n  _proto.plusYears = function plusYears(yearsToAdd) {\n    if (yearsToAdd === 0) {\n      return this;\n    }\n\n    return Period.create(MathUtil.safeToInt(MathUtil.safeAdd(this._years, yearsToAdd)), this._months, this._days);\n  };\n\n  _proto.plusMonths = function plusMonths(monthsToAdd) {\n    if (monthsToAdd === 0) {\n      return this;\n    }\n\n    return Period.create(this._years, MathUtil.safeToInt(MathUtil.safeAdd(this._months, monthsToAdd)), this._days);\n  };\n\n  _proto.plusDays = function plusDays(daysToAdd) {\n    if (daysToAdd === 0) {\n      return this;\n    }\n\n    return Period.create(this._years, this._months, MathUtil.safeToInt(MathUtil.safeAdd(this._days, daysToAdd)));\n  };\n\n  _proto.minus = function minus(amountToSubtract) {\n    var amount = Period.from(amountToSubtract);\n    return Period.create(MathUtil.safeSubtract(this._years, amount._years), MathUtil.safeSubtract(this._months, amount._months), MathUtil.safeSubtract(this._days, amount._days));\n  };\n\n  _proto.minusYears = function minusYears(yearsToSubtract) {\n    return this.plusYears(-1 * yearsToSubtract);\n  };\n\n  _proto.minusMonths = function minusMonths(monthsToSubtract) {\n    return this.plusMonths(-1 * monthsToSubtract);\n  };\n\n  _proto.minusDays = function minusDays(daysToSubtract) {\n    return this.plusDays(-1 * daysToSubtract);\n  };\n\n  _proto.multipliedBy = function multipliedBy(scalar) {\n    if (this === Period.ZERO || scalar === 1) {\n      return this;\n    }\n\n    return Period.create(MathUtil.safeMultiply(this._years, scalar), MathUtil.safeMultiply(this._months, scalar), MathUtil.safeMultiply(this._days, scalar));\n  };\n\n  _proto.negated = function negated() {\n    return this.multipliedBy(-1);\n  };\n\n  _proto.normalized = function normalized() {\n    var totalMonths = this.toTotalMonths();\n    var splitYears = MathUtil.intDiv(totalMonths, 12);\n    var splitMonths = MathUtil.intMod(totalMonths, 12);\n\n    if (splitYears === this._years && splitMonths === this._months) {\n      return this;\n    }\n\n    return Period.create(MathUtil.safeToInt(splitYears), splitMonths, this._days);\n  };\n\n  _proto.toTotalMonths = function toTotalMonths() {\n    return this._years * 12 + this._months;\n  };\n\n  _proto.addTo = function addTo(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (this._years !== 0) {\n      if (this._months !== 0) {\n        temporal = temporal.plus(this.toTotalMonths(), ChronoUnit.MONTHS);\n      } else {\n        temporal = temporal.plus(this._years, ChronoUnit.YEARS);\n      }\n    } else if (this._months !== 0) {\n      temporal = temporal.plus(this._months, ChronoUnit.MONTHS);\n    }\n\n    if (this._days !== 0) {\n      temporal = temporal.plus(this._days, ChronoUnit.DAYS);\n    }\n\n    return temporal;\n  };\n\n  _proto.subtractFrom = function subtractFrom(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (this._years !== 0) {\n      if (this._months !== 0) {\n        temporal = temporal.minus(this.toTotalMonths(), ChronoUnit.MONTHS);\n      } else {\n        temporal = temporal.minus(this._years, ChronoUnit.YEARS);\n      }\n    } else if (this._months !== 0) {\n      temporal = temporal.minus(this._months, ChronoUnit.MONTHS);\n    }\n\n    if (this._days !== 0) {\n      temporal = temporal.minus(this._days, ChronoUnit.DAYS);\n    }\n\n    return temporal;\n  };\n\n  _proto.equals = function equals(obj) {\n    if (this === obj) {\n      return true;\n    }\n\n    if (obj instanceof Period) {\n      var other = obj;\n      return this._years === other._years && this._months === other._months && this._days === other._days;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return MathUtil.hashCode(this._years, this._months, this._days);\n  };\n\n  _proto.toString = function toString() {\n    if (this === Period.ZERO) {\n      return 'P0D';\n    } else {\n      var buf = 'P';\n\n      if (this._years !== 0) {\n        buf += '' + this._years + 'Y';\n      }\n\n      if (this._months !== 0) {\n        buf += '' + this._months + 'M';\n      }\n\n      if (this._days !== 0) {\n        buf += '' + this._days + 'D';\n      }\n\n      return buf;\n    }\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return Period;\n}(TemporalAmount);\nfunction _init$6() {\n  Period.ofDays(0);\n}\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ParsePosition = function () {\n  function ParsePosition(index) {\n    this._index = index;\n    this._errorIndex = -1;\n  }\n\n  var _proto = ParsePosition.prototype;\n\n  _proto.getIndex = function getIndex() {\n    return this._index;\n  };\n\n  _proto.setIndex = function setIndex(index) {\n    this._index = index;\n  };\n\n  _proto.getErrorIndex = function getErrorIndex() {\n    return this._errorIndex;\n  };\n\n  _proto.setErrorIndex = function setErrorIndex(errorIndex) {\n    this._errorIndex = errorIndex;\n  };\n\n  return ParsePosition;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar EnumMap = function () {\n  function EnumMap() {\n    this._map = {};\n  }\n\n  var _proto = EnumMap.prototype;\n\n  _proto.putAll = function putAll(otherMap) {\n    for (var key in otherMap._map) {\n      this._map[key] = otherMap._map[key];\n    }\n\n    return this;\n  };\n\n  _proto.containsKey = function containsKey(key) {\n    return this._map.hasOwnProperty(key.name()) && this.get(key) !== undefined;\n  };\n\n  _proto.get = function get(key) {\n    return this._map[key.name()];\n  };\n\n  _proto.put = function put(key, val) {\n    return this.set(key, val);\n  };\n\n  _proto.set = function set(key, val) {\n    this._map[key.name()] = val;\n    return this;\n  };\n\n  _proto.retainAll = function retainAll(keyList) {\n    var map = {};\n\n    for (var i = 0; i < keyList.length; i++) {\n      var key = keyList[i].name();\n      map[key] = this._map[key];\n    }\n\n    this._map = map;\n    return this;\n  };\n\n  _proto.remove = function remove(key) {\n    var keyName = key.name();\n    var val = this._map[keyName];\n    this._map[keyName] = undefined;\n    return val;\n  };\n\n  _proto.keySet = function keySet() {\n    return this._map;\n  };\n\n  _proto.clear = function clear() {\n    this._map = {};\n  };\n\n  return EnumMap;\n}();\n\nvar ResolverStyle = function (_Enum) {\n  _inheritsLoose(ResolverStyle, _Enum);\n\n  function ResolverStyle() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  return ResolverStyle;\n}(Enum);\nResolverStyle.STRICT = new ResolverStyle('STRICT');\nResolverStyle.SMART = new ResolverStyle('SMART');\nResolverStyle.LENIENT = new ResolverStyle('LENIENT');\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar TemporalAdjuster = function () {\n  function TemporalAdjuster() {}\n\n  var _proto = TemporalAdjuster.prototype;\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    abstractMethodFail('adjustInto');\n  };\n\n  return TemporalAdjuster;\n}();\n\nvar Temporal = function (_TemporalAccessor) {\n  _inheritsLoose(Temporal, _TemporalAccessor);\n\n  function Temporal() {\n    return _TemporalAccessor.apply(this, arguments) || this;\n  }\n\n  var _proto = Temporal.prototype;\n\n  _proto.isSupported = function isSupported(unit) {\n    abstractMethodFail('isSupported');\n  };\n\n  _proto.minus = function minus(p1, p2) {\n    if (arguments.length < 2) {\n      return this.minusAmount(p1);\n    } else {\n      return this.minusAmountUnit(p1, p2);\n    }\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    abstractMethodFail('minusAmount');\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    abstractMethodFail('minusAmountUnit');\n  };\n\n  _proto.plus = function plus(p1, p2) {\n    if (arguments.length < 2) {\n      return this.plusAmount(p1);\n    } else {\n      return this.plusAmountUnit(p1, p2);\n    }\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    abstractMethodFail('plusAmount');\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    abstractMethodFail('plusAmountUnit');\n  };\n\n  _proto.until = function until(endTemporal, unit) {\n    abstractMethodFail('until');\n  };\n\n  _proto.with = function _with(p1, p2) {\n    if (arguments.length < 2) {\n      return this.withAdjuster(p1);\n    } else {\n      return this.withFieldValue(p1, p2);\n    }\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    abstractMethodFail('withAdjuster');\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    abstractMethodFail('withFieldValue');\n  };\n\n  return Temporal;\n}(TemporalAccessor);\n\nvar DefaultInterfaceTemporal = function (_Temporal) {\n  _inheritsLoose(DefaultInterfaceTemporal, _Temporal);\n\n  function DefaultInterfaceTemporal() {\n    return _Temporal.apply(this, arguments) || this;\n  }\n\n  var _proto = DefaultInterfaceTemporal.prototype;\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n    requireInstance(adjuster, TemporalAdjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(amountToSubtract, 'amountToSubtract');\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit, 'unit');\n    return amountToSubtract === MIN_SAFE_INTEGER ? this.plusAmountUnit(MAX_SAFE_INTEGER, unit).plusAmountUnit(1, unit) : this.plusAmount(-amountToSubtract, unit);\n  };\n\n  return DefaultInterfaceTemporal;\n}(Temporal);\n\nvar ChronoLocalDate = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(ChronoLocalDate, _DefaultInterfaceTemp);\n\n  function ChronoLocalDate() {\n    return _DefaultInterfaceTemp.apply(this, arguments) || this;\n  }\n\n  var _proto = ChronoLocalDate.prototype;\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isDateBased();\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isDateBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.chronology()) {\n      return this.chronology();\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.DAYS;\n    } else if (_query === TemporalQueries.localDate()) {\n      return LocalDate.ofEpochDay(this.toEpochDay());\n    } else if (_query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.EPOCH_DAY, this.toEpochDay());\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return ChronoLocalDate;\n}(DefaultInterfaceTemporal);\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar StringUtil = function () {\n  function StringUtil() {}\n\n  StringUtil.startsWith = function startsWith(text, pattern) {\n    return text.indexOf(pattern) === 0;\n  };\n\n  StringUtil.hashCode = function hashCode(text) {\n    var len = text.length;\n\n    if (len === 0) {\n      return 0;\n    }\n\n    var hash = 0;\n\n    for (var i = 0; i < len; i++) {\n      var chr = text.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0;\n    }\n\n    return MathUtil.smi(hash);\n  };\n\n  return StringUtil;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneId = function () {\n  function ZoneId() {}\n\n  ZoneId.systemDefault = function systemDefault() {\n    throw new DateTimeException('not supported operation');\n  };\n\n  ZoneId.getAvailableZoneIds = function getAvailableZoneIds() {\n    throw new DateTimeException('not supported operation');\n  };\n\n  ZoneId.of = function of(zoneId) {\n    throw new DateTimeException('not supported operation' + zoneId);\n  };\n\n  ZoneId.ofOffset = function ofOffset(prefix, offset) {\n    throw new DateTimeException('not supported operation' + prefix + offset);\n  };\n\n  ZoneId.from = function from(temporal) {\n    throw new DateTimeException('not supported operation' + temporal);\n  };\n\n  var _proto = ZoneId.prototype;\n\n  _proto.id = function id() {\n    abstractMethodFail('ZoneId.id');\n  };\n\n  _proto.rules = function rules() {\n    abstractMethodFail('ZoneId.rules');\n  };\n\n  _proto.normalized = function normalized() {\n    var rules = this.rules();\n\n    if (rules.isFixedOffset()) {\n      return rules.offset(Instant.EPOCH);\n    }\n\n    return this;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ZoneId) {\n      return this.id() === other.id();\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return StringUtil.hashCode(this.id());\n  };\n\n  _proto.toString = function toString() {\n    return this.id();\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return ZoneId;\n}();\n\nvar ZoneRules = function () {\n  function ZoneRules() {}\n\n  ZoneRules.of = function of(offset) {\n    requireNonNull(offset, 'offset');\n    return new Fixed(offset);\n  };\n\n  var _proto = ZoneRules.prototype;\n\n  _proto.isFixedOffset = function isFixedOffset() {\n    abstractMethodFail('ZoneRules.isFixedOffset');\n  };\n\n  _proto.offset = function offset(instantOrLocalDateTime) {\n    if (instantOrLocalDateTime instanceof Instant) {\n      return this.offsetOfInstant(instantOrLocalDateTime);\n    } else {\n      return this.offsetOfLocalDateTime(instantOrLocalDateTime);\n    }\n  };\n\n  _proto.offsetOfInstant = function offsetOfInstant(instant) {\n    abstractMethodFail('ZoneRules.offsetInstant');\n  };\n\n  _proto.offsetOfEpochMilli = function offsetOfEpochMilli(epochMilli) {\n    abstractMethodFail('ZoneRules.offsetOfEpochMilli');\n  };\n\n  _proto.offsetOfLocalDateTime = function offsetOfLocalDateTime(localDateTime) {\n    abstractMethodFail('ZoneRules.offsetLocalDateTime');\n  };\n\n  _proto.validOffsets = function validOffsets(localDateTime) {\n    abstractMethodFail('ZoneRules.validOffsets');\n  };\n\n  _proto.transition = function transition(localDateTime) {\n    abstractMethodFail('ZoneRules.transition');\n  };\n\n  _proto.standardOffset = function standardOffset(instant) {\n    abstractMethodFail('ZoneRules.standardOffset');\n  };\n\n  _proto.daylightSavings = function daylightSavings(instant) {\n    abstractMethodFail('ZoneRules.daylightSavings');\n  };\n\n  _proto.isDaylightSavings = function isDaylightSavings(instant) {\n    abstractMethodFail('ZoneRules.isDaylightSavings');\n  };\n\n  _proto.isValidOffset = function isValidOffset(localDateTime, offset) {\n    abstractMethodFail('ZoneRules.isValidOffset');\n  };\n\n  _proto.nextTransition = function nextTransition(instant) {\n    abstractMethodFail('ZoneRules.nextTransition');\n  };\n\n  _proto.previousTransition = function previousTransition(instant) {\n    abstractMethodFail('ZoneRules.previousTransition');\n  };\n\n  _proto.transitions = function transitions() {\n    abstractMethodFail('ZoneRules.transitions');\n  };\n\n  _proto.transitionRules = function transitionRules() {\n    abstractMethodFail('ZoneRules.transitionRules');\n  };\n\n  _proto.toString = function toString() {\n    abstractMethodFail('ZoneRules.toString');\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return ZoneRules;\n}();\n\nvar Fixed = function (_ZoneRules) {\n  _inheritsLoose(Fixed, _ZoneRules);\n\n  function Fixed(offset) {\n    var _this;\n\n    _this = _ZoneRules.call(this) || this;\n    _this._offset = offset;\n    return _this;\n  }\n\n  var _proto2 = Fixed.prototype;\n\n  _proto2.isFixedOffset = function isFixedOffset() {\n    return true;\n  };\n\n  _proto2.offsetOfInstant = function offsetOfInstant() {\n    return this._offset;\n  };\n\n  _proto2.offsetOfEpochMilli = function offsetOfEpochMilli() {\n    return this._offset;\n  };\n\n  _proto2.offsetOfLocalDateTime = function offsetOfLocalDateTime() {\n    return this._offset;\n  };\n\n  _proto2.validOffsets = function validOffsets() {\n    return [this._offset];\n  };\n\n  _proto2.transition = function transition() {\n    return null;\n  };\n\n  _proto2.standardOffset = function standardOffset() {\n    return this._offset;\n  };\n\n  _proto2.daylightSavings = function daylightSavings() {\n    return Duration.ZERO;\n  };\n\n  _proto2.isDaylightSavings = function isDaylightSavings() {\n    return false;\n  };\n\n  _proto2.isValidOffset = function isValidOffset(localDateTime, offset) {\n    return this._offset.equals(offset);\n  };\n\n  _proto2.nextTransition = function nextTransition() {\n    return null;\n  };\n\n  _proto2.previousTransition = function previousTransition() {\n    return null;\n  };\n\n  _proto2.transitions = function transitions() {\n    return [];\n  };\n\n  _proto2.transitionRules = function transitionRules() {\n    return [];\n  };\n\n  _proto2.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof Fixed) {\n      return this._offset.equals(other._offset);\n    }\n\n    return false;\n  };\n\n  _proto2.toString = function toString() {\n    return 'FixedRules:' + this._offset.toString();\n  };\n\n  return Fixed;\n}(ZoneRules);\n\nvar SECONDS_CACHE = {};\nvar ID_CACHE = {};\nvar ZoneOffset = function (_ZoneId) {\n  _inheritsLoose(ZoneOffset, _ZoneId);\n\n  function ZoneOffset(totalSeconds) {\n    var _this;\n\n    _this = _ZoneId.call(this) || this;\n\n    ZoneOffset._validateTotalSeconds(totalSeconds);\n\n    _this._totalSeconds = MathUtil.safeToInt(totalSeconds);\n    _this._rules = ZoneRules.of(_assertThisInitialized(_this));\n    _this._id = ZoneOffset._buildId(totalSeconds);\n    return _this;\n  }\n\n  var _proto = ZoneOffset.prototype;\n\n  _proto.totalSeconds = function totalSeconds() {\n    return this._totalSeconds;\n  };\n\n  _proto.id = function id() {\n    return this._id;\n  };\n\n  ZoneOffset._buildId = function _buildId(totalSeconds) {\n    if (totalSeconds === 0) {\n      return 'Z';\n    } else {\n      var absTotalSeconds = Math.abs(totalSeconds);\n      var absHours = MathUtil.intDiv(absTotalSeconds, LocalTime.SECONDS_PER_HOUR);\n      var absMinutes = MathUtil.intMod(MathUtil.intDiv(absTotalSeconds, LocalTime.SECONDS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n      var buf = '' + (totalSeconds < 0 ? '-' : '+') + (absHours < 10 ? '0' : '') + absHours + (absMinutes < 10 ? ':0' : ':') + absMinutes;\n      var absSeconds = MathUtil.intMod(absTotalSeconds, LocalTime.SECONDS_PER_MINUTE);\n\n      if (absSeconds !== 0) {\n        buf += (absSeconds < 10 ? ':0' : ':') + absSeconds;\n      }\n\n      return buf;\n    }\n  };\n\n  ZoneOffset._validateTotalSeconds = function _validateTotalSeconds(totalSeconds) {\n    if (Math.abs(totalSeconds) > ZoneOffset.MAX_SECONDS) {\n      throw new DateTimeException('Zone offset not in valid range: -18:00 to +18:00');\n    }\n  };\n\n  ZoneOffset._validate = function _validate(hours, minutes, seconds) {\n    if (hours < -18 || hours > 18) {\n      throw new DateTimeException('Zone offset hours not in valid range: value ' + hours + ' is not in the range -18 to 18');\n    }\n\n    if (hours > 0) {\n      if (minutes < 0 || seconds < 0) {\n        throw new DateTimeException('Zone offset minutes and seconds must be positive because hours is positive');\n      }\n    } else if (hours < 0) {\n      if (minutes > 0 || seconds > 0) {\n        throw new DateTimeException('Zone offset minutes and seconds must be negative because hours is negative');\n      }\n    } else if (minutes > 0 && seconds < 0 || minutes < 0 && seconds > 0) {\n      throw new DateTimeException('Zone offset minutes and seconds must have the same sign');\n    }\n\n    if (Math.abs(minutes) > 59) {\n      throw new DateTimeException('Zone offset minutes not in valid range: abs(value) ' + Math.abs(minutes) + ' is not in the range 0 to 59');\n    }\n\n    if (Math.abs(seconds) > 59) {\n      throw new DateTimeException('Zone offset seconds not in valid range: abs(value) ' + Math.abs(seconds) + ' is not in the range 0 to 59');\n    }\n\n    if (Math.abs(hours) === 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {\n      throw new DateTimeException('Zone offset not in valid range: -18:00 to +18:00');\n    }\n  };\n\n  ZoneOffset.of = function of(offsetId) {\n    requireNonNull(offsetId, 'offsetId');\n    var offset = ID_CACHE[offsetId];\n\n    if (offset != null) {\n      return offset;\n    }\n\n    var hours, minutes, seconds;\n\n    switch (offsetId.length) {\n      case 2:\n        offsetId = offsetId[0] + '0' + offsetId[1];\n\n      case 3:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = 0;\n        seconds = 0;\n        break;\n\n      case 5:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = ZoneOffset._parseNumber(offsetId, 3, false);\n        seconds = 0;\n        break;\n\n      case 6:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = ZoneOffset._parseNumber(offsetId, 4, true);\n        seconds = 0;\n        break;\n\n      case 7:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = ZoneOffset._parseNumber(offsetId, 3, false);\n        seconds = ZoneOffset._parseNumber(offsetId, 5, false);\n        break;\n\n      case 9:\n        hours = ZoneOffset._parseNumber(offsetId, 1, false);\n        minutes = ZoneOffset._parseNumber(offsetId, 4, true);\n        seconds = ZoneOffset._parseNumber(offsetId, 7, true);\n        break;\n\n      default:\n        throw new DateTimeException('Invalid ID for ZoneOffset, invalid format: ' + offsetId);\n    }\n\n    var first = offsetId[0];\n\n    if (first !== '+' && first !== '-') {\n      throw new DateTimeException('Invalid ID for ZoneOffset, plus/minus not found when expected: ' + offsetId);\n    }\n\n    if (first === '-') {\n      return ZoneOffset.ofHoursMinutesSeconds(-hours, -minutes, -seconds);\n    } else {\n      return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, seconds);\n    }\n  };\n\n  ZoneOffset._parseNumber = function _parseNumber(offsetId, pos, precededByColon) {\n    if (precededByColon && offsetId[pos - 1] !== ':') {\n      throw new DateTimeException('Invalid ID for ZoneOffset, colon not found when expected: ' + offsetId);\n    }\n\n    var ch1 = offsetId[pos];\n    var ch2 = offsetId[pos + 1];\n\n    if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {\n      throw new DateTimeException('Invalid ID for ZoneOffset, non numeric characters found: ' + offsetId);\n    }\n\n    return (ch1.charCodeAt(0) - 48) * 10 + (ch2.charCodeAt(0) - 48);\n  };\n\n  ZoneOffset.ofHours = function ofHours(hours) {\n    return ZoneOffset.ofHoursMinutesSeconds(hours, 0, 0);\n  };\n\n  ZoneOffset.ofHoursMinutes = function ofHoursMinutes(hours, minutes) {\n    return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, 0);\n  };\n\n  ZoneOffset.ofHoursMinutesSeconds = function ofHoursMinutesSeconds(hours, minutes, seconds) {\n    ZoneOffset._validate(hours, minutes, seconds);\n\n    var totalSeconds = hours * LocalTime.SECONDS_PER_HOUR + minutes * LocalTime.SECONDS_PER_MINUTE + seconds;\n    return ZoneOffset.ofTotalSeconds(totalSeconds);\n  };\n\n  ZoneOffset.ofTotalMinutes = function ofTotalMinutes(totalMinutes) {\n    var totalSeconds = totalMinutes * LocalTime.SECONDS_PER_MINUTE;\n    return ZoneOffset.ofTotalSeconds(totalSeconds);\n  };\n\n  ZoneOffset.ofTotalSeconds = function ofTotalSeconds(totalSeconds) {\n    if (totalSeconds % (15 * LocalTime.SECONDS_PER_MINUTE) === 0) {\n      var totalSecs = totalSeconds;\n      var result = SECONDS_CACHE[totalSecs];\n\n      if (result == null) {\n        result = new ZoneOffset(totalSeconds);\n        SECONDS_CACHE[totalSecs] = result;\n        ID_CACHE[result.id()] = result;\n      }\n\n      return result;\n    } else {\n      return new ZoneOffset(totalSeconds);\n    }\n  };\n\n  _proto.rules = function rules() {\n    return this._rules;\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field === ChronoField.OFFSET_SECONDS) {\n      return this._totalSeconds;\n    } else if (field instanceof ChronoField) {\n      throw new DateTimeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n      return this;\n    } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.precision() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.OFFSET_SECONDS, this._totalSeconds);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    return other._totalSeconds - this._totalSeconds;\n  };\n\n  _proto.equals = function equals(obj) {\n    if (this === obj) {\n      return true;\n    }\n\n    if (obj instanceof ZoneOffset) {\n      return this._totalSeconds === obj._totalSeconds;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._totalSeconds;\n  };\n\n  _proto.toString = function toString() {\n    return this._id;\n  };\n\n  return ZoneOffset;\n}(ZoneId);\nfunction _init$7() {\n  ZoneOffset.MAX_SECONDS = 18 * LocalTime.SECONDS_PER_HOUR;\n  ZoneOffset.UTC = ZoneOffset.ofTotalSeconds(0);\n  ZoneOffset.MIN = ZoneOffset.ofTotalSeconds(-ZoneOffset.MAX_SECONDS);\n  ZoneOffset.MAX = ZoneOffset.ofTotalSeconds(ZoneOffset.MAX_SECONDS);\n}\n\nvar DateTimeBuilder = function (_TemporalAccessor) {\n  _inheritsLoose(DateTimeBuilder, _TemporalAccessor);\n\n  DateTimeBuilder.create = function create(field, value) {\n    var dtb = new DateTimeBuilder();\n\n    dtb._addFieldValue(field, value);\n\n    return dtb;\n  };\n\n  function DateTimeBuilder() {\n    var _this;\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this.fieldValues = new EnumMap();\n    _this.chrono = null;\n    _this.zone = null;\n    _this.date = null;\n    _this.time = null;\n    _this.leapSecond = false;\n    _this.excessDays = null;\n    return _this;\n  }\n\n  var _proto = DateTimeBuilder.prototype;\n\n  _proto.getFieldValue0 = function getFieldValue0(field) {\n    return this.fieldValues.get(field);\n  };\n\n  _proto._addFieldValue = function _addFieldValue(field, value) {\n    requireNonNull(field, 'field');\n    var old = this.getFieldValue0(field);\n\n    if (old != null && old !== value) {\n      throw new DateTimeException('Conflict found: ' + field + ' ' + old + ' differs from ' + field + ' ' + value + ': ' + this);\n    }\n\n    return this._putFieldValue0(field, value);\n  };\n\n  _proto._putFieldValue0 = function _putFieldValue0(field, value) {\n    this.fieldValues.put(field, value);\n    return this;\n  };\n\n  _proto.resolve = function resolve(resolverStyle, resolverFields) {\n    if (resolverFields != null) {\n      this.fieldValues.retainAll(resolverFields);\n    }\n\n    this._mergeDate(resolverStyle);\n\n    this._mergeTime(resolverStyle);\n\n    this._resolveTimeInferZeroes(resolverStyle);\n\n    if (this.excessDays != null && this.excessDays.isZero() === false && this.date != null && this.time != null) {\n      this.date = this.date.plus(this.excessDays);\n      this.excessDays = Period.ZERO;\n    }\n\n    this._resolveInstant();\n\n    return this;\n  };\n\n  _proto._mergeDate = function _mergeDate(resolverStyle) {\n    this._checkDate(IsoChronology.INSTANCE.resolveDate(this.fieldValues, resolverStyle));\n  };\n\n  _proto._checkDate = function _checkDate(date) {\n    if (date != null) {\n      this._addObject(date);\n\n      for (var fieldName in this.fieldValues.keySet()) {\n        var field = ChronoField.byName(fieldName);\n\n        if (field) {\n          if (this.fieldValues.get(field) !== undefined) {\n            if (field.isDateBased()) {\n              var val1 = void 0;\n\n              try {\n                val1 = date.getLong(field);\n              } catch (ex) {\n                if (ex instanceof DateTimeException) {\n                  continue;\n                } else {\n                  throw ex;\n                }\n              }\n\n              var val2 = this.fieldValues.get(field);\n\n              if (val1 !== val2) {\n                throw new DateTimeException('Conflict found: Field ' + field + ' ' + val1 + ' differs from ' + field + ' ' + val2 + ' derived from ' + date);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  _proto._mergeTime = function _mergeTime(resolverStyle) {\n    if (this.fieldValues.containsKey(ChronoField.CLOCK_HOUR_OF_DAY)) {\n      var ch = this.fieldValues.remove(ChronoField.CLOCK_HOUR_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        if (resolverStyle === ResolverStyle.SMART && ch === 0) ; else {\n          ChronoField.CLOCK_HOUR_OF_DAY.checkValidValue(ch);\n        }\n      }\n\n      this._addFieldValue(ChronoField.HOUR_OF_DAY, ch === 24 ? 0 : ch);\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.CLOCK_HOUR_OF_AMPM)) {\n      var _ch = this.fieldValues.remove(ChronoField.CLOCK_HOUR_OF_AMPM);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        if (resolverStyle === ResolverStyle.SMART && _ch === 0) ; else {\n          ChronoField.CLOCK_HOUR_OF_AMPM.checkValidValue(_ch);\n        }\n      }\n\n      this._addFieldValue(ChronoField.HOUR_OF_AMPM, _ch === 12 ? 0 : _ch);\n    }\n\n    if (resolverStyle !== ResolverStyle.LENIENT) {\n      if (this.fieldValues.containsKey(ChronoField.AMPM_OF_DAY)) {\n        ChronoField.AMPM_OF_DAY.checkValidValue(this.fieldValues.get(ChronoField.AMPM_OF_DAY));\n      }\n\n      if (this.fieldValues.containsKey(ChronoField.HOUR_OF_AMPM)) {\n        ChronoField.HOUR_OF_AMPM.checkValidValue(this.fieldValues.get(ChronoField.HOUR_OF_AMPM));\n      }\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.AMPM_OF_DAY) && this.fieldValues.containsKey(ChronoField.HOUR_OF_AMPM)) {\n      var ap = this.fieldValues.remove(ChronoField.AMPM_OF_DAY);\n      var hap = this.fieldValues.remove(ChronoField.HOUR_OF_AMPM);\n\n      this._addFieldValue(ChronoField.HOUR_OF_DAY, ap * 12 + hap);\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.NANO_OF_DAY)) {\n      var nod = this.fieldValues.remove(ChronoField.NANO_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.NANO_OF_DAY.checkValidValue(nod);\n      }\n\n      this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(nod, 1000000000));\n\n      this._addFieldValue(ChronoField.NANO_OF_SECOND, MathUtil.intMod(nod, 1000000000));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MICRO_OF_DAY)) {\n      var cod = this.fieldValues.remove(ChronoField.MICRO_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.MICRO_OF_DAY.checkValidValue(cod);\n      }\n\n      this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(cod, 1000000));\n\n      this._addFieldValue(ChronoField.MICRO_OF_SECOND, MathUtil.intMod(cod, 1000000));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MILLI_OF_DAY)) {\n      var lod = this.fieldValues.remove(ChronoField.MILLI_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.MILLI_OF_DAY.checkValidValue(lod);\n      }\n\n      this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(lod, 1000));\n\n      this._addFieldValue(ChronoField.MILLI_OF_SECOND, MathUtil.intMod(lod, 1000));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.SECOND_OF_DAY)) {\n      var sod = this.fieldValues.remove(ChronoField.SECOND_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.SECOND_OF_DAY.checkValidValue(sod);\n      }\n\n      this._addFieldValue(ChronoField.HOUR_OF_DAY, MathUtil.intDiv(sod, 3600));\n\n      this._addFieldValue(ChronoField.MINUTE_OF_HOUR, MathUtil.intMod(MathUtil.intDiv(sod, 60), 60));\n\n      this._addFieldValue(ChronoField.SECOND_OF_MINUTE, MathUtil.intMod(sod, 60));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MINUTE_OF_DAY)) {\n      var mod = this.fieldValues.remove(ChronoField.MINUTE_OF_DAY);\n\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.MINUTE_OF_DAY.checkValidValue(mod);\n      }\n\n      this._addFieldValue(ChronoField.HOUR_OF_DAY, MathUtil.intDiv(mod, 60));\n\n      this._addFieldValue(ChronoField.MINUTE_OF_HOUR, MathUtil.intMod(mod, 60));\n    }\n\n    if (resolverStyle !== ResolverStyle.LENIENT) {\n      if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND)) {\n        ChronoField.MILLI_OF_SECOND.checkValidValue(this.fieldValues.get(ChronoField.MILLI_OF_SECOND));\n      }\n\n      if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n        ChronoField.MICRO_OF_SECOND.checkValidValue(this.fieldValues.get(ChronoField.MICRO_OF_SECOND));\n      }\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND) && this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n      var los = this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n      var cos = this.fieldValues.get(ChronoField.MICRO_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.MICRO_OF_SECOND, los * 1000 + MathUtil.intMod(cos, 1000));\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND) && this.fieldValues.containsKey(ChronoField.NANO_OF_SECOND)) {\n      var nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.MICRO_OF_SECOND, MathUtil.intDiv(nos, 1000));\n\n      this.fieldValues.remove(ChronoField.MICRO_OF_SECOND);\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND) && this.fieldValues.containsKey(ChronoField.NANO_OF_SECOND)) {\n      var _nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.MILLI_OF_SECOND, MathUtil.intDiv(_nos, 1000000));\n\n      this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n    }\n\n    if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n      var _cos = this.fieldValues.remove(ChronoField.MICRO_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.NANO_OF_SECOND, _cos * 1000);\n    } else if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND)) {\n      var _los = this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n\n      this._putFieldValue0(ChronoField.NANO_OF_SECOND, _los * 1000000);\n    }\n  };\n\n  _proto._resolveTimeInferZeroes = function _resolveTimeInferZeroes(resolverStyle) {\n    var hod = this.fieldValues.get(ChronoField.HOUR_OF_DAY);\n    var moh = this.fieldValues.get(ChronoField.MINUTE_OF_HOUR);\n    var som = this.fieldValues.get(ChronoField.SECOND_OF_MINUTE);\n    var nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n\n    if (hod == null) {\n      return;\n    }\n\n    if (moh == null && (som != null || nos != null)) {\n      return;\n    }\n\n    if (moh != null && som == null && nos != null) {\n      return;\n    }\n\n    if (resolverStyle !== ResolverStyle.LENIENT) {\n      if (hod != null) {\n        if (resolverStyle === ResolverStyle.SMART && hod === 24 && (moh == null || moh === 0) && (som == null || som === 0) && (nos == null || nos === 0)) {\n          hod = 0;\n          this.excessDays = Period.ofDays(1);\n        }\n\n        var hodVal = ChronoField.HOUR_OF_DAY.checkValidIntValue(hod);\n\n        if (moh != null) {\n          var mohVal = ChronoField.MINUTE_OF_HOUR.checkValidIntValue(moh);\n\n          if (som != null) {\n            var somVal = ChronoField.SECOND_OF_MINUTE.checkValidIntValue(som);\n\n            if (nos != null) {\n              var nosVal = ChronoField.NANO_OF_SECOND.checkValidIntValue(nos);\n\n              this._addObject(LocalTime.of(hodVal, mohVal, somVal, nosVal));\n            } else {\n              this._addObject(LocalTime.of(hodVal, mohVal, somVal));\n            }\n          } else {\n            if (nos == null) {\n              this._addObject(LocalTime.of(hodVal, mohVal));\n            }\n          }\n        } else {\n          if (som == null && nos == null) {\n            this._addObject(LocalTime.of(hodVal, 0));\n          }\n        }\n      }\n    } else {\n      if (hod != null) {\n        var _hodVal = hod;\n\n        if (moh != null) {\n          if (som != null) {\n            if (nos == null) {\n              nos = 0;\n            }\n\n            var totalNanos = MathUtil.safeMultiply(_hodVal, 3600000000000);\n            totalNanos = MathUtil.safeAdd(totalNanos, MathUtil.safeMultiply(moh, 60000000000));\n            totalNanos = MathUtil.safeAdd(totalNanos, MathUtil.safeMultiply(som, 1000000000));\n            totalNanos = MathUtil.safeAdd(totalNanos, nos);\n            var excessDays = MathUtil.floorDiv(totalNanos, 86400000000000);\n            var nod = MathUtil.floorMod(totalNanos, 86400000000000);\n\n            this._addObject(LocalTime.ofNanoOfDay(nod));\n\n            this.excessDays = Period.ofDays(excessDays);\n          } else {\n            var totalSecs = MathUtil.safeMultiply(_hodVal, 3600);\n            totalSecs = MathUtil.safeAdd(totalSecs, MathUtil.safeMultiply(moh, 60));\n\n            var _excessDays = MathUtil.floorDiv(totalSecs, 86400);\n\n            var sod = MathUtil.floorMod(totalSecs, 86400);\n\n            this._addObject(LocalTime.ofSecondOfDay(sod));\n\n            this.excessDays = Period.ofDays(_excessDays);\n          }\n        } else {\n          var _excessDays2 = MathUtil.safeToInt(MathUtil.floorDiv(_hodVal, 24));\n\n          _hodVal = MathUtil.floorMod(_hodVal, 24);\n\n          this._addObject(LocalTime.of(_hodVal, 0));\n\n          this.excessDays = Period.ofDays(_excessDays2);\n        }\n      }\n    }\n\n    this.fieldValues.remove(ChronoField.HOUR_OF_DAY);\n    this.fieldValues.remove(ChronoField.MINUTE_OF_HOUR);\n    this.fieldValues.remove(ChronoField.SECOND_OF_MINUTE);\n    this.fieldValues.remove(ChronoField.NANO_OF_SECOND);\n  };\n\n  _proto._addObject = function _addObject(dateOrTime) {\n    if (dateOrTime instanceof ChronoLocalDate) {\n      this.date = dateOrTime;\n    } else if (dateOrTime instanceof LocalTime) {\n      this.time = dateOrTime;\n    }\n  };\n\n  _proto._resolveInstant = function _resolveInstant() {\n    if (this.date != null && this.time != null) {\n      var offsetSecs = this.fieldValues.get(ChronoField.OFFSET_SECONDS);\n\n      if (offsetSecs != null) {\n        var offset = ZoneOffset.ofTotalSeconds(offsetSecs);\n        var instant = this.date.atTime(this.time).atZone(offset).getLong(ChronoField.INSTANT_SECONDS);\n        this.fieldValues.put(ChronoField.INSTANT_SECONDS, instant);\n      } else if (this.zone != null) {\n        var _instant = this.date.atTime(this.time).atZone(this.zone).getLong(ChronoField.INSTANT_SECONDS);\n\n        this.fieldValues.put(ChronoField.INSTANT_SECONDS, _instant);\n      }\n    }\n  };\n\n  _proto.build = function build(type) {\n    return type.queryFrom(this);\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    if (field == null) {\n      return false;\n    }\n\n    return this.fieldValues.containsKey(field) && this.fieldValues.get(field) !== undefined || this.date != null && this.date.isSupported(field) || this.time != null && this.time.isSupported(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n    var value = this.getFieldValue0(field);\n\n    if (value == null) {\n      if (this.date != null && this.date.isSupported(field)) {\n        return this.date.getLong(field);\n      }\n\n      if (this.time != null && this.time.isSupported(field)) {\n        return this.time.getLong(field);\n      }\n\n      throw new DateTimeException('Field not found: ' + field);\n    }\n\n    return value;\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.zoneId()) {\n      return this.zone;\n    } else if (_query === TemporalQueries.chronology()) {\n      return this.chrono;\n    } else if (_query === TemporalQueries.localDate()) {\n      return this.date != null ? LocalDate.from(this.date) : null;\n    } else if (_query === TemporalQueries.localTime()) {\n      return this.time;\n    } else if (_query === TemporalQueries.zone() || _query === TemporalQueries.offset()) {\n      return _query.queryFrom(this);\n    } else if (_query === TemporalQueries.precision()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  return DateTimeBuilder;\n}(TemporalAccessor);\n\nvar DateTimeParseContext = function () {\n  function DateTimeParseContext() {\n    if (arguments.length === 1) {\n      if (arguments[0] instanceof DateTimeParseContext) {\n        this._constructorSelf.apply(this, arguments);\n\n        return;\n      } else {\n        this._constructorFormatter.apply(this, arguments);\n      }\n    } else {\n      this._constructorParam.apply(this, arguments);\n    }\n\n    this._caseSensitive = true;\n    this._strict = true;\n    this._parsed = [new Parsed(this)];\n  }\n\n  var _proto = DateTimeParseContext.prototype;\n\n  _proto._constructorParam = function _constructorParam(locale, symbols, chronology) {\n    this._locale = locale;\n    this._symbols = symbols;\n    this._overrideChronology = chronology;\n  };\n\n  _proto._constructorFormatter = function _constructorFormatter(formatter) {\n    this._locale = formatter.locale();\n    this._symbols = formatter.decimalStyle();\n    this._overrideChronology = formatter.chronology();\n  };\n\n  _proto._constructorSelf = function _constructorSelf(other) {\n    this._locale = other._locale;\n    this._symbols = other._symbols;\n    this._overrideChronology = other._overrideChronology;\n    this._overrideZone = other._overrideZone;\n    this._caseSensitive = other._caseSensitive;\n    this._strict = other._strict;\n    this._parsed = [new Parsed(this)];\n  };\n\n  _proto.copy = function copy() {\n    return new DateTimeParseContext(this);\n  };\n\n  _proto.symbols = function symbols() {\n    return this._symbols;\n  };\n\n  _proto.isStrict = function isStrict() {\n    return this._strict;\n  };\n\n  _proto.setStrict = function setStrict(strict) {\n    this._strict = strict;\n  };\n\n  _proto.locale = function locale() {\n    return this._locale;\n  };\n\n  _proto.setLocale = function setLocale(locale) {\n    this._locale = locale;\n  };\n\n  _proto.startOptional = function startOptional() {\n    this._parsed.push(this.currentParsed().copy());\n  };\n\n  _proto.endOptional = function endOptional(successful) {\n    if (successful) {\n      this._parsed.splice(this._parsed.length - 2, 1);\n    } else {\n      this._parsed.splice(this._parsed.length - 1, 1);\n    }\n  };\n\n  _proto.isCaseSensitive = function isCaseSensitive() {\n    return this._caseSensitive;\n  };\n\n  _proto.setCaseSensitive = function setCaseSensitive(caseSensitive) {\n    this._caseSensitive = caseSensitive;\n  };\n\n  _proto.subSequenceEquals = function subSequenceEquals(cs1, offset1, cs2, offset2, length) {\n    if (offset1 + length > cs1.length || offset2 + length > cs2.length) {\n      return false;\n    }\n\n    if (!this.isCaseSensitive()) {\n      cs1 = cs1.toLowerCase();\n      cs2 = cs2.toLowerCase();\n    }\n\n    for (var i = 0; i < length; i++) {\n      var ch1 = cs1[offset1 + i];\n      var ch2 = cs2[offset2 + i];\n\n      if (ch1 !== ch2) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  _proto.charEquals = function charEquals(ch1, ch2) {\n    if (this.isCaseSensitive()) {\n      return ch1 === ch2;\n    }\n\n    return this.charEqualsIgnoreCase(ch1, ch2);\n  };\n\n  _proto.charEqualsIgnoreCase = function charEqualsIgnoreCase(c1, c2) {\n    return c1 === c2 || c1.toLowerCase() === c2.toLowerCase();\n  };\n\n  _proto.setParsedField = function setParsedField(field, value, errorPos, successPos) {\n    var currentParsedFieldValues = this.currentParsed().fieldValues;\n    var old = currentParsedFieldValues.get(field);\n    currentParsedFieldValues.set(field, value);\n    return old != null && old !== value ? ~errorPos : successPos;\n  };\n\n  _proto.setParsedZone = function setParsedZone(zone) {\n    requireNonNull(zone, 'zone');\n    this.currentParsed().zone = zone;\n  };\n\n  _proto.getParsed = function getParsed(field) {\n    return this.currentParsed().fieldValues.get(field);\n  };\n\n  _proto.toParsed = function toParsed() {\n    return this.currentParsed();\n  };\n\n  _proto.currentParsed = function currentParsed() {\n    return this._parsed[this._parsed.length - 1];\n  };\n\n  _proto.setParsedLeapSecond = function setParsedLeapSecond() {\n    this.currentParsed().leapSecond = true;\n  };\n\n  _proto.getEffectiveChronology = function getEffectiveChronology() {\n    var chrono = this.currentParsed().chrono;\n\n    if (chrono == null) {\n      chrono = this._overrideChronology;\n\n      if (chrono == null) {\n        chrono = IsoChronology.INSTANCE;\n      }\n    }\n\n    return chrono;\n  };\n\n  return DateTimeParseContext;\n}();\n\nvar Parsed = function (_Temporal) {\n  _inheritsLoose(Parsed, _Temporal);\n\n  function Parsed(dateTimeParseContext) {\n    var _this;\n\n    _this = _Temporal.call(this) || this;\n    _this.chrono = null;\n    _this.zone = null;\n    _this.fieldValues = new EnumMap();\n    _this.leapSecond = false;\n    _this.dateTimeParseContext = dateTimeParseContext;\n    return _this;\n  }\n\n  var _proto2 = Parsed.prototype;\n\n  _proto2.copy = function copy() {\n    var cloned = new Parsed();\n    cloned.chrono = this.chrono;\n    cloned.zone = this.zone;\n    cloned.fieldValues.putAll(this.fieldValues);\n    cloned.leapSecond = this.leapSecond;\n    cloned.dateTimeParseContext = this.dateTimeParseContext;\n    return cloned;\n  };\n\n  _proto2.toString = function toString() {\n    return this.fieldValues + \", \" + this.chrono + \", \" + this.zone;\n  };\n\n  _proto2.isSupported = function isSupported(field) {\n    return this.fieldValues.containsKey(field);\n  };\n\n  _proto2.get = function get(field) {\n    var val = this.fieldValues.get(field);\n    assert(val != null);\n    return val;\n  };\n\n  _proto2.query = function query(_query) {\n    if (_query === TemporalQueries.chronology()) {\n      return this.chrono;\n    }\n\n    if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.zone()) {\n      return this.zone;\n    }\n\n    return _Temporal.prototype.query.call(this, _query);\n  };\n\n  _proto2.toBuilder = function toBuilder() {\n    var builder = new DateTimeBuilder();\n    builder.fieldValues.putAll(this.fieldValues);\n    builder.chrono = this.dateTimeParseContext.getEffectiveChronology();\n\n    if (this.zone != null) {\n      builder.zone = this.zone;\n    } else {\n      builder.zone = this.overrideZone;\n    }\n\n    builder.leapSecond = this.leapSecond;\n    builder.excessDays = this.excessDays;\n    return builder;\n  };\n\n  return Parsed;\n}(Temporal);\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar DateTimePrintContext = function () {\n  function DateTimePrintContext(temporal, localeOrFormatter, symbols) {\n    if (arguments.length === 2 && arguments[1] instanceof DateTimeFormatter) {\n      this._temporal = DateTimePrintContext.adjust(temporal, localeOrFormatter);\n      this._locale = localeOrFormatter.locale();\n      this._symbols = localeOrFormatter.decimalStyle();\n    } else {\n      this._temporal = temporal;\n      this._locale = localeOrFormatter;\n      this._symbols = symbols;\n    }\n\n    this._optional = 0;\n  }\n\n  DateTimePrintContext.adjust = function adjust(temporal, formatter) {\n    return temporal;\n  };\n\n  var _proto = DateTimePrintContext.prototype;\n\n  _proto.symbols = function symbols() {\n    return this._symbols;\n  };\n\n  _proto.startOptional = function startOptional() {\n    this._optional++;\n  };\n\n  _proto.endOptional = function endOptional() {\n    this._optional--;\n  };\n\n  _proto.getValueQuery = function getValueQuery(query) {\n    var result = this._temporal.query(query);\n\n    if (result == null && this._optional === 0) {\n      throw new DateTimeException('Unable to extract value: ' + this._temporal);\n    }\n\n    return result;\n  };\n\n  _proto.getValue = function getValue(field) {\n    try {\n      return this._temporal.getLong(field);\n    } catch (ex) {\n      if (ex instanceof DateTimeException && this._optional > 0) {\n        return null;\n      }\n\n      throw ex;\n    }\n  };\n\n  _proto.temporal = function temporal() {\n    return this._temporal;\n  };\n\n  _proto.locale = function locale() {\n    return this._locale;\n  };\n\n  _proto.setDateTime = function setDateTime(temporal) {\n    this._temporal = temporal;\n  };\n\n  _proto.setLocale = function setLocale(locale) {\n    this._locale = locale;\n  };\n\n  return DateTimePrintContext;\n}();\n\nvar IsoFields = {};\nvar QUARTER_DAYS = [0, 90, 181, 273, 0, 91, 182, 274];\n\nvar Field = function (_TemporalField) {\n  _inheritsLoose(Field, _TemporalField);\n\n  function Field() {\n    return _TemporalField.apply(this, arguments) || this;\n  }\n\n  var _proto = Field.prototype;\n\n  _proto.isDateBased = function isDateBased() {\n    return true;\n  };\n\n  _proto.isTimeBased = function isTimeBased() {\n    return false;\n  };\n\n  _proto._isIso = function _isIso() {\n    return true;\n  };\n\n  Field._getWeekRangeByLocalDate = function _getWeekRangeByLocalDate(date) {\n    var wby = Field._getWeekBasedYear(date);\n\n    return ValueRange.of(1, Field._getWeekRangeByYear(wby));\n  };\n\n  Field._getWeekRangeByYear = function _getWeekRangeByYear(wby) {\n    var date = LocalDate.of(wby, 1, 1);\n\n    if (date.dayOfWeek() === DayOfWeek.THURSDAY || date.dayOfWeek() === DayOfWeek.WEDNESDAY && date.isLeapYear()) {\n      return 53;\n    }\n\n    return 52;\n  };\n\n  Field._getWeek = function _getWeek(date) {\n    var dow0 = date.dayOfWeek().ordinal();\n    var doy0 = date.dayOfYear() - 1;\n    var doyThu0 = doy0 + (3 - dow0);\n    var alignedWeek = MathUtil.intDiv(doyThu0, 7);\n    var firstThuDoy0 = doyThu0 - alignedWeek * 7;\n    var firstMonDoy0 = firstThuDoy0 - 3;\n\n    if (firstMonDoy0 < -3) {\n      firstMonDoy0 += 7;\n    }\n\n    if (doy0 < firstMonDoy0) {\n      return Field._getWeekRangeByLocalDate(date.withDayOfYear(180).minusYears(1)).maximum();\n    }\n\n    var week = MathUtil.intDiv(doy0 - firstMonDoy0, 7) + 1;\n\n    if (week === 53) {\n      if ((firstMonDoy0 === -3 || firstMonDoy0 === -2 && date.isLeapYear()) === false) {\n        week = 1;\n      }\n    }\n\n    return week;\n  };\n\n  Field._getWeekBasedYear = function _getWeekBasedYear(date) {\n    var year = date.year();\n    var doy = date.dayOfYear();\n\n    if (doy <= 3) {\n      var dow = date.dayOfWeek().ordinal();\n\n      if (doy - dow < -2) {\n        year--;\n      }\n    } else if (doy >= 363) {\n      var _dow = date.dayOfWeek().ordinal();\n\n      doy = doy - 363 - (date.isLeapYear() ? 1 : 0);\n\n      if (doy - _dow >= 0) {\n        year++;\n      }\n    }\n\n    return year;\n  };\n\n  _proto.displayName = function displayName() {\n    return this.toString();\n  };\n\n  _proto.resolve = function resolve() {\n    return null;\n  };\n\n  _proto.name = function name() {\n    return this.toString();\n  };\n\n  return Field;\n}(TemporalField);\n\nvar DAY_OF_QUARTER_FIELD = function (_Field) {\n  _inheritsLoose(DAY_OF_QUARTER_FIELD, _Field);\n\n  function DAY_OF_QUARTER_FIELD() {\n    return _Field.apply(this, arguments) || this;\n  }\n\n  var _proto2 = DAY_OF_QUARTER_FIELD.prototype;\n\n  _proto2.toString = function toString() {\n    return 'DayOfQuarter';\n  };\n\n  _proto2.baseUnit = function baseUnit() {\n    return ChronoUnit.DAYS;\n  };\n\n  _proto2.rangeUnit = function rangeUnit() {\n    return QUARTER_YEARS;\n  };\n\n  _proto2.range = function range() {\n    return ValueRange.of(1, 90, 92);\n  };\n\n  _proto2.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.DAY_OF_YEAR) && temporal.isSupported(ChronoField.MONTH_OF_YEAR) && temporal.isSupported(ChronoField.YEAR) && this._isIso(temporal);\n  };\n\n  _proto2.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: DayOfQuarter');\n    }\n\n    var qoy = temporal.getLong(QUARTER_OF_YEAR);\n\n    if (qoy === 1) {\n      var year = temporal.getLong(ChronoField.YEAR);\n      return IsoChronology.isLeapYear(year) ? ValueRange.of(1, 91) : ValueRange.of(1, 90);\n    } else if (qoy === 2) {\n      return ValueRange.of(1, 91);\n    } else if (qoy === 3 || qoy === 4) {\n      return ValueRange.of(1, 92);\n    }\n\n    return this.range();\n  };\n\n  _proto2.getFrom = function getFrom(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: DayOfQuarter');\n    }\n\n    var doy = temporal.get(ChronoField.DAY_OF_YEAR);\n    var moy = temporal.get(ChronoField.MONTH_OF_YEAR);\n    var year = temporal.getLong(ChronoField.YEAR);\n    return doy - QUARTER_DAYS[MathUtil.intDiv(moy - 1, 3) + (IsoChronology.isLeapYear(year) ? 4 : 0)];\n  };\n\n  _proto2.adjustInto = function adjustInto(temporal, newValue) {\n    var curValue = this.getFrom(temporal);\n    this.range().checkValidValue(newValue, this);\n    return temporal.with(ChronoField.DAY_OF_YEAR, temporal.getLong(ChronoField.DAY_OF_YEAR) + (newValue - curValue));\n  };\n\n  _proto2.resolve = function resolve(fieldValues, partialTemporal, resolverStyle) {\n    var yearLong = fieldValues.get(ChronoField.YEAR);\n    var qoyLong = fieldValues.get(QUARTER_OF_YEAR);\n\n    if (yearLong == null || qoyLong == null) {\n      return null;\n    }\n\n    var y = ChronoField.YEAR.checkValidIntValue(yearLong);\n    var doq = fieldValues.get(DAY_OF_QUARTER);\n    var date;\n\n    if (resolverStyle === ResolverStyle.LENIENT) {\n      var qoy = qoyLong;\n      date = LocalDate.of(y, 1, 1);\n      date = date.plusMonths(MathUtil.safeMultiply(MathUtil.safeSubtract(qoy, 1), 3));\n      date = date.plusDays(MathUtil.safeSubtract(doq, 1));\n    } else {\n      var _qoy = QUARTER_OF_YEAR.range().checkValidIntValue(qoyLong, QUARTER_OF_YEAR);\n\n      if (resolverStyle === ResolverStyle.STRICT) {\n        var max = 92;\n\n        if (_qoy === 1) {\n          max = IsoChronology.isLeapYear(y) ? 91 : 90;\n        } else if (_qoy === 2) {\n          max = 91;\n        }\n\n        ValueRange.of(1, max).checkValidValue(doq, this);\n      } else {\n        this.range().checkValidValue(doq, this);\n      }\n\n      date = LocalDate.of(y, (_qoy - 1) * 3 + 1, 1).plusDays(doq - 1);\n    }\n\n    fieldValues.remove(this);\n    fieldValues.remove(ChronoField.YEAR);\n    fieldValues.remove(QUARTER_OF_YEAR);\n    return date;\n  };\n\n  return DAY_OF_QUARTER_FIELD;\n}(Field);\n\nvar QUARTER_OF_YEAR_FIELD = function (_Field2) {\n  _inheritsLoose(QUARTER_OF_YEAR_FIELD, _Field2);\n\n  function QUARTER_OF_YEAR_FIELD() {\n    return _Field2.apply(this, arguments) || this;\n  }\n\n  var _proto3 = QUARTER_OF_YEAR_FIELD.prototype;\n\n  _proto3.toString = function toString() {\n    return 'QuarterOfYear';\n  };\n\n  _proto3.baseUnit = function baseUnit() {\n    return QUARTER_YEARS;\n  };\n\n  _proto3.rangeUnit = function rangeUnit() {\n    return ChronoUnit.YEARS;\n  };\n\n  _proto3.range = function range() {\n    return ValueRange.of(1, 4);\n  };\n\n  _proto3.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.MONTH_OF_YEAR) && this._isIso(temporal);\n  };\n\n  _proto3.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    return this.range();\n  };\n\n  _proto3.getFrom = function getFrom(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: QuarterOfYear');\n    }\n\n    var moy = temporal.getLong(ChronoField.MONTH_OF_YEAR);\n    return MathUtil.intDiv(moy + 2, 3);\n  };\n\n  _proto3.adjustInto = function adjustInto(temporal, newValue) {\n    var curValue = this.getFrom(temporal);\n    this.range().checkValidValue(newValue, this);\n    return temporal.with(ChronoField.MONTH_OF_YEAR, temporal.getLong(ChronoField.MONTH_OF_YEAR) + (newValue - curValue) * 3);\n  };\n\n  return QUARTER_OF_YEAR_FIELD;\n}(Field);\n\nvar WEEK_OF_WEEK_BASED_YEAR_FIELD = function (_Field3) {\n  _inheritsLoose(WEEK_OF_WEEK_BASED_YEAR_FIELD, _Field3);\n\n  function WEEK_OF_WEEK_BASED_YEAR_FIELD() {\n    return _Field3.apply(this, arguments) || this;\n  }\n\n  var _proto4 = WEEK_OF_WEEK_BASED_YEAR_FIELD.prototype;\n\n  _proto4.toString = function toString() {\n    return 'WeekOfWeekBasedYear';\n  };\n\n  _proto4.baseUnit = function baseUnit() {\n    return ChronoUnit.WEEKS;\n  };\n\n  _proto4.rangeUnit = function rangeUnit() {\n    return WEEK_BASED_YEARS;\n  };\n\n  _proto4.range = function range() {\n    return ValueRange.of(1, 52, 53);\n  };\n\n  _proto4.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.EPOCH_DAY) && this._isIso(temporal);\n  };\n\n  _proto4.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: WeekOfWeekBasedYear');\n    }\n\n    return Field._getWeekRangeByLocalDate(LocalDate.from(temporal));\n  };\n\n  _proto4.getFrom = function getFrom(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: WeekOfWeekBasedYear');\n    }\n\n    return Field._getWeek(LocalDate.from(temporal));\n  };\n\n  _proto4.adjustInto = function adjustInto(temporal, newValue) {\n    this.range().checkValidValue(newValue, this);\n    return temporal.plus(MathUtil.safeSubtract(newValue, this.getFrom(temporal)), ChronoUnit.WEEKS);\n  };\n\n  _proto4.resolve = function resolve(fieldValues, partialTemporal, resolverStyle) {\n    var wbyLong = fieldValues.get(WEEK_BASED_YEAR);\n    var dowLong = fieldValues.get(ChronoField.DAY_OF_WEEK);\n\n    if (wbyLong == null || dowLong == null) {\n      return null;\n    }\n\n    var wby = WEEK_BASED_YEAR.range().checkValidIntValue(wbyLong, WEEK_BASED_YEAR);\n    var wowby = fieldValues.get(WEEK_OF_WEEK_BASED_YEAR);\n    var date;\n\n    if (resolverStyle === ResolverStyle.LENIENT) {\n      var dow = dowLong;\n      var weeks = 0;\n\n      if (dow > 7) {\n        weeks = MathUtil.intDiv(dow - 1, 7);\n        dow = MathUtil.intMod(dow - 1, 7) + 1;\n      } else if (dow < 1) {\n        weeks = MathUtil.intDiv(dow, 7) - 1;\n        dow = MathUtil.intMod(dow, 7) + 7;\n      }\n\n      date = LocalDate.of(wby, 1, 4).plusWeeks(wowby - 1).plusWeeks(weeks).with(ChronoField.DAY_OF_WEEK, dow);\n    } else {\n      var _dow2 = ChronoField.DAY_OF_WEEK.checkValidIntValue(dowLong);\n\n      if (resolverStyle === ResolverStyle.STRICT) {\n        var temp = LocalDate.of(wby, 1, 4);\n\n        var range = Field._getWeekRangeByLocalDate(temp);\n\n        range.checkValidValue(wowby, this);\n      } else {\n        this.range().checkValidValue(wowby, this);\n      }\n\n      date = LocalDate.of(wby, 1, 4).plusWeeks(wowby - 1).with(ChronoField.DAY_OF_WEEK, _dow2);\n    }\n\n    fieldValues.remove(this);\n    fieldValues.remove(WEEK_BASED_YEAR);\n    fieldValues.remove(ChronoField.DAY_OF_WEEK);\n    return date;\n  };\n\n  _proto4.displayName = function displayName() {\n    return 'Week';\n  };\n\n  return WEEK_OF_WEEK_BASED_YEAR_FIELD;\n}(Field);\n\nvar WEEK_BASED_YEAR_FIELD = function (_Field4) {\n  _inheritsLoose(WEEK_BASED_YEAR_FIELD, _Field4);\n\n  function WEEK_BASED_YEAR_FIELD() {\n    return _Field4.apply(this, arguments) || this;\n  }\n\n  var _proto5 = WEEK_BASED_YEAR_FIELD.prototype;\n\n  _proto5.toString = function toString() {\n    return 'WeekBasedYear';\n  };\n\n  _proto5.baseUnit = function baseUnit() {\n    return WEEK_BASED_YEARS;\n  };\n\n  _proto5.rangeUnit = function rangeUnit() {\n    return ChronoUnit.FOREVER;\n  };\n\n  _proto5.range = function range() {\n    return ChronoField.YEAR.range();\n  };\n\n  _proto5.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.EPOCH_DAY) && this._isIso(temporal);\n  };\n\n  _proto5.rangeRefinedBy = function rangeRefinedBy(temporal) {\n    return ChronoField.YEAR.range();\n  };\n\n  _proto5.getFrom = function getFrom(temporal) {\n    if (temporal.isSupported(this) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: WeekBasedYear');\n    }\n\n    return Field._getWeekBasedYear(LocalDate.from(temporal));\n  };\n\n  _proto5.adjustInto = function adjustInto(temporal, newValue) {\n    if (this.isSupportedBy(temporal) === false) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: WeekBasedYear');\n    }\n\n    var newWby = this.range().checkValidIntValue(newValue, WEEK_BASED_YEAR);\n    var date = LocalDate.from(temporal);\n    var dow = date.get(ChronoField.DAY_OF_WEEK);\n\n    var week = Field._getWeek(date);\n\n    if (week === 53 && Field._getWeekRangeByYear(newWby) === 52) {\n      week = 52;\n    }\n\n    var resolved = LocalDate.of(newWby, 1, 4);\n    var days = dow - resolved.get(ChronoField.DAY_OF_WEEK) + (week - 1) * 7;\n    resolved = resolved.plusDays(days);\n    return temporal.with(resolved);\n  };\n\n  return WEEK_BASED_YEAR_FIELD;\n}(Field);\n\nvar Unit = function (_TemporalUnit) {\n  _inheritsLoose(Unit, _TemporalUnit);\n\n  function Unit(name, estimatedDuration) {\n    var _this;\n\n    _this = _TemporalUnit.call(this) || this;\n    _this._name = name;\n    _this._duration = estimatedDuration;\n    return _this;\n  }\n\n  var _proto6 = Unit.prototype;\n\n  _proto6.duration = function duration() {\n    return this._duration;\n  };\n\n  _proto6.isDurationEstimated = function isDurationEstimated() {\n    return true;\n  };\n\n  _proto6.isDateBased = function isDateBased() {\n    return true;\n  };\n\n  _proto6.isTimeBased = function isTimeBased() {\n    return false;\n  };\n\n  _proto6.isSupportedBy = function isSupportedBy(temporal) {\n    return temporal.isSupported(ChronoField.EPOCH_DAY);\n  };\n\n  _proto6.addTo = function addTo(temporal, periodToAdd) {\n    switch (this) {\n      case WEEK_BASED_YEARS:\n        {\n          var added = MathUtil.safeAdd(temporal.get(WEEK_BASED_YEAR), periodToAdd);\n          return temporal.with(WEEK_BASED_YEAR, added);\n        }\n\n      case QUARTER_YEARS:\n        return temporal.plus(MathUtil.intDiv(periodToAdd, 256), ChronoUnit.YEARS).plus(MathUtil.intMod(periodToAdd, 256) * 3, ChronoUnit.MONTHS);\n\n      default:\n        throw new IllegalStateException('Unreachable');\n    }\n  };\n\n  _proto6.between = function between(temporal1, temporal2) {\n    switch (this) {\n      case WEEK_BASED_YEARS:\n        return MathUtil.safeSubtract(temporal2.getLong(WEEK_BASED_YEAR), temporal1.getLong(WEEK_BASED_YEAR));\n\n      case QUARTER_YEARS:\n        return MathUtil.intDiv(temporal1.until(temporal2, ChronoUnit.MONTHS), 3);\n\n      default:\n        throw new IllegalStateException('Unreachable');\n    }\n  };\n\n  _proto6.toString = function toString() {\n    return name;\n  };\n\n  return Unit;\n}(TemporalUnit);\n\nvar DAY_OF_QUARTER = null;\nvar QUARTER_OF_YEAR = null;\nvar WEEK_OF_WEEK_BASED_YEAR = null;\nvar WEEK_BASED_YEAR = null;\nvar WEEK_BASED_YEARS = null;\nvar QUARTER_YEARS = null;\nfunction _init$8() {\n  DAY_OF_QUARTER = new DAY_OF_QUARTER_FIELD();\n  QUARTER_OF_YEAR = new QUARTER_OF_YEAR_FIELD();\n  WEEK_OF_WEEK_BASED_YEAR = new WEEK_OF_WEEK_BASED_YEAR_FIELD();\n  WEEK_BASED_YEAR = new WEEK_BASED_YEAR_FIELD();\n  WEEK_BASED_YEARS = new Unit('WeekBasedYears', Duration.ofSeconds(31556952));\n  QUARTER_YEARS = new Unit('QuarterYears', Duration.ofSeconds(31556952 / 4));\n  IsoFields.DAY_OF_QUARTER = DAY_OF_QUARTER;\n  IsoFields.QUARTER_OF_YEAR = QUARTER_OF_YEAR;\n  IsoFields.WEEK_OF_WEEK_BASED_YEAR = WEEK_OF_WEEK_BASED_YEAR;\n  IsoFields.WEEK_BASED_YEAR = WEEK_BASED_YEAR;\n  IsoFields.WEEK_BASED_YEARS = WEEK_BASED_YEARS;\n  IsoFields.QUARTER_YEARS = QUARTER_YEARS;\n\n  LocalDate.prototype.isoWeekOfWeekyear = function () {\n    return this.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n  };\n\n  LocalDate.prototype.isoWeekyear = function () {\n    return this.get(IsoFields.WEEK_BASED_YEAR);\n  };\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar DecimalStyle = function () {\n  function DecimalStyle(zeroChar, positiveSignChar, negativeSignChar, decimalPointChar) {\n    this._zeroDigit = zeroChar;\n    this._zeroDigitCharCode = zeroChar.charCodeAt(0);\n    this._positiveSign = positiveSignChar;\n    this._negativeSign = negativeSignChar;\n    this._decimalSeparator = decimalPointChar;\n  }\n\n  var _proto = DecimalStyle.prototype;\n\n  _proto.positiveSign = function positiveSign() {\n    return this._positiveSign;\n  };\n\n  _proto.withPositiveSign = function withPositiveSign(positiveSign) {\n    if (positiveSign === this._positiveSign) {\n      return this;\n    }\n\n    return new DecimalStyle(this._zeroDigit, positiveSign, this._negativeSign, this._decimalSeparator);\n  };\n\n  _proto.negativeSign = function negativeSign() {\n    return this._negativeSign;\n  };\n\n  _proto.withNegativeSign = function withNegativeSign(negativeSign) {\n    if (negativeSign === this._negativeSign) {\n      return this;\n    }\n\n    return new DecimalStyle(this._zeroDigit, this._positiveSign, negativeSign, this._decimalSeparator);\n  };\n\n  _proto.zeroDigit = function zeroDigit() {\n    return this._zeroDigit;\n  };\n\n  _proto.withZeroDigit = function withZeroDigit(zeroDigit) {\n    if (zeroDigit === this._zeroDigit) {\n      return this;\n    }\n\n    return new DecimalStyle(zeroDigit, this._positiveSign, this._negativeSign, this._decimalSeparator);\n  };\n\n  _proto.decimalSeparator = function decimalSeparator() {\n    return this._decimalSeparator;\n  };\n\n  _proto.withDecimalSeparator = function withDecimalSeparator(decimalSeparator) {\n    if (decimalSeparator === this._decimalSeparator) {\n      return this;\n    }\n\n    return new DecimalStyle(this._zeroDigit, this._positiveSign, this._negativeSign, decimalSeparator);\n  };\n\n  _proto.convertToDigit = function convertToDigit(char) {\n    var val = char.charCodeAt(0) - this._zeroDigitCharCode;\n\n    return val >= 0 && val <= 9 ? val : -1;\n  };\n\n  _proto.convertNumberToI18N = function convertNumberToI18N(numericText) {\n    if (this._zeroDigit === '0') {\n      return numericText;\n    }\n\n    var diff = this._zeroDigitCharCode - '0'.charCodeAt(0);\n    var convertedText = '';\n\n    for (var i = 0; i < numericText.length; i++) {\n      convertedText += String.fromCharCode(numericText.charCodeAt(i) + diff);\n    }\n\n    return convertedText;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof DecimalStyle) {\n      return this._zeroDigit === other._zeroDigit && this._positiveSign === other._positiveSign && this._negativeSign === other._negativeSign && this._decimalSeparator === other._decimalSeparator;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._zeroDigit + this._positiveSign + this._negativeSign + this._decimalSeparator;\n  };\n\n  _proto.toString = function toString() {\n    return 'DecimalStyle[' + this._zeroDigit + this._positiveSign + this._negativeSign + this._decimalSeparator + ']';\n  };\n\n  DecimalStyle.of = function of() {\n    throw new Error('not yet supported');\n  };\n\n  DecimalStyle.availableLocales = function availableLocales() {\n    throw new Error('not yet supported');\n  };\n\n  return DecimalStyle;\n}();\nDecimalStyle.STANDARD = new DecimalStyle('0', '+', '-', '.');\n\nvar SignStyle = function (_Enum) {\n  _inheritsLoose(SignStyle, _Enum);\n\n  function SignStyle() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  var _proto = SignStyle.prototype;\n\n  _proto.parse = function parse(positive, strict, fixedWidth) {\n    switch (this) {\n      case SignStyle.NORMAL:\n        return !positive || !strict;\n\n      case SignStyle.ALWAYS:\n      case SignStyle.EXCEEDS_PAD:\n        return true;\n\n      default:\n        return !strict && !fixedWidth;\n    }\n  };\n\n  return SignStyle;\n}(Enum);\nSignStyle.NORMAL = new SignStyle('NORMAL');\nSignStyle.NEVER = new SignStyle('NEVER');\nSignStyle.ALWAYS = new SignStyle('ALWAYS');\nSignStyle.EXCEEDS_PAD = new SignStyle('EXCEEDS_PAD');\nSignStyle.NOT_NEGATIVE = new SignStyle('NOT_NEGATIVE');\n\nvar TextStyle = function (_Enum) {\n  _inheritsLoose(TextStyle, _Enum);\n\n  function TextStyle() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  var _proto = TextStyle.prototype;\n\n  _proto.isStandalone = function isStandalone() {\n    switch (this) {\n      case TextStyle.FULL_STANDALONE:\n      case TextStyle.SHORT_STANDALONE:\n      case TextStyle.NARROW_STANDALONE:\n        return true;\n\n      default:\n        return false;\n    }\n  };\n\n  _proto.asStandalone = function asStandalone() {\n    switch (this) {\n      case TextStyle.FULL:\n        return TextStyle.FULL_STANDALONE;\n\n      case TextStyle.SHORT:\n        return TextStyle.SHORT_STANDALONE;\n\n      case TextStyle.NARROW:\n        return TextStyle.NARROW_STANDALONE;\n\n      default:\n        return this;\n    }\n  };\n\n  _proto.asNormal = function asNormal() {\n    switch (this) {\n      case TextStyle.FULL_STANDALONE:\n        return TextStyle.FULL;\n\n      case TextStyle.SHORT_STANDALONE:\n        return TextStyle.SHORT;\n\n      case TextStyle.NARROW_STANDALONE:\n        return TextStyle.NARROW;\n\n      default:\n        return this;\n    }\n  };\n\n  return TextStyle;\n}(Enum);\nTextStyle.FULL = new TextStyle('FULL');\nTextStyle.FULL_STANDALONE = new TextStyle('FULL_STANDALONE');\nTextStyle.SHORT = new TextStyle('SHORT');\nTextStyle.SHORT_STANDALONE = new TextStyle('SHORT_STANDALONE');\nTextStyle.NARROW = new TextStyle('NARROW');\nTextStyle.NARROW_STANDALONE = new TextStyle('NARROW_STANDALONE');\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar CharLiteralPrinterParser = function () {\n  function CharLiteralPrinterParser(literal) {\n    if (literal.length > 1) {\n      throw new IllegalArgumentException('invalid literal, too long: \"' + literal + '\"');\n    }\n\n    this._literal = literal;\n  }\n\n  var _proto = CharLiteralPrinterParser.prototype;\n\n  _proto.print = function print(context, buf) {\n    buf.append(this._literal);\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n\n    if (position === length) {\n      return ~position;\n    }\n\n    var ch = text.charAt(position);\n\n    if (context.charEquals(this._literal, ch) === false) {\n      return ~position;\n    }\n\n    return position + this._literal.length;\n  };\n\n  _proto.toString = function toString() {\n    if (this._literal === '\\'') {\n      return \"''\";\n    }\n\n    return \"'\" + this._literal + \"'\";\n  };\n\n  return CharLiteralPrinterParser;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar CompositePrinterParser = function () {\n  function CompositePrinterParser(printerParsers, optional) {\n    this._printerParsers = printerParsers;\n    this._optional = optional;\n  }\n\n  var _proto = CompositePrinterParser.prototype;\n\n  _proto.withOptional = function withOptional(optional) {\n    if (optional === this._optional) {\n      return this;\n    }\n\n    return new CompositePrinterParser(this._printerParsers, optional);\n  };\n\n  _proto.print = function print(context, buf) {\n    var length = buf.length();\n\n    if (this._optional) {\n      context.startOptional();\n    }\n\n    try {\n      for (var i = 0; i < this._printerParsers.length; i++) {\n        var pp = this._printerParsers[i];\n\n        if (pp.print(context, buf) === false) {\n          buf.setLength(length);\n          return true;\n        }\n      }\n    } finally {\n      if (this._optional) {\n        context.endOptional();\n      }\n    }\n\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    if (this._optional) {\n      context.startOptional();\n      var pos = position;\n\n      for (var i = 0; i < this._printerParsers.length; i++) {\n        var pp = this._printerParsers[i];\n        pos = pp.parse(context, text, pos);\n\n        if (pos < 0) {\n          context.endOptional(false);\n          return position;\n        }\n      }\n\n      context.endOptional(true);\n      return pos;\n    } else {\n      for (var _i = 0; _i < this._printerParsers.length; _i++) {\n        var _pp = this._printerParsers[_i];\n        position = _pp.parse(context, text, position);\n\n        if (position < 0) {\n          break;\n        }\n      }\n\n      return position;\n    }\n  };\n\n  _proto.toString = function toString() {\n    var buf = '';\n\n    if (this._printerParsers != null) {\n      buf += this._optional ? '[' : '(';\n\n      for (var i = 0; i < this._printerParsers.length; i++) {\n        var pp = this._printerParsers[i];\n        buf += pp.toString();\n      }\n\n      buf += this._optional ? ']' : ')';\n    }\n\n    return buf;\n  };\n\n  return CompositePrinterParser;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar FractionPrinterParser = function () {\n  function FractionPrinterParser(field, minWidth, maxWidth, decimalPoint) {\n    requireNonNull(field, 'field');\n\n    if (field.range().isFixed() === false) {\n      throw new IllegalArgumentException('Field must have a fixed set of values: ' + field);\n    }\n\n    if (minWidth < 0 || minWidth > 9) {\n      throw new IllegalArgumentException('Minimum width must be from 0 to 9 inclusive but was ' + minWidth);\n    }\n\n    if (maxWidth < 1 || maxWidth > 9) {\n      throw new IllegalArgumentException('Maximum width must be from 1 to 9 inclusive but was ' + maxWidth);\n    }\n\n    if (maxWidth < minWidth) {\n      throw new IllegalArgumentException('Maximum width must exceed or equal the minimum width but ' + maxWidth + ' < ' + minWidth);\n    }\n\n    this.field = field;\n    this.minWidth = minWidth;\n    this.maxWidth = maxWidth;\n    this.decimalPoint = decimalPoint;\n  }\n\n  var _proto = FractionPrinterParser.prototype;\n\n  _proto.print = function print(context, buf) {\n    var value = context.getValue(this.field);\n\n    if (value === null) {\n      return false;\n    }\n\n    var symbols = context.symbols();\n\n    if (value === 0) {\n      if (this.minWidth > 0) {\n        if (this.decimalPoint) {\n          buf.append(symbols.decimalSeparator());\n        }\n\n        for (var i = 0; i < this.minWidth; i++) {\n          buf.append(symbols.zeroDigit());\n        }\n      }\n    } else {\n      var fraction = this.convertToFraction(value, symbols.zeroDigit());\n      var outputScale = Math.min(Math.max(fraction.length, this.minWidth), this.maxWidth);\n      fraction = fraction.substr(0, outputScale);\n\n      if (fraction * 1 > 0) {\n        while (fraction.length > this.minWidth && fraction[fraction.length - 1] === '0') {\n          fraction = fraction.substr(0, fraction.length - 1);\n        }\n      }\n\n      var str = fraction;\n      str = symbols.convertNumberToI18N(str);\n\n      if (this.decimalPoint) {\n        buf.append(symbols.decimalSeparator());\n      }\n\n      buf.append(str);\n    }\n\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var effectiveMin = context.isStrict() ? this.minWidth : 0;\n    var effectiveMax = context.isStrict() ? this.maxWidth : 9;\n    var length = text.length;\n\n    if (position === length) {\n      return effectiveMin > 0 ? ~position : position;\n    }\n\n    if (this.decimalPoint) {\n      if (text[position] !== context.symbols().decimalSeparator()) {\n        return effectiveMin > 0 ? ~position : position;\n      }\n\n      position++;\n    }\n\n    var minEndPos = position + effectiveMin;\n\n    if (minEndPos > length) {\n      return ~position;\n    }\n\n    var maxEndPos = Math.min(position + effectiveMax, length);\n    var total = 0;\n    var pos = position;\n\n    while (pos < maxEndPos) {\n      var ch = text.charAt(pos++);\n      var digit = context.symbols().convertToDigit(ch);\n\n      if (digit < 0) {\n        if (pos < minEndPos) {\n          return ~position;\n        }\n\n        pos--;\n        break;\n      }\n\n      total = total * 10 + digit;\n    }\n\n    var moveLeft = pos - position;\n    var scale = Math.pow(10, moveLeft);\n    var value = this.convertFromFraction(total, scale);\n    return context.setParsedField(this.field, value, position, pos);\n  };\n\n  _proto.convertToFraction = function convertToFraction(value, zeroDigit) {\n    var range = this.field.range();\n    range.checkValidValue(value, this.field);\n\n    var _min = range.minimum();\n\n    var _range = range.maximum() - _min + 1;\n\n    var _value = value - _min;\n\n    var _scaled = MathUtil.intDiv(_value * 1000000000, _range);\n\n    var fraction = '' + _scaled;\n\n    while (fraction.length < 9) {\n      fraction = zeroDigit + fraction;\n    }\n\n    return fraction;\n  };\n\n  _proto.convertFromFraction = function convertFromFraction(total, scale) {\n    var range = this.field.range();\n\n    var _min = range.minimum();\n\n    var _range = range.maximum() - _min + 1;\n\n    var _value = MathUtil.intDiv(total * _range, scale);\n\n    return _value;\n  };\n\n  _proto.toString = function toString() {\n    var decimal = this.decimalPoint ? ',DecimalPoint' : '';\n    return 'Fraction(' + this.field + ',' + this.minWidth + ',' + this.maxWidth + decimal + ')';\n  };\n\n  return FractionPrinterParser;\n}();\n\nvar MAX_WIDTH = 15;\nvar EXCEED_POINTS = [0, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000];\nvar NumberPrinterParser = function () {\n  function NumberPrinterParser(field, minWidth, maxWidth, signStyle, subsequentWidth) {\n    if (subsequentWidth === void 0) {\n      subsequentWidth = 0;\n    }\n\n    this._field = field;\n    this._minWidth = minWidth;\n    this._maxWidth = maxWidth;\n    this._signStyle = signStyle;\n    this._subsequentWidth = subsequentWidth;\n  }\n\n  var _proto = NumberPrinterParser.prototype;\n\n  _proto.field = function field() {\n    return this._field;\n  };\n\n  _proto.minWidth = function minWidth() {\n    return this._minWidth;\n  };\n\n  _proto.maxWidth = function maxWidth() {\n    return this._maxWidth;\n  };\n\n  _proto.signStyle = function signStyle() {\n    return this._signStyle;\n  };\n\n  _proto.withFixedWidth = function withFixedWidth() {\n    if (this._subsequentWidth === -1) {\n      return this;\n    }\n\n    return new NumberPrinterParser(this._field, this._minWidth, this._maxWidth, this._signStyle, -1);\n  };\n\n  _proto.withSubsequentWidth = function withSubsequentWidth(subsequentWidth) {\n    return new NumberPrinterParser(this._field, this._minWidth, this._maxWidth, this._signStyle, this._subsequentWidth + subsequentWidth);\n  };\n\n  _proto._isFixedWidth = function _isFixedWidth() {\n    return this._subsequentWidth === -1 || this._subsequentWidth > 0 && this._minWidth === this._maxWidth && this._signStyle === SignStyle.NOT_NEGATIVE;\n  };\n\n  _proto.print = function print(context, buf) {\n    var contextValue = context.getValue(this._field);\n\n    if (contextValue == null) {\n      return false;\n    }\n\n    var value = this._getValue(context, contextValue);\n\n    var symbols = context.symbols();\n    var str = '' + Math.abs(value);\n\n    if (str.length > this._maxWidth) {\n      throw new DateTimeException('Field ' + this._field + ' cannot be printed as the value ' + value + ' exceeds the maximum print width of ' + this._maxWidth);\n    }\n\n    str = symbols.convertNumberToI18N(str);\n\n    if (value >= 0) {\n      switch (this._signStyle) {\n        case SignStyle.EXCEEDS_PAD:\n          if (this._minWidth < MAX_WIDTH && value >= EXCEED_POINTS[this._minWidth]) {\n            buf.append(symbols.positiveSign());\n          }\n\n          break;\n\n        case SignStyle.ALWAYS:\n          buf.append(symbols.positiveSign());\n          break;\n      }\n    } else {\n      switch (this._signStyle) {\n        case SignStyle.NORMAL:\n        case SignStyle.EXCEEDS_PAD:\n        case SignStyle.ALWAYS:\n          buf.append(symbols.negativeSign());\n          break;\n\n        case SignStyle.NOT_NEGATIVE:\n          throw new DateTimeException('Field ' + this._field + ' cannot be printed as the value ' + value + ' cannot be negative according to the SignStyle');\n      }\n    }\n\n    for (var i = 0; i < this._minWidth - str.length; i++) {\n      buf.append(symbols.zeroDigit());\n    }\n\n    buf.append(str);\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n\n    if (position === length) {\n      return ~position;\n    }\n\n    assert(position >= 0 && position < length);\n    var sign = text.charAt(position);\n    var negative = false;\n    var positive = false;\n\n    if (sign === context.symbols().positiveSign()) {\n      if (this._signStyle.parse(true, context.isStrict(), this._minWidth === this._maxWidth) === false) {\n        return ~position;\n      }\n\n      positive = true;\n      position++;\n    } else if (sign === context.symbols().negativeSign()) {\n      if (this._signStyle.parse(false, context.isStrict(), this._minWidth === this._maxWidth) === false) {\n        return ~position;\n      }\n\n      negative = true;\n      position++;\n    } else {\n      if (this._signStyle === SignStyle.ALWAYS && context.isStrict()) {\n        return ~position;\n      }\n    }\n\n    var effMinWidth = context.isStrict() || this._isFixedWidth() ? this._minWidth : 1;\n    var minEndPos = position + effMinWidth;\n\n    if (minEndPos > length) {\n      return ~position;\n    }\n\n    var effMaxWidth = (context.isStrict() || this._isFixedWidth() ? this._maxWidth : 9) + Math.max(this._subsequentWidth, 0);\n    var total = 0;\n    var pos = position;\n\n    for (var pass = 0; pass < 2; pass++) {\n      var maxEndPos = Math.min(pos + effMaxWidth, length);\n\n      while (pos < maxEndPos) {\n        var ch = text.charAt(pos++);\n        var digit = context.symbols().convertToDigit(ch);\n\n        if (digit < 0) {\n          pos--;\n\n          if (pos < minEndPos) {\n            return ~position;\n          }\n\n          break;\n        }\n\n        if (pos - position > MAX_WIDTH) {\n          throw new ArithmeticException('number text exceeds length');\n        } else {\n          total = total * 10 + digit;\n        }\n      }\n\n      if (this._subsequentWidth > 0 && pass === 0) {\n        var parseLen = pos - position;\n        effMaxWidth = Math.max(effMinWidth, parseLen - this._subsequentWidth);\n        pos = position;\n        total = 0;\n      } else {\n        break;\n      }\n    }\n\n    if (negative) {\n      if (total === 0 && context.isStrict()) {\n        return ~(position - 1);\n      }\n\n      if (total !== 0) {\n        total = -total;\n      }\n    } else if (this._signStyle === SignStyle.EXCEEDS_PAD && context.isStrict()) {\n      var _parseLen = pos - position;\n\n      if (positive) {\n        if (_parseLen <= this._minWidth) {\n          return ~(position - 1);\n        }\n      } else {\n        if (_parseLen > this._minWidth) {\n          return ~position;\n        }\n      }\n    }\n\n    return this._setValue(context, total, position, pos);\n  };\n\n  _proto._getValue = function _getValue(context, value) {\n    return value;\n  };\n\n  _proto._setValue = function _setValue(context, value, errorPos, successPos) {\n    return context.setParsedField(this._field, value, errorPos, successPos);\n  };\n\n  _proto.toString = function toString() {\n    if (this._minWidth === 1 && this._maxWidth === MAX_WIDTH && this._signStyle === SignStyle.NORMAL) {\n      return 'Value(' + this._field + ')';\n    }\n\n    if (this._minWidth === this._maxWidth && this._signStyle === SignStyle.NOT_NEGATIVE) {\n      return 'Value(' + this._field + ',' + this._minWidth + ')';\n    }\n\n    return 'Value(' + this._field + ',' + this._minWidth + ',' + this._maxWidth + ',' + this._signStyle + ')';\n  };\n\n  return NumberPrinterParser;\n}();\nvar ReducedPrinterParser = function (_NumberPrinterParser) {\n  _inheritsLoose(ReducedPrinterParser, _NumberPrinterParser);\n\n  function ReducedPrinterParser(field, width, maxWidth, baseValue, baseDate) {\n    var _this;\n\n    _this = _NumberPrinterParser.call(this, field, width, maxWidth, SignStyle.NOT_NEGATIVE) || this;\n\n    if (width < 1 || width > 10) {\n      throw new IllegalArgumentException('The width must be from 1 to 10 inclusive but was ' + width);\n    }\n\n    if (maxWidth < 1 || maxWidth > 10) {\n      throw new IllegalArgumentException('The maxWidth must be from 1 to 10 inclusive but was ' + maxWidth);\n    }\n\n    if (maxWidth < width) {\n      throw new IllegalArgumentException('The maxWidth must be greater than the width');\n    }\n\n    if (baseDate === null) {\n      if (field.range().isValidValue(baseValue) === false) {\n        throw new IllegalArgumentException('The base value must be within the range of the field');\n      }\n\n      if (baseValue + EXCEED_POINTS[width] > MathUtil.MAX_SAFE_INTEGER) {\n        throw new DateTimeException('Unable to add printer-parser as the range exceeds the capacity of an int');\n      }\n    }\n\n    _this._baseValue = baseValue;\n    _this._baseDate = baseDate;\n    return _this;\n  }\n\n  var _proto2 = ReducedPrinterParser.prototype;\n\n  _proto2._getValue = function _getValue(context, value) {\n    var absValue = Math.abs(value);\n    var baseValue = this._baseValue;\n\n    if (this._baseDate !== null) {\n      context.temporal();\n      var chrono = IsoChronology.INSTANCE;\n      baseValue = chrono.date(this._baseDate).get(this._field);\n    }\n\n    if (value >= baseValue && value < baseValue + EXCEED_POINTS[this._minWidth]) {\n      return absValue % EXCEED_POINTS[this._minWidth];\n    }\n\n    return absValue % EXCEED_POINTS[this._maxWidth];\n  };\n\n  _proto2._setValue = function _setValue(context, value, errorPos, successPos) {\n    var baseValue = this._baseValue;\n\n    if (this._baseDate != null) {\n      var chrono = context.getEffectiveChronology();\n      baseValue = chrono.date(this._baseDate).get(this._field);\n    }\n\n    var parseLen = successPos - errorPos;\n\n    if (parseLen === this._minWidth && value >= 0) {\n      var range = EXCEED_POINTS[this._minWidth];\n      var lastPart = baseValue % range;\n      var basePart = baseValue - lastPart;\n\n      if (baseValue > 0) {\n        value = basePart + value;\n      } else {\n        value = basePart - value;\n      }\n\n      if (value < baseValue) {\n        value += range;\n      }\n    }\n\n    return context.setParsedField(this._field, value, errorPos, successPos);\n  };\n\n  _proto2.withFixedWidth = function withFixedWidth() {\n    if (this._subsequentWidth === -1) {\n      return this;\n    }\n\n    return new ReducedPrinterParser(this._field, this._minWidth, this._maxWidth, this._baseValue, this._baseDate, -1);\n  };\n\n  _proto2.withSubsequentWidth = function withSubsequentWidth(subsequentWidth) {\n    return new ReducedPrinterParser(this._field, this._minWidth, this._maxWidth, this._baseValue, this._baseDate, this._subsequentWidth + subsequentWidth);\n  };\n\n  _proto2.isFixedWidth = function isFixedWidth(context) {\n    if (context.isStrict() === false) {\n      return false;\n    }\n\n    return _NumberPrinterParser.prototype.isFixedWidth.call(this, context);\n  };\n\n  _proto2.toString = function toString() {\n    return 'ReducedValue(' + this._field + ',' + this._minWidth + ',' + this._maxWidth + ',' + (this._baseDate != null ? this._baseDate : this._baseValue) + ')';\n  };\n\n  return ReducedPrinterParser;\n}(NumberPrinterParser);\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar PATTERNS = ['+HH', '+HHmm', '+HH:mm', '+HHMM', '+HH:MM', '+HHMMss', '+HH:MM:ss', '+HHMMSS', '+HH:MM:SS'];\nvar OffsetIdPrinterParser = function () {\n  function OffsetIdPrinterParser(noOffsetText, pattern) {\n    requireNonNull(noOffsetText, 'noOffsetText');\n    requireNonNull(pattern, 'pattern');\n    this.noOffsetText = noOffsetText;\n    this.type = this._checkPattern(pattern);\n  }\n\n  var _proto = OffsetIdPrinterParser.prototype;\n\n  _proto._checkPattern = function _checkPattern(pattern) {\n    for (var i = 0; i < PATTERNS.length; i++) {\n      if (PATTERNS[i] === pattern) {\n        return i;\n      }\n    }\n\n    throw new IllegalArgumentException('Invalid zone offset pattern: ' + pattern);\n  };\n\n  _proto.print = function print(context, buf) {\n    var offsetSecs = context.getValue(ChronoField.OFFSET_SECONDS);\n\n    if (offsetSecs == null) {\n      return false;\n    }\n\n    var totalSecs = MathUtil.safeToInt(offsetSecs);\n\n    if (totalSecs === 0) {\n      buf.append(this.noOffsetText);\n    } else {\n      var absHours = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 3600), 100));\n      var absMinutes = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 60), 60));\n      var absSeconds = Math.abs(MathUtil.intMod(totalSecs, 60));\n      var bufPos = buf.length();\n      var output = absHours;\n      buf.append(totalSecs < 0 ? '-' : '+').appendChar(MathUtil.intDiv(absHours, 10) + '0').appendChar(MathUtil.intMod(absHours, 10) + '0');\n\n      if (this.type >= 3 || this.type >= 1 && absMinutes > 0) {\n        buf.append(this.type % 2 === 0 ? ':' : '').appendChar(MathUtil.intDiv(absMinutes, 10) + '0').appendChar(absMinutes % 10 + '0');\n        output += absMinutes;\n\n        if (this.type >= 7 || this.type >= 5 && absSeconds > 0) {\n          buf.append(this.type % 2 === 0 ? ':' : '').appendChar(MathUtil.intDiv(absSeconds, 10) + '0').appendChar(absSeconds % 10 + '0');\n          output += absSeconds;\n        }\n      }\n\n      if (output === 0) {\n        buf.setLength(bufPos);\n        buf.append(this.noOffsetText);\n      }\n    }\n\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n    var noOffsetLen = this.noOffsetText.length;\n\n    if (noOffsetLen === 0) {\n      if (position === length) {\n        return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position);\n      }\n    } else {\n      if (position === length) {\n        return ~position;\n      }\n\n      if (context.subSequenceEquals(text, position, this.noOffsetText, 0, noOffsetLen)) {\n        return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position + noOffsetLen);\n      }\n    }\n\n    var sign = text[position];\n\n    if (sign === '+' || sign === '-') {\n      var negative = sign === '-' ? -1 : 1;\n      var array = [0, 0, 0, 0];\n      array[0] = position + 1;\n\n      if ((this._parseNumber(array, 1, text, true) || this._parseNumber(array, 2, text, this.type >= 3) || this._parseNumber(array, 3, text, false)) === false) {\n        var offsetSecs = MathUtil.safeZero(negative * (array[1] * 3600 + array[2] * 60 + array[3]));\n        return context.setParsedField(ChronoField.OFFSET_SECONDS, offsetSecs, position, array[0]);\n      }\n    }\n\n    if (noOffsetLen === 0) {\n      return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position + noOffsetLen);\n    }\n\n    return ~position;\n  };\n\n  _proto._parseNumber = function _parseNumber(array, arrayIndex, parseText, required) {\n    if ((this.type + 3) / 2 < arrayIndex) {\n      return false;\n    }\n\n    var pos = array[0];\n\n    if (this.type % 2 === 0 && arrayIndex > 1) {\n      if (pos + 1 > parseText.length || parseText[pos] !== ':') {\n        return required;\n      }\n\n      pos++;\n    }\n\n    if (pos + 2 > parseText.length) {\n      return required;\n    }\n\n    var ch1 = parseText[pos++];\n    var ch2 = parseText[pos++];\n\n    if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {\n      return required;\n    }\n\n    var value = (ch1.charCodeAt(0) - 48) * 10 + (ch2.charCodeAt(0) - 48);\n\n    if (value < 0 || value > 59) {\n      return required;\n    }\n\n    array[arrayIndex] = value;\n    array[0] = pos;\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    var converted = this.noOffsetText.replace('\\'', '\\'\\'');\n    return 'Offset(' + PATTERNS[this.type] + ',\\'' + converted + '\\')';\n  };\n\n  return OffsetIdPrinterParser;\n}();\nOffsetIdPrinterParser.INSTANCE_ID = new OffsetIdPrinterParser('Z', '+HH:MM:ss');\nOffsetIdPrinterParser.PATTERNS = PATTERNS;\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar PadPrinterParserDecorator = function () {\n  function PadPrinterParserDecorator(printerParser, padWidth, padChar) {\n    this._printerParser = printerParser;\n    this._padWidth = padWidth;\n    this._padChar = padChar;\n  }\n\n  var _proto = PadPrinterParserDecorator.prototype;\n\n  _proto.print = function print(context, buf) {\n    var preLen = buf.length();\n\n    if (this._printerParser.print(context, buf) === false) {\n      return false;\n    }\n\n    var len = buf.length() - preLen;\n\n    if (len > this._padWidth) {\n      throw new DateTimeException(\"Cannot print as output of \" + len + \" characters exceeds pad width of \" + this._padWidth);\n    }\n\n    for (var i = 0; i < this._padWidth - len; i++) {\n      buf.insert(preLen, this._padChar);\n    }\n\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var strict = context.isStrict();\n    var caseSensitive = context.isCaseSensitive();\n    assert(!(position > text.length));\n    assert(position >= 0);\n\n    if (position === text.length) {\n      return ~position;\n    }\n\n    var endPos = position + this._padWidth;\n\n    if (endPos > text.length) {\n      if (strict) {\n        return ~position;\n      }\n\n      endPos = text.length;\n    }\n\n    var pos = position;\n\n    while (pos < endPos && (caseSensitive ? text[pos] === this._padChar : context.charEquals(text[pos], this._padChar))) {\n      pos++;\n    }\n\n    text = text.substring(0, endPos);\n\n    var resultPos = this._printerParser.parse(context, text, pos);\n\n    if (resultPos !== endPos && strict) {\n      return ~(position + pos);\n    }\n\n    return resultPos;\n  };\n\n  _proto.toString = function toString() {\n    return \"Pad(\" + this._printerParser + \",\" + this._padWidth + (this._padChar === ' ' ? ')' : ',\\'' + this._padChar + '\\')');\n  };\n\n  return PadPrinterParserDecorator;\n}();\n\nvar SettingsParser = function (_Enum) {\n  _inheritsLoose(SettingsParser, _Enum);\n\n  function SettingsParser() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  var _proto = SettingsParser.prototype;\n\n  _proto.print = function print() {\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    switch (this) {\n      case SettingsParser.SENSITIVE:\n        context.setCaseSensitive(true);\n        break;\n\n      case SettingsParser.INSENSITIVE:\n        context.setCaseSensitive(false);\n        break;\n\n      case SettingsParser.STRICT:\n        context.setStrict(true);\n        break;\n\n      case SettingsParser.LENIENT:\n        context.setStrict(false);\n        break;\n    }\n\n    return position;\n  };\n\n  _proto.toString = function toString() {\n    switch (this) {\n      case SettingsParser.SENSITIVE:\n        return 'ParseCaseSensitive(true)';\n\n      case SettingsParser.INSENSITIVE:\n        return 'ParseCaseSensitive(false)';\n\n      case SettingsParser.STRICT:\n        return 'ParseStrict(true)';\n\n      case SettingsParser.LENIENT:\n        return 'ParseStrict(false)';\n    }\n  };\n\n  return SettingsParser;\n}(Enum);\nSettingsParser.SENSITIVE = new SettingsParser('SENSITIVE');\nSettingsParser.INSENSITIVE = new SettingsParser('INSENSITIVE');\nSettingsParser.STRICT = new SettingsParser('STRICT');\nSettingsParser.LENIENT = new SettingsParser('LENIENT');\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar StringLiteralPrinterParser = function () {\n  function StringLiteralPrinterParser(literal) {\n    this._literal = literal;\n  }\n\n  var _proto = StringLiteralPrinterParser.prototype;\n\n  _proto.print = function print(context, buf) {\n    buf.append(this._literal);\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n    assert(!(position > length || position < 0));\n\n    if (context.subSequenceEquals(text, position, this._literal, 0, this._literal.length) === false) {\n      return ~position;\n    }\n\n    return position + this._literal.length;\n  };\n\n  _proto.toString = function toString() {\n    var converted = this._literal.replace(\"'\", \"''\");\n\n    return '\\'' + converted + '\\'';\n  };\n\n  return StringLiteralPrinterParser;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter, Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneRulesProvider = function () {\n  function ZoneRulesProvider() {}\n\n  ZoneRulesProvider.getRules = function getRules(zoneId) {\n    throw new DateTimeException('unsupported ZoneId:' + zoneId);\n  };\n\n  ZoneRulesProvider.getAvailableZoneIds = function getAvailableZoneIds() {\n    return [];\n  };\n\n  return ZoneRulesProvider;\n}();\n\nvar ZoneRegion = function (_ZoneId) {\n  _inheritsLoose(ZoneRegion, _ZoneId);\n\n  ZoneRegion.ofId = function ofId(zoneId) {\n    var rules = ZoneRulesProvider.getRules(zoneId);\n    return new ZoneRegion(zoneId, rules);\n  };\n\n  function ZoneRegion(id, rules) {\n    var _this;\n\n    _this = _ZoneId.call(this) || this;\n    _this._id = id;\n    _this._rules = rules;\n    return _this;\n  }\n\n  var _proto = ZoneRegion.prototype;\n\n  _proto.id = function id() {\n    return this._id;\n  };\n\n  _proto.rules = function rules() {\n    return this._rules;\n  };\n\n  return ZoneRegion;\n}(ZoneId);\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneIdPrinterParser = function () {\n  function ZoneIdPrinterParser(query, description) {\n    this.query = query;\n    this.description = description;\n  }\n\n  var _proto = ZoneIdPrinterParser.prototype;\n\n  _proto.print = function print(context, buf) {\n    var zone = context.getValueQuery(this.query);\n\n    if (zone == null) {\n      return false;\n    }\n\n    buf.append(zone.id());\n    return true;\n  };\n\n  _proto.parse = function parse(context, text, position) {\n    var length = text.length;\n\n    if (position > length) {\n      return ~position;\n    }\n\n    if (position === length) {\n      return ~position;\n    }\n\n    var nextChar = text.charAt(position);\n\n    if (nextChar === '+' || nextChar === '-') {\n      var newContext = context.copy();\n      var endPos = OffsetIdPrinterParser.INSTANCE_ID.parse(newContext, text, position);\n\n      if (endPos < 0) {\n        return endPos;\n      }\n\n      var offset = newContext.getParsed(ChronoField.OFFSET_SECONDS);\n      var zone = ZoneOffset.ofTotalSeconds(offset);\n      context.setParsedZone(zone);\n      return endPos;\n    } else if (length >= position + 2) {\n      var nextNextChar = text.charAt(position + 1);\n\n      if (context.charEquals(nextChar, 'U') && context.charEquals(nextNextChar, 'T')) {\n        if (length >= position + 3 && context.charEquals(text.charAt(position + 2), 'C')) {\n          return this._parsePrefixedOffset(context, text, position, position + 3);\n        }\n\n        return this._parsePrefixedOffset(context, text, position, position + 2);\n      } else if (context.charEquals(nextChar, 'G') && length >= position + 3 && context.charEquals(nextNextChar, 'M') && context.charEquals(text.charAt(position + 2), 'T')) {\n        return this._parsePrefixedOffset(context, text, position, position + 3);\n      }\n    }\n\n    if (text.substr(position, 6) === 'SYSTEM') {\n      context.setParsedZone(ZoneId.systemDefault());\n      return position + 6;\n    }\n\n    if (context.charEquals(nextChar, 'Z')) {\n      context.setParsedZone(ZoneOffset.UTC);\n      return position + 1;\n    }\n\n    var availableZoneIds = ZoneRulesProvider.getAvailableZoneIds();\n\n    if (zoneIdTree.size !== availableZoneIds.length) {\n      zoneIdTree = ZoneIdTree.createTreeMap(availableZoneIds);\n    }\n\n    var maxParseLength = length - position;\n    var treeMap = zoneIdTree.treeMap;\n    var parsedZoneId = null;\n    var parseLength = 0;\n\n    while (treeMap != null) {\n      var parsedSubZoneId = text.substr(position, Math.min(treeMap.length, maxParseLength));\n      treeMap = treeMap.get(parsedSubZoneId);\n\n      if (treeMap != null && treeMap.isLeaf) {\n        parsedZoneId = parsedSubZoneId;\n        parseLength = treeMap.length;\n      }\n    }\n\n    if (parsedZoneId != null) {\n      context.setParsedZone(ZoneRegion.ofId(parsedZoneId));\n      return position + parseLength;\n    }\n\n    return ~position;\n  };\n\n  _proto._parsePrefixedOffset = function _parsePrefixedOffset(context, text, prefixPos, position) {\n    var prefix = text.substring(prefixPos, position).toUpperCase();\n    var newContext = context.copy();\n\n    if (position < text.length && context.charEquals(text.charAt(position), 'Z')) {\n      context.setParsedZone(ZoneId.ofOffset(prefix, ZoneOffset.UTC));\n      return position;\n    }\n\n    var endPos = OffsetIdPrinterParser.INSTANCE_ID.parse(newContext, text, position);\n\n    if (endPos < 0) {\n      context.setParsedZone(ZoneId.ofOffset(prefix, ZoneOffset.UTC));\n      return position;\n    }\n\n    var offsetSecs = newContext.getParsed(ChronoField.OFFSET_SECONDS);\n    var offset = ZoneOffset.ofTotalSeconds(offsetSecs);\n    context.setParsedZone(ZoneId.ofOffset(prefix, offset));\n    return endPos;\n  };\n\n  _proto.toString = function toString() {\n    return this.description;\n  };\n\n  return ZoneIdPrinterParser;\n}();\n\nvar ZoneIdTree = function () {\n  ZoneIdTree.createTreeMap = function createTreeMap(availableZoneIds) {\n    var sortedZoneIds = availableZoneIds.sort(function (a, b) {\n      return a.length - b.length;\n    });\n    var treeMap = new ZoneIdTreeMap(sortedZoneIds[0].length, false);\n\n    for (var i = 0; i < sortedZoneIds.length; i++) {\n      treeMap.add(sortedZoneIds[i]);\n    }\n\n    return new ZoneIdTree(sortedZoneIds.length, treeMap);\n  };\n\n  function ZoneIdTree(size, treeMap) {\n    this.size = size;\n    this.treeMap = treeMap;\n  }\n\n  return ZoneIdTree;\n}();\n\nvar ZoneIdTreeMap = function () {\n  function ZoneIdTreeMap(length, isLeaf) {\n    if (length === void 0) {\n      length = 0;\n    }\n\n    if (isLeaf === void 0) {\n      isLeaf = false;\n    }\n\n    this.length = length;\n    this.isLeaf = isLeaf;\n    this._treeMap = {};\n  }\n\n  var _proto2 = ZoneIdTreeMap.prototype;\n\n  _proto2.add = function add(zoneId) {\n    var idLength = zoneId.length;\n\n    if (idLength === this.length) {\n      this._treeMap[zoneId] = new ZoneIdTreeMap(idLength, true);\n    } else if (idLength > this.length) {\n      var subZoneId = zoneId.substr(0, this.length);\n      var subTreeMap = this._treeMap[subZoneId];\n\n      if (subTreeMap == null) {\n        subTreeMap = new ZoneIdTreeMap(idLength, false);\n        this._treeMap[subZoneId] = subTreeMap;\n      }\n\n      subTreeMap.add(zoneId);\n    }\n  };\n\n  _proto2.get = function get(zoneId) {\n    return this._treeMap[zoneId];\n  };\n\n  return ZoneIdTreeMap;\n}();\n\nvar zoneIdTree = new ZoneIdTree([]);\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar MAX_WIDTH$1 = 15;\nvar DateTimeFormatterBuilder = function () {\n  function DateTimeFormatterBuilder() {\n    this._active = this;\n    this._parent = null;\n    this._printerParsers = [];\n    this._optional = false;\n    this._padNextWidth = 0;\n    this._padNextChar = null;\n    this._valueParserIndex = -1;\n  }\n\n  DateTimeFormatterBuilder._of = function _of(parent, optional) {\n    requireNonNull(parent, 'parent');\n    requireNonNull(optional, 'optional');\n    var dtFormatterBuilder = new DateTimeFormatterBuilder();\n    dtFormatterBuilder._parent = parent;\n    dtFormatterBuilder._optional = optional;\n    return dtFormatterBuilder;\n  };\n\n  var _proto = DateTimeFormatterBuilder.prototype;\n\n  _proto.parseCaseSensitive = function parseCaseSensitive() {\n    this._appendInternalPrinterParser(SettingsParser.SENSITIVE);\n\n    return this;\n  };\n\n  _proto.parseCaseInsensitive = function parseCaseInsensitive() {\n    this._appendInternalPrinterParser(SettingsParser.INSENSITIVE);\n\n    return this;\n  };\n\n  _proto.parseStrict = function parseStrict() {\n    this._appendInternalPrinterParser(SettingsParser.STRICT);\n\n    return this;\n  };\n\n  _proto.parseLenient = function parseLenient() {\n    this._appendInternalPrinterParser(SettingsParser.LENIENT);\n\n    return this;\n  };\n\n  _proto.appendValue = function appendValue() {\n    if (arguments.length === 1) {\n      return this._appendValue1.apply(this, arguments);\n    } else if (arguments.length === 2) {\n      return this._appendValue2.apply(this, arguments);\n    } else {\n      return this._appendValue4.apply(this, arguments);\n    }\n  };\n\n  _proto._appendValue1 = function _appendValue1(field) {\n    requireNonNull(field);\n\n    this._appendValuePrinterParser(new NumberPrinterParser(field, 1, MAX_WIDTH$1, SignStyle.NORMAL));\n\n    return this;\n  };\n\n  _proto._appendValue2 = function _appendValue2(field, width) {\n    requireNonNull(field);\n\n    if (width < 1 || width > MAX_WIDTH$1) {\n      throw new IllegalArgumentException(\"The width must be from 1 to \" + MAX_WIDTH$1 + \" inclusive but was \" + width);\n    }\n\n    var pp = new NumberPrinterParser(field, width, width, SignStyle.NOT_NEGATIVE);\n\n    this._appendValuePrinterParser(pp);\n\n    return this;\n  };\n\n  _proto._appendValue4 = function _appendValue4(field, minWidth, maxWidth, signStyle) {\n    requireNonNull(field);\n    requireNonNull(signStyle);\n\n    if (minWidth === maxWidth && signStyle === SignStyle.NOT_NEGATIVE) {\n      return this._appendValue2(field, maxWidth);\n    }\n\n    if (minWidth < 1 || minWidth > MAX_WIDTH$1) {\n      throw new IllegalArgumentException(\"The minimum width must be from 1 to \" + MAX_WIDTH$1 + \" inclusive but was \" + minWidth);\n    }\n\n    if (maxWidth < 1 || maxWidth > MAX_WIDTH$1) {\n      throw new IllegalArgumentException(\"The minimum width must be from 1 to \" + MAX_WIDTH$1 + \" inclusive but was \" + maxWidth);\n    }\n\n    if (maxWidth < minWidth) {\n      throw new IllegalArgumentException(\"The maximum width must exceed or equal the minimum width but \" + maxWidth + \" < \" + minWidth);\n    }\n\n    var pp = new NumberPrinterParser(field, minWidth, maxWidth, signStyle);\n\n    this._appendValuePrinterParser(pp);\n\n    return this;\n  };\n\n  _proto.appendValueReduced = function appendValueReduced() {\n    if (arguments.length === 4 && arguments[3] instanceof ChronoLocalDate) {\n      return this._appendValueReducedFieldWidthMaxWidthBaseDate.apply(this, arguments);\n    } else {\n      return this._appendValueReducedFieldWidthMaxWidthBaseValue.apply(this, arguments);\n    }\n  };\n\n  _proto._appendValueReducedFieldWidthMaxWidthBaseValue = function _appendValueReducedFieldWidthMaxWidthBaseValue(field, width, maxWidth, baseValue) {\n    requireNonNull(field, 'field');\n    var pp = new ReducedPrinterParser(field, width, maxWidth, baseValue, null);\n\n    this._appendValuePrinterParser(pp);\n\n    return this;\n  };\n\n  _proto._appendValueReducedFieldWidthMaxWidthBaseDate = function _appendValueReducedFieldWidthMaxWidthBaseDate(field, width, maxWidth, baseDate) {\n    requireNonNull(field, 'field');\n    requireNonNull(baseDate, 'baseDate');\n    requireInstance(baseDate, ChronoLocalDate, 'baseDate');\n    var pp = new ReducedPrinterParser(field, width, maxWidth, 0, baseDate);\n\n    this._appendValuePrinterParser(pp);\n\n    return this;\n  };\n\n  _proto._appendValuePrinterParser = function _appendValuePrinterParser(pp) {\n    assert(pp != null);\n\n    if (this._active._valueParserIndex >= 0 && this._active._printerParsers[this._active._valueParserIndex] instanceof NumberPrinterParser) {\n      var activeValueParser = this._active._valueParserIndex;\n      var basePP = this._active._printerParsers[activeValueParser];\n\n      if (pp.minWidth() === pp.maxWidth() && pp.signStyle() === SignStyle.NOT_NEGATIVE) {\n        basePP = basePP.withSubsequentWidth(pp.maxWidth());\n\n        this._appendInternal(pp.withFixedWidth());\n\n        this._active._valueParserIndex = activeValueParser;\n      } else {\n        basePP = basePP.withFixedWidth();\n        this._active._valueParserIndex = this._appendInternal(pp);\n      }\n\n      this._active._printerParsers[activeValueParser] = basePP;\n    } else {\n      this._active._valueParserIndex = this._appendInternal(pp);\n    }\n\n    return this;\n  };\n\n  _proto.appendFraction = function appendFraction(field, minWidth, maxWidth, decimalPoint) {\n    this._appendInternal(new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint));\n\n    return this;\n  };\n\n  _proto.appendInstant = function appendInstant(fractionalDigits) {\n    if (fractionalDigits === void 0) {\n      fractionalDigits = -2;\n    }\n\n    if (fractionalDigits < -2 || fractionalDigits > 9) {\n      throw new IllegalArgumentException('Invalid fractional digits: ' + fractionalDigits);\n    }\n\n    this._appendInternal(new InstantPrinterParser(fractionalDigits));\n\n    return this;\n  };\n\n  _proto.appendOffsetId = function appendOffsetId() {\n    this._appendInternal(OffsetIdPrinterParser.INSTANCE_ID);\n\n    return this;\n  };\n\n  _proto.appendOffset = function appendOffset(pattern, noOffsetText) {\n    this._appendInternalPrinterParser(new OffsetIdPrinterParser(noOffsetText, pattern));\n\n    return this;\n  };\n\n  _proto.appendZoneId = function appendZoneId() {\n    this._appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), 'ZoneId()'));\n\n    return this;\n  };\n\n  _proto.appendPattern = function appendPattern(pattern) {\n    requireNonNull(pattern, 'pattern');\n\n    this._parsePattern(pattern);\n\n    return this;\n  };\n\n  _proto.appendZoneText = function appendZoneText() {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented, use js-joda-locale plugin!');\n  };\n\n  _proto.appendText = function appendText() {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented, use js-joda-locale plugin!');\n  };\n\n  _proto.appendLocalizedOffset = function appendLocalizedOffset() {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented, use js-joda-locale plugin!');\n  };\n\n  _proto.appendWeekField = function appendWeekField() {\n    throw new IllegalArgumentException('Pattern using (localized) text not implemented, use js-joda-locale plugin!');\n  };\n\n  _proto._parsePattern = function _parsePattern(pattern) {\n    var FIELD_MAP = {\n      'G': ChronoField.ERA,\n      'y': ChronoField.YEAR_OF_ERA,\n      'u': ChronoField.YEAR,\n      'Q': IsoFields.QUARTER_OF_YEAR,\n      'q': IsoFields.QUARTER_OF_YEAR,\n      'M': ChronoField.MONTH_OF_YEAR,\n      'L': ChronoField.MONTH_OF_YEAR,\n      'D': ChronoField.DAY_OF_YEAR,\n      'd': ChronoField.DAY_OF_MONTH,\n      'F': ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH,\n      'E': ChronoField.DAY_OF_WEEK,\n      'c': ChronoField.DAY_OF_WEEK,\n      'e': ChronoField.DAY_OF_WEEK,\n      'a': ChronoField.AMPM_OF_DAY,\n      'H': ChronoField.HOUR_OF_DAY,\n      'k': ChronoField.CLOCK_HOUR_OF_DAY,\n      'K': ChronoField.HOUR_OF_AMPM,\n      'h': ChronoField.CLOCK_HOUR_OF_AMPM,\n      'm': ChronoField.MINUTE_OF_HOUR,\n      's': ChronoField.SECOND_OF_MINUTE,\n      'S': ChronoField.NANO_OF_SECOND,\n      'A': ChronoField.MILLI_OF_DAY,\n      'n': ChronoField.NANO_OF_SECOND,\n      'N': ChronoField.NANO_OF_DAY\n    };\n\n    for (var pos = 0; pos < pattern.length; pos++) {\n      var cur = pattern.charAt(pos);\n\n      if (cur >= 'A' && cur <= 'Z' || cur >= 'a' && cur <= 'z') {\n        var start = pos++;\n\n        for (; pos < pattern.length && pattern.charAt(pos) === cur; pos++) {\n        }\n\n        var count = pos - start;\n\n        if (cur === 'p') {\n          var pad = 0;\n\n          if (pos < pattern.length) {\n            cur = pattern.charAt(pos);\n\n            if (cur >= 'A' && cur <= 'Z' || cur >= 'a' && cur <= 'z') {\n              pad = count;\n              start = pos++;\n\n              for (; pos < pattern.length && pattern.charAt(pos) === cur; pos++) {\n              }\n\n              count = pos - start;\n            }\n          }\n\n          if (pad === 0) {\n            throw new IllegalArgumentException('Pad letter \\'p\\' must be followed by valid pad pattern: ' + pattern);\n          }\n\n          this.padNext(pad);\n        }\n\n        var field = FIELD_MAP[cur];\n\n        if (field != null) {\n          this._parseField(cur, count, field);\n        } else if (cur === 'z') {\n          if (count > 4) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          } else if (count === 4) {\n            this.appendZoneText(TextStyle.FULL);\n          } else {\n            this.appendZoneText(TextStyle.SHORT);\n          }\n        } else if (cur === 'V') {\n          if (count !== 2) {\n            throw new IllegalArgumentException('Pattern letter count must be 2: ' + cur);\n          }\n\n          this.appendZoneId();\n        } else if (cur === 'Z') {\n          if (count < 4) {\n            this.appendOffset('+HHMM', '+0000');\n          } else if (count === 4) {\n            this.appendLocalizedOffset(TextStyle.FULL);\n          } else if (count === 5) {\n            this.appendOffset('+HH:MM:ss', 'Z');\n          } else {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n        } else if (cur === 'O') {\n          if (count === 1) {\n            this.appendLocalizedOffset(TextStyle.SHORT);\n          } else if (count === 4) {\n            this.appendLocalizedOffset(TextStyle.FULL);\n          } else {\n            throw new IllegalArgumentException('Pattern letter count must be 1 or 4: ' + cur);\n          }\n        } else if (cur === 'X') {\n          if (count > 5) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n\n          this.appendOffset(OffsetIdPrinterParser.PATTERNS[count + (count === 1 ? 0 : 1)], 'Z');\n        } else if (cur === 'x') {\n          if (count > 5) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n\n          var zero = count === 1 ? '+00' : count % 2 === 0 ? '+0000' : '+00:00';\n          this.appendOffset(OffsetIdPrinterParser.PATTERNS[count + (count === 1 ? 0 : 1)], zero);\n        } else if (cur === 'W') {\n          if (count > 1) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n\n          this.appendWeekField('W', count);\n        } else if (cur === 'w') {\n          if (count > 2) {\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n          }\n\n          this.appendWeekField('w', count);\n        } else if (cur === 'Y') {\n          this.appendWeekField('Y', count);\n        } else {\n          throw new IllegalArgumentException('Unknown pattern letter: ' + cur);\n        }\n\n        pos--;\n      } else if (cur === '\\'') {\n        var _start = pos++;\n\n        for (; pos < pattern.length; pos++) {\n          if (pattern.charAt(pos) === '\\'') {\n            if (pos + 1 < pattern.length && pattern.charAt(pos + 1) === '\\'') {\n              pos++;\n            } else {\n              break;\n            }\n          }\n        }\n\n        if (pos >= pattern.length) {\n          throw new IllegalArgumentException('Pattern ends with an incomplete string literal: ' + pattern);\n        }\n\n        var str = pattern.substring(_start + 1, pos);\n\n        if (str.length === 0) {\n          this.appendLiteral('\\'');\n        } else {\n          this.appendLiteral(str.replace('\\'\\'', '\\''));\n        }\n      } else if (cur === '[') {\n        this.optionalStart();\n      } else if (cur === ']') {\n        if (this._active._parent === null) {\n          throw new IllegalArgumentException('Pattern invalid as it contains ] without previous [');\n        }\n\n        this.optionalEnd();\n      } else if (cur === '{' || cur === '}' || cur === '#') {\n        throw new IllegalArgumentException('Pattern includes reserved character: \\'' + cur + '\\'');\n      } else {\n        this.appendLiteral(cur);\n      }\n    }\n  };\n\n  _proto._parseField = function _parseField(cur, count, field) {\n    switch (cur) {\n      case 'u':\n      case 'y':\n        if (count === 2) {\n          this.appendValueReduced(field, 2, 2, ReducedPrinterParser.BASE_DATE);\n        } else if (count < 4) {\n          this.appendValue(field, count, MAX_WIDTH$1, SignStyle.NORMAL);\n        } else {\n          this.appendValue(field, count, MAX_WIDTH$1, SignStyle.EXCEEDS_PAD);\n        }\n\n        break;\n\n      case 'M':\n      case 'Q':\n        switch (count) {\n          case 1:\n            this.appendValue(field);\n            break;\n\n          case 2:\n            this.appendValue(field, 2);\n            break;\n\n          case 3:\n            this.appendText(field, TextStyle.SHORT);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'L':\n      case 'q':\n        switch (count) {\n          case 1:\n            this.appendValue(field);\n            break;\n\n          case 2:\n            this.appendValue(field, 2);\n            break;\n\n          case 3:\n            this.appendText(field, TextStyle.SHORT_STANDALONE);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL_STANDALONE);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW_STANDALONE);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'e':\n        switch (count) {\n          case 1:\n          case 2:\n            this.appendWeekField('e', count);\n            break;\n\n          case 3:\n            this.appendText(field, TextStyle.SHORT);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'c':\n        switch (count) {\n          case 1:\n            this.appendWeekField('c', count);\n            break;\n\n          case 2:\n            throw new IllegalArgumentException('Invalid number of pattern letters: ' + cur);\n\n          case 3:\n            this.appendText(field, TextStyle.SHORT_STANDALONE);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL_STANDALONE);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW_STANDALONE);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'a':\n        if (count === 1) {\n          this.appendText(field, TextStyle.SHORT);\n        } else {\n          throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'E':\n      case 'G':\n        switch (count) {\n          case 1:\n          case 2:\n          case 3:\n            this.appendText(field, TextStyle.SHORT);\n            break;\n\n          case 4:\n            this.appendText(field, TextStyle.FULL);\n            break;\n\n          case 5:\n            this.appendText(field, TextStyle.NARROW);\n            break;\n\n          default:\n            throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'S':\n        this.appendFraction(ChronoField.NANO_OF_SECOND, count, count, false);\n        break;\n\n      case 'F':\n        if (count === 1) {\n          this.appendValue(field);\n        } else {\n          throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'd':\n      case 'h':\n      case 'H':\n      case 'k':\n      case 'K':\n      case 'm':\n      case 's':\n        if (count === 1) {\n          this.appendValue(field);\n        } else if (count === 2) {\n          this.appendValue(field, count);\n        } else {\n          throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      case 'D':\n        if (count === 1) {\n          this.appendValue(field);\n        } else if (count <= 3) {\n          this.appendValue(field, count);\n        } else {\n          throw new IllegalArgumentException('Too many pattern letters: ' + cur);\n        }\n\n        break;\n\n      default:\n        if (count === 1) {\n          this.appendValue(field);\n        } else {\n          this.appendValue(field, count);\n        }\n\n        break;\n    }\n  };\n\n  _proto.padNext = function padNext() {\n    if (arguments.length === 1) {\n      return this._padNext1.apply(this, arguments);\n    } else {\n      return this._padNext2.apply(this, arguments);\n    }\n  };\n\n  _proto._padNext1 = function _padNext1(padWidth) {\n    return this._padNext2(padWidth, ' ');\n  };\n\n  _proto._padNext2 = function _padNext2(padWidth, padChar) {\n    if (padWidth < 1) {\n      throw new IllegalArgumentException('The pad width must be at least one but was ' + padWidth);\n    }\n\n    this._active._padNextWidth = padWidth;\n    this._active._padNextChar = padChar;\n    this._active._valueParserIndex = -1;\n    return this;\n  };\n\n  _proto.optionalStart = function optionalStart() {\n    this._active._valueParserIndex = -1;\n    this._active = DateTimeFormatterBuilder._of(this._active, true);\n    return this;\n  };\n\n  _proto.optionalEnd = function optionalEnd() {\n    if (this._active._parent == null) {\n      throw new IllegalStateException('Cannot call optionalEnd() as there was no previous call to optionalStart()');\n    }\n\n    if (this._active._printerParsers.length > 0) {\n      var cpp = new CompositePrinterParser(this._active._printerParsers, this._active._optional);\n      this._active = this._active._parent;\n\n      this._appendInternal(cpp);\n    } else {\n      this._active = this._active._parent;\n    }\n\n    return this;\n  };\n\n  _proto._appendInternal = function _appendInternal(pp) {\n    assert(pp != null);\n\n    if (this._active._padNextWidth > 0) {\n      if (pp != null) {\n        pp = new PadPrinterParserDecorator(pp, this._active._padNextWidth, this._active._padNextChar);\n      }\n\n      this._active._padNextWidth = 0;\n      this._active._padNextChar = 0;\n    }\n\n    this._active._printerParsers.push(pp);\n\n    this._active._valueParserIndex = -1;\n    return this._active._printerParsers.length - 1;\n  };\n\n  _proto.appendLiteral = function appendLiteral(literal) {\n    assert(literal != null);\n\n    if (literal.length > 0) {\n      if (literal.length === 1) {\n        this._appendInternalPrinterParser(new CharLiteralPrinterParser(literal.charAt(0)));\n      } else {\n        this._appendInternalPrinterParser(new StringLiteralPrinterParser(literal));\n      }\n    }\n\n    return this;\n  };\n\n  _proto._appendInternalPrinterParser = function _appendInternalPrinterParser(pp) {\n    assert(pp != null);\n\n    if (this._active._padNextWidth > 0) {\n      if (pp != null) {\n        pp = new PadPrinterParserDecorator(pp, this._active._padNextWidth, this._active._padNextChar);\n      }\n\n      this._active._padNextWidth = 0;\n      this._active._padNextChar = 0;\n    }\n\n    this._active._printerParsers.push(pp);\n\n    this._active._valueParserIndex = -1;\n    return this._active._printerParsers.length - 1;\n  };\n\n  _proto.append = function append(formatter) {\n    requireNonNull(formatter, 'formatter');\n\n    this._appendInternal(formatter._toPrinterParser(false));\n\n    return this;\n  };\n\n  _proto.toFormatter = function toFormatter(resolverStyle) {\n    if (resolverStyle === void 0) {\n      resolverStyle = ResolverStyle.SMART;\n    }\n\n    while (this._active._parent != null) {\n      this.optionalEnd();\n    }\n\n    var pp = new CompositePrinterParser(this._printerParsers, false);\n    return new DateTimeFormatter(pp, null, DecimalStyle.STANDARD, resolverStyle, null, null, null);\n  };\n\n  return DateTimeFormatterBuilder;\n}();\nvar SECONDS_PER_10000_YEARS = 146097 * 25 * 86400;\nvar SECONDS_0000_TO_1970 = (146097 * 5 - (30 * 365 + 7)) * 86400;\n\nvar InstantPrinterParser = function () {\n  function InstantPrinterParser(fractionalDigits) {\n    this.fractionalDigits = fractionalDigits;\n  }\n\n  var _proto2 = InstantPrinterParser.prototype;\n\n  _proto2.print = function print(context, buf) {\n    var inSecs = context.getValue(ChronoField.INSTANT_SECONDS);\n    var inNanos = 0;\n\n    if (context.temporal().isSupported(ChronoField.NANO_OF_SECOND)) {\n      inNanos = context.temporal().getLong(ChronoField.NANO_OF_SECOND);\n    }\n\n    if (inSecs == null) {\n      return false;\n    }\n\n    var inSec = inSecs;\n    var inNano = ChronoField.NANO_OF_SECOND.checkValidIntValue(inNanos);\n\n    if (inSec >= -SECONDS_0000_TO_1970) {\n      var zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;\n      var hi = MathUtil.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;\n      var lo = MathUtil.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);\n      var ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n\n      if (hi > 0) {\n        buf.append('+').append(hi);\n      }\n\n      buf.append(ldt);\n\n      if (ldt.second() === 0) {\n        buf.append(':00');\n      }\n    } else {\n      var _zeroSecs = inSec + SECONDS_0000_TO_1970;\n\n      var _hi = MathUtil.intDiv(_zeroSecs, SECONDS_PER_10000_YEARS);\n\n      var _lo = MathUtil.intMod(_zeroSecs, SECONDS_PER_10000_YEARS);\n\n      var _ldt = LocalDateTime.ofEpochSecond(_lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n\n      var pos = buf.length();\n      buf.append(_ldt);\n\n      if (_ldt.second() === 0) {\n        buf.append(':00');\n      }\n\n      if (_hi < 0) {\n        if (_ldt.year() === -10000) {\n          buf.replace(pos, pos + 2, '' + (_hi - 1));\n        } else if (_lo === 0) {\n          buf.insert(pos, _hi);\n        } else {\n          buf.insert(pos + 1, Math.abs(_hi));\n        }\n      }\n    }\n\n    if (this.fractionalDigits === -2) {\n      if (inNano !== 0) {\n        buf.append('.');\n\n        if (MathUtil.intMod(inNano, 1000000) === 0) {\n          buf.append(('' + (MathUtil.intDiv(inNano, 1000000) + 1000)).substring(1));\n        } else if (MathUtil.intMod(inNano, 1000) === 0) {\n          buf.append(('' + (MathUtil.intDiv(inNano, 1000) + 1000000)).substring(1));\n        } else {\n          buf.append(('' + (inNano + 1000000000)).substring(1));\n        }\n      }\n    } else if (this.fractionalDigits > 0 || this.fractionalDigits === -1 && inNano > 0) {\n      buf.append('.');\n      var div = 100000000;\n\n      for (var i = 0; this.fractionalDigits === -1 && inNano > 0 || i < this.fractionalDigits; i++) {\n        var digit = MathUtil.intDiv(inNano, div);\n        buf.append(digit);\n        inNano = inNano - digit * div;\n        div = MathUtil.intDiv(div, 10);\n      }\n    }\n\n    buf.append('Z');\n    return true;\n  };\n\n  _proto2.parse = function parse(context, text, position) {\n    var newContext = context.copy();\n    var minDigits = this.fractionalDigits < 0 ? 0 : this.fractionalDigits;\n    var maxDigits = this.fractionalDigits < 0 ? 9 : this.fractionalDigits;\n\n    var parser = new DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_LOCAL_DATE).appendLiteral('T').appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral(':').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral(':').appendValue(ChronoField.SECOND_OF_MINUTE, 2).appendFraction(ChronoField.NANO_OF_SECOND, minDigits, maxDigits, true).appendLiteral('Z').toFormatter()._toPrinterParser(false);\n\n    var pos = parser.parse(newContext, text, position);\n\n    if (pos < 0) {\n      return pos;\n    }\n\n    var yearParsed = newContext.getParsed(ChronoField.YEAR);\n    var month = newContext.getParsed(ChronoField.MONTH_OF_YEAR);\n    var day = newContext.getParsed(ChronoField.DAY_OF_MONTH);\n    var hour = newContext.getParsed(ChronoField.HOUR_OF_DAY);\n    var min = newContext.getParsed(ChronoField.MINUTE_OF_HOUR);\n    var secVal = newContext.getParsed(ChronoField.SECOND_OF_MINUTE);\n    var nanoVal = newContext.getParsed(ChronoField.NANO_OF_SECOND);\n    var sec = secVal != null ? secVal : 0;\n    var nano = nanoVal != null ? nanoVal : 0;\n    var year = MathUtil.intMod(yearParsed, 10000);\n    var days = 0;\n\n    if (hour === 24 && min === 0 && sec === 0 && nano === 0) {\n      hour = 0;\n      days = 1;\n    } else if (hour === 23 && min === 59 && sec === 60) {\n      context.setParsedLeapSecond();\n      sec = 59;\n    }\n\n    var instantSecs;\n\n    try {\n      var ldt = LocalDateTime.of(year, month, day, hour, min, sec, 0).plusDays(days);\n      instantSecs = ldt.toEpochSecond(ZoneOffset.UTC);\n      instantSecs += MathUtil.safeMultiply(MathUtil.intDiv(yearParsed, 10000), SECONDS_PER_10000_YEARS);\n    } catch (ex) {\n      return ~position;\n    }\n\n    var successPos = pos;\n    successPos = context.setParsedField(ChronoField.INSTANT_SECONDS, instantSecs, position, successPos);\n    return context.setParsedField(ChronoField.NANO_OF_SECOND, nano, position, successPos);\n  };\n\n  _proto2.toString = function toString() {\n    return 'Instant()';\n  };\n\n  return InstantPrinterParser;\n}();\n\nfunction _init$9() {\n  ReducedPrinterParser.BASE_DATE = LocalDate.of(2000, 1, 1);\n  DateTimeFormatterBuilder.CompositePrinterParser = CompositePrinterParser;\n  DateTimeFormatterBuilder.PadPrinterParserDecorator = PadPrinterParserDecorator;\n  DateTimeFormatterBuilder.SettingsParser = SettingsParser;\n  DateTimeFormatterBuilder.CharLiteralPrinterParser = StringLiteralPrinterParser;\n  DateTimeFormatterBuilder.StringLiteralPrinterParser = StringLiteralPrinterParser;\n  DateTimeFormatterBuilder.CharLiteralPrinterParser = CharLiteralPrinterParser;\n  DateTimeFormatterBuilder.NumberPrinterParser = NumberPrinterParser;\n  DateTimeFormatterBuilder.ReducedPrinterParser = ReducedPrinterParser;\n  DateTimeFormatterBuilder.FractionPrinterParser = FractionPrinterParser;\n  DateTimeFormatterBuilder.OffsetIdPrinterParser = OffsetIdPrinterParser;\n  DateTimeFormatterBuilder.ZoneIdPrinterParser = ZoneIdPrinterParser;\n}\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar StringBuilder = function () {\n  function StringBuilder() {\n    this._str = '';\n  }\n\n  var _proto = StringBuilder.prototype;\n\n  _proto.append = function append(str) {\n    this._str += str;\n    return this;\n  };\n\n  _proto.appendChar = function appendChar(str) {\n    this._str += str[0];\n    return this;\n  };\n\n  _proto.insert = function insert(offset, str) {\n    this._str = this._str.slice(0, offset) + str + this._str.slice(offset);\n    return this;\n  };\n\n  _proto.replace = function replace(start, end, str) {\n    this._str = this._str.slice(0, start) + str + this._str.slice(end);\n    return this;\n  };\n\n  _proto.length = function length() {\n    return this._str.length;\n  };\n\n  _proto.setLength = function setLength(length) {\n    this._str = this._str.slice(0, length);\n    return this;\n  };\n\n  _proto.toString = function toString() {\n    return this._str;\n  };\n\n  return StringBuilder;\n}();\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar DateTimeFormatter = function () {\n  DateTimeFormatter.parsedExcessDays = function parsedExcessDays() {\n    return DateTimeFormatter.PARSED_EXCESS_DAYS;\n  };\n\n  DateTimeFormatter.parsedLeapSecond = function parsedLeapSecond() {\n    return DateTimeFormatter.PARSED_LEAP_SECOND;\n  };\n\n  DateTimeFormatter.ofPattern = function ofPattern(pattern) {\n    return new DateTimeFormatterBuilder().appendPattern(pattern).toFormatter();\n  };\n\n  function DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone) {\n    if (chrono === void 0) {\n      chrono = IsoChronology.INSTANCE;\n    }\n\n    assert(printerParser != null);\n    assert(decimalStyle != null);\n    assert(resolverStyle != null);\n    this._printerParser = printerParser;\n    this._locale = locale;\n    this._decimalStyle = decimalStyle;\n    this._resolverStyle = resolverStyle;\n    this._resolverFields = resolverFields;\n    this._chrono = chrono;\n    this._zone = zone;\n  }\n\n  var _proto = DateTimeFormatter.prototype;\n\n  _proto.locale = function locale() {\n    return this._locale;\n  };\n\n  _proto.decimalStyle = function decimalStyle() {\n    return this._decimalStyle;\n  };\n\n  _proto.chronology = function chronology() {\n    return this._chrono;\n  };\n\n  _proto.withChronology = function withChronology(chrono) {\n    if (this._chrono != null && this._chrono.equals(chrono)) {\n      return this;\n    }\n\n    return new DateTimeFormatter(this._printerParser, this._locale, this._decimalStyle, this._resolverStyle, this._resolverFields, chrono, this._zone);\n  };\n\n  _proto.withLocale = function withLocale() {\n    return this;\n  };\n\n  _proto.withResolverStyle = function withResolverStyle(resolverStyle) {\n    requireNonNull(resolverStyle, 'resolverStyle');\n\n    if (resolverStyle.equals(this._resolverStyle)) {\n      return this;\n    }\n\n    return new DateTimeFormatter(this._printerParser, this._locale, this._decimalStyle, resolverStyle, this._resolverFields, this._chrono, this._zone);\n  };\n\n  _proto.format = function format(temporal) {\n    var buf = new StringBuilder(32);\n\n    this._formatTo(temporal, buf);\n\n    return buf.toString();\n  };\n\n  _proto._formatTo = function _formatTo(temporal, appendable) {\n    requireNonNull(temporal, 'temporal');\n    requireNonNull(appendable, 'appendable');\n    var context = new DateTimePrintContext(temporal, this);\n\n    this._printerParser.print(context, appendable);\n  };\n\n  _proto.parse = function parse(text, type) {\n    if (arguments.length === 1) {\n      return this.parse1(text);\n    } else {\n      return this.parse2(text, type);\n    }\n  };\n\n  _proto.parse1 = function parse1(text) {\n    requireNonNull(text, 'text');\n\n    try {\n      return this._parseToBuilder(text, null).resolve(this._resolverStyle, this._resolverFields);\n    } catch (ex) {\n      if (ex instanceof DateTimeParseException) {\n        throw ex;\n      } else {\n        throw this._createError(text, ex);\n      }\n    }\n  };\n\n  _proto.parse2 = function parse2(text, type) {\n    requireNonNull(text, 'text');\n    requireNonNull(type, 'type');\n\n    try {\n      var builder = this._parseToBuilder(text, null).resolve(this._resolverStyle, this._resolverFields);\n\n      return builder.build(type);\n    } catch (ex) {\n      if (ex instanceof DateTimeParseException) {\n        throw ex;\n      } else {\n        throw this._createError(text, ex);\n      }\n    }\n  };\n\n  _proto._createError = function _createError(text, ex) {\n    var abbr = '';\n\n    if (text.length > 64) {\n      abbr = text.substring(0, 64) + '...';\n    } else {\n      abbr = text;\n    }\n\n    return new DateTimeParseException('Text \\'' + abbr + '\\' could not be parsed: ' + ex.message, text, 0, ex);\n  };\n\n  _proto._parseToBuilder = function _parseToBuilder(text, position) {\n    var pos = position != null ? position : new ParsePosition(0);\n\n    var result = this._parseUnresolved0(text, pos);\n\n    if (result == null || pos.getErrorIndex() >= 0 || position == null && pos.getIndex() < text.length) {\n      var abbr = '';\n\n      if (text.length > 64) {\n        abbr = text.substr(0, 64).toString() + '...';\n      } else {\n        abbr = text;\n      }\n\n      if (pos.getErrorIndex() >= 0) {\n        throw new DateTimeParseException('Text \\'' + abbr + '\\' could not be parsed at index ' + pos.getErrorIndex(), text, pos.getErrorIndex());\n      } else {\n        throw new DateTimeParseException('Text \\'' + abbr + '\\' could not be parsed, unparsed text found at index ' + pos.getIndex(), text, pos.getIndex());\n      }\n    }\n\n    return result.toBuilder();\n  };\n\n  _proto.parseUnresolved = function parseUnresolved(text, position) {\n    return this._parseUnresolved0(text, position);\n  };\n\n  _proto._parseUnresolved0 = function _parseUnresolved0(text, position) {\n    assert(text != null, 'text', NullPointerException);\n    assert(position != null, 'position', NullPointerException);\n    var context = new DateTimeParseContext(this);\n    var pos = position.getIndex();\n    pos = this._printerParser.parse(context, text, pos);\n\n    if (pos < 0) {\n      position.setErrorIndex(~pos);\n      return null;\n    }\n\n    position.setIndex(pos);\n    return context.toParsed();\n  };\n\n  _proto._toPrinterParser = function _toPrinterParser(optional) {\n    return this._printerParser.withOptional(optional);\n  };\n\n  _proto.toString = function toString() {\n    var pattern = this._printerParser.toString();\n\n    return pattern.indexOf('[') === 0 ? pattern : pattern.substring(1, pattern.length - 1);\n  };\n\n  return DateTimeFormatter;\n}();\nfunction _init$a() {\n  DateTimeFormatter.ISO_LOCAL_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_LOCAL_TIME = new DateTimeFormatterBuilder().appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral(':').appendValue(ChronoField.MINUTE_OF_HOUR, 2).optionalStart().appendLiteral(':').appendValue(ChronoField.SECOND_OF_MINUTE, 2).optionalStart().appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true).toFormatter(ResolverStyle.STRICT);\n  DateTimeFormatter.ISO_LOCAL_DATE_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE).appendLiteral('T').append(DateTimeFormatter.ISO_LOCAL_TIME).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_INSTANT = new DateTimeFormatterBuilder().parseCaseInsensitive().appendInstant().toFormatter(ResolverStyle.STRICT);\n  DateTimeFormatter.ISO_OFFSET_DATE_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE_TIME).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_ZONED_DATE_TIME = new DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_OFFSET_DATE_TIME).optionalStart().appendLiteral('[').parseCaseSensitive().appendZoneId().appendLiteral(']').toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.BASIC_ISO_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendValue(ChronoField.MONTH_OF_YEAR, 2).appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_OFFSET_DATE = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_OFFSET_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_TIME).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n  DateTimeFormatter.ISO_ORDINAL_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.DAY_OF_YEAR).toFormatter(ResolverStyle.STRICT);\n  DateTimeFormatter.ISO_WEEK_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-W').appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR).appendLiteral('-').appendValue(ChronoField.DAY_OF_WEEK).toFormatter(ResolverStyle.STRICT);\n  DateTimeFormatter.PARSED_EXCESS_DAYS = createTemporalQuery('PARSED_EXCESS_DAYS', function (temporal) {\n    if (temporal instanceof DateTimeBuilder) {\n      return temporal.excessDays;\n    } else {\n      return Period.ZERO;\n    }\n  });\n  DateTimeFormatter.PARSED_LEAP_SECOND = createTemporalQuery('PARSED_LEAP_SECOND', function (temporal) {\n    if (temporal instanceof DateTimeBuilder) {\n      return temporal.leapSecond;\n    } else {\n      return false;\n    }\n  });\n}\n\nvar MonthDay = function (_TemporalAccessor) {\n  _inheritsLoose(MonthDay, _TemporalAccessor);\n\n  MonthDay.now = function now(zoneIdOrClock) {\n    if (arguments.length === 0) {\n      return MonthDay.now0();\n    } else if (arguments.length === 1 && zoneIdOrClock instanceof ZoneId) {\n      return MonthDay.nowZoneId(zoneIdOrClock);\n    } else {\n      return MonthDay.nowClock(zoneIdOrClock);\n    }\n  };\n\n  MonthDay.now0 = function now0() {\n    return this.nowClock(Clock.systemDefaultZone());\n  };\n\n  MonthDay.nowZoneId = function nowZoneId(zone) {\n    requireNonNull(zone, 'zone');\n    return this.nowClock(Clock.system(zone));\n  };\n\n  MonthDay.nowClock = function nowClock(clock) {\n    requireNonNull(clock, 'clock');\n    var now = LocalDate.now(clock);\n    return MonthDay.of(now.month(), now.dayOfMonth());\n  };\n\n  MonthDay.of = function of(monthOrNumber, number) {\n    if (arguments.length === 2 && monthOrNumber instanceof Month) {\n      return MonthDay.ofMonthNumber(monthOrNumber, number);\n    } else {\n      return MonthDay.ofNumberNumber(monthOrNumber, number);\n    }\n  };\n\n  MonthDay.ofMonthNumber = function ofMonthNumber(month, dayOfMonth) {\n    requireNonNull(month, 'month');\n    ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n\n    if (dayOfMonth > month.maxLength()) {\n      throw new DateTimeException('Illegal value for DayOfMonth field, value ' + dayOfMonth + ' is not valid for month ' + month.toString());\n    }\n\n    return new MonthDay(month.value(), dayOfMonth);\n  };\n\n  MonthDay.ofNumberNumber = function ofNumberNumber(month, dayOfMonth) {\n    requireNonNull(month, 'month');\n    requireNonNull(dayOfMonth, 'dayOfMonth');\n    return MonthDay.of(Month.of(month), dayOfMonth);\n  };\n\n  MonthDay.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    requireInstance(temporal, TemporalAccessor, 'temporal');\n\n    if (temporal instanceof MonthDay) {\n      return temporal;\n    }\n\n    try {\n      return MonthDay.of(temporal.get(ChronoField.MONTH_OF_YEAR), temporal.get(ChronoField.DAY_OF_MONTH));\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain MonthDay from TemporalAccessor: ' + temporal + ', type ' + (temporal && temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  MonthDay.parse = function parse(text, formatter) {\n    if (arguments.length === 1) {\n      return MonthDay.parseString(text);\n    } else {\n      return MonthDay.parseStringFormatter(text, formatter);\n    }\n  };\n\n  MonthDay.parseString = function parseString(text) {\n    return MonthDay.parseStringFormatter(text, PARSER);\n  };\n\n  MonthDay.parseStringFormatter = function parseStringFormatter(text, formatter) {\n    requireNonNull(text, 'text');\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.parse(text, MonthDay.FROM);\n  };\n\n  function MonthDay(month, dayOfMonth) {\n    var _this;\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this._month = MathUtil.safeToInt(month);\n    _this._day = MathUtil.safeToInt(dayOfMonth);\n    return _this;\n  }\n\n  var _proto = MonthDay.prototype;\n\n  _proto.monthValue = function monthValue() {\n    return this._month;\n  };\n\n  _proto.month = function month() {\n    return Month.of(this._month);\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._day;\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    if (field instanceof ChronoField) {\n      return field === ChronoField.MONTH_OF_YEAR || field === ChronoField.DAY_OF_MONTH;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field === ChronoField.MONTH_OF_YEAR) {\n      return field.range();\n    } else if (field === ChronoField.DAY_OF_MONTH) {\n      return ValueRange.of(1, this.month().minLength(), this.month().maxLength());\n    }\n\n    return _TemporalAccessor.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.DAY_OF_MONTH:\n          return this._day;\n\n        case ChronoField.MONTH_OF_YEAR:\n          return this._month;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.isValidYear = function isValidYear(year) {\n    return (this._day === 29 && this._month === 2 && Year.isLeap(year) === false) === false;\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    return this.with(Month.of(month));\n  };\n\n  _proto.with = function _with(month) {\n    requireNonNull(month, 'month');\n\n    if (month.value() === this._month) {\n      return this;\n    }\n\n    var day = Math.min(this._day, month.maxLength());\n    return new MonthDay(month.value(), day);\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    if (dayOfMonth === this._day) {\n      return this;\n    }\n\n    return MonthDay.of(this._month, dayOfMonth);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n    requireInstance(_query, TemporalQuery, 'query');\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    }\n\n    return _TemporalAccessor.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    temporal = temporal.with(ChronoField.MONTH_OF_YEAR, this._month);\n    return temporal.with(ChronoField.DAY_OF_MONTH, Math.min(temporal.range(ChronoField.DAY_OF_MONTH).maximum(), this._day));\n  };\n\n  _proto.atYear = function atYear(year) {\n    return LocalDate.of(year, this._month, this.isValidYear(year) ? this._day : 28);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, MonthDay, 'other');\n    var cmp = this._month - other.monthValue();\n\n    if (cmp === 0) {\n      cmp = this._day - other.dayOfMonth();\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, MonthDay, 'other');\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, MonthDay, 'other');\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.equals = function equals(obj) {\n    if (this === obj) {\n      return true;\n    }\n\n    if (obj instanceof MonthDay) {\n      var other = obj;\n      return this.monthValue() === other.monthValue() && this.dayOfMonth() === other.dayOfMonth();\n    }\n\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    return '--' + (this._month < 10 ? '0' : '') + this._month + (this._day < 10 ? '-0' : '-') + this._day;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return MonthDay;\n}(TemporalAccessor);\nvar PARSER;\nfunction _init$b() {\n  PARSER = new DateTimeFormatterBuilder().appendLiteral('--').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter();\n  MonthDay.FROM = createTemporalQuery('MonthDay.FROM', function (temporal) {\n    return MonthDay.from(temporal);\n  });\n}\n\nvar YearMonth = function (_Temporal) {\n  _inheritsLoose(YearMonth, _Temporal);\n\n  YearMonth.now = function now(zoneIdOrClock) {\n    if (arguments.length === 0) {\n      return YearMonth.now0();\n    } else if (arguments.length === 1 && zoneIdOrClock instanceof ZoneId) {\n      return YearMonth.nowZoneId(zoneIdOrClock);\n    } else {\n      return YearMonth.nowClock(zoneIdOrClock);\n    }\n  };\n\n  YearMonth.now0 = function now0() {\n    return YearMonth.nowClock(Clock.systemDefaultZone());\n  };\n\n  YearMonth.nowZoneId = function nowZoneId(zone) {\n    return YearMonth.nowClock(Clock.system(zone));\n  };\n\n  YearMonth.nowClock = function nowClock(clock) {\n    var now = LocalDate.now(clock);\n    return YearMonth.of(now.year(), now.month());\n  };\n\n  YearMonth.of = function of(year, monthOrNumber) {\n    if (arguments.length === 2 && monthOrNumber instanceof Month) {\n      return YearMonth.ofNumberMonth(year, monthOrNumber);\n    } else {\n      return YearMonth.ofNumberNumber(year, monthOrNumber);\n    }\n  };\n\n  YearMonth.ofNumberMonth = function ofNumberMonth(year, month) {\n    requireNonNull(month, 'month');\n    requireInstance(month, Month, 'month');\n    return YearMonth.ofNumberNumber(year, month.value());\n  };\n\n  YearMonth.ofNumberNumber = function ofNumberNumber(year, month) {\n    requireNonNull(year, 'year');\n    requireNonNull(month, 'month');\n    ChronoField.YEAR.checkValidValue(year);\n    ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n    return new YearMonth(year, month);\n  };\n\n  YearMonth.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof YearMonth) {\n      return temporal;\n    }\n\n    try {\n      return YearMonth.of(temporal.get(ChronoField.YEAR), temporal.get(ChronoField.MONTH_OF_YEAR));\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain YearMonth from TemporalAccessor: ' + temporal + ', type ' + (temporal && temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  YearMonth.parse = function parse(text, formatter) {\n    if (arguments.length === 1) {\n      return YearMonth.parseString(text);\n    } else {\n      return YearMonth.parseStringFormatter(text, formatter);\n    }\n  };\n\n  YearMonth.parseString = function parseString(text) {\n    return YearMonth.parseStringFormatter(text, PARSER$1);\n  };\n\n  YearMonth.parseStringFormatter = function parseStringFormatter(text, formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, YearMonth.FROM);\n  };\n\n  function YearMonth(year, month) {\n    var _this;\n\n    _this = _Temporal.call(this) || this;\n    _this._year = MathUtil.safeToInt(year);\n    _this._month = MathUtil.safeToInt(month);\n    return _this;\n  }\n\n  var _proto = YearMonth.prototype;\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (arguments.length === 1 && fieldOrUnit instanceof TemporalField) {\n      return this.isSupportedField(fieldOrUnit);\n    } else {\n      return this.isSupportedUnit(fieldOrUnit);\n    }\n  };\n\n  _proto.isSupportedField = function isSupportedField(field) {\n    if (field instanceof ChronoField) {\n      return field === ChronoField.YEAR || field === ChronoField.MONTH_OF_YEAR || field === ChronoField.PROLEPTIC_MONTH || field === ChronoField.YEAR_OF_ERA || field === ChronoField.ERA;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.isSupportedUnit = function isSupportedUnit(unit) {\n    if (unit instanceof ChronoUnit) {\n      return unit === ChronoUnit.MONTHS || unit === ChronoUnit.YEARS || unit === ChronoUnit.DECADES || unit === ChronoUnit.CENTURIES || unit === ChronoUnit.MILLENNIA || unit === ChronoUnit.ERAS;\n    }\n\n    return unit != null && unit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field === ChronoField.YEAR_OF_ERA) {\n      return this.year() <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE);\n    }\n\n    return _Temporal.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.MONTH_OF_YEAR:\n          return this._month;\n\n        case ChronoField.PROLEPTIC_MONTH:\n          return this._getProlepticMonth();\n\n        case ChronoField.YEAR_OF_ERA:\n          return this._year < 1 ? 1 - this._year : this._year;\n\n        case ChronoField.YEAR:\n          return this._year;\n\n        case ChronoField.ERA:\n          return this._year < 1 ? 0 : 1;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto._getProlepticMonth = function _getProlepticMonth() {\n    return MathUtil.safeAdd(MathUtil.safeMultiply(this._year, 12), this._month - 1);\n  };\n\n  _proto.year = function year() {\n    return this._year;\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._month;\n  };\n\n  _proto.month = function month() {\n    return Month.of(this._month);\n  };\n\n  _proto.isLeapYear = function isLeapYear() {\n    return IsoChronology.isLeapYear(this._year);\n  };\n\n  _proto.isValidDay = function isValidDay(dayOfMonth) {\n    return dayOfMonth >= 1 && dayOfMonth <= this.lengthOfMonth();\n  };\n\n  _proto.lengthOfMonth = function lengthOfMonth() {\n    return this.month().length(this.isLeapYear());\n  };\n\n  _proto.lengthOfYear = function lengthOfYear() {\n    return this.isLeapYear() ? 366 : 365;\n  };\n\n  _proto.with = function _with(adjusterOrField, value) {\n    if (arguments.length === 1) {\n      return this.withAdjuster(adjusterOrField);\n    } else {\n      return this.withFieldValue(adjusterOrField, value);\n    }\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n\n    if (field instanceof ChronoField) {\n      var f = field;\n      f.checkValidValue(newValue);\n\n      switch (f) {\n        case ChronoField.MONTH_OF_YEAR:\n          return this.withMonth(newValue);\n\n        case ChronoField.PROLEPTIC_MONTH:\n          return this.plusMonths(newValue - this.getLong(ChronoField.PROLEPTIC_MONTH));\n\n        case ChronoField.YEAR_OF_ERA:\n          return this.withYear(this._year < 1 ? 1 - newValue : newValue);\n\n        case ChronoField.YEAR:\n          return this.withYear(newValue);\n\n        case ChronoField.ERA:\n          return this.getLong(ChronoField.ERA) === newValue ? this : this.withYear(1 - this._year);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withYear = function withYear(year) {\n    ChronoField.YEAR.checkValidValue(year);\n    return new YearMonth(year, this._month);\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n    return new YearMonth(this._year, month);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.MONTHS:\n          return this.plusMonths(amountToAdd);\n\n        case ChronoUnit.YEARS:\n          return this.plusYears(amountToAdd);\n\n        case ChronoUnit.DECADES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n\n        case ChronoUnit.CENTURIES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n\n        case ChronoUnit.MILLENNIA:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n\n        case ChronoUnit.ERAS:\n          return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(yearsToAdd) {\n    if (yearsToAdd === 0) {\n      return this;\n    }\n\n    var newYear = ChronoField.YEAR.checkValidIntValue(this._year + yearsToAdd);\n    return this.withYear(newYear);\n  };\n\n  _proto.plusMonths = function plusMonths(monthsToAdd) {\n    if (monthsToAdd === 0) {\n      return this;\n    }\n\n    var monthCount = this._year * 12 + (this._month - 1);\n    var calcMonths = monthCount + monthsToAdd;\n    var newYear = ChronoField.YEAR.checkValidIntValue(MathUtil.floorDiv(calcMonths, 12));\n    var newMonth = MathUtil.floorMod(calcMonths, 12) + 1;\n    return new YearMonth(newYear, newMonth);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return amountToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusAmountUnit(MathUtil.MAX_SAFE_INTEGER, unit).plusAmountUnit(1, unit) : this.plusAmountUnit(-amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(yearsToSubtract) {\n    return yearsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusYears(MathUtil.MIN_SAFE_INTEGER).plusYears(1) : this.plusYears(-yearsToSubtract);\n  };\n\n  _proto.minusMonths = function minusMonths(monthsToSubtract) {\n    return monthsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusMonths(Math.MAX_SAFE_INTEGER).plusMonths(1) : this.plusMonths(-monthsToSubtract);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n    requireInstance(_query, TemporalQuery, 'query');\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.MONTHS;\n    } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _Temporal.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    requireInstance(temporal, Temporal, 'temporal');\n    return temporal.with(ChronoField.PROLEPTIC_MONTH, this._getProlepticMonth());\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    requireInstance(endExclusive, Temporal, 'endExclusive');\n    requireInstance(unit, TemporalUnit, 'unit');\n    var end = YearMonth.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      var monthsUntil = end._getProlepticMonth() - this._getProlepticMonth();\n\n      switch (unit) {\n        case ChronoUnit.MONTHS:\n          return monthsUntil;\n\n        case ChronoUnit.YEARS:\n          return monthsUntil / 12;\n\n        case ChronoUnit.DECADES:\n          return monthsUntil / 120;\n\n        case ChronoUnit.CENTURIES:\n          return monthsUntil / 1200;\n\n        case ChronoUnit.MILLENNIA:\n          return monthsUntil / 12000;\n\n        case ChronoUnit.ERAS:\n          return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.atDay = function atDay(dayOfMonth) {\n    return LocalDate.of(this._year, this._month, dayOfMonth);\n  };\n\n  _proto.atEndOfMonth = function atEndOfMonth() {\n    return LocalDate.of(this._year, this._month, this.lengthOfMonth());\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, YearMonth, 'other');\n    var cmp = this._year - other.year();\n\n    if (cmp === 0) {\n      cmp = this._month - other.monthValue();\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.equals = function equals(obj) {\n    if (this === obj) {\n      return true;\n    }\n\n    if (obj instanceof YearMonth) {\n      var other = obj;\n      return this.year() === other.year() && this.monthValue() === other.monthValue();\n    }\n\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    return PARSER$1.format(this);\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return YearMonth;\n}(Temporal);\nvar PARSER$1;\nfunction _init$c() {\n  PARSER$1 = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).toFormatter();\n  YearMonth.FROM = createTemporalQuery('YearMonth.FROM', function (temporal) {\n    return YearMonth.from(temporal);\n  });\n}\n\nvar Year = function (_Temporal) {\n  _inheritsLoose(Year, _Temporal);\n\n  function Year(value) {\n    var _this;\n\n    _this = _Temporal.call(this) || this;\n    _this._year = MathUtil.safeToInt(value);\n    return _this;\n  }\n\n  var _proto = Year.prototype;\n\n  _proto.value = function value() {\n    return this._year;\n  };\n\n  Year.now = function now(zoneIdOrClock) {\n    if (zoneIdOrClock === void 0) {\n      zoneIdOrClock = undefined;\n    }\n\n    if (zoneIdOrClock === undefined) {\n      return Year.now0();\n    } else if (zoneIdOrClock instanceof ZoneId) {\n      return Year.nowZoneId(zoneIdOrClock);\n    } else {\n      return Year.nowClock(zoneIdOrClock);\n    }\n  };\n\n  Year.now0 = function now0() {\n    return Year.nowClock(Clock.systemDefaultZone());\n  };\n\n  Year.nowZoneId = function nowZoneId(zone) {\n    requireNonNull(zone, 'zone');\n    requireInstance(zone, ZoneId, 'zone');\n    return Year.nowClock(Clock.system(zone));\n  };\n\n  Year.nowClock = function nowClock(clock) {\n    requireNonNull(clock, 'clock');\n    requireInstance(clock, Clock, 'clock');\n    var now = LocalDate.now(clock);\n    return Year.of(now.year());\n  };\n\n  Year.of = function of(isoYear) {\n    requireNonNull(isoYear, 'isoYear');\n    ChronoField.YEAR.checkValidValue(isoYear);\n    return new Year(isoYear);\n  };\n\n  Year.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    requireInstance(temporal, TemporalAccessor, 'temporal');\n\n    if (temporal instanceof Year) {\n      return temporal;\n    }\n\n    try {\n      return Year.of(temporal.get(ChronoField.YEAR));\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain Year from TemporalAccessor: ' + temporal + ', type ' + (temporal && temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  Year.parse = function parse(text, formatter) {\n    if (arguments.length <= 1) {\n      return Year.parseText(text);\n    } else {\n      return Year.parseTextFormatter(text, formatter);\n    }\n  };\n\n  Year.parseText = function parseText(text) {\n    requireNonNull(text, 'text');\n    return Year.parse(text, PARSER$2);\n  };\n\n  Year.parseTextFormatter = function parseTextFormatter(text, formatter) {\n    if (formatter === void 0) {\n      formatter = PARSER$2;\n    }\n\n    requireNonNull(text, 'text');\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.parse(text, Year.FROM);\n  };\n\n  Year.isLeap = function isLeap(year) {\n    return MathUtil.intMod(year, 4) === 0 && (MathUtil.intMod(year, 100) !== 0 || MathUtil.intMod(year, 400) === 0);\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (arguments.length === 1 && fieldOrUnit instanceof TemporalField) {\n      return this.isSupportedField(fieldOrUnit);\n    } else {\n      return this.isSupportedUnit(fieldOrUnit);\n    }\n  };\n\n  _proto.isSupportedField = function isSupportedField(field) {\n    if (field instanceof ChronoField) {\n      return field === ChronoField.YEAR || field === ChronoField.YEAR_OF_ERA || field === ChronoField.ERA;\n    }\n\n    return field != null && field.isSupportedBy(this);\n  };\n\n  _proto.isSupportedUnit = function isSupportedUnit(unit) {\n    if (unit instanceof ChronoUnit) {\n      return unit === ChronoUnit.YEARS || unit === ChronoUnit.DECADES || unit === ChronoUnit.CENTURIES || unit === ChronoUnit.MILLENNIA || unit === ChronoUnit.ERAS;\n    }\n\n    return unit != null && unit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (this.isSupported(field)) {\n      return field.range();\n    } else if (field instanceof ChronoField) {\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return _Temporal.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    return this.range(field).checkValidIntValue(this.getLong(field), field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.YEAR_OF_ERA:\n          return this._year < 1 ? 1 - this._year : this._year;\n\n        case ChronoField.YEAR:\n          return this._year;\n\n        case ChronoField.ERA:\n          return this._year < 1 ? 0 : 1;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.isLeap = function isLeap() {\n    return Year.isLeap(this._year);\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n\n    if (field instanceof ChronoField) {\n      field.checkValidValue(newValue);\n\n      switch (field) {\n        case ChronoField.YEAR_OF_ERA:\n          return Year.of(this._year < 1 ? 1 - newValue : newValue);\n\n        case ChronoField.YEAR:\n          return Year.of(newValue);\n\n        case ChronoField.ERA:\n          return this.getLong(ChronoField.ERA) === newValue ? this : Year.of(1 - this._year);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(amountToAdd, 'amountToAdd');\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.YEARS:\n          return this.plusYears(amountToAdd);\n\n        case ChronoUnit.DECADES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n\n        case ChronoUnit.CENTURIES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n\n        case ChronoUnit.MILLENNIA:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n\n        case ChronoUnit.ERAS:\n          return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(yearsToAdd) {\n    if (yearsToAdd === 0) {\n      return this;\n    }\n\n    return Year.of(ChronoField.YEAR.checkValidIntValue(MathUtil.safeAdd(this._year, yearsToAdd)));\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    requireInstance(amount, TemporalAmount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(amountToSubtract, 'amountToSubtract');\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit, 'unit');\n    return amountToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plus(MathUtil.MAX_SAFE_INTEGER, unit).plus(1, unit) : this.plus(-amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(yearsToSubtract) {\n    return yearsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusYears(MathUtil.MAX_SAFE_INTEGER).plusYears(1) : this.plusYears(-yearsToSubtract);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    return temporal.with(ChronoField.YEAR, this._year);\n  };\n\n  _proto.isValidMonthDay = function isValidMonthDay(monthDay) {\n    return monthDay != null && monthDay.isValidYear(this._year);\n  };\n\n  _proto.length = function length() {\n    return this.isLeap() ? 366 : 365;\n  };\n\n  _proto.atDay = function atDay(dayOfYear) {\n    return LocalDate.ofYearDay(this._year, dayOfYear);\n  };\n\n  _proto.atMonth = function atMonth(monthOrNumber) {\n    if (arguments.length === 1 && monthOrNumber instanceof Month) {\n      return this.atMonthMonth(monthOrNumber);\n    } else {\n      return this.atMonthNumber(monthOrNumber);\n    }\n  };\n\n  _proto.atMonthMonth = function atMonthMonth(month) {\n    requireNonNull(month, 'month');\n    requireInstance(month, Month, 'month');\n    return YearMonth.of(this._year, month);\n  };\n\n  _proto.atMonthNumber = function atMonthNumber(month) {\n    requireNonNull(month, 'month');\n    return YearMonth.of(this._year, month);\n  };\n\n  _proto.atMonthDay = function atMonthDay(monthDay) {\n    requireNonNull(monthDay, 'monthDay');\n    requireInstance(monthDay, MonthDay, 'monthDay');\n    return monthDay.atYear(this._year);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query()');\n    requireInstance(_query, TemporalQuery, 'query()');\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.YEARS;\n    } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _Temporal.prototype.query.call(this, _query);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, Year, 'other');\n    return this._year - other._year;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, Year, 'other');\n    return this._year > other._year;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, Year, 'other');\n    return this._year < other._year;\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof Year) {\n      return this.value() === other.value();\n    }\n\n    return false;\n  };\n\n  _proto.toString = function toString() {\n    return '' + this._year;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    var end = Year.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      var yearsUntil = end.value() - this.value();\n\n      switch (unit) {\n        case ChronoUnit.YEARS:\n          return yearsUntil;\n\n        case ChronoUnit.DECADES:\n          return MathUtil.intDiv(yearsUntil, 10);\n\n        case ChronoUnit.CENTURIES:\n          return MathUtil.intDiv(yearsUntil, 100);\n\n        case ChronoUnit.MILLENNIA:\n          return MathUtil.intDiv(yearsUntil, 1000);\n\n        case ChronoUnit.ERAS:\n          return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  return Year;\n}(Temporal);\nvar PARSER$2;\nfunction _init$d() {\n  Year.MIN_VALUE = YearConstants.MIN_VALUE;\n  Year.MAX_VALUE = YearConstants.MAX_VALUE;\n  PARSER$2 = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).toFormatter();\n  Year.FROM = createTemporalQuery('Year.FROM', function (temporal) {\n    return Year.from(temporal);\n  });\n}\n\nvar TemporalAdjusters = function () {\n  function TemporalAdjusters() {}\n\n  TemporalAdjusters.firstDayOfMonth = function firstDayOfMonth() {\n    return Impl.FIRST_DAY_OF_MONTH;\n  };\n\n  TemporalAdjusters.lastDayOfMonth = function lastDayOfMonth() {\n    return Impl.LAST_DAY_OF_MONTH;\n  };\n\n  TemporalAdjusters.firstDayOfNextMonth = function firstDayOfNextMonth() {\n    return Impl.FIRST_DAY_OF_NEXT_MONTH;\n  };\n\n  TemporalAdjusters.firstDayOfYear = function firstDayOfYear() {\n    return Impl.FIRST_DAY_OF_YEAR;\n  };\n\n  TemporalAdjusters.lastDayOfYear = function lastDayOfYear() {\n    return Impl.LAST_DAY_OF_YEAR;\n  };\n\n  TemporalAdjusters.firstDayOfNextYear = function firstDayOfNextYear() {\n    return Impl.FIRST_DAY_OF_NEXT_YEAR;\n  };\n\n  TemporalAdjusters.firstInMonth = function firstInMonth(dayOfWeek) {\n    requireNonNull(dayOfWeek, 'dayOfWeek');\n    return new DayOfWeekInMonth(1, dayOfWeek);\n  };\n\n  TemporalAdjusters.lastInMonth = function lastInMonth(dayOfWeek) {\n    requireNonNull(dayOfWeek, 'dayOfWeek');\n    return new DayOfWeekInMonth(-1, dayOfWeek);\n  };\n\n  TemporalAdjusters.dayOfWeekInMonth = function dayOfWeekInMonth(ordinal, dayOfWeek) {\n    requireNonNull(dayOfWeek, 'dayOfWeek');\n    return new DayOfWeekInMonth(ordinal, dayOfWeek);\n  };\n\n  TemporalAdjusters.next = function next(dayOfWeek) {\n    return new RelativeDayOfWeek(2, dayOfWeek);\n  };\n\n  TemporalAdjusters.nextOrSame = function nextOrSame(dayOfWeek) {\n    return new RelativeDayOfWeek(0, dayOfWeek);\n  };\n\n  TemporalAdjusters.previous = function previous(dayOfWeek) {\n    return new RelativeDayOfWeek(3, dayOfWeek);\n  };\n\n  TemporalAdjusters.previousOrSame = function previousOrSame(dayOfWeek) {\n    return new RelativeDayOfWeek(1, dayOfWeek);\n  };\n\n  return TemporalAdjusters;\n}();\n\nvar Impl = function (_TemporalAdjuster) {\n  _inheritsLoose(Impl, _TemporalAdjuster);\n\n  function Impl(ordinal) {\n    var _this;\n\n    _this = _TemporalAdjuster.call(this) || this;\n    _this._ordinal = ordinal;\n    return _this;\n  }\n\n  var _proto = Impl.prototype;\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    switch (this._ordinal) {\n      case 0:\n        return temporal.with(ChronoField.DAY_OF_MONTH, 1);\n\n      case 1:\n        return temporal.with(ChronoField.DAY_OF_MONTH, temporal.range(ChronoField.DAY_OF_MONTH).maximum());\n\n      case 2:\n        return temporal.with(ChronoField.DAY_OF_MONTH, 1).plus(1, ChronoUnit.MONTHS);\n\n      case 3:\n        return temporal.with(ChronoField.DAY_OF_YEAR, 1);\n\n      case 4:\n        return temporal.with(ChronoField.DAY_OF_YEAR, temporal.range(ChronoField.DAY_OF_YEAR).maximum());\n\n      case 5:\n        return temporal.with(ChronoField.DAY_OF_YEAR, 1).plus(1, ChronoUnit.YEARS);\n    }\n\n    throw new IllegalStateException('Unreachable');\n  };\n\n  return Impl;\n}(TemporalAdjuster);\n\nImpl.FIRST_DAY_OF_MONTH = new Impl(0);\nImpl.LAST_DAY_OF_MONTH = new Impl(1);\nImpl.FIRST_DAY_OF_NEXT_MONTH = new Impl(2);\nImpl.FIRST_DAY_OF_YEAR = new Impl(3);\nImpl.LAST_DAY_OF_YEAR = new Impl(4);\nImpl.FIRST_DAY_OF_NEXT_YEAR = new Impl(5);\n\nvar DayOfWeekInMonth = function (_TemporalAdjuster2) {\n  _inheritsLoose(DayOfWeekInMonth, _TemporalAdjuster2);\n\n  function DayOfWeekInMonth(ordinal, dow) {\n    var _this2;\n\n    _this2 = _TemporalAdjuster2.call(this) || this;\n    _this2._ordinal = ordinal;\n    _this2._dowValue = dow.value();\n    return _this2;\n  }\n\n  var _proto2 = DayOfWeekInMonth.prototype;\n\n  _proto2.adjustInto = function adjustInto(temporal) {\n    if (this._ordinal >= 0) {\n      var temp = temporal.with(ChronoField.DAY_OF_MONTH, 1);\n      var curDow = temp.get(ChronoField.DAY_OF_WEEK);\n      var dowDiff = MathUtil.intMod(this._dowValue - curDow + 7, 7);\n      dowDiff += (this._ordinal - 1) * 7;\n      return temp.plus(dowDiff, ChronoUnit.DAYS);\n    } else {\n      var _temp = temporal.with(ChronoField.DAY_OF_MONTH, temporal.range(ChronoField.DAY_OF_MONTH).maximum());\n\n      var _curDow = _temp.get(ChronoField.DAY_OF_WEEK);\n\n      var daysDiff = this._dowValue - _curDow;\n      daysDiff = daysDiff === 0 ? 0 : daysDiff > 0 ? daysDiff - 7 : daysDiff;\n      daysDiff -= (-this._ordinal - 1) * 7;\n      return _temp.plus(daysDiff, ChronoUnit.DAYS);\n    }\n  };\n\n  return DayOfWeekInMonth;\n}(TemporalAdjuster);\n\nvar RelativeDayOfWeek = function (_TemporalAdjuster3) {\n  _inheritsLoose(RelativeDayOfWeek, _TemporalAdjuster3);\n\n  function RelativeDayOfWeek(relative, dayOfWeek) {\n    var _this3;\n\n    _this3 = _TemporalAdjuster3.call(this) || this;\n    requireNonNull(dayOfWeek, 'dayOfWeek');\n    _this3._relative = relative;\n    _this3._dowValue = dayOfWeek.value();\n    return _this3;\n  }\n\n  var _proto3 = RelativeDayOfWeek.prototype;\n\n  _proto3.adjustInto = function adjustInto(temporal) {\n    var calDow = temporal.get(ChronoField.DAY_OF_WEEK);\n\n    if (this._relative < 2 && calDow === this._dowValue) {\n      return temporal;\n    }\n\n    if ((this._relative & 1) === 0) {\n      var daysDiff = calDow - this._dowValue;\n      return temporal.plus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, ChronoUnit.DAYS);\n    } else {\n      var _daysDiff = this._dowValue - calDow;\n\n      return temporal.minus(_daysDiff >= 0 ? 7 - _daysDiff : -_daysDiff, ChronoUnit.DAYS);\n    }\n  };\n\n  return RelativeDayOfWeek;\n}(TemporalAdjuster);\n\nvar IsoChronology = function (_Enum) {\n  _inheritsLoose(IsoChronology, _Enum);\n\n  function IsoChronology() {\n    return _Enum.apply(this, arguments) || this;\n  }\n\n  IsoChronology.isLeapYear = function isLeapYear(prolepticYear) {\n    return (prolepticYear & 3) === 0 && (prolepticYear % 100 !== 0 || prolepticYear % 400 === 0);\n  };\n\n  var _proto = IsoChronology.prototype;\n\n  _proto._updateResolveMap = function _updateResolveMap(fieldValues, field, value) {\n    requireNonNull(fieldValues, 'fieldValues');\n    requireNonNull(field, 'field');\n    var current = fieldValues.get(field);\n\n    if (current != null && current !== value) {\n      throw new DateTimeException('Invalid state, field: ' + field + ' ' + current + ' conflicts with ' + field + ' ' + value);\n    }\n\n    fieldValues.put(field, value);\n  };\n\n  _proto.resolveDate = function resolveDate(fieldValues, resolverStyle) {\n    if (fieldValues.containsKey(ChronoField.EPOCH_DAY)) {\n      return LocalDate.ofEpochDay(fieldValues.remove(ChronoField.EPOCH_DAY));\n    }\n\n    var prolepticMonth = fieldValues.remove(ChronoField.PROLEPTIC_MONTH);\n\n    if (prolepticMonth != null) {\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.PROLEPTIC_MONTH.checkValidValue(prolepticMonth);\n      }\n\n      this._updateResolveMap(fieldValues, ChronoField.MONTH_OF_YEAR, MathUtil.floorMod(prolepticMonth, 12) + 1);\n\n      this._updateResolveMap(fieldValues, ChronoField.YEAR, MathUtil.floorDiv(prolepticMonth, 12));\n    }\n\n    var yoeLong = fieldValues.remove(ChronoField.YEAR_OF_ERA);\n\n    if (yoeLong != null) {\n      if (resolverStyle !== ResolverStyle.LENIENT) {\n        ChronoField.YEAR_OF_ERA.checkValidValue(yoeLong);\n      }\n\n      var era = fieldValues.remove(ChronoField.ERA);\n\n      if (era == null) {\n        var year = fieldValues.get(ChronoField.YEAR);\n\n        if (resolverStyle === ResolverStyle.STRICT) {\n          if (year != null) {\n            this._updateResolveMap(fieldValues, ChronoField.YEAR, year > 0 ? yoeLong : MathUtil.safeSubtract(1, yoeLong));\n          } else {\n            fieldValues.put(ChronoField.YEAR_OF_ERA, yoeLong);\n          }\n        } else {\n          this._updateResolveMap(fieldValues, ChronoField.YEAR, year == null || year > 0 ? yoeLong : MathUtil.safeSubtract(1, yoeLong));\n        }\n      } else if (era === 1) {\n        this._updateResolveMap(fieldValues, ChronoField.YEAR, yoeLong);\n      } else if (era === 0) {\n        this._updateResolveMap(fieldValues, ChronoField.YEAR, MathUtil.safeSubtract(1, yoeLong));\n      } else {\n        throw new DateTimeException('Invalid value for era: ' + era);\n      }\n    } else if (fieldValues.containsKey(ChronoField.ERA)) {\n      ChronoField.ERA.checkValidValue(fieldValues.get(ChronoField.ERA));\n    }\n\n    if (fieldValues.containsKey(ChronoField.YEAR)) {\n      if (fieldValues.containsKey(ChronoField.MONTH_OF_YEAR)) {\n        if (fieldValues.containsKey(ChronoField.DAY_OF_MONTH)) {\n          var y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n          var moy = fieldValues.remove(ChronoField.MONTH_OF_YEAR);\n          var dom = fieldValues.remove(ChronoField.DAY_OF_MONTH);\n\n          if (resolverStyle === ResolverStyle.LENIENT) {\n            var months = moy - 1;\n            var days = dom - 1;\n            return LocalDate.of(y, 1, 1).plusMonths(months).plusDays(days);\n          } else if (resolverStyle === ResolverStyle.SMART) {\n            ChronoField.DAY_OF_MONTH.checkValidValue(dom);\n\n            if (moy === 4 || moy === 6 || moy === 9 || moy === 11) {\n              dom = Math.min(dom, 30);\n            } else if (moy === 2) {\n              dom = Math.min(dom, Month.FEBRUARY.length(Year.isLeap(y)));\n            }\n\n            return LocalDate.of(y, moy, dom);\n          } else {\n            return LocalDate.of(y, moy, dom);\n          }\n        }\n      }\n\n      if (fieldValues.containsKey(ChronoField.DAY_OF_YEAR)) {\n        var _y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n\n        if (resolverStyle === ResolverStyle.LENIENT) {\n          var _days = MathUtil.safeSubtract(fieldValues.remove(ChronoField.DAY_OF_YEAR), 1);\n\n          return LocalDate.ofYearDay(_y, 1).plusDays(_days);\n        }\n\n        var doy = ChronoField.DAY_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.DAY_OF_YEAR));\n        return LocalDate.ofYearDay(_y, doy);\n      }\n\n      if (fieldValues.containsKey(ChronoField.ALIGNED_WEEK_OF_YEAR)) {\n        if (fieldValues.containsKey(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR)) {\n          var _y2 = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n\n          if (resolverStyle === ResolverStyle.LENIENT) {\n            var weeks = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR), 1);\n\n            var _days2 = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR), 1);\n\n            return LocalDate.of(_y2, 1, 1).plusWeeks(weeks).plusDays(_days2);\n          }\n\n          var aw = ChronoField.ALIGNED_WEEK_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR));\n          var ad = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));\n          var date = LocalDate.of(_y2, 1, 1).plusDays((aw - 1) * 7 + (ad - 1));\n\n          if (resolverStyle === ResolverStyle.STRICT && date.get(ChronoField.YEAR) !== _y2) {\n            throw new DateTimeException('Strict mode rejected date parsed to a different year');\n          }\n\n          return date;\n        }\n\n        if (fieldValues.containsKey(ChronoField.DAY_OF_WEEK)) {\n          var _y3 = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n\n          if (resolverStyle === ResolverStyle.LENIENT) {\n            var _weeks = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR), 1);\n\n            var _days3 = MathUtil.safeSubtract(fieldValues.remove(ChronoField.DAY_OF_WEEK), 1);\n\n            return LocalDate.of(_y3, 1, 1).plusWeeks(_weeks).plusDays(_days3);\n          }\n\n          var _aw = ChronoField.ALIGNED_WEEK_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR));\n\n          var dow = ChronoField.DAY_OF_WEEK.checkValidIntValue(fieldValues.remove(ChronoField.DAY_OF_WEEK));\n\n          var _date = LocalDate.of(_y3, 1, 1).plusWeeks(_aw - 1).with(TemporalAdjusters.nextOrSame(DayOfWeek.of(dow)));\n\n          if (resolverStyle === ResolverStyle.STRICT && _date.get(ChronoField.YEAR) !== _y3) {\n            throw new DateTimeException('Strict mode rejected date parsed to a different month');\n          }\n\n          return _date;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  _proto.date = function date(temporal) {\n    return LocalDate.from(temporal);\n  };\n\n  return IsoChronology;\n}(Enum);\nfunction _init$e() {\n  IsoChronology.INSTANCE = new IsoChronology('IsoChronology');\n}\n\nvar OffsetTime = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(OffsetTime, _DefaultInterfaceTemp);\n\n  OffsetTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof OffsetTime) {\n      return temporal;\n    } else if (temporal instanceof OffsetDateTime) {\n      return temporal.toOffsetTime();\n    }\n\n    try {\n      var time = LocalTime.from(temporal);\n      var offset = ZoneOffset.from(temporal);\n      return new OffsetTime(time, offset);\n    } catch (ex) {\n      throw new DateTimeException(\"Unable to obtain OffsetTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  OffsetTime.now = function now(clockOrZone) {\n    if (arguments.length === 0) {\n      return OffsetTime._now(Clock.systemDefaultZone());\n    } else if (clockOrZone instanceof Clock) {\n      return OffsetTime._now(clockOrZone);\n    } else {\n      return OffsetTime._now(Clock.system(clockOrZone));\n    }\n  };\n\n  OffsetTime._now = function _now(clock) {\n    requireNonNull(clock, 'clock');\n    var now = clock.instant();\n    return OffsetTime.ofInstant(now, clock.zone().rules().offset(now));\n  };\n\n  OffsetTime.of = function of() {\n    if (arguments.length <= 2) {\n      return OffsetTime.ofTimeAndOffset.apply(this, arguments);\n    } else {\n      return OffsetTime.ofNumbers.apply(this, arguments);\n    }\n  };\n\n  OffsetTime.ofNumbers = function ofNumbers(hour, minute, second, nanoOfSecond, offset) {\n    var time = LocalTime.of(hour, minute, second, nanoOfSecond);\n    return new OffsetTime(time, offset);\n  };\n\n  OffsetTime.ofTimeAndOffset = function ofTimeAndOffset(time, offset) {\n    return new OffsetTime(time, offset);\n  };\n\n  OffsetTime.ofInstant = function ofInstant(instant, zone) {\n    requireNonNull(instant, 'instant');\n    requireInstance(instant, Instant, 'instant');\n    requireNonNull(zone, 'zone');\n    requireInstance(zone, ZoneId, 'zone');\n    var rules = zone.rules();\n    var offset = rules.offset(instant);\n    var secsOfDay = instant.epochSecond() % LocalTime.SECONDS_PER_DAY;\n    secsOfDay = (secsOfDay + offset.totalSeconds()) % LocalTime.SECONDS_PER_DAY;\n\n    if (secsOfDay < 0) {\n      secsOfDay += LocalTime.SECONDS_PER_DAY;\n    }\n\n    var time = LocalTime.ofSecondOfDay(secsOfDay, instant.nano());\n    return new OffsetTime(time, offset);\n  };\n\n  OffsetTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_OFFSET_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, OffsetTime.FROM);\n  };\n\n  function OffsetTime(time, offset) {\n    var _this;\n\n    _this = _DefaultInterfaceTemp.call(this) || this;\n    requireNonNull(time, 'time');\n    requireInstance(time, LocalTime, 'time');\n    requireNonNull(offset, 'offset');\n    requireInstance(offset, ZoneOffset, 'offset');\n    _this._time = time;\n    _this._offset = offset;\n    return _this;\n  }\n\n  var _proto = OffsetTime.prototype;\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.NANO_OF_DAY, this._time.toNanoOfDay()).with(ChronoField.OFFSET_SECONDS, this.offset().totalSeconds());\n  };\n\n  _proto.atDate = function atDate(date) {\n    return OffsetDateTime.of(date, this._time, this._offset);\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this, OffsetTime.FROM);\n  };\n\n  _proto.get = function get(field) {\n    return _DefaultInterfaceTemp.prototype.get.call(this, field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.OFFSET_SECONDS) {\n        return this._offset.totalSeconds();\n      }\n\n      return this._time.getLong(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.hour = function hour() {\n    return this._time.hour();\n  };\n\n  _proto.minute = function minute() {\n    return this._time.minute();\n  };\n\n  _proto.second = function second() {\n    return this._time.second();\n  };\n\n  _proto.nano = function nano() {\n    return this._time.nano();\n  };\n\n  _proto.offset = function offset() {\n    return this._offset;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    return this._toEpochNano() > other._toEpochNano();\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    return this._toEpochNano() < other._toEpochNano();\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    requireNonNull(other, 'other');\n    return this._toEpochNano() === other._toEpochNano();\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoField.OFFSET_SECONDS;\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.minusHours = function minusHours(hours) {\n    return this._withLocalTimeOffset(this._time.minusHours(hours), this._offset);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutes) {\n    return this._withLocalTimeOffset(this._time.minusMinutes(minutes), this._offset);\n  };\n\n  _proto.minusSeconds = function minusSeconds(seconds) {\n    return this._withLocalTimeOffset(this._time.minusSeconds(seconds), this._offset);\n  };\n\n  _proto.minusNanos = function minusNanos(nanos) {\n    return this._withLocalTimeOffset(this._time.minusNanos(nanos), this._offset);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount);\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return this.plus(-1 * amountToSubtract, unit);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount);\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    if (unit instanceof ChronoUnit) {\n      return this._withLocalTimeOffset(this._time.plus(amountToAdd, unit), this._offset);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusHours = function plusHours(hours) {\n    return this._withLocalTimeOffset(this._time.plusHours(hours), this._offset);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutes) {\n    return this._withLocalTimeOffset(this._time.plusMinutes(minutes), this._offset);\n  };\n\n  _proto.plusSeconds = function plusSeconds(seconds) {\n    return this._withLocalTimeOffset(this._time.plusSeconds(seconds), this._offset);\n  };\n\n  _proto.plusNanos = function plusNanos(nanos) {\n    return this._withLocalTimeOffset(this._time.plusNanos(nanos), this._offset);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n      return this.offset();\n    } else if (_query === TemporalQueries.localTime()) {\n      return this._time;\n    } else if (_query === TemporalQueries.chronology() || _query === TemporalQueries.localDate() || _query === TemporalQueries.zoneId()) {\n      return null;\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.OFFSET_SECONDS) {\n        return field.range();\n      }\n\n      return this._time.range(field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.toLocalTime = function toLocalTime() {\n    return this._time;\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    return this._withLocalTimeOffset(this._time.truncatedTo(unit), this._offset);\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    var end = OffsetTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      var nanosUntil = end._toEpochNano() - this._toEpochNano();\n\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return nanosUntil;\n\n        case ChronoUnit.MICROS:\n          return Math.floor(nanosUntil / 1000);\n\n        case ChronoUnit.MILLIS:\n          return Math.floor(nanosUntil / 1000000);\n\n        case ChronoUnit.SECONDS:\n          return Math.floor(nanosUntil / LocalTime.NANOS_PER_SECOND);\n\n        case ChronoUnit.MINUTES:\n          return Math.floor(nanosUntil / LocalTime.NANOS_PER_MINUTE);\n\n        case ChronoUnit.HOURS:\n          return Math.floor(nanosUntil / LocalTime.NANOS_PER_HOUR);\n\n        case ChronoUnit.HALF_DAYS:\n          return Math.floor(nanosUntil / (12 * LocalTime.NANOS_PER_HOUR));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.withHour = function withHour(hour) {\n    return this._withLocalTimeOffset(this._time.withHour(hour), this._offset);\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    return this._withLocalTimeOffset(this._time.withMinute(minute), this._offset);\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    return this._withLocalTimeOffset(this._time.withSecond(second), this._offset);\n  };\n\n  _proto.withNano = function withNano(nano) {\n    return this._withLocalTimeOffset(this._time.withNano(nano), this._offset);\n  };\n\n  _proto.withOffsetSameInstant = function withOffsetSameInstant(offset) {\n    requireNonNull(offset, 'offset');\n\n    if (offset.equals(this._offset)) {\n      return this;\n    }\n\n    var difference = offset.totalSeconds() - this._offset.totalSeconds();\n\n    var adjusted = this._time.plusSeconds(difference);\n\n    return new OffsetTime(adjusted, offset);\n  };\n\n  _proto.withOffsetSameLocal = function withOffsetSameLocal(offset) {\n    return offset != null && offset.equals(this._offset) ? this : new OffsetTime(this._time, offset);\n  };\n\n  _proto._toEpochNano = function _toEpochNano() {\n    var nod = this._time.toNanoOfDay();\n\n    var offsetNanos = this._offset.totalSeconds() * LocalTime.NANOS_PER_SECOND;\n    return nod - offsetNanos;\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n\n    if (adjuster instanceof LocalTime) {\n      return this._withLocalTimeOffset(adjuster, this._offset);\n    } else if (adjuster instanceof ZoneOffset) {\n      return this._withLocalTimeOffset(this._time, adjuster);\n    } else if (adjuster instanceof OffsetTime) {\n      return adjuster;\n    }\n\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.OFFSET_SECONDS) {\n        return this._withLocalTimeOffset(this._time, ZoneOffset.ofTotalSeconds(field.checkValidIntValue(newValue)));\n      }\n\n      return this._withLocalTimeOffset(this._time.with(field, newValue), this._offset);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto._withLocalTimeOffset = function _withLocalTimeOffset(time, offset) {\n    if (this._time === time && this._offset.equals(offset)) {\n      return this;\n    }\n\n    return new OffsetTime(time, offset);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, OffsetTime, 'other');\n\n    if (this._offset.equals(other._offset)) {\n      return this._time.compareTo(other._time);\n    }\n\n    var compare = MathUtil.compareNumbers(this._toEpochNano(), other._toEpochNano());\n\n    if (compare === 0) {\n      return this._time.compareTo(other._time);\n    }\n\n    return compare;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof OffsetTime) {\n      return this._time.equals(other._time) && this._offset.equals(other._offset);\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._time.hashCode() ^ this._offset.hashCode();\n  };\n\n  _proto.toString = function toString() {\n    return this._time.toString() + this._offset.toString();\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return OffsetTime;\n}(DefaultInterfaceTemporal);\nfunction _init$f() {\n  OffsetTime.MIN = OffsetTime.ofNumbers(0, 0, 0, 0, ZoneOffset.MAX);\n  OffsetTime.MAX = OffsetTime.ofNumbers(23, 59, 59, 999999999, ZoneOffset.MIN);\n  OffsetTime.FROM = createTemporalQuery('OffsetTime.FROM', function (temporal) {\n    return OffsetTime.from(temporal);\n  });\n}\n\nvar ChronoZonedDateTime = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(ChronoZonedDateTime, _DefaultInterfaceTemp);\n\n  function ChronoZonedDateTime() {\n    return _DefaultInterfaceTemp.apply(this, arguments) || this;\n  }\n\n  var _proto = ChronoZonedDateTime.prototype;\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.zone()) {\n      return this.zone();\n    } else if (_query === TemporalQueries.chronology()) {\n      return this.toLocalDate().chronology();\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.offset()) {\n      return this.offset();\n    } else if (_query === TemporalQueries.localDate()) {\n      return LocalDate.ofEpochDay(this.toLocalDate().toEpochDay());\n    } else if (_query === TemporalQueries.localTime()) {\n      return this.toLocalTime();\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  _proto.toInstant = function toInstant() {\n    return Instant.ofEpochSecond(this.toEpochSecond(), this.toLocalTime().nano());\n  };\n\n  _proto.toEpochSecond = function toEpochSecond() {\n    var epochDay = this.toLocalDate().toEpochDay();\n    var secs = epochDay * 86400 + this.toLocalTime().toSecondOfDay();\n    secs -= this.offset().totalSeconds();\n    return secs;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    var cmp = MathUtil.compareNumbers(this.toEpochSecond(), other.toEpochSecond());\n\n    if (cmp === 0) {\n      cmp = this.toLocalTime().nano() - other.toLocalTime().nano();\n\n      if (cmp === 0) {\n        cmp = this.toLocalDateTime().compareTo(other.toLocalDateTime());\n\n        if (cmp === 0) {\n          cmp = strcmp(this.zone().id(), other.zone().id());\n        }\n      }\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    var thisEpochSec = this.toEpochSecond();\n    var otherEpochSec = other.toEpochSecond();\n    return thisEpochSec > otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() > other.toLocalTime().nano();\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    var thisEpochSec = this.toEpochSecond();\n    var otherEpochSec = other.toEpochSecond();\n    return thisEpochSec < otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() < other.toLocalTime().nano();\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    requireNonNull(other, 'other');\n    return this.toEpochSecond() === other.toEpochSecond() && this.toLocalTime().nano() === other.toLocalTime().nano();\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ChronoZonedDateTime) {\n      return this.compareTo(other) === 0;\n    }\n\n    return false;\n  };\n\n  return ChronoZonedDateTime;\n}(DefaultInterfaceTemporal);\n\nfunction strcmp(a, b) {\n  if (a < b) {\n    return -1;\n  }\n\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n}\n\nvar ZonedDateTime = function (_ChronoZonedDateTime) {\n  _inheritsLoose(ZonedDateTime, _ChronoZonedDateTime);\n\n  ZonedDateTime.now = function now(clockOrZone) {\n    var clock;\n\n    if (clockOrZone instanceof ZoneId) {\n      clock = Clock.system(clockOrZone);\n    } else {\n      clock = clockOrZone == null ? Clock.systemDefaultZone() : clockOrZone;\n    }\n\n    return ZonedDateTime.ofInstant(clock.instant(), clock.zone());\n  };\n\n  ZonedDateTime.of = function of() {\n    if (arguments.length <= 2) {\n      return ZonedDateTime.of2.apply(this, arguments);\n    } else if (arguments.length === 3 && arguments[0] instanceof LocalDate) {\n      return ZonedDateTime.of3.apply(this, arguments);\n    } else {\n      return ZonedDateTime.of8.apply(this, arguments);\n    }\n  };\n\n  ZonedDateTime.of3 = function of3(date, time, zone) {\n    return ZonedDateTime.of2(LocalDateTime.of(date, time), zone);\n  };\n\n  ZonedDateTime.of2 = function of2(localDateTime, zone) {\n    return ZonedDateTime.ofLocal(localDateTime, zone, null);\n  };\n\n  ZonedDateTime.of8 = function of8(year, month, dayOfMonth, hour, minute, second, nanoOfSecond, zone) {\n    var dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);\n    return ZonedDateTime.ofLocal(dt, zone, null);\n  };\n\n  ZonedDateTime.ofLocal = function ofLocal(localDateTime, zone, preferredOffset) {\n    requireNonNull(localDateTime, 'localDateTime');\n    requireNonNull(zone, 'zone');\n\n    if (zone instanceof ZoneOffset) {\n      return new ZonedDateTime(localDateTime, zone, zone);\n    }\n\n    var offset = null;\n    var rules = zone.rules();\n    var validOffsets = rules.validOffsets(localDateTime);\n\n    if (validOffsets.length === 1) {\n      offset = validOffsets[0];\n    } else if (validOffsets.length === 0) {\n      var trans = rules.transition(localDateTime);\n      localDateTime = localDateTime.plusSeconds(trans.duration().seconds());\n      offset = trans.offsetAfter();\n    } else {\n      if (preferredOffset != null && validOffsets.some(function (validOffset) {\n        return validOffset.equals(preferredOffset);\n      })) {\n        offset = preferredOffset;\n      } else {\n        offset = requireNonNull(validOffsets[0], 'offset');\n      }\n    }\n\n    return new ZonedDateTime(localDateTime, offset, zone);\n  };\n\n  ZonedDateTime.ofInstant = function ofInstant() {\n    if (arguments.length === 2) {\n      return ZonedDateTime.ofInstant2.apply(this, arguments);\n    } else {\n      return ZonedDateTime.ofInstant3.apply(this, arguments);\n    }\n  };\n\n  ZonedDateTime.ofInstant2 = function ofInstant2(instant, zone) {\n    requireNonNull(instant, 'instant');\n    requireNonNull(zone, 'zone');\n    return ZonedDateTime._create(instant.epochSecond(), instant.nano(), zone);\n  };\n\n  ZonedDateTime.ofInstant3 = function ofInstant3(localDateTime, offset, zone) {\n    requireNonNull(localDateTime, 'localDateTime');\n    requireNonNull(offset, 'offset');\n    requireNonNull(zone, 'zone');\n    return ZonedDateTime._create(localDateTime.toEpochSecond(offset), localDateTime.nano(), zone);\n  };\n\n  ZonedDateTime._create = function _create(epochSecond, nanoOfSecond, zone) {\n    var rules = zone.rules();\n    var instant = Instant.ofEpochSecond(epochSecond, nanoOfSecond);\n    var offset = rules.offset(instant);\n    var ldt = LocalDateTime.ofEpochSecond(epochSecond, nanoOfSecond, offset);\n    return new ZonedDateTime(ldt, offset, zone);\n  };\n\n  ZonedDateTime.ofStrict = function ofStrict(localDateTime, offset, zone) {\n    requireNonNull(localDateTime, 'localDateTime');\n    requireNonNull(offset, 'offset');\n    requireNonNull(zone, 'zone');\n    var rules = zone.rules();\n\n    if (rules.isValidOffset(localDateTime, offset) === false) {\n      var trans = rules.transition(localDateTime);\n\n      if (trans != null && trans.isGap()) {\n        throw new DateTimeException('LocalDateTime ' + localDateTime + ' does not exist in zone ' + zone + ' due to a gap in the local time-line, typically caused by daylight savings');\n      }\n\n      throw new DateTimeException('ZoneOffset \"' + offset + '\" is not valid for LocalDateTime \"' + localDateTime + '\" in zone \"' + zone + '\"');\n    }\n\n    return new ZonedDateTime(localDateTime, offset, zone);\n  };\n\n  ZonedDateTime.ofLenient = function ofLenient(localDateTime, offset, zone) {\n    requireNonNull(localDateTime, 'localDateTime');\n    requireNonNull(offset, 'offset');\n    requireNonNull(zone, 'zone');\n\n    if (zone instanceof ZoneOffset && offset.equals(zone) === false) {\n      throw new IllegalArgumentException('ZoneId must match ZoneOffset');\n    }\n\n    return new ZonedDateTime(localDateTime, offset, zone);\n  };\n\n  ZonedDateTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof ZonedDateTime) {\n      return temporal;\n    }\n\n    var zone = ZoneId.from(temporal);\n\n    if (temporal.isSupported(ChronoField.INSTANT_SECONDS)) {\n      var zdt = ZonedDateTime._from(temporal, zone);\n\n      if (zdt != null) return zdt;\n    }\n\n    var ldt = LocalDateTime.from(temporal);\n    return ZonedDateTime.of2(ldt, zone);\n  };\n\n  ZonedDateTime._from = function _from(temporal, zone) {\n    try {\n      return ZonedDateTime.__from(temporal, zone);\n    } catch (ex) {\n      if (!(ex instanceof DateTimeException)) throw ex;\n    }\n  };\n\n  ZonedDateTime.__from = function __from(temporal, zone) {\n    var epochSecond = temporal.getLong(ChronoField.INSTANT_SECONDS);\n    var nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n    return ZonedDateTime._create(epochSecond, nanoOfSecond, zone);\n  };\n\n  ZonedDateTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_ZONED_DATE_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, ZonedDateTime.FROM);\n  };\n\n  function ZonedDateTime(dateTime, offset, zone) {\n    var _this;\n\n    requireNonNull(dateTime, 'dateTime');\n    requireNonNull(offset, 'offset');\n    requireNonNull(zone, 'zone');\n    _this = _ChronoZonedDateTime.call(this) || this;\n    _this._dateTime = dateTime;\n    _this._offset = offset;\n    _this._zone = zone;\n    return _this;\n  }\n\n  var _proto = ZonedDateTime.prototype;\n\n  _proto._resolveLocal = function _resolveLocal(newDateTime) {\n    requireNonNull(newDateTime, 'newDateTime');\n    return ZonedDateTime.ofLocal(newDateTime, this._zone, this._offset);\n  };\n\n  _proto._resolveInstant = function _resolveInstant(newDateTime) {\n    return ZonedDateTime.ofInstant3(newDateTime, this._offset, this._zone);\n  };\n\n  _proto._resolveOffset = function _resolveOffset(offset) {\n    if (offset.equals(this._offset) === false && this._zone.rules().isValidOffset(this._dateTime, offset)) {\n      return new ZonedDateTime(this._dateTime, offset, this._zone);\n    }\n\n    return this;\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return true;\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.INSTANT_SECONDS || field === ChronoField.OFFSET_SECONDS) {\n        return field.range();\n      }\n\n      return this._dateTime.range(field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.INSTANT_SECONDS:\n          return this.toEpochSecond();\n\n        case ChronoField.OFFSET_SECONDS:\n          return this._offset.totalSeconds();\n      }\n\n      return this._dateTime.getLong(field);\n    }\n\n    requireNonNull(field, 'field');\n    return field.getFrom(this);\n  };\n\n  _proto.offset = function offset() {\n    return this._offset;\n  };\n\n  _proto.withEarlierOffsetAtOverlap = function withEarlierOffsetAtOverlap() {\n    var trans = this._zone.rules().transition(this._dateTime);\n\n    if (trans != null && trans.isOverlap()) {\n      var earlierOffset = trans.offsetBefore();\n\n      if (earlierOffset.equals(this._offset) === false) {\n        return new ZonedDateTime(this._dateTime, earlierOffset, this._zone);\n      }\n    }\n\n    return this;\n  };\n\n  _proto.withLaterOffsetAtOverlap = function withLaterOffsetAtOverlap() {\n    var trans = this._zone.rules().transition(this.toLocalDateTime());\n\n    if (trans != null) {\n      var laterOffset = trans.offsetAfter();\n\n      if (laterOffset.equals(this._offset) === false) {\n        return new ZonedDateTime(this._dateTime, laterOffset, this._zone);\n      }\n    }\n\n    return this;\n  };\n\n  _proto.zone = function zone() {\n    return this._zone;\n  };\n\n  _proto.withZoneSameLocal = function withZoneSameLocal(zone) {\n    requireNonNull(zone, 'zone');\n    return this._zone.equals(zone) ? this : ZonedDateTime.ofLocal(this._dateTime, zone, this._offset);\n  };\n\n  _proto.withZoneSameInstant = function withZoneSameInstant(zone) {\n    requireNonNull(zone, 'zone');\n    return this._zone.equals(zone) ? this : ZonedDateTime._create(this._dateTime.toEpochSecond(this._offset), this._dateTime.nano(), zone);\n  };\n\n  _proto.withFixedOffsetZone = function withFixedOffsetZone() {\n    return this._zone.equals(this._offset) ? this : new ZonedDateTime(this._dateTime, this._offset, this._offset);\n  };\n\n  _proto.year = function year() {\n    return this._dateTime.year();\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._dateTime.monthValue();\n  };\n\n  _proto.month = function month() {\n    return this._dateTime.month();\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._dateTime.dayOfMonth();\n  };\n\n  _proto.dayOfYear = function dayOfYear() {\n    return this._dateTime.dayOfYear();\n  };\n\n  _proto.dayOfWeek = function dayOfWeek() {\n    return this._dateTime.dayOfWeek();\n  };\n\n  _proto.hour = function hour() {\n    return this._dateTime.hour();\n  };\n\n  _proto.minute = function minute() {\n    return this._dateTime.minute();\n  };\n\n  _proto.second = function second() {\n    return this._dateTime.second();\n  };\n\n  _proto.nano = function nano() {\n    return this._dateTime.nano();\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    if (adjuster instanceof LocalDate) {\n      return this._resolveLocal(LocalDateTime.of(adjuster, this._dateTime.toLocalTime()));\n    } else if (adjuster instanceof LocalTime) {\n      return this._resolveLocal(LocalDateTime.of(this._dateTime.toLocalDate(), adjuster));\n    } else if (adjuster instanceof LocalDateTime) {\n      return this._resolveLocal(adjuster);\n    } else if (adjuster instanceof Instant) {\n      var instant = adjuster;\n      return ZonedDateTime._create(instant.epochSecond(), instant.nano(), this._zone);\n    } else if (adjuster instanceof ZoneOffset) {\n      return this._resolveOffset(adjuster);\n    }\n\n    requireNonNull(adjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.INSTANT_SECONDS:\n          return ZonedDateTime._create(newValue, this.nano(), this._zone);\n\n        case ChronoField.OFFSET_SECONDS:\n          {\n            var offset = ZoneOffset.ofTotalSeconds(field.checkValidIntValue(newValue));\n            return this._resolveOffset(offset);\n          }\n      }\n\n      return this._resolveLocal(this._dateTime.with(field, newValue));\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withYear = function withYear(year) {\n    return this._resolveLocal(this._dateTime.withYear(year));\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    return this._resolveLocal(this._dateTime.withMonth(month));\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    return this._resolveLocal(this._dateTime.withDayOfMonth(dayOfMonth));\n  };\n\n  _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n    return this._resolveLocal(this._dateTime.withDayOfYear(dayOfYear));\n  };\n\n  _proto.withHour = function withHour(hour) {\n    return this._resolveLocal(this._dateTime.withHour(hour));\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    return this._resolveLocal(this._dateTime.withMinute(minute));\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    return this._resolveLocal(this._dateTime.withSecond(second));\n  };\n\n  _proto.withNano = function withNano(nanoOfSecond) {\n    return this._resolveLocal(this._dateTime.withNano(nanoOfSecond));\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    return this._resolveLocal(this._dateTime.truncatedTo(unit));\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount);\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    if (unit instanceof ChronoUnit) {\n      if (unit.isDateBased()) {\n        return this._resolveLocal(this._dateTime.plus(amountToAdd, unit));\n      } else {\n        return this._resolveInstant(this._dateTime.plus(amountToAdd, unit));\n      }\n    }\n\n    requireNonNull(unit, 'unit');\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(years) {\n    return this._resolveLocal(this._dateTime.plusYears(years));\n  };\n\n  _proto.plusMonths = function plusMonths(months) {\n    return this._resolveLocal(this._dateTime.plusMonths(months));\n  };\n\n  _proto.plusWeeks = function plusWeeks(weeks) {\n    return this._resolveLocal(this._dateTime.plusWeeks(weeks));\n  };\n\n  _proto.plusDays = function plusDays(days) {\n    return this._resolveLocal(this._dateTime.plusDays(days));\n  };\n\n  _proto.plusHours = function plusHours(hours) {\n    return this._resolveInstant(this._dateTime.plusHours(hours));\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutes) {\n    return this._resolveInstant(this._dateTime.plusMinutes(minutes));\n  };\n\n  _proto.plusSeconds = function plusSeconds(seconds) {\n    return this._resolveInstant(this._dateTime.plusSeconds(seconds));\n  };\n\n  _proto.plusNanos = function plusNanos(nanos) {\n    return this._resolveInstant(this._dateTime.plusNanos(nanos));\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(years) {\n    return this.plusYears(-1 * years);\n  };\n\n  _proto.minusMonths = function minusMonths(months) {\n    return this.plusMonths(-1 * months);\n  };\n\n  _proto.minusWeeks = function minusWeeks(weeks) {\n    return this.plusWeeks(-1 * weeks);\n  };\n\n  _proto.minusDays = function minusDays(days) {\n    return this.plusDays(-1 * days);\n  };\n\n  _proto.minusHours = function minusHours(hours) {\n    return this.plusHours(-1 * hours);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutes) {\n    return this.plusMinutes(-1 * minutes);\n  };\n\n  _proto.minusSeconds = function minusSeconds(seconds) {\n    return this.plusSeconds(-1 * seconds);\n  };\n\n  _proto.minusNanos = function minusNanos(nanos) {\n    return this.plusNanos(-1 * nanos);\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.localDate()) {\n      return this.toLocalDate();\n    }\n\n    requireNonNull(_query, 'query');\n    return _ChronoZonedDateTime.prototype.query.call(this, _query);\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    var end = ZonedDateTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      end = end.withZoneSameInstant(this._zone);\n\n      if (unit.isDateBased()) {\n        return this._dateTime.until(end._dateTime, unit);\n      } else {\n        var difference = this._offset.totalSeconds() - end._offset.totalSeconds();\n\n        var adjustedEnd = end._dateTime.plusSeconds(difference);\n\n        return this._dateTime.until(adjustedEnd, unit);\n      }\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.toLocalDateTime = function toLocalDateTime() {\n    return this._dateTime;\n  };\n\n  _proto.toLocalDate = function toLocalDate() {\n    return this._dateTime.toLocalDate();\n  };\n\n  _proto.toLocalTime = function toLocalTime() {\n    return this._dateTime.toLocalTime();\n  };\n\n  _proto.toOffsetDateTime = function toOffsetDateTime() {\n    return OffsetDateTime.of(this._dateTime, this._offset);\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof ZonedDateTime) {\n      return this._dateTime.equals(other._dateTime) && this._offset.equals(other._offset) && this._zone.equals(other._zone);\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return MathUtil.hashCode(this._dateTime.hashCode(), this._offset.hashCode(), this._zone.hashCode());\n  };\n\n  _proto.toString = function toString() {\n    var str = this._dateTime.toString() + this._offset.toString();\n\n    if (this._offset !== this._zone) {\n      str += '[' + this._zone.toString() + ']';\n    }\n\n    return str;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    return _ChronoZonedDateTime.prototype.format.call(this, formatter);\n  };\n\n  return ZonedDateTime;\n}(ChronoZonedDateTime);\nfunction _init$g() {\n  ZonedDateTime.FROM = createTemporalQuery('ZonedDateTime.FROM', function (temporal) {\n    return ZonedDateTime.from(temporal);\n  });\n}\n\nvar OffsetDateTime = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(OffsetDateTime, _DefaultInterfaceTemp);\n\n  OffsetDateTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof OffsetDateTime) {\n      return temporal;\n    }\n\n    try {\n      var offset = ZoneOffset.from(temporal);\n\n      try {\n        var ldt = LocalDateTime.from(temporal);\n        return OffsetDateTime.of(ldt, offset);\n      } catch (_) {\n        var instant = Instant.from(temporal);\n        return OffsetDateTime.ofInstant(instant, offset);\n      }\n    } catch (ex) {\n      throw new DateTimeException(\"Unable to obtain OffsetDateTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  OffsetDateTime.now = function now(clockOrZone) {\n    if (arguments.length === 0) {\n      return OffsetDateTime.now(Clock.systemDefaultZone());\n    } else {\n      requireNonNull(clockOrZone, 'clockOrZone');\n\n      if (clockOrZone instanceof ZoneId) {\n        return OffsetDateTime.now(Clock.system(clockOrZone));\n      } else if (clockOrZone instanceof Clock) {\n        var now = clockOrZone.instant();\n        return OffsetDateTime.ofInstant(now, clockOrZone.zone().rules().offset(now));\n      } else {\n        throw new IllegalArgumentException('clockOrZone must be an instance of ZoneId or Clock');\n      }\n    }\n  };\n\n  OffsetDateTime.of = function of() {\n    if (arguments.length <= 2) {\n      return OffsetDateTime.ofDateTime.apply(this, arguments);\n    } else if (arguments.length === 3) {\n      return OffsetDateTime.ofDateAndTime.apply(this, arguments);\n    } else {\n      return OffsetDateTime.ofNumbers.apply(this, arguments);\n    }\n  };\n\n  OffsetDateTime.ofDateTime = function ofDateTime(dateTime, offset) {\n    return new OffsetDateTime(dateTime, offset);\n  };\n\n  OffsetDateTime.ofDateAndTime = function ofDateAndTime(date, time, offset) {\n    var dt = LocalDateTime.of(date, time);\n    return new OffsetDateTime(dt, offset);\n  };\n\n  OffsetDateTime.ofNumbers = function ofNumbers(year, month, dayOfMonth, hour, minute, second, nanoOfSecond, offset) {\n    if (hour === void 0) {\n      hour = 0;\n    }\n\n    if (minute === void 0) {\n      minute = 0;\n    }\n\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    var dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);\n    return new OffsetDateTime(dt, offset);\n  };\n\n  OffsetDateTime.ofInstant = function ofInstant(instant, zone) {\n    requireNonNull(instant, 'instant');\n    requireNonNull(zone, 'zone');\n    var rules = zone.rules();\n    var offset = rules.offset(instant);\n    var ldt = LocalDateTime.ofEpochSecond(instant.epochSecond(), instant.nano(), offset);\n    return new OffsetDateTime(ldt, offset);\n  };\n\n  OffsetDateTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, OffsetDateTime.FROM);\n  };\n\n  function OffsetDateTime(dateTime, offset) {\n    var _this;\n\n    _this = _DefaultInterfaceTemp.call(this) || this;\n    requireNonNull(dateTime, 'dateTime');\n    requireInstance(dateTime, LocalDateTime, 'dateTime');\n    requireNonNull(offset, 'offset');\n    requireInstance(offset, ZoneOffset, 'offset');\n    _this._dateTime = dateTime;\n    _this._offset = offset;\n    return _this;\n  }\n\n  var _proto = OffsetDateTime.prototype;\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.EPOCH_DAY, this.toLocalDate().toEpochDay()).with(ChronoField.NANO_OF_DAY, this.toLocalTime().toNanoOfDay()).with(ChronoField.OFFSET_SECONDS, this.offset().totalSeconds());\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    var end = OffsetDateTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      end = end.withOffsetSameInstant(this._offset);\n      return this._dateTime.until(end._dateTime, unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.atZoneSameInstant = function atZoneSameInstant(zone) {\n    return ZonedDateTime.ofInstant(this._dateTime, this._offset, zone);\n  };\n\n  _proto.atZoneSimilarLocal = function atZoneSimilarLocal(zone) {\n    return ZonedDateTime.ofLocal(this._dateTime, zone, this._offset);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.chronology()) {\n      return IsoChronology.INSTANCE;\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n      return this.offset();\n    } else if (_query === TemporalQueries.localDate()) {\n      return this.toLocalDate();\n    } else if (_query === TemporalQueries.localTime()) {\n      return this.toLocalTime();\n    } else if (_query === TemporalQueries.zoneId()) {\n      return null;\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.get = function get(field) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.INSTANT_SECONDS:\n          throw new DateTimeException('Field too large for an int: ' + field);\n\n        case ChronoField.OFFSET_SECONDS:\n          return this.offset().totalSeconds();\n      }\n\n      return this._dateTime.get(field);\n    }\n\n    return _DefaultInterfaceTemp.prototype.get.call(this, field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.INSTANT_SECONDS:\n          return this.toEpochSecond();\n\n        case ChronoField.OFFSET_SECONDS:\n          return this.offset().totalSeconds();\n      }\n\n      return this._dateTime.getLong(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.offset = function offset() {\n    return this._offset;\n  };\n\n  _proto.year = function year() {\n    return this._dateTime.year();\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._dateTime.monthValue();\n  };\n\n  _proto.month = function month() {\n    return this._dateTime.month();\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._dateTime.dayOfMonth();\n  };\n\n  _proto.dayOfYear = function dayOfYear() {\n    return this._dateTime.dayOfYear();\n  };\n\n  _proto.dayOfWeek = function dayOfWeek() {\n    return this._dateTime.dayOfWeek();\n  };\n\n  _proto.hour = function hour() {\n    return this._dateTime.hour();\n  };\n\n  _proto.minute = function minute() {\n    return this._dateTime.minute();\n  };\n\n  _proto.second = function second() {\n    return this._dateTime.second();\n  };\n\n  _proto.nano = function nano() {\n    return this._dateTime.nano();\n  };\n\n  _proto.toLocalDateTime = function toLocalDateTime() {\n    return this._dateTime;\n  };\n\n  _proto.toLocalDate = function toLocalDate() {\n    return this._dateTime.toLocalDate();\n  };\n\n  _proto.toLocalTime = function toLocalTime() {\n    return this._dateTime.toLocalTime();\n  };\n\n  _proto.toOffsetTime = function toOffsetTime() {\n    return OffsetTime.of(this._dateTime.toLocalTime(), this._offset);\n  };\n\n  _proto.toZonedDateTime = function toZonedDateTime() {\n    return ZonedDateTime.of(this._dateTime, this._offset);\n  };\n\n  _proto.toInstant = function toInstant() {\n    return this._dateTime.toInstant(this._offset);\n  };\n\n  _proto.toEpochSecond = function toEpochSecond() {\n    return this._dateTime.toEpochSecond(this._offset);\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    }\n\n    if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (field === ChronoField.INSTANT_SECONDS || field === ChronoField.OFFSET_SECONDS) {\n        return field.range();\n      }\n\n      return this._dateTime.range(field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster);\n\n    if (adjuster instanceof LocalDate || adjuster instanceof LocalTime || adjuster instanceof LocalDateTime) {\n      return this._withDateTimeOffset(this._dateTime.with(adjuster), this._offset);\n    } else if (adjuster instanceof Instant) {\n      return OffsetDateTime.ofInstant(adjuster, this._offset);\n    } else if (adjuster instanceof ZoneOffset) {\n      return this._withDateTimeOffset(this._dateTime, adjuster);\n    } else if (adjuster instanceof OffsetDateTime) {\n      return adjuster;\n    }\n\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field);\n\n    if (field instanceof ChronoField) {\n      var f = field;\n\n      switch (f) {\n        case ChronoField.INSTANT_SECONDS:\n          return OffsetDateTime.ofInstant(Instant.ofEpochSecond(newValue, this.nano()), this._offset);\n\n        case ChronoField.OFFSET_SECONDS:\n          {\n            return this._withDateTimeOffset(this._dateTime, ZoneOffset.ofTotalSeconds(f.checkValidIntValue(newValue)));\n          }\n      }\n\n      return this._withDateTimeOffset(this._dateTime.with(field, newValue), this._offset);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto._withDateTimeOffset = function _withDateTimeOffset(dateTime, offset) {\n    if (this._dateTime === dateTime && this._offset.equals(offset)) {\n      return this;\n    }\n\n    return new OffsetDateTime(dateTime, offset);\n  };\n\n  _proto.withYear = function withYear(year) {\n    return this._withDateTimeOffset(this._dateTime.withYear(year), this._offset);\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    return this._withDateTimeOffset(this._dateTime.withMonth(month), this._offset);\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    return this._withDateTimeOffset(this._dateTime.withDayOfMonth(dayOfMonth), this._offset);\n  };\n\n  _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n    return this._withDateTimeOffset(this._dateTime.withDayOfYear(dayOfYear), this._offset);\n  };\n\n  _proto.withHour = function withHour(hour) {\n    return this._withDateTimeOffset(this._dateTime.withHour(hour), this._offset);\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    return this._withDateTimeOffset(this._dateTime.withMinute(minute), this._offset);\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    return this._withDateTimeOffset(this._dateTime.withSecond(second), this._offset);\n  };\n\n  _proto.withNano = function withNano(nanoOfSecond) {\n    return this._withDateTimeOffset(this._dateTime.withNano(nanoOfSecond), this._offset);\n  };\n\n  _proto.withOffsetSameLocal = function withOffsetSameLocal(offset) {\n    requireNonNull(offset, 'offset');\n    return this._withDateTimeOffset(this._dateTime, offset);\n  };\n\n  _proto.withOffsetSameInstant = function withOffsetSameInstant(offset) {\n    requireNonNull(offset, 'offset');\n\n    if (offset.equals(this._offset)) {\n      return this;\n    }\n\n    var difference = offset.totalSeconds() - this._offset.totalSeconds();\n\n    var adjusted = this._dateTime.plusSeconds(difference);\n\n    return new OffsetDateTime(adjusted, offset);\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    return this._withDateTimeOffset(this._dateTime.truncatedTo(unit), this._offset);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    if (unit instanceof ChronoUnit) {\n      return this._withDateTimeOffset(this._dateTime.plus(amountToAdd, unit), this._offset);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(years) {\n    return this._withDateTimeOffset(this._dateTime.plusYears(years), this._offset);\n  };\n\n  _proto.plusMonths = function plusMonths(months) {\n    return this._withDateTimeOffset(this._dateTime.plusMonths(months), this._offset);\n  };\n\n  _proto.plusWeeks = function plusWeeks(weeks) {\n    return this._withDateTimeOffset(this._dateTime.plusWeeks(weeks), this._offset);\n  };\n\n  _proto.plusDays = function plusDays(days) {\n    return this._withDateTimeOffset(this._dateTime.plusDays(days), this._offset);\n  };\n\n  _proto.plusHours = function plusHours(hours) {\n    return this._withDateTimeOffset(this._dateTime.plusHours(hours), this._offset);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutes) {\n    return this._withDateTimeOffset(this._dateTime.plusMinutes(minutes), this._offset);\n  };\n\n  _proto.plusSeconds = function plusSeconds(seconds) {\n    return this._withDateTimeOffset(this._dateTime.plusSeconds(seconds), this._offset);\n  };\n\n  _proto.plusNanos = function plusNanos(nanos) {\n    return this._withDateTimeOffset(this._dateTime.plusNanos(nanos), this._offset);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount);\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return this.plus(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(years) {\n    return this._withDateTimeOffset(this._dateTime.minusYears(years), this._offset);\n  };\n\n  _proto.minusMonths = function minusMonths(months) {\n    return this._withDateTimeOffset(this._dateTime.minusMonths(months), this._offset);\n  };\n\n  _proto.minusWeeks = function minusWeeks(weeks) {\n    return this._withDateTimeOffset(this._dateTime.minusWeeks(weeks), this._offset);\n  };\n\n  _proto.minusDays = function minusDays(days) {\n    return this._withDateTimeOffset(this._dateTime.minusDays(days), this._offset);\n  };\n\n  _proto.minusHours = function minusHours(hours) {\n    return this._withDateTimeOffset(this._dateTime.minusHours(hours), this._offset);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutes) {\n    return this._withDateTimeOffset(this._dateTime.minusMinutes(minutes), this._offset);\n  };\n\n  _proto.minusSeconds = function minusSeconds(seconds) {\n    return this._withDateTimeOffset(this._dateTime.minusSeconds(seconds), this._offset);\n  };\n\n  _proto.minusNanos = function minusNanos(nanos) {\n    return this._withDateTimeOffset(this._dateTime.minusNanos(nanos), this._offset);\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, OffsetDateTime, 'other');\n\n    if (this.offset().equals(other.offset())) {\n      return this.toLocalDateTime().compareTo(other.toLocalDateTime());\n    }\n\n    var cmp = MathUtil.compareNumbers(this.toEpochSecond(), other.toEpochSecond());\n\n    if (cmp === 0) {\n      cmp = this.toLocalTime().nano() - other.toLocalTime().nano();\n\n      if (cmp === 0) {\n        cmp = this.toLocalDateTime().compareTo(other.toLocalDateTime());\n      }\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    requireNonNull(other, 'other');\n    var thisEpochSec = this.toEpochSecond();\n    var otherEpochSec = other.toEpochSecond();\n    return thisEpochSec > otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() > other.toLocalTime().nano();\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    requireNonNull(other, 'other');\n    var thisEpochSec = this.toEpochSecond();\n    var otherEpochSec = other.toEpochSecond();\n    return thisEpochSec < otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() < other.toLocalTime().nano();\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    requireNonNull(other, 'other');\n    return this.toEpochSecond() === other.toEpochSecond() && this.toLocalTime().nano() === other.toLocalTime().nano();\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof OffsetDateTime) {\n      return this._dateTime.equals(other._dateTime) && this._offset.equals(other._offset);\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._dateTime.hashCode() ^ this._offset.hashCode();\n  };\n\n  _proto.toString = function toString() {\n    return this._dateTime.toString() + this._offset.toString();\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return OffsetDateTime;\n}(DefaultInterfaceTemporal);\nfunction _init$h() {\n  OffsetDateTime.MIN = LocalDateTime.MIN.atOffset(ZoneOffset.MAX);\n  OffsetDateTime.MAX = LocalDateTime.MAX.atOffset(ZoneOffset.MIN);\n  OffsetDateTime.FROM = createTemporalQuery('OffsetDateTime.FROM', function (temporal) {\n    return OffsetDateTime.from(temporal);\n  });\n}\n\nvar DAYS_PER_CYCLE = 146097;\nvar DAYS_0000_TO_1970 = DAYS_PER_CYCLE * 5 - (30 * 365 + 7);\nvar LocalDate = function (_ChronoLocalDate) {\n  _inheritsLoose(LocalDate, _ChronoLocalDate);\n\n  LocalDate.now = function now(clockOrZone) {\n    var clock;\n\n    if (clockOrZone == null) {\n      clock = Clock.systemDefaultZone();\n    } else if (clockOrZone instanceof ZoneId) {\n      clock = Clock.system(clockOrZone);\n    } else {\n      clock = clockOrZone;\n    }\n\n    return LocalDate.ofInstant(clock.instant(), clock.zone());\n  };\n\n  LocalDate.ofInstant = function ofInstant(instant, zone) {\n    if (zone === void 0) {\n      zone = ZoneId.systemDefault();\n    }\n\n    requireNonNull(instant, 'instant');\n    var offset = zone.rules().offset(instant);\n    var epochSec = instant.epochSecond() + offset.totalSeconds();\n    var epochDay = MathUtil.floorDiv(epochSec, LocalTime.SECONDS_PER_DAY);\n    return LocalDate.ofEpochDay(epochDay);\n  };\n\n  LocalDate.of = function of(year, month, dayOfMonth) {\n    return new LocalDate(year, month, dayOfMonth);\n  };\n\n  LocalDate.ofYearDay = function ofYearDay(year, dayOfYear) {\n    ChronoField.YEAR.checkValidValue(year);\n    var leap = IsoChronology.isLeapYear(year);\n\n    if (dayOfYear === 366 && leap === false) {\n      assert(false, 'Invalid date \\'DayOfYear 366\\' as \\'' + year + '\\' is not a leap year', DateTimeException);\n    }\n\n    var moy = Month.of(Math.floor((dayOfYear - 1) / 31 + 1));\n    var monthEnd = moy.firstDayOfYear(leap) + moy.length(leap) - 1;\n\n    if (dayOfYear > monthEnd) {\n      moy = moy.plus(1);\n    }\n\n    var dom = dayOfYear - moy.firstDayOfYear(leap) + 1;\n    return new LocalDate(year, moy.value(), dom);\n  };\n\n  LocalDate.ofEpochDay = function ofEpochDay(epochDay) {\n    if (epochDay === void 0) {\n      epochDay = 0;\n    }\n\n    var adjust, adjustCycles, doyEst, yearEst, zeroDay;\n    zeroDay = epochDay + DAYS_0000_TO_1970;\n    zeroDay -= 60;\n    adjust = 0;\n\n    if (zeroDay < 0) {\n      adjustCycles = MathUtil.intDiv(zeroDay + 1, DAYS_PER_CYCLE) - 1;\n      adjust = adjustCycles * 400;\n      zeroDay += -adjustCycles * DAYS_PER_CYCLE;\n    }\n\n    yearEst = MathUtil.intDiv(400 * zeroDay + 591, DAYS_PER_CYCLE);\n    doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n\n    if (doyEst < 0) {\n      yearEst--;\n      doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n    }\n\n    yearEst += adjust;\n    var marchDoy0 = doyEst;\n    var marchMonth0 = MathUtil.intDiv(marchDoy0 * 5 + 2, 153);\n    var month = (marchMonth0 + 2) % 12 + 1;\n    var dom = marchDoy0 - MathUtil.intDiv(marchMonth0 * 306 + 5, 10) + 1;\n    yearEst += MathUtil.intDiv(marchMonth0, 10);\n    var year = yearEst;\n    return new LocalDate(year, month, dom);\n  };\n\n  LocalDate.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    var date = temporal.query(TemporalQueries.localDate());\n\n    if (date == null) {\n      throw new DateTimeException(\"Unable to obtain LocalDate from TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n\n    return date;\n  };\n\n  LocalDate.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_LOCAL_DATE;\n    }\n\n    assert(formatter != null, 'formatter', NullPointerException);\n    return formatter.parse(text, LocalDate.FROM);\n  };\n\n  LocalDate._resolvePreviousValid = function _resolvePreviousValid(year, month, day) {\n    switch (month) {\n      case 2:\n        day = Math.min(day, IsoChronology.isLeapYear(year) ? 29 : 28);\n        break;\n\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        day = Math.min(day, 30);\n        break;\n    }\n\n    return LocalDate.of(year, month, day);\n  };\n\n  function LocalDate(year, month, dayOfMonth) {\n    var _this;\n\n    _this = _ChronoLocalDate.call(this) || this;\n    requireNonNull(year, 'year');\n    requireNonNull(month, 'month');\n    requireNonNull(dayOfMonth, 'dayOfMonth');\n\n    if (month instanceof Month) {\n      month = month.value();\n    }\n\n    _this._year = MathUtil.safeToInt(year);\n    _this._month = MathUtil.safeToInt(month);\n    _this._day = MathUtil.safeToInt(dayOfMonth);\n\n    LocalDate._validate(_this._year, _this._month, _this._day);\n\n    return _this;\n  }\n\n  LocalDate._validate = function _validate(year, month, dayOfMonth) {\n    var dom;\n    ChronoField.YEAR.checkValidValue(year);\n    ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n    ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n\n    if (dayOfMonth > 28) {\n      dom = 31;\n\n      switch (month) {\n        case 2:\n          dom = IsoChronology.isLeapYear(year) ? 29 : 28;\n          break;\n\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n          dom = 30;\n      }\n\n      if (dayOfMonth > dom) {\n        if (dayOfMonth === 29) {\n          assert(false, 'Invalid date \\'February 29\\' as \\'' + year + '\\' is not a leap year', DateTimeException);\n        } else {\n          assert(false, 'Invalid date \\'' + year + '\\' \\'' + month + '\\' \\'' + dayOfMonth + '\\'', DateTimeException);\n        }\n      }\n    }\n  };\n\n  var _proto = LocalDate.prototype;\n\n  _proto.isSupported = function isSupported(field) {\n    return _ChronoLocalDate.prototype.isSupported.call(this, field);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      if (field.isDateBased()) {\n        switch (field) {\n          case ChronoField.DAY_OF_MONTH:\n            return ValueRange.of(1, this.lengthOfMonth());\n\n          case ChronoField.DAY_OF_YEAR:\n            return ValueRange.of(1, this.lengthOfYear());\n\n          case ChronoField.ALIGNED_WEEK_OF_MONTH:\n            return ValueRange.of(1, this.month() === Month.FEBRUARY && this.isLeapYear() === false ? 4 : 5);\n\n          case ChronoField.YEAR_OF_ERA:\n            return this._year <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE);\n        }\n\n        return field.range();\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    assert(field != null, '', NullPointerException);\n\n    if (field instanceof ChronoField) {\n      return this._get0(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto._get0 = function _get0(field) {\n    switch (field) {\n      case ChronoField.DAY_OF_WEEK:\n        return this.dayOfWeek().value();\n\n      case ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH:\n        return MathUtil.intMod(this._day - 1, 7) + 1;\n\n      case ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR:\n        return MathUtil.intMod(this.dayOfYear() - 1, 7) + 1;\n\n      case ChronoField.DAY_OF_MONTH:\n        return this._day;\n\n      case ChronoField.DAY_OF_YEAR:\n        return this.dayOfYear();\n\n      case ChronoField.EPOCH_DAY:\n        return this.toEpochDay();\n\n      case ChronoField.ALIGNED_WEEK_OF_MONTH:\n        return MathUtil.intDiv(this._day - 1, 7) + 1;\n\n      case ChronoField.ALIGNED_WEEK_OF_YEAR:\n        return MathUtil.intDiv(this.dayOfYear() - 1, 7) + 1;\n\n      case ChronoField.MONTH_OF_YEAR:\n        return this._month;\n\n      case ChronoField.PROLEPTIC_MONTH:\n        return this._prolepticMonth();\n\n      case ChronoField.YEAR_OF_ERA:\n        return this._year >= 1 ? this._year : 1 - this._year;\n\n      case ChronoField.YEAR:\n        return this._year;\n\n      case ChronoField.ERA:\n        return this._year >= 1 ? 1 : 0;\n    }\n\n    throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n  };\n\n  _proto._prolepticMonth = function _prolepticMonth() {\n    return this._year * 12 + (this._month - 1);\n  };\n\n  _proto.chronology = function chronology() {\n    return IsoChronology.INSTANCE;\n  };\n\n  _proto.year = function year() {\n    return this._year;\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._month;\n  };\n\n  _proto.month = function month() {\n    return Month.of(this._month);\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._day;\n  };\n\n  _proto.dayOfYear = function dayOfYear() {\n    return this.month().firstDayOfYear(this.isLeapYear()) + this._day - 1;\n  };\n\n  _proto.dayOfWeek = function dayOfWeek() {\n    var dow0 = MathUtil.floorMod(this.toEpochDay() + 3, 7);\n    return DayOfWeek.of(dow0 + 1);\n  };\n\n  _proto.isLeapYear = function isLeapYear() {\n    return IsoChronology.isLeapYear(this._year);\n  };\n\n  _proto.lengthOfMonth = function lengthOfMonth() {\n    switch (this._month) {\n      case 2:\n        return this.isLeapYear() ? 29 : 28;\n\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        return 30;\n\n      default:\n        return 31;\n    }\n  };\n\n  _proto.lengthOfYear = function lengthOfYear() {\n    return this.isLeapYear() ? 366 : 365;\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n\n    if (adjuster instanceof LocalDate) {\n      return adjuster;\n    }\n\n    assert(typeof adjuster.adjustInto === 'function', 'adjuster', IllegalArgumentException);\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    assert(field != null, 'field', NullPointerException);\n\n    if (field instanceof ChronoField) {\n      var f = field;\n      f.checkValidValue(newValue);\n\n      switch (f) {\n        case ChronoField.DAY_OF_WEEK:\n          return this.plusDays(newValue - this.dayOfWeek().value());\n\n        case ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH:\n          return this.plusDays(newValue - this.getLong(ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH));\n\n        case ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR:\n          return this.plusDays(newValue - this.getLong(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));\n\n        case ChronoField.DAY_OF_MONTH:\n          return this.withDayOfMonth(newValue);\n\n        case ChronoField.DAY_OF_YEAR:\n          return this.withDayOfYear(newValue);\n\n        case ChronoField.EPOCH_DAY:\n          return LocalDate.ofEpochDay(newValue);\n\n        case ChronoField.ALIGNED_WEEK_OF_MONTH:\n          return this.plusWeeks(newValue - this.getLong(ChronoField.ALIGNED_WEEK_OF_MONTH));\n\n        case ChronoField.ALIGNED_WEEK_OF_YEAR:\n          return this.plusWeeks(newValue - this.getLong(ChronoField.ALIGNED_WEEK_OF_YEAR));\n\n        case ChronoField.MONTH_OF_YEAR:\n          return this.withMonth(newValue);\n\n        case ChronoField.PROLEPTIC_MONTH:\n          return this.plusMonths(newValue - this.getLong(ChronoField.PROLEPTIC_MONTH));\n\n        case ChronoField.YEAR_OF_ERA:\n          return this.withYear(this._year >= 1 ? newValue : 1 - newValue);\n\n        case ChronoField.YEAR:\n          return this.withYear(newValue);\n\n        case ChronoField.ERA:\n          return this.getLong(ChronoField.ERA) === newValue ? this : this.withYear(1 - this._year);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withYear = function withYear(year) {\n    if (this._year === year) {\n      return this;\n    }\n\n    ChronoField.YEAR.checkValidValue(year);\n    return LocalDate._resolvePreviousValid(year, this._month, this._day);\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    var m = month instanceof Month ? month.value() : month;\n\n    if (this._month === m) {\n      return this;\n    }\n\n    ChronoField.MONTH_OF_YEAR.checkValidValue(m);\n    return LocalDate._resolvePreviousValid(this._year, m, this._day);\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    if (this._day === dayOfMonth) {\n      return this;\n    }\n\n    return LocalDate.of(this._year, this._month, dayOfMonth);\n  };\n\n  _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n    if (this.dayOfYear() === dayOfYear) {\n      return this;\n    }\n\n    return LocalDate.ofYearDay(this._year, dayOfYear);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(amountToAdd, 'amountToAdd');\n    requireNonNull(unit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.DAYS:\n          return this.plusDays(amountToAdd);\n\n        case ChronoUnit.WEEKS:\n          return this.plusWeeks(amountToAdd);\n\n        case ChronoUnit.MONTHS:\n          return this.plusMonths(amountToAdd);\n\n        case ChronoUnit.YEARS:\n          return this.plusYears(amountToAdd);\n\n        case ChronoUnit.DECADES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n\n        case ChronoUnit.CENTURIES:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n\n        case ChronoUnit.MILLENNIA:\n          return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n\n        case ChronoUnit.ERAS:\n          return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(yearsToAdd) {\n    if (yearsToAdd === 0) {\n      return this;\n    }\n\n    var newYear = ChronoField.YEAR.checkValidIntValue(this._year + yearsToAdd);\n    return LocalDate._resolvePreviousValid(newYear, this._month, this._day);\n  };\n\n  _proto.plusMonths = function plusMonths(monthsToAdd) {\n    if (monthsToAdd === 0) {\n      return this;\n    }\n\n    var monthCount = this._year * 12 + (this._month - 1);\n    var calcMonths = monthCount + monthsToAdd;\n    var newYear = ChronoField.YEAR.checkValidIntValue(MathUtil.floorDiv(calcMonths, 12));\n    var newMonth = MathUtil.floorMod(calcMonths, 12) + 1;\n    return LocalDate._resolvePreviousValid(newYear, newMonth, this._day);\n  };\n\n  _proto.plusWeeks = function plusWeeks(weeksToAdd) {\n    return this.plusDays(MathUtil.safeMultiply(weeksToAdd, 7));\n  };\n\n  _proto.plusDays = function plusDays(daysToAdd) {\n    if (daysToAdd === 0) {\n      return this;\n    }\n\n    var mjDay = MathUtil.safeAdd(this.toEpochDay(), daysToAdd);\n    return LocalDate.ofEpochDay(mjDay);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(amountToSubtract, 'amountToSubtract');\n    requireNonNull(unit, 'unit');\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(yearsToSubtract) {\n    return this.plusYears(yearsToSubtract * -1);\n  };\n\n  _proto.minusMonths = function minusMonths(monthsToSubtract) {\n    return this.plusMonths(monthsToSubtract * -1);\n  };\n\n  _proto.minusWeeks = function minusWeeks(weeksToSubtract) {\n    return this.plusWeeks(weeksToSubtract * -1);\n  };\n\n  _proto.minusDays = function minusDays(daysToSubtract) {\n    return this.plusDays(daysToSubtract * -1);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.localDate()) {\n      return this;\n    }\n\n    return _ChronoLocalDate.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return _ChronoLocalDate.prototype.adjustInto.call(this, temporal);\n  };\n\n  _proto.until = function until(p1, p2) {\n    if (arguments.length < 2) {\n      return this.until1(p1);\n    } else {\n      return this.until2(p1, p2);\n    }\n  };\n\n  _proto.until2 = function until2(endExclusive, unit) {\n    var end = LocalDate.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.DAYS:\n          return this.daysUntil(end);\n\n        case ChronoUnit.WEEKS:\n          return MathUtil.intDiv(this.daysUntil(end), 7);\n\n        case ChronoUnit.MONTHS:\n          return this._monthsUntil(end);\n\n        case ChronoUnit.YEARS:\n          return MathUtil.intDiv(this._monthsUntil(end), 12);\n\n        case ChronoUnit.DECADES:\n          return MathUtil.intDiv(this._monthsUntil(end), 120);\n\n        case ChronoUnit.CENTURIES:\n          return MathUtil.intDiv(this._monthsUntil(end), 1200);\n\n        case ChronoUnit.MILLENNIA:\n          return MathUtil.intDiv(this._monthsUntil(end), 12000);\n\n        case ChronoUnit.ERAS:\n          return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.daysUntil = function daysUntil(end) {\n    return end.toEpochDay() - this.toEpochDay();\n  };\n\n  _proto._monthsUntil = function _monthsUntil(end) {\n    var packed1 = this._prolepticMonth() * 32 + this.dayOfMonth();\n    var packed2 = end._prolepticMonth() * 32 + end.dayOfMonth();\n    return MathUtil.intDiv(packed2 - packed1, 32);\n  };\n\n  _proto.until1 = function until1(endDate) {\n    var end = LocalDate.from(endDate);\n\n    var totalMonths = end._prolepticMonth() - this._prolepticMonth();\n\n    var days = end._day - this._day;\n\n    if (totalMonths > 0 && days < 0) {\n      totalMonths--;\n      var calcDate = this.plusMonths(totalMonths);\n      days = end.toEpochDay() - calcDate.toEpochDay();\n    } else if (totalMonths < 0 && days > 0) {\n      totalMonths++;\n      days -= end.lengthOfMonth();\n    }\n\n    var years = MathUtil.intDiv(totalMonths, 12);\n    var months = MathUtil.intMod(totalMonths, 12);\n    return Period.of(years, months, days);\n  };\n\n  _proto.atTime = function atTime() {\n    if (arguments.length === 1) {\n      return this.atTime1.apply(this, arguments);\n    } else {\n      return this.atTime4.apply(this, arguments);\n    }\n  };\n\n  _proto.atTime1 = function atTime1(time) {\n    requireNonNull(time, 'time');\n\n    if (time instanceof LocalTime) {\n      return LocalDateTime.of(this, time);\n    } else if (time instanceof OffsetTime) {\n      return this._atTimeOffsetTime(time);\n    } else {\n      throw new IllegalArgumentException('time must be an instance of LocalTime or OffsetTime' + (time && time.constructor && time.constructor.name ? ', but is ' + time.constructor.name : ''));\n    }\n  };\n\n  _proto.atTime4 = function atTime4(hour, minute, second, nanoOfSecond) {\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    return this.atTime1(LocalTime.of(hour, minute, second, nanoOfSecond));\n  };\n\n  _proto._atTimeOffsetTime = function _atTimeOffsetTime(time) {\n    return OffsetDateTime.of(LocalDateTime.of(this, time.toLocalTime()), time.offset());\n  };\n\n  _proto.atStartOfDay = function atStartOfDay(zone) {\n    if (zone != null) {\n      return this.atStartOfDayWithZone(zone);\n    } else {\n      return LocalDateTime.of(this, LocalTime.MIDNIGHT);\n    }\n  };\n\n  _proto.atStartOfDayWithZone = function atStartOfDayWithZone(zone) {\n    requireNonNull(zone, 'zone');\n    var ldt = this.atTime(LocalTime.MIDNIGHT);\n\n    if (zone instanceof ZoneOffset === false) {\n      var trans = zone.rules().transition(ldt);\n\n      if (trans != null && trans.isGap()) {\n        ldt = trans.dateTimeAfter();\n      }\n    }\n\n    return ZonedDateTime.of(ldt, zone);\n  };\n\n  _proto.toEpochDay = function toEpochDay() {\n    var y = this._year;\n    var m = this._month;\n    var total = 0;\n    total += 365 * y;\n\n    if (y >= 0) {\n      total += MathUtil.intDiv(y + 3, 4) - MathUtil.intDiv(y + 99, 100) + MathUtil.intDiv(y + 399, 400);\n    } else {\n      total -= MathUtil.intDiv(y, -4) - MathUtil.intDiv(y, -100) + MathUtil.intDiv(y, -400);\n    }\n\n    total += MathUtil.intDiv(367 * m - 362, 12);\n    total += this.dayOfMonth() - 1;\n\n    if (m > 2) {\n      total--;\n\n      if (!IsoChronology.isLeapYear(y)) {\n        total--;\n      }\n    }\n\n    return total - DAYS_0000_TO_1970;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, LocalDate, 'other');\n    return this._compareTo0(other);\n  };\n\n  _proto._compareTo0 = function _compareTo0(otherDate) {\n    var cmp = this._year - otherDate._year;\n\n    if (cmp === 0) {\n      cmp = this._month - otherDate._month;\n\n      if (cmp === 0) {\n        cmp = this._day - otherDate._day;\n      }\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    return this.compareTo(other) === 0;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof LocalDate) {\n      return this._compareTo0(other) === 0;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    var yearValue = this._year;\n    var monthValue = this._month;\n    var dayValue = this._day;\n    return MathUtil.hash(yearValue & 0xFFFFF800 ^ (yearValue << 11) + (monthValue << 6) + dayValue);\n  };\n\n  _proto.toString = function toString() {\n    var dayString, monthString, yearString;\n    var yearValue = this._year;\n    var monthValue = this._month;\n    var dayValue = this._day;\n    var absYear = Math.abs(yearValue);\n\n    if (absYear < 1000) {\n      if (yearValue < 0) {\n        yearString = '-' + ('' + (yearValue - 10000)).slice(-4);\n      } else {\n        yearString = ('' + (yearValue + 10000)).slice(-4);\n      }\n    } else {\n      if (yearValue > 9999) {\n        yearString = '+' + yearValue;\n      } else {\n        yearString = '' + yearValue;\n      }\n    }\n\n    if (monthValue < 10) {\n      monthString = '-0' + monthValue;\n    } else {\n      monthString = '-' + monthValue;\n    }\n\n    if (dayValue < 10) {\n      dayString = '-0' + dayValue;\n    } else {\n      dayString = '-' + dayValue;\n    }\n\n    return yearString + monthString + dayString;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    requireInstance(formatter, DateTimeFormatter, 'formatter');\n    return _ChronoLocalDate.prototype.format.call(this, formatter);\n  };\n\n  return LocalDate;\n}(ChronoLocalDate);\nfunction _init$i() {\n  LocalDate.MIN = LocalDate.of(YearConstants.MIN_VALUE, 1, 1);\n  LocalDate.MAX = LocalDate.of(YearConstants.MAX_VALUE, 12, 31);\n  LocalDate.EPOCH_0 = LocalDate.ofEpochDay(0);\n  LocalDate.FROM = createTemporalQuery('LocalDate.FROM', function (temporal) {\n    return LocalDate.from(temporal);\n  });\n}\n\nvar ChronoLocalDateTime = function (_DefaultInterfaceTemp) {\n  _inheritsLoose(ChronoLocalDateTime, _DefaultInterfaceTemp);\n\n  function ChronoLocalDateTime() {\n    return _DefaultInterfaceTemp.apply(this, arguments) || this;\n  }\n\n  var _proto = ChronoLocalDateTime.prototype;\n\n  _proto.chronology = function chronology() {\n    return this.toLocalDate().chronology();\n  };\n\n  _proto.query = function query(_query) {\n    if (_query === TemporalQueries.chronology()) {\n      return this.chronology();\n    } else if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.localDate()) {\n      return LocalDate.ofEpochDay(this.toLocalDate().toEpochDay());\n    } else if (_query === TemporalQueries.localTime()) {\n      return this.toLocalTime();\n    } else if (_query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _DefaultInterfaceTemp.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(ChronoField.EPOCH_DAY, this.toLocalDate().toEpochDay()).with(ChronoField.NANO_OF_DAY, this.toLocalTime().toNanoOfDay());\n  };\n\n  _proto.toInstant = function toInstant(offset) {\n    requireInstance(offset, ZoneOffset, 'zoneId');\n    return Instant.ofEpochSecond(this.toEpochSecond(offset), this.toLocalTime().nano());\n  };\n\n  _proto.toEpochSecond = function toEpochSecond(offset) {\n    requireNonNull(offset, 'offset');\n    var epochDay = this.toLocalDate().toEpochDay();\n    var secs = epochDay * 86400 + this.toLocalTime().toSecondOfDay();\n    secs -= offset.totalSeconds();\n    return MathUtil.safeToInt(secs);\n  };\n\n  return ChronoLocalDateTime;\n}(DefaultInterfaceTemporal);\n\nvar LocalDateTime = function (_ChronoLocalDateTime) {\n  _inheritsLoose(LocalDateTime, _ChronoLocalDateTime);\n\n  LocalDateTime.now = function now(clockOrZone) {\n    if (clockOrZone == null) {\n      return LocalDateTime._now(Clock.systemDefaultZone());\n    } else if (clockOrZone instanceof Clock) {\n      return LocalDateTime._now(clockOrZone);\n    } else {\n      return LocalDateTime._now(Clock.system(clockOrZone));\n    }\n  };\n\n  LocalDateTime._now = function _now(clock) {\n    requireNonNull(clock, 'clock');\n    return LocalDateTime.ofInstant(clock.instant(), clock.zone());\n  };\n\n  LocalDateTime._ofEpochMillis = function _ofEpochMillis(epochMilli, offset) {\n    var localSecond = MathUtil.floorDiv(epochMilli, 1000) + offset.totalSeconds();\n    var localEpochDay = MathUtil.floorDiv(localSecond, LocalTime.SECONDS_PER_DAY);\n    var secsOfDay = MathUtil.floorMod(localSecond, LocalTime.SECONDS_PER_DAY);\n    var nanoOfSecond = MathUtil.floorMod(epochMilli, 1000) * 1000000;\n    var date = LocalDate.ofEpochDay(localEpochDay);\n    var time = LocalTime.ofSecondOfDay(secsOfDay, nanoOfSecond);\n    return new LocalDateTime(date, time);\n  };\n\n  LocalDateTime.of = function of() {\n    if (arguments.length <= 2) {\n      return LocalDateTime.ofDateAndTime.apply(this, arguments);\n    } else {\n      return LocalDateTime.ofNumbers.apply(this, arguments);\n    }\n  };\n\n  LocalDateTime.ofNumbers = function ofNumbers(year, month, dayOfMonth, hour, minute, second, nanoOfSecond) {\n    if (hour === void 0) {\n      hour = 0;\n    }\n\n    if (minute === void 0) {\n      minute = 0;\n    }\n\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    var date = LocalDate.of(year, month, dayOfMonth);\n    var time = LocalTime.of(hour, minute, second, nanoOfSecond);\n    return new LocalDateTime(date, time);\n  };\n\n  LocalDateTime.ofDateAndTime = function ofDateAndTime(date, time) {\n    requireNonNull(date, 'date');\n    requireNonNull(time, 'time');\n    return new LocalDateTime(date, time);\n  };\n\n  LocalDateTime.ofInstant = function ofInstant(instant, zone) {\n    if (zone === void 0) {\n      zone = ZoneId.systemDefault();\n    }\n\n    requireNonNull(instant, 'instant');\n    requireInstance(instant, Instant, 'instant');\n    requireNonNull(zone, 'zone');\n    var offset = zone.rules().offset(instant);\n    return LocalDateTime.ofEpochSecond(instant.epochSecond(), instant.nano(), offset);\n  };\n\n  LocalDateTime.ofEpochSecond = function ofEpochSecond(epochSecond, nanoOfSecond, offset) {\n    if (epochSecond === void 0) {\n      epochSecond = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    if (arguments.length === 2 && nanoOfSecond instanceof ZoneOffset) {\n      offset = nanoOfSecond;\n      nanoOfSecond = 0;\n    }\n\n    requireNonNull(offset, 'offset');\n    var localSecond = epochSecond + offset.totalSeconds();\n    var localEpochDay = MathUtil.floorDiv(localSecond, LocalTime.SECONDS_PER_DAY);\n    var secsOfDay = MathUtil.floorMod(localSecond, LocalTime.SECONDS_PER_DAY);\n    var date = LocalDate.ofEpochDay(localEpochDay);\n    var time = LocalTime.ofSecondOfDay(secsOfDay, nanoOfSecond);\n    return new LocalDateTime(date, time);\n  };\n\n  LocalDateTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n\n    if (temporal instanceof LocalDateTime) {\n      return temporal;\n    } else if (temporal instanceof ZonedDateTime) {\n      return temporal.toLocalDateTime();\n    }\n\n    try {\n      var date = LocalDate.from(temporal);\n      var time = LocalTime.from(temporal);\n      return new LocalDateTime(date, time);\n    } catch (ex) {\n      throw new DateTimeException(\"Unable to obtain LocalDateTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n  };\n\n  LocalDateTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, LocalDateTime.FROM);\n  };\n\n  function LocalDateTime(date, time) {\n    var _this;\n\n    _this = _ChronoLocalDateTime.call(this) || this;\n    requireInstance(date, LocalDate, 'date');\n    requireInstance(time, LocalTime, 'time');\n    _this._date = date;\n    _this._time = time;\n    return _this;\n  }\n\n  var _proto = LocalDateTime.prototype;\n\n  _proto._withDateTime = function _withDateTime(newDate, newTime) {\n    if (this._date.equals(newDate) && this._time.equals(newTime)) {\n      return this;\n    }\n\n    return new LocalDateTime(newDate, newTime);\n  };\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    if (field instanceof ChronoField) {\n      return field.isTimeBased() ? this._time.range(field) : this._date.range(field);\n    }\n\n    return field.rangeRefinedBy(this);\n  };\n\n  _proto.get = function get(field) {\n    if (field instanceof ChronoField) {\n      return field.isTimeBased() ? this._time.get(field) : this._date.get(field);\n    }\n\n    return _ChronoLocalDateTime.prototype.get.call(this, field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      return field.isTimeBased() ? this._time.getLong(field) : this._date.getLong(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.year = function year() {\n    return this._date.year();\n  };\n\n  _proto.monthValue = function monthValue() {\n    return this._date.monthValue();\n  };\n\n  _proto.month = function month() {\n    return this._date.month();\n  };\n\n  _proto.dayOfMonth = function dayOfMonth() {\n    return this._date.dayOfMonth();\n  };\n\n  _proto.dayOfYear = function dayOfYear() {\n    return this._date.dayOfYear();\n  };\n\n  _proto.dayOfWeek = function dayOfWeek() {\n    return this._date.dayOfWeek();\n  };\n\n  _proto.hour = function hour() {\n    return this._time.hour();\n  };\n\n  _proto.minute = function minute() {\n    return this._time.minute();\n  };\n\n  _proto.second = function second() {\n    return this._time.second();\n  };\n\n  _proto.nano = function nano() {\n    return this._time.nano();\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n\n    if (adjuster instanceof LocalDate) {\n      return this._withDateTime(adjuster, this._time);\n    } else if (adjuster instanceof LocalTime) {\n      return this._withDateTime(this._date, adjuster);\n    } else if (adjuster instanceof LocalDateTime) {\n      return adjuster;\n    }\n\n    assert(typeof adjuster.adjustInto === 'function', 'adjuster', IllegalArgumentException);\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      if (field.isTimeBased()) {\n        return this._withDateTime(this._date, this._time.with(field, newValue));\n      } else {\n        return this._withDateTime(this._date.with(field, newValue), this._time);\n      }\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withYear = function withYear(year) {\n    return this._withDateTime(this._date.withYear(year), this._time);\n  };\n\n  _proto.withMonth = function withMonth(month) {\n    return this._withDateTime(this._date.withMonth(month), this._time);\n  };\n\n  _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n    return this._withDateTime(this._date.withDayOfMonth(dayOfMonth), this._time);\n  };\n\n  _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n    return this._withDateTime(this._date.withDayOfYear(dayOfYear), this._time);\n  };\n\n  _proto.withHour = function withHour(hour) {\n    var newTime = this._time.withHour(hour);\n\n    return this._withDateTime(this._date, newTime);\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    var newTime = this._time.withMinute(minute);\n\n    return this._withDateTime(this._date, newTime);\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    var newTime = this._time.withSecond(second);\n\n    return this._withDateTime(this._date, newTime);\n  };\n\n  _proto.withNano = function withNano(nanoOfSecond) {\n    var newTime = this._time.withNano(nanoOfSecond);\n\n    return this._withDateTime(this._date, newTime);\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    return this._withDateTime(this._date, this._time.truncatedTo(unit));\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(unit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this.plusNanos(amountToAdd);\n\n        case ChronoUnit.MICROS:\n          return this.plusDays(MathUtil.intDiv(amountToAdd, LocalTime.MICROS_PER_DAY)).plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MICROS_PER_DAY) * 1000);\n\n        case ChronoUnit.MILLIS:\n          return this.plusDays(MathUtil.intDiv(amountToAdd, LocalTime.MILLIS_PER_DAY)).plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MILLIS_PER_DAY) * 1000000);\n\n        case ChronoUnit.SECONDS:\n          return this.plusSeconds(amountToAdd);\n\n        case ChronoUnit.MINUTES:\n          return this.plusMinutes(amountToAdd);\n\n        case ChronoUnit.HOURS:\n          return this.plusHours(amountToAdd);\n\n        case ChronoUnit.HALF_DAYS:\n          return this.plusDays(MathUtil.intDiv(amountToAdd, 256)).plusHours(MathUtil.intMod(amountToAdd, 256) * 12);\n      }\n\n      return this._withDateTime(this._date.plus(amountToAdd, unit), this._time);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusYears = function plusYears(years) {\n    var newDate = this._date.plusYears(years);\n\n    return this._withDateTime(newDate, this._time);\n  };\n\n  _proto.plusMonths = function plusMonths(months) {\n    var newDate = this._date.plusMonths(months);\n\n    return this._withDateTime(newDate, this._time);\n  };\n\n  _proto.plusWeeks = function plusWeeks(weeks) {\n    var newDate = this._date.plusWeeks(weeks);\n\n    return this._withDateTime(newDate, this._time);\n  };\n\n  _proto.plusDays = function plusDays(days) {\n    var newDate = this._date.plusDays(days);\n\n    return this._withDateTime(newDate, this._time);\n  };\n\n  _proto.plusHours = function plusHours(hours) {\n    return this._plusWithOverflow(this._date, hours, 0, 0, 0, 1);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutes) {\n    return this._plusWithOverflow(this._date, 0, minutes, 0, 0, 1);\n  };\n\n  _proto.plusSeconds = function plusSeconds(seconds) {\n    return this._plusWithOverflow(this._date, 0, 0, seconds, 0, 1);\n  };\n\n  _proto.plusNanos = function plusNanos(nanos) {\n    return this._plusWithOverflow(this._date, 0, 0, 0, nanos, 1);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(unit, 'unit');\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusYears = function minusYears(years) {\n    return this.plusYears(-1 * years);\n  };\n\n  _proto.minusMonths = function minusMonths(months) {\n    return this.plusMonths(-1 * months);\n  };\n\n  _proto.minusWeeks = function minusWeeks(weeks) {\n    return this.plusWeeks(-1 * weeks);\n  };\n\n  _proto.minusDays = function minusDays(days) {\n    return this.plusDays(-1 * days);\n  };\n\n  _proto.minusHours = function minusHours(hours) {\n    return this._plusWithOverflow(this._date, hours, 0, 0, 0, -1);\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutes) {\n    return this._plusWithOverflow(this._date, 0, minutes, 0, 0, -1);\n  };\n\n  _proto.minusSeconds = function minusSeconds(seconds) {\n    return this._plusWithOverflow(this._date, 0, 0, seconds, 0, -1);\n  };\n\n  _proto.minusNanos = function minusNanos(nanos) {\n    return this._plusWithOverflow(this._date, 0, 0, 0, nanos, -1);\n  };\n\n  _proto._plusWithOverflow = function _plusWithOverflow(newDate, hours, minutes, seconds, nanos, sign) {\n    if (hours === 0 && minutes === 0 && seconds === 0 && nanos === 0) {\n      return this._withDateTime(newDate, this._time);\n    }\n\n    var totDays = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_DAY) + MathUtil.intDiv(seconds, LocalTime.SECONDS_PER_DAY) + MathUtil.intDiv(minutes, LocalTime.MINUTES_PER_DAY) + MathUtil.intDiv(hours, LocalTime.HOURS_PER_DAY);\n    totDays *= sign;\n    var totNanos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_DAY) + MathUtil.intMod(seconds, LocalTime.SECONDS_PER_DAY) * LocalTime.NANOS_PER_SECOND + MathUtil.intMod(minutes, LocalTime.MINUTES_PER_DAY) * LocalTime.NANOS_PER_MINUTE + MathUtil.intMod(hours, LocalTime.HOURS_PER_DAY) * LocalTime.NANOS_PER_HOUR;\n\n    var curNoD = this._time.toNanoOfDay();\n\n    totNanos = totNanos * sign + curNoD;\n    totDays += MathUtil.floorDiv(totNanos, LocalTime.NANOS_PER_DAY);\n    var newNoD = MathUtil.floorMod(totNanos, LocalTime.NANOS_PER_DAY);\n    var newTime = newNoD === curNoD ? this._time : LocalTime.ofNanoOfDay(newNoD);\n    return this._withDateTime(newDate.plusDays(totDays), newTime);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.localDate()) {\n      return this.toLocalDate();\n    }\n\n    return _ChronoLocalDateTime.prototype.query.call(this, _query);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return _ChronoLocalDateTime.prototype.adjustInto.call(this, temporal);\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    var end = LocalDateTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      if (unit.isTimeBased()) {\n        var daysUntil = this._date.daysUntil(end._date);\n\n        var timeUntil = end._time.toNanoOfDay() - this._time.toNanoOfDay();\n\n        if (daysUntil > 0 && timeUntil < 0) {\n          daysUntil--;\n          timeUntil += LocalTime.NANOS_PER_DAY;\n        } else if (daysUntil < 0 && timeUntil > 0) {\n          daysUntil++;\n          timeUntil -= LocalTime.NANOS_PER_DAY;\n        }\n\n        var amount = daysUntil;\n\n        switch (unit) {\n          case ChronoUnit.NANOS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.NANOS_PER_DAY);\n            return MathUtil.safeAdd(amount, timeUntil);\n\n          case ChronoUnit.MICROS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.MICROS_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, 1000));\n\n          case ChronoUnit.MILLIS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.MILLIS_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, 1000000));\n\n          case ChronoUnit.SECONDS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.SECONDS_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_SECOND));\n\n          case ChronoUnit.MINUTES:\n            amount = MathUtil.safeMultiply(amount, LocalTime.MINUTES_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_MINUTE));\n\n          case ChronoUnit.HOURS:\n            amount = MathUtil.safeMultiply(amount, LocalTime.HOURS_PER_DAY);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_HOUR));\n\n          case ChronoUnit.HALF_DAYS:\n            amount = MathUtil.safeMultiply(amount, 2);\n            return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_HOUR * 12));\n        }\n\n        throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n      }\n\n      var endDate = end._date;\n      var endTime = end._time;\n\n      if (endDate.isAfter(this._date) && endTime.isBefore(this._time)) {\n        endDate = endDate.minusDays(1);\n      } else if (endDate.isBefore(this._date) && endTime.isAfter(this._time)) {\n        endDate = endDate.plusDays(1);\n      }\n\n      return this._date.until(endDate, unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.atOffset = function atOffset(offset) {\n    return OffsetDateTime.of(this, offset);\n  };\n\n  _proto.atZone = function atZone(zone) {\n    return ZonedDateTime.of(this, zone);\n  };\n\n  _proto.toLocalDate = function toLocalDate() {\n    return this._date;\n  };\n\n  _proto.toLocalTime = function toLocalTime() {\n    return this._time;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, LocalDateTime, 'other');\n    return this._compareTo0(other);\n  };\n\n  _proto._compareTo0 = function _compareTo0(other) {\n    var cmp = this._date.compareTo(other.toLocalDate());\n\n    if (cmp === 0) {\n      cmp = this._time.compareTo(other.toLocalTime());\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.isEqual = function isEqual(other) {\n    return this.compareTo(other) === 0;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof LocalDateTime) {\n      return this._date.equals(other._date) && this._time.equals(other._time);\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._date.hashCode() ^ this._time.hashCode();\n  };\n\n  _proto.toString = function toString() {\n    return this._date.toString() + 'T' + this._time.toString();\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return LocalDateTime;\n}(ChronoLocalDateTime);\nfunction _init$j() {\n  LocalDateTime.MIN = LocalDateTime.of(LocalDate.MIN, LocalTime.MIN);\n  LocalDateTime.MAX = LocalDateTime.of(LocalDate.MAX, LocalTime.MAX);\n  LocalDateTime.FROM = createTemporalQuery('LocalDateTime.FROM', function (temporal) {\n    return LocalDateTime.from(temporal);\n  });\n}\n\nvar LocalTime = function (_Temporal) {\n  _inheritsLoose(LocalTime, _Temporal);\n\n  LocalTime.now = function now(clockOrZone) {\n    if (clockOrZone == null) {\n      return LocalTime._now(Clock.systemDefaultZone());\n    } else if (clockOrZone instanceof Clock) {\n      return LocalTime._now(clockOrZone);\n    } else {\n      return LocalTime._now(Clock.system(clockOrZone));\n    }\n  };\n\n  LocalTime._now = function _now(clock) {\n    if (clock === void 0) {\n      clock = Clock.systemDefaultZone();\n    }\n\n    requireNonNull(clock, 'clock');\n    return LocalTime.ofInstant(clock.instant(), clock.zone());\n  };\n\n  LocalTime.ofInstant = function ofInstant(instant, zone) {\n    if (zone === void 0) {\n      zone = ZoneId.systemDefault();\n    }\n\n    var offset = zone.rules().offset(instant);\n    var secsOfDay = MathUtil.intMod(instant.epochSecond(), LocalTime.SECONDS_PER_DAY);\n    secsOfDay = MathUtil.intMod(secsOfDay + offset.totalSeconds(), LocalTime.SECONDS_PER_DAY);\n\n    if (secsOfDay < 0) {\n      secsOfDay += LocalTime.SECONDS_PER_DAY;\n    }\n\n    return LocalTime.ofSecondOfDay(secsOfDay, instant.nano());\n  };\n\n  LocalTime.of = function of(hour, minute, second, nanoOfSecond) {\n    return new LocalTime(hour, minute, second, nanoOfSecond);\n  };\n\n  LocalTime.ofSecondOfDay = function ofSecondOfDay(secondOfDay, nanoOfSecond) {\n    if (secondOfDay === void 0) {\n      secondOfDay = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    ChronoField.SECOND_OF_DAY.checkValidValue(secondOfDay);\n    ChronoField.NANO_OF_SECOND.checkValidValue(nanoOfSecond);\n    var hours = MathUtil.intDiv(secondOfDay, LocalTime.SECONDS_PER_HOUR);\n    secondOfDay -= hours * LocalTime.SECONDS_PER_HOUR;\n    var minutes = MathUtil.intDiv(secondOfDay, LocalTime.SECONDS_PER_MINUTE);\n    secondOfDay -= minutes * LocalTime.SECONDS_PER_MINUTE;\n    return new LocalTime(hours, minutes, secondOfDay, nanoOfSecond);\n  };\n\n  LocalTime.ofNanoOfDay = function ofNanoOfDay(nanoOfDay) {\n    if (nanoOfDay === void 0) {\n      nanoOfDay = 0;\n    }\n\n    ChronoField.NANO_OF_DAY.checkValidValue(nanoOfDay);\n    var hours = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_HOUR);\n    nanoOfDay -= hours * LocalTime.NANOS_PER_HOUR;\n    var minutes = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_MINUTE);\n    nanoOfDay -= minutes * LocalTime.NANOS_PER_MINUTE;\n    var seconds = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_SECOND);\n    nanoOfDay -= seconds * LocalTime.NANOS_PER_SECOND;\n    return new LocalTime(hours, minutes, seconds, nanoOfDay);\n  };\n\n  LocalTime.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    var time = temporal.query(TemporalQueries.localTime());\n\n    if (time == null) {\n      throw new DateTimeException(\"Unable to obtain LocalTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n\n    return time;\n  };\n\n  LocalTime.parse = function parse(text, formatter) {\n    if (formatter === void 0) {\n      formatter = DateTimeFormatter.ISO_LOCAL_TIME;\n    }\n\n    requireNonNull(formatter, 'formatter');\n    return formatter.parse(text, LocalTime.FROM);\n  };\n\n  function LocalTime(hour, minute, second, nanoOfSecond) {\n    var _this;\n\n    if (hour === void 0) {\n      hour = 0;\n    }\n\n    if (minute === void 0) {\n      minute = 0;\n    }\n\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    _this = _Temporal.call(this) || this;\n\n    var _hour = MathUtil.safeToInt(hour);\n\n    var _minute = MathUtil.safeToInt(minute);\n\n    var _second = MathUtil.safeToInt(second);\n\n    var _nanoOfSecond = MathUtil.safeToInt(nanoOfSecond);\n\n    LocalTime._validate(_hour, _minute, _second, _nanoOfSecond);\n\n    if (_minute === 0 && _second === 0 && _nanoOfSecond === 0) {\n      if (!LocalTime.HOURS[_hour]) {\n        _this._hour = _hour;\n        _this._minute = _minute;\n        _this._second = _second;\n        _this._nano = _nanoOfSecond;\n        LocalTime.HOURS[_hour] = _assertThisInitialized(_this);\n      }\n\n      return LocalTime.HOURS[_hour] || _assertThisInitialized(_this);\n    }\n\n    _this._hour = _hour;\n    _this._minute = _minute;\n    _this._second = _second;\n    _this._nano = _nanoOfSecond;\n    return _this;\n  }\n\n  LocalTime._validate = function _validate(hour, minute, second, nanoOfSecond) {\n    ChronoField.HOUR_OF_DAY.checkValidValue(hour);\n    ChronoField.MINUTE_OF_HOUR.checkValidValue(minute);\n    ChronoField.SECOND_OF_MINUTE.checkValidValue(second);\n    ChronoField.NANO_OF_SECOND.checkValidValue(nanoOfSecond);\n  };\n\n  var _proto = LocalTime.prototype;\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit.isTimeBased();\n    } else if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isTimeBased();\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    requireNonNull(field);\n    return _Temporal.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      return this._get0(field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto._get0 = function _get0(field) {\n    switch (field) {\n      case ChronoField.NANO_OF_SECOND:\n        return this._nano;\n\n      case ChronoField.NANO_OF_DAY:\n        return this.toNanoOfDay();\n\n      case ChronoField.MICRO_OF_SECOND:\n        return MathUtil.intDiv(this._nano, 1000);\n\n      case ChronoField.MICRO_OF_DAY:\n        return MathUtil.intDiv(this.toNanoOfDay(), 1000);\n\n      case ChronoField.MILLI_OF_SECOND:\n        return MathUtil.intDiv(this._nano, 1000000);\n\n      case ChronoField.MILLI_OF_DAY:\n        return MathUtil.intDiv(this.toNanoOfDay(), 1000000);\n\n      case ChronoField.SECOND_OF_MINUTE:\n        return this._second;\n\n      case ChronoField.SECOND_OF_DAY:\n        return this.toSecondOfDay();\n\n      case ChronoField.MINUTE_OF_HOUR:\n        return this._minute;\n\n      case ChronoField.MINUTE_OF_DAY:\n        return this._hour * 60 + this._minute;\n\n      case ChronoField.HOUR_OF_AMPM:\n        return MathUtil.intMod(this._hour, 12);\n\n      case ChronoField.CLOCK_HOUR_OF_AMPM:\n        {\n          var ham = MathUtil.intMod(this._hour, 12);\n          return ham % 12 === 0 ? 12 : ham;\n        }\n\n      case ChronoField.HOUR_OF_DAY:\n        return this._hour;\n\n      case ChronoField.CLOCK_HOUR_OF_DAY:\n        return this._hour === 0 ? 24 : this._hour;\n\n      case ChronoField.AMPM_OF_DAY:\n        return MathUtil.intDiv(this._hour, 12);\n    }\n\n    throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n  };\n\n  _proto.hour = function hour() {\n    return this._hour;\n  };\n\n  _proto.minute = function minute() {\n    return this._minute;\n  };\n\n  _proto.second = function second() {\n    return this._second;\n  };\n\n  _proto.nano = function nano() {\n    return this._nano;\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n\n    if (adjuster instanceof LocalTime) {\n      return adjuster;\n    }\n\n    assert(typeof adjuster.adjustInto === 'function', 'adjuster', IllegalArgumentException);\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n    requireInstance(field, TemporalField, 'field');\n\n    if (field instanceof ChronoField) {\n      field.checkValidValue(newValue);\n\n      switch (field) {\n        case ChronoField.NANO_OF_SECOND:\n          return this.withNano(newValue);\n\n        case ChronoField.NANO_OF_DAY:\n          return LocalTime.ofNanoOfDay(newValue);\n\n        case ChronoField.MICRO_OF_SECOND:\n          return this.withNano(newValue * 1000);\n\n        case ChronoField.MICRO_OF_DAY:\n          return LocalTime.ofNanoOfDay(newValue * 1000);\n\n        case ChronoField.MILLI_OF_SECOND:\n          return this.withNano(newValue * 1000000);\n\n        case ChronoField.MILLI_OF_DAY:\n          return LocalTime.ofNanoOfDay(newValue * 1000000);\n\n        case ChronoField.SECOND_OF_MINUTE:\n          return this.withSecond(newValue);\n\n        case ChronoField.SECOND_OF_DAY:\n          return this.plusSeconds(newValue - this.toSecondOfDay());\n\n        case ChronoField.MINUTE_OF_HOUR:\n          return this.withMinute(newValue);\n\n        case ChronoField.MINUTE_OF_DAY:\n          return this.plusMinutes(newValue - (this._hour * 60 + this._minute));\n\n        case ChronoField.HOUR_OF_AMPM:\n          return this.plusHours(newValue - MathUtil.intMod(this._hour, 12));\n\n        case ChronoField.CLOCK_HOUR_OF_AMPM:\n          return this.plusHours((newValue === 12 ? 0 : newValue) - MathUtil.intMod(this._hour, 12));\n\n        case ChronoField.HOUR_OF_DAY:\n          return this.withHour(newValue);\n\n        case ChronoField.CLOCK_HOUR_OF_DAY:\n          return this.withHour(newValue === 24 ? 0 : newValue);\n\n        case ChronoField.AMPM_OF_DAY:\n          return this.plusHours((newValue - MathUtil.intDiv(this._hour, 12)) * 12);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.withHour = function withHour(hour) {\n    if (hour === void 0) {\n      hour = 0;\n    }\n\n    if (this._hour === hour) {\n      return this;\n    }\n\n    return new LocalTime(hour, this._minute, this._second, this._nano);\n  };\n\n  _proto.withMinute = function withMinute(minute) {\n    if (minute === void 0) {\n      minute = 0;\n    }\n\n    if (this._minute === minute) {\n      return this;\n    }\n\n    return new LocalTime(this._hour, minute, this._second, this._nano);\n  };\n\n  _proto.withSecond = function withSecond(second) {\n    if (second === void 0) {\n      second = 0;\n    }\n\n    if (this._second === second) {\n      return this;\n    }\n\n    return new LocalTime(this._hour, this._minute, second, this._nano);\n  };\n\n  _proto.withNano = function withNano(nanoOfSecond) {\n    if (nanoOfSecond === void 0) {\n      nanoOfSecond = 0;\n    }\n\n    if (this._nano === nanoOfSecond) {\n      return this;\n    }\n\n    return new LocalTime(this._hour, this._minute, this._second, nanoOfSecond);\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    requireNonNull(unit, 'unit');\n\n    if (unit === ChronoUnit.NANOS) {\n      return this;\n    }\n\n    var unitDur = unit.duration();\n\n    if (unitDur.seconds() > LocalTime.SECONDS_PER_DAY) {\n      throw new DateTimeException('Unit is too large to be used for truncation');\n    }\n\n    var dur = unitDur.toNanos();\n\n    if (MathUtil.intMod(LocalTime.NANOS_PER_DAY, dur) !== 0) {\n      throw new DateTimeException('Unit must divide into a standard day without remainder');\n    }\n\n    var nod = this.toNanoOfDay();\n    return LocalTime.ofNanoOfDay(MathUtil.intDiv(nod, dur) * dur);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(unit, 'unit');\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this.plusNanos(amountToAdd);\n\n        case ChronoUnit.MICROS:\n          return this.plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MICROS_PER_DAY) * 1000);\n\n        case ChronoUnit.MILLIS:\n          return this.plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MILLIS_PER_DAY) * 1000000);\n\n        case ChronoUnit.SECONDS:\n          return this.plusSeconds(amountToAdd);\n\n        case ChronoUnit.MINUTES:\n          return this.plusMinutes(amountToAdd);\n\n        case ChronoUnit.HOURS:\n          return this.plusHours(amountToAdd);\n\n        case ChronoUnit.HALF_DAYS:\n          return this.plusHours(MathUtil.intMod(amountToAdd, 2) * 12);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusHours = function plusHours(hoursToAdd) {\n    if (hoursToAdd === 0) {\n      return this;\n    }\n\n    var newHour = MathUtil.intMod(MathUtil.intMod(hoursToAdd, LocalTime.HOURS_PER_DAY) + this._hour + LocalTime.HOURS_PER_DAY, LocalTime.HOURS_PER_DAY);\n    return new LocalTime(newHour, this._minute, this._second, this._nano);\n  };\n\n  _proto.plusMinutes = function plusMinutes(minutesToAdd) {\n    if (minutesToAdd === 0) {\n      return this;\n    }\n\n    var mofd = this._hour * LocalTime.MINUTES_PER_HOUR + this._minute;\n    var newMofd = MathUtil.intMod(MathUtil.intMod(minutesToAdd, LocalTime.MINUTES_PER_DAY) + mofd + LocalTime.MINUTES_PER_DAY, LocalTime.MINUTES_PER_DAY);\n\n    if (mofd === newMofd) {\n      return this;\n    }\n\n    var newHour = MathUtil.intDiv(newMofd, LocalTime.MINUTES_PER_HOUR);\n    var newMinute = MathUtil.intMod(newMofd, LocalTime.MINUTES_PER_HOUR);\n    return new LocalTime(newHour, newMinute, this._second, this._nano);\n  };\n\n  _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n    if (secondsToAdd === 0) {\n      return this;\n    }\n\n    var sofd = this._hour * LocalTime.SECONDS_PER_HOUR + this._minute * LocalTime.SECONDS_PER_MINUTE + this._second;\n    var newSofd = MathUtil.intMod(MathUtil.intMod(secondsToAdd, LocalTime.SECONDS_PER_DAY) + sofd + LocalTime.SECONDS_PER_DAY, LocalTime.SECONDS_PER_DAY);\n\n    if (sofd === newSofd) {\n      return this;\n    }\n\n    var newHour = MathUtil.intDiv(newSofd, LocalTime.SECONDS_PER_HOUR);\n    var newMinute = MathUtil.intMod(MathUtil.intDiv(newSofd, LocalTime.SECONDS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n    var newSecond = MathUtil.intMod(newSofd, LocalTime.SECONDS_PER_MINUTE);\n    return new LocalTime(newHour, newMinute, newSecond, this._nano);\n  };\n\n  _proto.plusNanos = function plusNanos(nanosToAdd) {\n    if (nanosToAdd === 0) {\n      return this;\n    }\n\n    var nofd = this.toNanoOfDay();\n    var newNofd = MathUtil.intMod(MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_DAY) + nofd + LocalTime.NANOS_PER_DAY, LocalTime.NANOS_PER_DAY);\n\n    if (nofd === newNofd) {\n      return this;\n    }\n\n    var newHour = MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_HOUR);\n    var newMinute = MathUtil.intMod(MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n    var newSecond = MathUtil.intMod(MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_SECOND), LocalTime.SECONDS_PER_MINUTE);\n    var newNano = MathUtil.intMod(newNofd, LocalTime.NANOS_PER_SECOND);\n    return new LocalTime(newHour, newMinute, newSecond, newNano);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    requireNonNull(unit, 'unit');\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusHours = function minusHours(hoursToSubtract) {\n    return this.plusHours(-1 * MathUtil.intMod(hoursToSubtract, LocalTime.HOURS_PER_DAY));\n  };\n\n  _proto.minusMinutes = function minusMinutes(minutesToSubtract) {\n    return this.plusMinutes(-1 * MathUtil.intMod(minutesToSubtract, LocalTime.MINUTES_PER_DAY));\n  };\n\n  _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n    return this.plusSeconds(-1 * MathUtil.intMod(secondsToSubtract, LocalTime.SECONDS_PER_DAY));\n  };\n\n  _proto.minusNanos = function minusNanos(nanosToSubtract) {\n    return this.plusNanos(-1 * MathUtil.intMod(nanosToSubtract, LocalTime.NANOS_PER_DAY));\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    } else if (_query === TemporalQueries.localTime()) {\n      return this;\n    }\n\n    if (_query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.zone() || _query === TemporalQueries.offset() || _query === TemporalQueries.localDate()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    return temporal.with(LocalTime.NANO_OF_DAY, this.toNanoOfDay());\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    var end = LocalTime.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      var nanosUntil = end.toNanoOfDay() - this.toNanoOfDay();\n\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return nanosUntil;\n\n        case ChronoUnit.MICROS:\n          return MathUtil.intDiv(nanosUntil, 1000);\n\n        case ChronoUnit.MILLIS:\n          return MathUtil.intDiv(nanosUntil, 1000000);\n\n        case ChronoUnit.SECONDS:\n          return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_SECOND);\n\n        case ChronoUnit.MINUTES:\n          return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_MINUTE);\n\n        case ChronoUnit.HOURS:\n          return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_HOUR);\n\n        case ChronoUnit.HALF_DAYS:\n          return MathUtil.intDiv(nanosUntil, 12 * LocalTime.NANOS_PER_HOUR);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto.atDate = function atDate(date) {\n    return LocalDateTime.of(date, this);\n  };\n\n  _proto.toSecondOfDay = function toSecondOfDay() {\n    var total = this._hour * LocalTime.SECONDS_PER_HOUR;\n    total += this._minute * LocalTime.SECONDS_PER_MINUTE;\n    total += this._second;\n    return total;\n  };\n\n  _proto.toNanoOfDay = function toNanoOfDay() {\n    var total = this._hour * LocalTime.NANOS_PER_HOUR;\n    total += this._minute * LocalTime.NANOS_PER_MINUTE;\n    total += this._second * LocalTime.NANOS_PER_SECOND;\n    total += this._nano;\n    return total;\n  };\n\n  _proto.compareTo = function compareTo(other) {\n    requireNonNull(other, 'other');\n    requireInstance(other, LocalTime, 'other');\n    var cmp = MathUtil.compareNumbers(this._hour, other._hour);\n\n    if (cmp === 0) {\n      cmp = MathUtil.compareNumbers(this._minute, other._minute);\n\n      if (cmp === 0) {\n        cmp = MathUtil.compareNumbers(this._second, other._second);\n\n        if (cmp === 0) {\n          cmp = MathUtil.compareNumbers(this._nano, other._nano);\n        }\n      }\n    }\n\n    return cmp;\n  };\n\n  _proto.isAfter = function isAfter(other) {\n    return this.compareTo(other) > 0;\n  };\n\n  _proto.isBefore = function isBefore(other) {\n    return this.compareTo(other) < 0;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof LocalTime) {\n      return this._hour === other._hour && this._minute === other._minute && this._second === other._second && this._nano === other._nano;\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    var nod = this.toNanoOfDay();\n    return MathUtil.hash(nod);\n  };\n\n  _proto.toString = function toString() {\n    var buf = '';\n    var hourValue = this._hour;\n    var minuteValue = this._minute;\n    var secondValue = this._second;\n    var nanoValue = this._nano;\n    buf += hourValue < 10 ? '0' : '';\n    buf += hourValue;\n    buf += minuteValue < 10 ? ':0' : ':';\n    buf += minuteValue;\n\n    if (secondValue > 0 || nanoValue > 0) {\n      buf += secondValue < 10 ? ':0' : ':';\n      buf += secondValue;\n\n      if (nanoValue > 0) {\n        buf += '.';\n\n        if (MathUtil.intMod(nanoValue, 1000000) === 0) {\n          buf += ('' + (MathUtil.intDiv(nanoValue, 1000000) + 1000)).substring(1);\n        } else if (MathUtil.intMod(nanoValue, 1000) === 0) {\n          buf += ('' + (MathUtil.intDiv(nanoValue, 1000) + 1000000)).substring(1);\n        } else {\n          buf += ('' + (nanoValue + 1000000000)).substring(1);\n        }\n      }\n    }\n\n    return buf;\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  _proto.format = function format(formatter) {\n    requireNonNull(formatter, 'formatter');\n    return formatter.format(this);\n  };\n\n  return LocalTime;\n}(Temporal);\nfunction _init$k() {\n  LocalTime.HOURS = [];\n\n  for (var hour = 0; hour < 24; hour++) {\n    LocalTime.of(hour, 0, 0, 0);\n  }\n\n  LocalTime.MIN = LocalTime.HOURS[0];\n  LocalTime.MAX = new LocalTime(23, 59, 59, 999999999);\n  LocalTime.MIDNIGHT = LocalTime.HOURS[0];\n  LocalTime.NOON = LocalTime.HOURS[12];\n  LocalTime.FROM = createTemporalQuery('LocalTime.FROM', function (temporal) {\n    return LocalTime.from(temporal);\n  });\n}\nLocalTime.HOURS_PER_DAY = 24;\nLocalTime.MINUTES_PER_HOUR = 60;\nLocalTime.MINUTES_PER_DAY = LocalTime.MINUTES_PER_HOUR * LocalTime.HOURS_PER_DAY;\nLocalTime.SECONDS_PER_MINUTE = 60;\nLocalTime.SECONDS_PER_HOUR = LocalTime.SECONDS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\nLocalTime.SECONDS_PER_DAY = LocalTime.SECONDS_PER_HOUR * LocalTime.HOURS_PER_DAY;\nLocalTime.MILLIS_PER_DAY = LocalTime.SECONDS_PER_DAY * 1000;\nLocalTime.MICROS_PER_DAY = LocalTime.SECONDS_PER_DAY * 1000000;\nLocalTime.NANOS_PER_SECOND = 1000000000;\nLocalTime.NANOS_PER_MINUTE = LocalTime.NANOS_PER_SECOND * LocalTime.SECONDS_PER_MINUTE;\nLocalTime.NANOS_PER_HOUR = LocalTime.NANOS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\nLocalTime.NANOS_PER_DAY = LocalTime.NANOS_PER_HOUR * LocalTime.HOURS_PER_DAY;\n\nvar NANOS_PER_MILLI = 1000000;\nvar Instant = function (_Temporal) {\n  _inheritsLoose(Instant, _Temporal);\n\n  Instant.now = function now(clock) {\n    if (clock === void 0) {\n      clock = Clock.systemUTC();\n    }\n\n    return clock.instant();\n  };\n\n  Instant.ofEpochSecond = function ofEpochSecond(epochSecond, nanoAdjustment) {\n    if (nanoAdjustment === void 0) {\n      nanoAdjustment = 0;\n    }\n\n    var secs = epochSecond + MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n    var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n    return Instant._create(secs, nos);\n  };\n\n  Instant.ofEpochMilli = function ofEpochMilli(epochMilli) {\n    var secs = MathUtil.floorDiv(epochMilli, 1000);\n    var mos = MathUtil.floorMod(epochMilli, 1000);\n    return Instant._create(secs, mos * 1000000);\n  };\n\n  Instant.from = function from(temporal) {\n    try {\n      var instantSecs = temporal.getLong(ChronoField.INSTANT_SECONDS);\n      var nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n      return Instant.ofEpochSecond(instantSecs, nanoOfSecond);\n    } catch (ex) {\n      throw new DateTimeException('Unable to obtain Instant from TemporalAccessor: ' + temporal + ', type ' + typeof temporal, ex);\n    }\n  };\n\n  Instant.parse = function parse(text) {\n    return DateTimeFormatter.ISO_INSTANT.parse(text, Instant.FROM);\n  };\n\n  Instant._create = function _create(seconds, nanoOfSecond) {\n    if (seconds === 0 && nanoOfSecond === 0) {\n      return Instant.EPOCH;\n    }\n\n    return new Instant(seconds, nanoOfSecond);\n  };\n\n  Instant._validate = function _validate(seconds, nanoOfSecond) {\n    if (seconds < Instant.MIN_SECONDS || seconds > Instant.MAX_SECONDS) {\n      throw new DateTimeException('Instant exceeds minimum or maximum instant');\n    }\n\n    if (nanoOfSecond < 0 || nanoOfSecond > LocalTime.NANOS_PER_SECOND) {\n      throw new DateTimeException('Instant exceeds minimum or maximum instant');\n    }\n  };\n\n  function Instant(seconds, nanoOfSecond) {\n    var _this;\n\n    _this = _Temporal.call(this) || this;\n\n    Instant._validate(seconds, nanoOfSecond);\n\n    _this._seconds = MathUtil.safeToInt(seconds);\n    _this._nanos = MathUtil.safeToInt(nanoOfSecond);\n    return _this;\n  }\n\n  var _proto = Instant.prototype;\n\n  _proto.isSupported = function isSupported(fieldOrUnit) {\n    if (fieldOrUnit instanceof ChronoField) {\n      return fieldOrUnit === ChronoField.INSTANT_SECONDS || fieldOrUnit === ChronoField.NANO_OF_SECOND || fieldOrUnit === ChronoField.MICRO_OF_SECOND || fieldOrUnit === ChronoField.MILLI_OF_SECOND;\n    }\n\n    if (fieldOrUnit instanceof ChronoUnit) {\n      return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoUnit.DAYS;\n    }\n\n    return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n  };\n\n  _proto.range = function range(field) {\n    return _Temporal.prototype.range.call(this, field);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.NANO_OF_SECOND:\n          return this._nanos;\n\n        case ChronoField.MICRO_OF_SECOND:\n          return MathUtil.intDiv(this._nanos, 1000);\n\n        case ChronoField.MILLI_OF_SECOND:\n          return MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n\n        case ChronoField.INSTANT_SECONDS:\n          return this._seconds;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.epochSecond = function epochSecond() {\n    return this._seconds;\n  };\n\n  _proto.nano = function nano() {\n    return this._nanos;\n  };\n\n  _proto.withAdjuster = function withAdjuster(adjuster) {\n    requireNonNull(adjuster, 'adjuster');\n    return adjuster.adjustInto(this);\n  };\n\n  _proto.withFieldValue = function withFieldValue(field, newValue) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      field.checkValidValue(newValue);\n\n      switch (field) {\n        case ChronoField.MILLI_OF_SECOND:\n          {\n            var nval = newValue * NANOS_PER_MILLI;\n            return nval !== this._nanos ? Instant._create(this._seconds, nval) : this;\n          }\n\n        case ChronoField.MICRO_OF_SECOND:\n          {\n            var _nval = newValue * 1000;\n\n            return _nval !== this._nanos ? Instant._create(this._seconds, _nval) : this;\n          }\n\n        case ChronoField.NANO_OF_SECOND:\n          return newValue !== this._nanos ? Instant._create(this._seconds, newValue) : this;\n\n        case ChronoField.INSTANT_SECONDS:\n          return newValue !== this._seconds ? Instant._create(newValue, this._nanos) : this;\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.adjustInto(this, newValue);\n  };\n\n  _proto.truncatedTo = function truncatedTo(unit) {\n    requireNonNull(unit, 'unit');\n\n    if (unit === ChronoUnit.NANOS) {\n      return this;\n    }\n\n    var unitDur = unit.duration();\n\n    if (unitDur.seconds() > LocalTime.SECONDS_PER_DAY) {\n      throw new DateTimeException('Unit is too large to be used for truncation');\n    }\n\n    var dur = unitDur.toNanos();\n\n    if (MathUtil.intMod(LocalTime.NANOS_PER_DAY, dur) !== 0) {\n      throw new DateTimeException('Unit must divide into a standard day without remainder');\n    }\n\n    var nod = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_DAY) * LocalTime.NANOS_PER_SECOND + this._nanos;\n\n    var result = MathUtil.intDiv(nod, dur) * dur;\n    return this.plusNanos(result - nod);\n  };\n\n  _proto.plusAmount = function plusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.addTo(this);\n  };\n\n  _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n    requireNonNull(amountToAdd, 'amountToAdd');\n    requireNonNull(unit, 'unit');\n    requireInstance(unit, TemporalUnit);\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this.plusNanos(amountToAdd);\n\n        case ChronoUnit.MICROS:\n          return this._plus(MathUtil.intDiv(amountToAdd, 1000000), MathUtil.intMod(amountToAdd, 1000000) * 1000);\n\n        case ChronoUnit.MILLIS:\n          return this.plusMillis(amountToAdd);\n\n        case ChronoUnit.SECONDS:\n          return this.plusSeconds(amountToAdd);\n\n        case ChronoUnit.MINUTES:\n          return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_MINUTE));\n\n        case ChronoUnit.HOURS:\n          return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_HOUR));\n\n        case ChronoUnit.HALF_DAYS:\n          return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY / 2));\n\n        case ChronoUnit.DAYS:\n          return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY));\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.addTo(this, amountToAdd);\n  };\n\n  _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n    return this._plus(secondsToAdd, 0);\n  };\n\n  _proto.plusMillis = function plusMillis(millisToAdd) {\n    return this._plus(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * NANOS_PER_MILLI);\n  };\n\n  _proto.plusNanos = function plusNanos(nanosToAdd) {\n    return this._plus(0, nanosToAdd);\n  };\n\n  _proto._plus = function _plus(secondsToAdd, nanosToAdd) {\n    if (secondsToAdd === 0 && nanosToAdd === 0) {\n      return this;\n    }\n\n    var epochSec = this._seconds + secondsToAdd;\n    epochSec = epochSec + MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n    var nanoAdjustment = this._nanos + nanosToAdd % LocalTime.NANOS_PER_SECOND;\n    return Instant.ofEpochSecond(epochSec, nanoAdjustment);\n  };\n\n  _proto.minusAmount = function minusAmount(amount) {\n    requireNonNull(amount, 'amount');\n    return amount.subtractFrom(this);\n  };\n\n  _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n    return this.plusAmountUnit(-1 * amountToSubtract, unit);\n  };\n\n  _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n    return this.plusSeconds(secondsToSubtract * -1);\n  };\n\n  _proto.minusMillis = function minusMillis(millisToSubtract) {\n    return this.plusMillis(-1 * millisToSubtract);\n  };\n\n  _proto.minusNanos = function minusNanos(nanosToSubtract) {\n    return this.plusNanos(-1 * nanosToSubtract);\n  };\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.precision()) {\n      return ChronoUnit.NANOS;\n    }\n\n    if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.zone() || _query === TemporalQueries.offset()) {\n      return null;\n    }\n\n    return _query.queryFrom(this);\n  };\n\n  _proto.adjustInto = function adjustInto(temporal) {\n    requireNonNull(temporal, 'temporal');\n    return temporal.with(ChronoField.INSTANT_SECONDS, this._seconds).with(ChronoField.NANO_OF_SECOND, this._nanos);\n  };\n\n  _proto.until = function until(endExclusive, unit) {\n    requireNonNull(endExclusive, 'endExclusive');\n    requireNonNull(unit, 'unit');\n    var end = Instant.from(endExclusive);\n\n    if (unit instanceof ChronoUnit) {\n      switch (unit) {\n        case ChronoUnit.NANOS:\n          return this._nanosUntil(end);\n\n        case ChronoUnit.MICROS:\n          return MathUtil.intDiv(this._nanosUntil(end), 1000);\n\n        case ChronoUnit.MILLIS:\n          return MathUtil.safeSubtract(end.toEpochMilli(), this.toEpochMilli());\n\n        case ChronoUnit.SECONDS:\n          return this._secondsUntil(end);\n\n        case ChronoUnit.MINUTES:\n          return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_MINUTE);\n\n        case ChronoUnit.HOURS:\n          return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_HOUR);\n\n        case ChronoUnit.HALF_DAYS:\n          return MathUtil.intDiv(this._secondsUntil(end), 12 * LocalTime.SECONDS_PER_HOUR);\n\n        case ChronoUnit.DAYS:\n          return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_DAY);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n    }\n\n    return unit.between(this, end);\n  };\n\n  _proto._nanosUntil = function _nanosUntil(end) {\n    var secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n    var totalNanos = MathUtil.safeMultiply(secsDiff, LocalTime.NANOS_PER_SECOND);\n    return MathUtil.safeAdd(totalNanos, end.nano() - this.nano());\n  };\n\n  _proto._secondsUntil = function _secondsUntil(end) {\n    var secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n    var nanosDiff = end.nano() - this.nano();\n\n    if (secsDiff > 0 && nanosDiff < 0) {\n      secsDiff--;\n    } else if (secsDiff < 0 && nanosDiff > 0) {\n      secsDiff++;\n    }\n\n    return secsDiff;\n  };\n\n  _proto.atOffset = function atOffset(offset) {\n    return OffsetDateTime.ofInstant(this, offset);\n  };\n\n  _proto.atZone = function atZone(zone) {\n    return ZonedDateTime.ofInstant(this, zone);\n  };\n\n  _proto.toEpochMilli = function toEpochMilli() {\n    var millis = MathUtil.safeMultiply(this._seconds, 1000);\n    return millis + MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n  };\n\n  _proto.compareTo = function compareTo(otherInstant) {\n    requireNonNull(otherInstant, 'otherInstant');\n    requireInstance(otherInstant, Instant, 'otherInstant');\n    var cmp = MathUtil.compareNumbers(this._seconds, otherInstant._seconds);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    return this._nanos - otherInstant._nanos;\n  };\n\n  _proto.isAfter = function isAfter(otherInstant) {\n    return this.compareTo(otherInstant) > 0;\n  };\n\n  _proto.isBefore = function isBefore(otherInstant) {\n    return this.compareTo(otherInstant) < 0;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof Instant) {\n      return this.epochSecond() === other.epochSecond() && this.nano() === other.nano();\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return MathUtil.hashCode(this._seconds, this._nanos);\n  };\n\n  _proto.toString = function toString() {\n    return DateTimeFormatter.ISO_INSTANT.format(this);\n  };\n\n  _proto.toJSON = function toJSON() {\n    return this.toString();\n  };\n\n  return Instant;\n}(Temporal);\nfunction _init$l() {\n  Instant.MIN_SECONDS = -31619119219200;\n  Instant.MAX_SECONDS = 31494816403199;\n  Instant.EPOCH = new Instant(0, 0);\n  Instant.MIN = Instant.ofEpochSecond(Instant.MIN_SECONDS, 0);\n  Instant.MAX = Instant.ofEpochSecond(Instant.MAX_SECONDS, 999999999);\n  Instant.FROM = createTemporalQuery('Instant.FROM', function (temporal) {\n    return Instant.from(temporal);\n  });\n}\n\nvar Clock = function () {\n  function Clock() {}\n\n  Clock.systemUTC = function systemUTC() {\n    return new SystemClock(ZoneOffset.UTC);\n  };\n\n  Clock.systemDefaultZone = function systemDefaultZone() {\n    return new SystemClock(ZoneId.systemDefault());\n  };\n\n  Clock.system = function system(zone) {\n    return new SystemClock(zone);\n  };\n\n  Clock.fixed = function fixed(fixedInstant, zoneId) {\n    return new FixedClock(fixedInstant, zoneId);\n  };\n\n  Clock.offset = function offset(baseClock, duration) {\n    return new OffsetClock(baseClock, duration);\n  };\n\n  var _proto = Clock.prototype;\n\n  _proto.millis = function millis() {\n    abstractMethodFail('Clock.millis');\n  };\n\n  _proto.instant = function instant() {\n    abstractMethodFail('Clock.instant');\n  };\n\n  _proto.zone = function zone() {\n    abstractMethodFail('Clock.zone');\n  };\n\n  _proto.withZone = function withZone() {\n    abstractMethodFail('Clock.withZone');\n  };\n\n  return Clock;\n}();\n\nvar SystemClock = function (_Clock) {\n  _inheritsLoose(SystemClock, _Clock);\n\n  function SystemClock(zone) {\n    var _this;\n\n    requireNonNull(zone, 'zone');\n    _this = _Clock.call(this) || this;\n    _this._zone = zone;\n    return _this;\n  }\n\n  var _proto2 = SystemClock.prototype;\n\n  _proto2.zone = function zone() {\n    return this._zone;\n  };\n\n  _proto2.millis = function millis() {\n    return new Date().getTime();\n  };\n\n  _proto2.instant = function instant() {\n    return Instant.ofEpochMilli(this.millis());\n  };\n\n  _proto2.equals = function equals(obj) {\n    if (obj instanceof SystemClock) {\n      return this._zone.equals(obj._zone);\n    }\n\n    return false;\n  };\n\n  _proto2.withZone = function withZone(zone) {\n    if (zone.equals(this._zone)) {\n      return this;\n    }\n\n    return new SystemClock(zone);\n  };\n\n  _proto2.toString = function toString() {\n    return 'SystemClock[' + this._zone.toString() + ']';\n  };\n\n  return SystemClock;\n}(Clock);\n\nvar FixedClock = function (_Clock2) {\n  _inheritsLoose(FixedClock, _Clock2);\n\n  function FixedClock(fixedInstant, zoneId) {\n    var _this2;\n\n    _this2 = _Clock2.call(this) || this;\n    _this2._instant = fixedInstant;\n    _this2._zoneId = zoneId;\n    return _this2;\n  }\n\n  var _proto3 = FixedClock.prototype;\n\n  _proto3.instant = function instant() {\n    return this._instant;\n  };\n\n  _proto3.millis = function millis() {\n    return this._instant.toEpochMilli();\n  };\n\n  _proto3.zone = function zone() {\n    return this._zoneId;\n  };\n\n  _proto3.toString = function toString() {\n    return 'FixedClock[]';\n  };\n\n  _proto3.equals = function equals(obj) {\n    if (obj instanceof FixedClock) {\n      return this._instant.equals(obj._instant) && this._zoneId.equals(obj._zoneId);\n    }\n\n    return false;\n  };\n\n  _proto3.withZone = function withZone(zone) {\n    if (zone.equals(this._zoneId)) {\n      return this;\n    }\n\n    return new FixedClock(this._instant, zone);\n  };\n\n  return FixedClock;\n}(Clock);\n\nvar OffsetClock = function (_Clock3) {\n  _inheritsLoose(OffsetClock, _Clock3);\n\n  function OffsetClock(baseClock, offset) {\n    var _this3;\n\n    _this3 = _Clock3.call(this) || this;\n    _this3._baseClock = baseClock;\n    _this3._offset = offset;\n    return _this3;\n  }\n\n  var _proto4 = OffsetClock.prototype;\n\n  _proto4.zone = function zone() {\n    return this._baseClock.zone();\n  };\n\n  _proto4.withZone = function withZone(zone) {\n    if (zone.equals(this._baseClock.zone())) {\n      return this;\n    }\n\n    return new OffsetClock(this._baseClock.withZone(zone), this._offset);\n  };\n\n  _proto4.millis = function millis() {\n    return this._baseClock.millis() + this._offset.toMillis();\n  };\n\n  _proto4.instant = function instant() {\n    return this._baseClock.instant().plus(this._offset);\n  };\n\n  _proto4.equals = function equals(obj) {\n    if (obj instanceof OffsetClock) {\n      return this._baseClock.equals(obj._baseClock) && this._offset.equals(obj._offset);\n    }\n\n    return false;\n  };\n\n  _proto4.toString = function toString() {\n    return 'OffsetClock[' + this._baseClock + ',' + this._offset + ']';\n  };\n\n  return OffsetClock;\n}(Clock);\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneOffsetTransition = function () {\n  ZoneOffsetTransition.of = function of(transition, offsetBefore, offsetAfter) {\n    return new ZoneOffsetTransition(transition, offsetBefore, offsetAfter);\n  };\n\n  function ZoneOffsetTransition(transition, offsetBefore, offsetAfter) {\n    requireNonNull(transition, 'transition');\n    requireNonNull(offsetBefore, 'offsetBefore');\n    requireNonNull(offsetAfter, 'offsetAfter');\n\n    if (offsetBefore.equals(offsetAfter)) {\n      throw new IllegalArgumentException('Offsets must not be equal');\n    }\n\n    if (transition.nano() !== 0) {\n      throw new IllegalArgumentException('Nano-of-second must be zero');\n    }\n\n    if (transition instanceof LocalDateTime) {\n      this._transition = transition;\n    } else {\n      this._transition = LocalDateTime.ofEpochSecond(transition, 0, offsetBefore);\n    }\n\n    this._offsetBefore = offsetBefore;\n    this._offsetAfter = offsetAfter;\n  }\n\n  var _proto = ZoneOffsetTransition.prototype;\n\n  _proto.instant = function instant() {\n    return this._transition.toInstant(this._offsetBefore);\n  };\n\n  _proto.toEpochSecond = function toEpochSecond() {\n    return this._transition.toEpochSecond(this._offsetBefore);\n  };\n\n  _proto.dateTimeBefore = function dateTimeBefore() {\n    return this._transition;\n  };\n\n  _proto.dateTimeAfter = function dateTimeAfter() {\n    return this._transition.plusSeconds(this.durationSeconds());\n  };\n\n  _proto.offsetBefore = function offsetBefore() {\n    return this._offsetBefore;\n  };\n\n  _proto.offsetAfter = function offsetAfter() {\n    return this._offsetAfter;\n  };\n\n  _proto.duration = function duration() {\n    return Duration.ofSeconds(this.durationSeconds());\n  };\n\n  _proto.durationSeconds = function durationSeconds() {\n    return this._offsetAfter.totalSeconds() - this._offsetBefore.totalSeconds();\n  };\n\n  _proto.isGap = function isGap() {\n    return this._offsetAfter.totalSeconds() > this._offsetBefore.totalSeconds();\n  };\n\n  _proto.isOverlap = function isOverlap() {\n    return this._offsetAfter.totalSeconds() < this._offsetBefore.totalSeconds();\n  };\n\n  _proto.isValidOffset = function isValidOffset(offset) {\n    return this.isGap() ? false : this._offsetBefore.equals(offset) || this._offsetAfter.equals(offset);\n  };\n\n  _proto.validOffsets = function validOffsets() {\n    if (this.isGap()) {\n      return [];\n    } else {\n      return [this._offsetBefore, this._offsetAfter];\n    }\n  };\n\n  _proto.compareTo = function compareTo(transition) {\n    return this.instant().compareTo(transition.instant());\n  };\n\n  _proto.equals = function equals(other) {\n    if (other === this) {\n      return true;\n    }\n\n    if (other instanceof ZoneOffsetTransition) {\n      var d = other;\n      return this._transition.equals(d._transition) && this._offsetBefore.equals(d.offsetBefore()) && this._offsetAfter.equals(d.offsetAfter());\n    }\n\n    return false;\n  };\n\n  _proto.hashCode = function hashCode() {\n    return this._transition.hashCode() ^ this._offsetBefore.hashCode() ^ this._offsetAfter.hashCode() >>> 16;\n  };\n\n  _proto.toString = function toString() {\n    return 'Transition[' + (this.isGap() ? 'Gap' : 'Overlap') + ' at ' + this._transition.toString() + this._offsetBefore.toString() + ' to ' + this._offsetAfter + ']';\n  };\n\n  return ZoneOffsetTransition;\n}();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nfunction _init$m() {\n  TemporalQueries.ZONE_ID = createTemporalQuery('ZONE_ID', function (temporal) {\n    return temporal.query(TemporalQueries.ZONE_ID);\n  });\n  TemporalQueries.CHRONO = createTemporalQuery('CHRONO', function (temporal) {\n    return temporal.query(TemporalQueries.CHRONO);\n  });\n  TemporalQueries.PRECISION = createTemporalQuery('PRECISION', function (temporal) {\n    return temporal.query(TemporalQueries.PRECISION);\n  });\n  TemporalQueries.OFFSET = createTemporalQuery('OFFSET', function (temporal) {\n    if (temporal.isSupported(ChronoField.OFFSET_SECONDS)) {\n      return ZoneOffset.ofTotalSeconds(temporal.get(ChronoField.OFFSET_SECONDS));\n    }\n\n    return null;\n  });\n  TemporalQueries.ZONE = createTemporalQuery('ZONE', function (temporal) {\n    var zone = temporal.query(TemporalQueries.ZONE_ID);\n    return zone != null ? zone : temporal.query(TemporalQueries.OFFSET);\n  });\n  TemporalQueries.LOCAL_DATE = createTemporalQuery('LOCAL_DATE', function (temporal) {\n    if (temporal.isSupported(ChronoField.EPOCH_DAY)) {\n      return LocalDate.ofEpochDay(temporal.getLong(ChronoField.EPOCH_DAY));\n    }\n\n    return null;\n  });\n  TemporalQueries.LOCAL_TIME = createTemporalQuery('LOCAL_TIME', function (temporal) {\n    if (temporal.isSupported(ChronoField.NANO_OF_DAY)) {\n      return LocalTime.ofNanoOfDay(temporal.getLong(ChronoField.NANO_OF_DAY));\n    }\n\n    return null;\n  });\n}\n\nvar SystemDefaultZoneRules = function (_ZoneRules) {\n  _inheritsLoose(SystemDefaultZoneRules, _ZoneRules);\n\n  function SystemDefaultZoneRules() {\n    return _ZoneRules.apply(this, arguments) || this;\n  }\n\n  var _proto = SystemDefaultZoneRules.prototype;\n\n  _proto.isFixedOffset = function isFixedOffset() {\n    return false;\n  };\n\n  _proto.offsetOfInstant = function offsetOfInstant(instant) {\n    var offsetInMinutes = new Date(instant.toEpochMilli()).getTimezoneOffset();\n    return ZoneOffset.ofTotalMinutes(offsetInMinutes * -1);\n  };\n\n  _proto.offsetOfEpochMilli = function offsetOfEpochMilli(epochMilli) {\n    var offsetInMinutes = new Date(epochMilli).getTimezoneOffset();\n    return ZoneOffset.ofTotalMinutes(offsetInMinutes * -1);\n  };\n\n  _proto.offsetOfLocalDateTime = function offsetOfLocalDateTime(localDateTime) {\n    var epochMilli = localDateTime.toEpochSecond(ZoneOffset.UTC) * 1000;\n    var offsetInMinutesBeforePossibleTransition = new Date(epochMilli).getTimezoneOffset();\n    var epochMilliSystemZone = epochMilli + offsetInMinutesBeforePossibleTransition * 60000;\n    var offsetInMinutesAfterPossibleTransition = new Date(epochMilliSystemZone).getTimezoneOffset();\n    return ZoneOffset.ofTotalMinutes(offsetInMinutesAfterPossibleTransition * -1);\n  };\n\n  _proto.validOffsets = function validOffsets(localDateTime) {\n    return [this.offsetOfLocalDateTime(localDateTime)];\n  };\n\n  _proto.transition = function transition() {\n    return null;\n  };\n\n  _proto.standardOffset = function standardOffset(instant) {\n    return this.offsetOfInstant(instant);\n  };\n\n  _proto.daylightSavings = function daylightSavings() {\n    this._throwNotSupported();\n  };\n\n  _proto.isDaylightSavings = function isDaylightSavings() {\n    this._throwNotSupported();\n  };\n\n  _proto.isValidOffset = function isValidOffset(dateTime, offset) {\n    return this.offsetOfLocalDateTime(dateTime).equals(offset);\n  };\n\n  _proto.nextTransition = function nextTransition() {\n    this._throwNotSupported();\n  };\n\n  _proto.previousTransition = function previousTransition() {\n    this._throwNotSupported();\n  };\n\n  _proto.transitions = function transitions() {\n    this._throwNotSupported();\n  };\n\n  _proto.transitionRules = function transitionRules() {\n    this._throwNotSupported();\n  };\n\n  _proto._throwNotSupported = function _throwNotSupported() {\n    throw new DateTimeException('not supported operation');\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other || other instanceof SystemDefaultZoneRules) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto.toString = function toString() {\n    return 'SYSTEM';\n  };\n\n  return SystemDefaultZoneRules;\n}(ZoneRules);\n\nvar SystemDefaultZoneId = function (_ZoneId) {\n  _inheritsLoose(SystemDefaultZoneId, _ZoneId);\n\n  function SystemDefaultZoneId() {\n    var _this;\n\n    _this = _ZoneId.call(this) || this;\n    _this._rules = new SystemDefaultZoneRules();\n    return _this;\n  }\n\n  var _proto = SystemDefaultZoneId.prototype;\n\n  _proto.rules = function rules() {\n    return this._rules;\n  };\n\n  _proto.equals = function equals(other) {\n    if (this === other) {\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto.id = function id() {\n    return 'SYSTEM';\n  };\n\n  return SystemDefaultZoneId;\n}(ZoneId);\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar ZoneIdFactory = function () {\n  function ZoneIdFactory() {}\n\n  ZoneIdFactory.systemDefault = function systemDefault() {\n    return SYSTEM_DEFAULT_ZONE_ID_INSTANCE;\n  };\n\n  ZoneIdFactory.getAvailableZoneIds = function getAvailableZoneIds() {\n    return ZoneRulesProvider.getAvailableZoneIds();\n  };\n\n  ZoneIdFactory.of = function of(zoneId) {\n    requireNonNull(zoneId, 'zoneId');\n\n    if (zoneId === 'Z') {\n      return ZoneOffset.UTC;\n    }\n\n    if (zoneId.length === 1) {\n      throw new DateTimeException('Invalid zone: ' + zoneId);\n    }\n\n    if (StringUtil.startsWith(zoneId, '+') || StringUtil.startsWith(zoneId, '-')) {\n      return ZoneOffset.of(zoneId);\n    }\n\n    if (zoneId === 'UTC' || zoneId === 'GMT' || zoneId === 'GMT0' || zoneId === 'UT') {\n      return new ZoneRegion(zoneId, ZoneOffset.UTC.rules());\n    }\n\n    if (StringUtil.startsWith(zoneId, 'UTC+') || StringUtil.startsWith(zoneId, 'GMT+') || StringUtil.startsWith(zoneId, 'UTC-') || StringUtil.startsWith(zoneId, 'GMT-')) {\n      var offset = ZoneOffset.of(zoneId.substring(3));\n\n      if (offset.totalSeconds() === 0) {\n        return new ZoneRegion(zoneId.substring(0, 3), offset.rules());\n      }\n\n      return new ZoneRegion(zoneId.substring(0, 3) + offset.id(), offset.rules());\n    }\n\n    if (StringUtil.startsWith(zoneId, 'UT+') || StringUtil.startsWith(zoneId, 'UT-')) {\n      var _offset = ZoneOffset.of(zoneId.substring(2));\n\n      if (_offset.totalSeconds() === 0) {\n        return new ZoneRegion('UT', _offset.rules());\n      }\n\n      return new ZoneRegion('UT' + _offset.id(), _offset.rules());\n    }\n\n    if (zoneId === 'SYSTEM') {\n      return ZoneId.systemDefault();\n    }\n\n    return ZoneRegion.ofId(zoneId);\n  };\n\n  ZoneIdFactory.ofOffset = function ofOffset(prefix, offset) {\n    requireNonNull(prefix, 'prefix');\n    requireNonNull(offset, 'offset');\n\n    if (prefix.length === 0) {\n      return offset;\n    }\n\n    if (prefix === 'GMT' || prefix === 'UTC' || prefix === 'UT') {\n      if (offset.totalSeconds() === 0) {\n        return new ZoneRegion(prefix, offset.rules());\n      }\n\n      return new ZoneRegion(prefix + offset.id(), offset.rules());\n    }\n\n    throw new IllegalArgumentException('Invalid prefix, must be GMT, UTC or UT: ' + prefix);\n  };\n\n  ZoneIdFactory.from = function from(temporal) {\n    requireNonNull(temporal, 'temporal');\n    var obj = temporal.query(TemporalQueries.zone());\n\n    if (obj == null) {\n      throw new DateTimeException('Unable to obtain ZoneId from TemporalAccessor: ' + temporal + ', type ' + (temporal.constructor != null ? temporal.constructor.name : ''));\n    }\n\n    return obj;\n  };\n\n  return ZoneIdFactory;\n}();\nvar SYSTEM_DEFAULT_ZONE_ID_INSTANCE = null;\nfunction _init$n() {\n  SYSTEM_DEFAULT_ZONE_ID_INSTANCE = new SystemDefaultZoneId();\n  ZoneId.systemDefault = ZoneIdFactory.systemDefault;\n  ZoneId.getAvailableZoneIds = ZoneIdFactory.getAvailableZoneIds;\n  ZoneId.of = ZoneIdFactory.of;\n  ZoneId.ofOffset = ZoneIdFactory.ofOffset;\n  ZoneId.from = ZoneIdFactory.from;\n  ZoneOffset.from = ZoneIdFactory.from;\n  ZoneId.SYSTEM = SYSTEM_DEFAULT_ZONE_ID_INSTANCE;\n  ZoneId.UTC = ZoneOffset.ofTotalSeconds(0);\n}\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar isInit = false;\n\nfunction init() {\n  if (isInit) {\n    return;\n  }\n\n  isInit = true;\n  _init$1();\n  _init();\n  _init$2();\n  _init$3();\n  _init$k();\n  _init$8();\n  _init$m();\n  _init$4();\n  _init$l();\n  _init$i();\n  _init$j();\n  _init$d();\n  _init$5();\n  _init$c();\n  _init$b();\n  _init$6();\n  _init$7();\n  _init$g();\n  _init$n();\n  _init$e();\n  _init$a();\n  _init$9();\n  _init$h();\n  _init$f();\n}\n\ninit();\n\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nvar ToNativeJsConverter = function () {\n  function ToNativeJsConverter(temporal, zone) {\n    var zonedDateTime;\n\n    if (temporal instanceof LocalDate) {\n      zone = zone == null ? ZoneId.systemDefault() : zone;\n      zonedDateTime = temporal.atStartOfDay(zone);\n    } else if (temporal instanceof LocalDateTime) {\n      zone = zone == null ? ZoneId.systemDefault() : zone;\n      zonedDateTime = temporal.atZone(zone);\n    } else if (temporal instanceof ZonedDateTime) {\n      if (zone == null) {\n        zonedDateTime = temporal;\n      } else {\n        zonedDateTime = temporal.withZoneSameInstant(zone);\n      }\n    } else {\n      throw new IllegalArgumentException('unsupported instance for convert operation:' + temporal);\n    }\n\n    this.instant = zonedDateTime.toInstant();\n  }\n\n  var _proto = ToNativeJsConverter.prototype;\n\n  _proto.toDate = function toDate() {\n    return new Date(this.instant.toEpochMilli());\n  };\n\n  _proto.toEpochMilli = function toEpochMilli() {\n    return this.instant.toEpochMilli();\n  };\n\n  return ToNativeJsConverter;\n}();\n\nfunction convert(temporal, zone) {\n  return new ToNativeJsConverter(temporal, zone);\n}\n\nvar NativeJsTemporal = function (_TemporalAccessor) {\n  _inheritsLoose(NativeJsTemporal, _TemporalAccessor);\n\n  function NativeJsTemporal(date, zone) {\n    var _this;\n\n    if (zone === void 0) {\n      zone = ZoneId.systemDefault();\n    }\n\n    _this = _TemporalAccessor.call(this) || this;\n    _this._zone = zone;\n\n    if (date instanceof Date) {\n      _this._epochMilli = date.getTime();\n      return _assertThisInitialized(_this);\n    } else if (typeof date.toDate === 'function' && date.toDate() instanceof Date) {\n      _this._epochMilli = date.toDate().getTime();\n      return _assertThisInitialized(_this);\n    }\n\n    assert(false, 'date must be either a javascript date or a moment');\n    return _this;\n  }\n\n  var _proto = NativeJsTemporal.prototype;\n\n  _proto.query = function query(_query) {\n    requireNonNull(_query, 'query');\n\n    if (_query === TemporalQueries.localDate()) {\n      return LocalDate.ofInstant(Instant.ofEpochMilli(this._epochMilli), this._zone);\n    } else if (_query === TemporalQueries.localTime()) {\n      return LocalTime.ofInstant(Instant.ofEpochMilli(this._epochMilli), this._zone);\n    } else if (_query === TemporalQueries.zone()) {\n      return this._zone;\n    }\n\n    return _TemporalAccessor.prototype.query.call(this, _query);\n  };\n\n  _proto.get = function get(field) {\n    return this.getLong(field);\n  };\n\n  _proto.getLong = function getLong(field) {\n    requireNonNull(field, 'field');\n\n    if (field instanceof ChronoField) {\n      switch (field) {\n        case ChronoField.NANO_OF_SECOND:\n          return MathUtil.floorMod(this._epochMilli, 1000) * 1000000;\n\n        case ChronoField.INSTANT_SECONDS:\n          return MathUtil.floorDiv(this._epochMilli, 1000);\n      }\n\n      throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n    }\n\n    return field.getFrom(this);\n  };\n\n  _proto.isSupported = function isSupported(field) {\n    return field === ChronoField.INSTANT_SECONDS || field === ChronoField.NANO_OF_SECOND;\n  };\n\n  return NativeJsTemporal;\n}(TemporalAccessor);\n\nfunction nativeJs(date, zone) {\n  return new NativeJsTemporal(date, zone);\n}\n\nfunction bindUse(jsJoda) {\n  var used = [];\n  return function use(fn) {\n    if (!~used.indexOf(fn)) {\n      fn(jsJoda);\n      used.push(fn);\n    }\n\n    return jsJoda;\n  };\n}\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nvar _ = {\n  assert: assert$1,\n  DateTimeBuilder: DateTimeBuilder,\n  DateTimeParseContext: DateTimeParseContext,\n  DateTimePrintContext: DateTimePrintContext,\n  MathUtil: MathUtil,\n  StringUtil: StringUtil,\n  StringBuilder: StringBuilder\n};\nvar jsJodaExports = {\n  _: _,\n  convert: convert,\n  nativeJs: nativeJs,\n  ArithmeticException: ArithmeticException,\n  DateTimeException: DateTimeException,\n  DateTimeParseException: DateTimeParseException,\n  IllegalArgumentException: IllegalArgumentException,\n  IllegalStateException: IllegalStateException,\n  UnsupportedTemporalTypeException: UnsupportedTemporalTypeException,\n  NullPointerException: NullPointerException,\n  Clock: Clock,\n  DayOfWeek: DayOfWeek,\n  Duration: Duration,\n  Instant: Instant,\n  LocalDate: LocalDate,\n  LocalTime: LocalTime,\n  LocalDateTime: LocalDateTime,\n  OffsetTime: OffsetTime,\n  OffsetDateTime: OffsetDateTime,\n  Month: Month,\n  MonthDay: MonthDay,\n  Period: Period,\n  Year: Year,\n  YearConstants: YearConstants,\n  YearMonth: YearMonth,\n  ZonedDateTime: ZonedDateTime,\n  ZoneOffset: ZoneOffset,\n  ZoneId: ZoneId,\n  ZoneRegion: ZoneRegion,\n  ZoneOffsetTransition: ZoneOffsetTransition,\n  ZoneRules: ZoneRules,\n  ZoneRulesProvider: ZoneRulesProvider,\n  ChronoLocalDate: ChronoLocalDate,\n  ChronoLocalDateTime: ChronoLocalDateTime,\n  ChronoZonedDateTime: ChronoZonedDateTime,\n  IsoChronology: IsoChronology,\n  ChronoField: ChronoField,\n  ChronoUnit: ChronoUnit,\n  IsoFields: IsoFields,\n  Temporal: Temporal,\n  TemporalAccessor: TemporalAccessor,\n  TemporalAdjuster: TemporalAdjuster,\n  TemporalAdjusters: TemporalAdjusters,\n  TemporalAmount: TemporalAmount,\n  TemporalField: TemporalField,\n  TemporalQueries: TemporalQueries,\n  TemporalQuery: TemporalQuery,\n  TemporalUnit: TemporalUnit,\n  ValueRange: ValueRange,\n  DateTimeFormatter: DateTimeFormatter,\n  DateTimeFormatterBuilder: DateTimeFormatterBuilder,\n  DecimalStyle: DecimalStyle,\n  ResolverStyle: ResolverStyle,\n  SignStyle: SignStyle,\n  TextStyle: TextStyle\n};\nvar use = bindUse(jsJodaExports);\njsJodaExports.use = use;\n\nexport { ArithmeticException, ChronoField, ChronoLocalDate, ChronoLocalDateTime, ChronoUnit, ChronoZonedDateTime, Clock, DateTimeException, DateTimeFormatter, DateTimeFormatterBuilder, DateTimeParseException, DayOfWeek, DecimalStyle, Duration, IllegalArgumentException, IllegalStateException, Instant, IsoChronology, IsoFields, LocalDate, LocalDateTime, LocalTime, Month, MonthDay, NullPointerException, OffsetDateTime, OffsetTime, Period, ResolverStyle, SignStyle, Temporal, TemporalAccessor, TemporalAdjuster, TemporalAdjusters, TemporalAmount, TemporalField, TemporalQueries, TemporalQuery, TemporalUnit, TextStyle, UnsupportedTemporalTypeException, ValueRange, Year, YearConstants, YearMonth, ZoneId, ZoneOffset, ZoneOffsetTransition, ZoneRegion, ZoneRules, ZoneRulesProvider, ZonedDateTime, _, convert, nativeJs, use };\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"package earth.worldwind.tutorials\n\nimport dev.icerock.moko.graphics.Color\nimport dev.icerock.moko.resources.AssetResource\nimport dev.icerock.moko.resources.ColorResource\nimport dev.icerock.moko.resources.FileResource\nimport dev.icerock.moko.resources.FontResource\nimport dev.icerock.moko.resources.ImageResource\nimport dev.icerock.moko.resources.PluralsResource\nimport dev.icerock.moko.resources.ResourceContainer\nimport dev.icerock.moko.resources.StringResource\nimport kotlin.String\nimport kotlin.collections.List\n\npublic actual object MR {\n  private val contentHash: String = \"9294ce888faddf695fc0d86c294b9fa4\"\n\n  public actual object strings : ResourceContainer<StringResource> {\n    public override fun values(): List<StringResource> = listOf()\n  }\n\n  public actual object plurals : ResourceContainer<PluralsResource> {\n    public override fun values(): List<PluralsResource> = listOf()\n  }\n\n  public actual object images : ResourceContainer<ImageResource> {\n    public actual val aircraft_fighter: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/aircraft_fighter.png\\\")\") as String, fileName = \"aircraft_fighter.png\")\n\n    public actual val aircraft_fixwing: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/aircraft_fixwing.png\\\")\") as String, fileName = \"aircraft_fixwing.png\")\n\n    public actual val airport_terminal: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/airport_terminal.png\\\")\") as String, fileName = \"airport_terminal.png\")\n\n    public actual val ehipcc: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/ehipcc.png\\\")\") as String, fileName = \"ehipcc.png\")\n\n    public actual val pattern_sample_houndstooth: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/pattern_sample_houndstooth.png\\\")\") as String, fileName =\n        \"pattern_sample_houndstooth.png\")\n\n    public actual val worldwind_logo: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/worldwind_logo.png\\\")\") as String, fileName = \"worldwind_logo.png\")\n\n    public override fun values(): List<ImageResource> = listOf(aircraft_fighter, aircraft_fixwing,\n        airport_terminal, ehipcc, pattern_sample_houndstooth, worldwind_logo)\n  }\n\n  public actual object fonts : ResourceContainer<FontResource> {\n    public override fun values(): List<FontResource> = listOf()\n  }\n\n  public actual object files : ResourceContainer<FileResource> {\n    public override fun values(): List<FileResource> = listOf()\n  }\n\n  public actual object colors : ResourceContainer<ColorResource> {\n    public override fun values(): List<ColorResource> = listOf()\n  }\n\n  public actual object assets : ResourceContainer<AssetResource> {\n    public override fun values(): List<AssetResource> = listOf()\n  }\n}\n","package earth.worldwind.tutorials\n\nabstract class AbstractTutorial {\n\n    /**\n     * Defines a list of custom actions\n     */\n    open val actions: ArrayList<String>? = null\n\n    /**\n     * Runs any of custom actions listed in [actions]\n     */\n    open fun runAction(actionName: String) {}\n\n    /**\n     * Runs after switching to this example\n     */\n    open fun start() {}\n\n    /**\n     * Runs before switching to another example\n     */\n    open fun stop() {}\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.layer.atmosphere.AtmosphereLayer\nimport earth.worldwind.layer.starfield.StarFieldLayer\nimport kotlinx.datetime.Clock\n\nclass BasicTutorial(private val engine: WorldWind): AbstractTutorial() {\n\n    var starFieldLayer: StarFieldLayer? = null\n    var atmosphereLayer: AtmosphereLayer? = null\n\n    override fun start() {\n        super.start()\n        engine.layers.run {\n            val time = Clock.System.now()\n            starFieldLayer = (getLayer(indexOfLayerNamed(\"StarField\")) as StarFieldLayer).apply { this.time = time }\n            atmosphereLayer = (getLayer(indexOfLayerNamed(\"Atmosphere\")) as AtmosphereLayer).apply { this.time = time }\n        }\n    }\n\n    override fun stop() {\n        super.stop()\n        starFieldLayer?.time = null\n        atmosphereLayer?.time = null\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.radians\nimport earth.worldwind.geom.Position\nimport kotlin.math.atan\n\nclass CameraViewTutorial(private val engine: WorldWind) : AbstractTutorial() {\n\n    override fun start() {\n        super.start()\n        setCameraAction()\n    }\n\n    private fun setCameraAction() {\n        // Create a view of Point Mugu airport as seen from an aircraft above Oxnard, CA.\n        val aircraft = Position.fromDegrees(34.2, -119.2, 3000.0) // Above Oxnard CA, altitude in meters\n        val airport = Position.fromDegrees(34.1192744, -119.1195850, 4.0) // KNTD airport, Point Mugu CA, altitude MSL\n\n        // Compute heading and tilt angles from aircraft to airport\n        val heading = aircraft.greatCircleAzimuth(airport)\n        val distanceRadians = aircraft.greatCircleDistance(airport)\n        val distanceMeters = distanceRadians * engine.globe.getRadiusAt(aircraft.latitude, aircraft.longitude)\n        val tilt = atan(distanceMeters / aircraft.altitude).radians\n\n        // Apply the camera view\n        engine.camera.set(\n            aircraft.latitude, aircraft.longitude, aircraft.altitude, AltitudeMode.ABSOLUTE, heading, tilt, roll = Angle.ZERO\n        )\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Position\nimport earth.worldwind.layer.RenderableLayer\nimport earth.worldwind.render.Color\nimport earth.worldwind.shape.Ellipse\n\nclass EllipsesTutorial(private val engine: WorldWind): AbstractTutorial() {\n\n    private val layer = RenderableLayer(\"Ellipses\").apply {\n        // Create a surface ellipse with the default attributes, a 500km major-radius and a 300km minor-radius. Surface\n        // ellipses are configured with a CLAMP_TO_GROUND altitudeMode and followTerrain set to true.\n        addRenderable(\n            Ellipse(Position.fromDegrees(45.0, -120.0, 0.0), 500000.0, 300000.0).apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND // clamp the ellipse's center position to the terrain surface\n                isFollowTerrain = true // cause the ellipse geometry to follow the terrain surface\n            }\n        )\n\n        // Create a surface ellipse with custom attributes that make the interior 50% transparent and increase the\n        // outline width.\n        addRenderable(\n            Ellipse(Position.fromDegrees(45.0, -100.0, 0.0), 500000.0, 300000.0).apply {\n                attributes.apply {\n                    interiorColor = Color(1f, 1f, 1f, 0.5f) // 50% transparent white\n                    outlineWidth = 3f\n                }\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND // clamp the ellipse's center position to the terrain surface\n                isFollowTerrain = true // cause the ellipse geometry to follow the terrain surface\n            }\n        )\n\n        // Create a surface ellipse with a heading of 45 degrees, causing the semi-major axis to point Northeast and the\n        // semi-minor axis to point Southeast.\n        addRenderable(\n            Ellipse(Position.fromDegrees(35.0, -120.0, 0.0), 500000.0, 300000.0).apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND // clamp the ellipse's center position to the terrain surface\n                isFollowTerrain = true // cause the ellipse geometry to follow the terrain surface\n                heading = 45.0.degrees\n            }\n        )\n\n        // Create a surface circle with the default attributes and 400km radius.\n        addRenderable(\n            Ellipse(Position.fromDegrees(35.0, -100.0, 0.0), 400000.0, 400000.0).apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND // clamp the ellipse's center position to the terrain surface\n                isFollowTerrain = true // cause the ellipse geometry to follow the terrain surface\n            }\n        )\n\n        // Create an ellipse with the default attributes, an altitude of 200 km, and a 500km major-radius and a 300km\n        // minor-radius.\n        addRenderable(\n            Ellipse(Position.fromDegrees(25.0, -120.0, 200e3), 500000.0, 300000.0)\n        )\n\n        // Create an ellipse with custom attributes that make the interior 50% transparent and an extruded outline with\n        // vertical lines\n        addRenderable(\n            Ellipse(Position.fromDegrees(25.0, -100.0, 200e3), 500000.0, 300000.0).apply {\n                attributes.apply {\n                    interiorColor = Color(1f, 1f, 1f, 0.5f) // 50% transparent white\n                    isDrawVerticals = true\n                }\n                isExtrude = true\n            }\n        )\n    }\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n        engine.camera.set(\n            30.0.degrees, (-110.0).degrees, engine.distanceToViewGlobeExtents * 1.1,\n            AltitudeMode.ABSOLUTE, heading = Angle.ZERO, tilt = Angle.ZERO, roll = Angle.ZERO\n        )\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n\n}","package earth.worldwind.geom\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.format.format\nimport kotlin.jvm.JvmInline\nimport kotlin.jvm.JvmStatic\nimport kotlin.math.*\n\n@JvmInline\nvalue class Angle private constructor(\n    /**\n     * Size of this angle in degrees.\n     */\n    val inDegrees: Double\n): Comparable<Angle> {\n    /**\n     * Size of this angle in radians. This may be useful for functions, which\n     * generally take radians as trigonometric arguments.\n     */\n    val inRadians get() = toRadians(inDegrees)\n    /**\n     * Size of this angle in minutes.\n     */\n    val inMinutes get() = toMinutes(inDegrees)\n    /**\n     * Size of this angle in seconds.\n     */\n    val inSeconds get() = toSeconds(inDegrees)\n    /**\n     * Size of this angle in milliradians.\n     */\n    val inMrad get() = toMrad(inDegrees)\n    /**\n     * Size of this angle in mil NATO.\n     */\n    val inMilNATO get() = toMilNATO(inDegrees)\n    /**\n     * Size of this angle in mil Warsaw Pact.\n     */\n    val inMilWP get() = toMilWP(inDegrees)\n    /**\n     * Size of this angle in Streck.\n     */\n    val inStreck get() = toStreck(inDegrees)\n    /**\n     * Size of this angle in minute of angle (MOA).\n     */\n    val inMOA get() = toMOA(inDegrees)\n    /**\n     * Indicates whether this angle is within the normal range of latitude, [-90, 90].\n     */\n    val isValidLatitude get() = isValidLatitude(inDegrees)\n    /**\n     * Indicates whether this angle is within the normal range of longitude, [-180, 180].\n     */\n    val isValidLongitude get() = isValidLongitude(inDegrees)\n\n    companion object {\n        /** Represents an angle of zero degrees  */\n        @JvmStatic val ZERO = 0.0.degrees\n        /** Represents a right angle of positive 90 degrees  */\n        @JvmStatic val POS90 = 90.0.degrees\n        /** Represents a right angle of negative 90 degrees  */\n        @JvmStatic val NEG90 = (-90.0).degrees\n        /** Represents an angle of positive 180 degrees  */\n        @JvmStatic val POS180 = 180.0.degrees\n        /** Represents an angle of negative 180 degrees  */\n        @JvmStatic val NEG180 = (-180.0).degrees\n        /** Represents an angle of positive 360 degrees  */\n        @JvmStatic val POS360 = 360.0.degrees\n        /** Represents an angle of negative 360 degrees  */\n        @JvmStatic val NEG360 = (-360.0).degrees\n        /** Represents an angle of 1 minute  */\n        @JvmStatic val MINUTE = (1.0 / 60.0).degrees\n        /** Represents an angle of 1 second  */\n        @JvmStatic val SECOND = (1.0 / 3600.0).degrees\n        /**\n         * Conversion factor for degrees to radians.\n         */\n        const val DEGREES_TO_RADIANS = PI / 180.0\n        /**\n         * Conversion factor for radians to degrees.\n         */\n        const val RADIANS_TO_DEGREES = 180.0 / PI\n        /**\n         * Conversion factor for degrees to minutes.\n         */\n        const val DEGREES_TO_MINUTES = 60.0\n        /**\n         * Conversion factor for minutes to degrees.\n         */\n        const val MINUTES_TO_DEGREES = 1.0 / 60.0\n        /**\n         * Conversion factor for degrees to seconds.\n         */\n        const val DEGREES_TO_SECONDS = 3600.0\n        /**\n         * Conversion factor for seconds to degrees.\n         */\n        const val SECONDS_TO_DEGREES = 1.0 / 3600.0\n        /**\n         * Conversion factor for degrees to milliradians.\n         */\n        const val DEGREES_TO_MRAD = PI * 2.0 / 360.0\n        /**\n         * Conversion factor for milliradians to degrees.\n         */\n        const val MRAD_TO_DEGREES = 360.0 / PI / 2.0\n        /**\n         * Conversion factor for degrees to milliradians (NATO).\n         */\n        const val DEGREES_TO_MIL_NATO = 6400.0 / 360.0\n        /**\n         * Conversion factor for milliradians (NATO) to degrees.\n         */\n        const val MIL_NATO_TO_DEGREES = 360.0 / 6400.0\n        /**\n         * Conversion factor for degrees to milliradians (Warsaw Pact).\n         */\n        const val DEGREES_TO_MIL_WP = 6000.0 / 360.0\n        /**\n         * Conversion factor for milliradians (Warsaw Pact) to degrees.\n         */\n        const val MIL_WP_TO_DEGREES = 360.0 / 6000.0\n        /**\n         * Conversion factor for degrees to milliradians (Sweden).\n         */\n        const val DEGREES_TO_STRECK = 6300.0 / 360.0\n        /**\n         * Conversion factor for milliradians (Sweden) to degrees.\n         */\n        const val STRECK_TO_DEGREES = 360.0 / 6000.0\n        /**\n         * Conversion factor for degrees to minute of angle (MOA).\n         */\n        const val DEGREES_TO_MOA = 21600.0 / 360.0\n        /**\n         * Conversion factor for minute of angle (MOA) to degrees.\n         */\n        const val MOA_TO_DEGREES = 360.0 / 21600.0\n\n        /**\n         * Returns an Angle equal to this Double number in degrees.\n         */\n        inline val Double.degrees get() = fromDegrees(this)\n\n        /**\n         * Returns an Angle equal to this Double number in radians.\n         */\n        inline val Double.radians get() = fromRadians(this)\n\n        /**\n         * Returns an Angle equal to this Double number in minutes.\n         */\n        inline val Double.minutes get() = fromMinutes(this)\n\n        /**\n         * Returns an Angle equal to this Double number in seconds.\n         */\n        inline val Double.seconds get() = fromSeconds(this)\n\n        /**\n         * Returns an Angle equal to this Double number in milliradians.\n         */\n        inline val Double.mrad get() = fromMrad(this)\n\n        /**\n         * Returns an Angle equal to this Double number in mil NATO.\n         */\n        inline val Double.milNATO get() = fromMilNATO(this)\n\n        /**\n         * Returns an Angle equal to this Double number in mil Warsaw Pact.\n         */\n        inline val Double.milWP get() = fromMilWP(this)\n\n        /**\n         * Returns an Angle equal to this Double number in Streck.\n         */\n        inline val Double.streck get() = fromStreck(this)\n\n        /**\n         * Returns an Angle equal to this Double number in minute of angle (MOA).\n         */\n        inline val Double.MOA get() = fromMOA(this)\n\n        /**\n         * Convert radians to degrees\n         *\n         * @param radians value in radians\n         *\n         * @return value in degrees\n         */\n        @JvmStatic fun toDegrees(radians: Double) = radians * RADIANS_TO_DEGREES\n\n        /**\n         * Convert degrees to radians\n         *\n         * @param degrees value in degrees\n         *\n         * @return value in radians\n         */\n        @JvmStatic fun toRadians(degrees: Double) = degrees * DEGREES_TO_RADIANS\n\n        /**\n         * Convert degrees to minutes\n         *\n         * @param degrees value in degrees\n         *\n         * @return value in minutes\n         */\n        @JvmStatic fun toMinutes(degrees: Double) = degrees * DEGREES_TO_MINUTES\n\n        /**\n         * Convert degrees to seconds\n         *\n         * @param degrees value in degrees\n         *\n         * @return value in seconds\n         */\n        @JvmStatic fun toSeconds(degrees: Double) = degrees * DEGREES_TO_SECONDS\n\n        /**\n         * Convert degrees to milliradians\n         *\n         * @param degrees value in degrees\n         *\n         * @return value in milliradians\n         */\n        @JvmStatic fun toMrad(degrees: Double) = degrees * DEGREES_TO_MRAD\n\n        /**\n         * Convert degrees to mil NATO\n         *\n         * @param degrees value in degrees\n         *\n         * @return value in mil NATO\n         */\n        @JvmStatic fun toMilNATO(degrees: Double) = degrees * DEGREES_TO_MIL_NATO\n\n        /**\n         * Convert degrees to mil Warsaw Pact\n         *\n         * @param degrees value in degrees\n         *\n         * @return value in mil Warsaw Pact\n         */\n        @JvmStatic fun toMilWP(degrees: Double) = degrees * DEGREES_TO_MIL_WP\n\n        /**\n         * Convert degrees to Streck\n         *\n         * @param degrees value in degrees\n         *\n         * @return value in mil Streck\n         */\n        @JvmStatic fun toStreck(degrees: Double) = degrees * DEGREES_TO_STRECK\n\n        /**\n         * Convert degrees to minute of angle (MOA)\n         *\n         * @param degrees value in degrees\n         *\n         * @return value in minute of angle (MOA)\n         */\n        @JvmStatic fun toMOA(degrees: Double) = degrees * DEGREES_TO_MOA\n\n        /**\n         * Obtains an angle from a specified number of degrees.\n         *\n         * @param degrees the size in degrees of the angle to be obtained\n         *\n         * @return a new angle, whose size in degrees is given by [degrees]\n         */\n        @JvmStatic fun fromDegrees(degrees: Double) = Angle(degrees)\n\n        /**\n         * Obtains an angle from a specified number of radians.\n         *\n         * @param radians the size in radians of the angle to be obtained.\n         *\n         * @return a new angle, whose size in radians is given by [radians].\n         */\n        @JvmStatic fun fromRadians(radians: Double) = Angle(radians * RADIANS_TO_DEGREES)\n\n        /**\n         * Obtains an angle from a specified number of minutes.\n         *\n         * @param minutes the size in minutes of the angle to be obtained.\n         *\n         * @return a new angle, whose size in minutes is given by [minutes].\n         */\n        @JvmStatic fun fromMinutes(minutes: Double) = Angle(minutes * MINUTES_TO_DEGREES)\n\n        /**\n         * Obtains an angle from a specified number of seconds.\n         *\n         * @param seconds the size in seconds of the angle to be obtained.\n         *\n         * @return a new angle, whose size in seconds is given by [seconds].\n         */\n        @JvmStatic fun fromSeconds(seconds: Double) = Angle(seconds * SECONDS_TO_DEGREES)\n\n        /**\n         * Obtains an angle from a specified number of milliradians.\n         *\n         * @param mrad the size in milliradians of the angle to be obtained.\n         *\n         * @return a new angle, whose size in milliradians is given by [mrad].\n         */\n        @JvmStatic fun fromMrad(mrad: Double) = Angle(mrad * MRAD_TO_DEGREES)\n\n        /**\n         * Obtains an angle from a specified number of mil NATO.\n         *\n         * @param milNATO the size in mil NATO of the angle to be obtained.\n         *\n         * @return a new angle, whose size in mil NATO is given by [milNATO].\n         */\n        @JvmStatic fun fromMilNATO(milNATO: Double) = Angle(milNATO * MIL_NATO_TO_DEGREES)\n\n        /**\n         * Obtains an angle from a specified number of mil Warsaw Pact.\n         *\n         * @param milWP the size in mil WP of the angle to be obtained.\n         *\n         * @return a new angle, whose size in mil WP is given by [milWP].\n         */\n        @JvmStatic fun fromMilWP(milWP: Double) = Angle(milWP * MIL_WP_TO_DEGREES)\n\n        /**\n         * Obtains an angle from a specified number of Streck.\n         *\n         * @param streck the size in Streck of the angle to be obtained.\n         *\n         * @return a new angle, whose size in Streck is given by [streck].\n         */\n        @JvmStatic fun fromStreck(streck: Double) = Angle(streck * STRECK_TO_DEGREES)\n\n        /**\n         * Obtains an angle from a specified number of minute of angle (MOA).\n         *\n         * @param moa the size in MOA of the angle to be obtained.\n         *\n         * @return a new angle, whose size in MOA is given by [moa].\n         */\n        @JvmStatic fun fromMOA(moa: Double) = Angle(moa * MOA_TO_DEGREES)\n\n        /**\n         * Obtains an angle from rectangular coordinates.\n         *\n         * @param x the abscissa coordinate.\n         * @param y the ordinate coordinate.\n         *\n         * @return a new angle, whose size is determined from `x` and `y`.\n         */\n        @JvmStatic fun fromXY(x: Double, y: Double) = atan2(y, x).radians\n\n        /**\n         * Obtain an angle from a given number of positive degrees, minutes and seconds.\n         *\n         * @param degrees integer number of degrees, positive.\n         * @param minutes integer number of minutes, positive only between 0 and 60.\n         * @param seconds integer number of seconds, positive only between 0 and 60.\n         *\n         * @return a new angle whose size in degrees is given by `degrees`, `minutes` and `seconds`.\n         *\n         * @throws IllegalArgumentException if minutes or seconds are outside the 0-60 range or the degrees is negative.\n         */\n        @JvmStatic\n        fun fromDMS(degrees: Int, minutes: Int, seconds: Double): Angle {\n            require(degrees >= 0) {\n                logMessage(ERROR, \"Angle\", \"fromDMS\", \"invalidDegrees\")\n            }\n            require(minutes in 0 until 60) {\n                logMessage(ERROR, \"Angle\", \"fromDMS\", \"invalidMinutes\")\n            }\n            require(seconds >= 0 && seconds < 60) {\n                logMessage(ERROR, \"Angle\", \"fromDMS\", \"invalidSeconds\")\n            }\n            return fromDegrees(degrees + minutes / 60.0 + seconds / 3600.0)\n        }\n\n        /**\n         * Obtain an angle from a given number of positive degrees and decimal minutes.\n         *\n         * @param degrees integer number of degrees, positive.\n         * @param minutes double representing the decimal representation of minutes and seconds.\n         *\n         * @return a new angle whose size in degrees is given by `degrees` and decimal `minutes`.\n         *\n         * @throws IllegalArgumentException if minutes or seconds are outside the 0-60 range or the degrees is negative.\n         */\n        @JvmStatic\n        fun fromDM(degrees: Int, minutes: Double): Angle {\n            require(degrees >= 0) {\n                logMessage(ERROR, \"Angle\", \"fromDM\", \"invalidDegrees\")\n            }\n            require(minutes >= 0 && minutes < 60) {\n                logMessage(ERROR, \"Angle\", \"fromDM\", \"invalidMinutes\")\n            }\n            return fromDegrees(degrees + minutes / 60.0)\n        }\n\n        /**\n         * Obtain an angle from a degrees, minute and seconds character string.\n         *\n         * eg:<pre>\n         * 123 34 42\n         * -123* 34' 42\" (where * stands for the degree symbol)\n         * +45* 12' 30\" (where * stands for the degree symbol)\n         * 45 12 30 S\n         * 45 12 30 N\n         * </pre>\n         * For a string containing both a sign and compass direction, the compass direction will take precedence.\n         *\n         * @param dmsString the degrees, minute and second character string.\n         *\n         * @return the corresponding angle.\n         *\n         * @throws IllegalArgumentException if dmsString is not properly formatted.\n         */\n        @JvmStatic\n        fun fromDMS(dmsString: String): Angle {\n            var dms = dmsString\n            // Check for string format validity\n            val regex = Regex(\"([-+]?\\\\d{1,3}[dD°\\\\s](\\\\s*\\\\d{1,2}['’\\\\s])?(\\\\s*\\\\d{1,2}[\\\"”\\\\s])?\\\\s*([NnSsEeWw])?\\\\s?)\")\n            require(regex.matches(\"$dms \")) {\n                logMessage(ERROR, \"Angle\", \"fromDMS\", \"invalidFormat\")\n            }\n            // Replace degree, min and sec signs with space\n            dms = dms.replace(\"[Dd°'’\\\"”]\".toRegex(), \" \")\n            // Replace multiple spaces with single ones\n            dms = dms.replace(\"\\\\s+\".toRegex(), \" \")\n            dms = dms.trim { it <= ' ' }\n\n            // Check for sign prefix and suffix\n            var sign = 1\n            val suffix = dms.uppercase()[dms.length - 1]\n            val prefix = dms[0]\n            if (!suffix.isDigit()) {\n                sign = if (suffix == 'S' || suffix == 'W') -1 else 1\n                dms = dms.substring(0, dms.length - 1)\n                dms = dms.trim { it <= ' ' }\n\n                // check and trim the prefix if it is erroneously included\n                if (!prefix.isDigit()) {\n                    dms = dms.substring(1, dms.length)\n                    dms = dms.trim { it <= ' ' }\n                }\n            } else if (!prefix.isDigit()) {\n                sign *= if (prefix == '-') -1 else 1\n                dms = dms.substring(1, dms.length)\n            }\n\n            // Extract degrees, minutes and seconds\n            val dmsArray = dms.split(\" \").toTypedArray()\n            val d = dmsArray[0].toInt()\n            val m = if (dmsArray.size > 1) dmsArray[1].toInt() else 0\n            val s = if (dmsArray.size > 2) dmsArray[2].toDouble() else 0.0\n            return fromDMS(d, m, s) * sign.toDouble()\n        }\n\n        /**\n         * Restricts an angle to the range [-180, +180] degrees, wrapping angles outside the range. Wrapping takes place as\n         * though traversing the edge of a unit circle; angles less than -180 wrap back to +180, while angles greater than\n         * +180 wrap back to -180.\n         *\n         * @param degrees the angle to wrap in degrees\n         *\n         * @return the specified angle wrapped to [-180, +180] degrees\n         */\n        @JvmStatic\n        fun normalizeAngle180(degrees: Double): Double {\n            val angle = degrees % 360\n            return if (angle > 180) angle - 360 else if (angle < -180) 360 + angle else angle\n        }\n\n        /**\n         * Restricts an angle to the range [0, 360] degrees, wrapping angles outside the range. Wrapping takes place as\n         * though traversing the edge of a unit circle; angles less than 0 wrap back to 360, while angles greater than 360\n         * wrap back to 0.\n         *\n         * @param degrees the angle to wrap in degrees\n         *\n         * @return the specified angle wrapped to [0, 360] degrees\n         */\n        @JvmStatic\n        fun normalizeAngle360(degrees: Double): Double {\n            val angle = degrees % 360\n            return if (angle >= 0) angle else 360 + angle\n        }\n\n        /**\n         * Restricts an angle to the range [-90, +90] degrees, wrapping angles outside the range. Wrapping takes place along\n         * a line of constant longitude which may pass through the poles. In which case, 135 degrees normalizes to 45\n         * degrees; 181 degrees normalizes to -1 degree.\n         *\n         * @param degrees the angle to wrap in degrees\n         *\n         * @return the specified angle wrapped to the range [-90, +90] degrees\n         */\n        @JvmStatic\n        fun normalizeLatitude(degrees: Double): Double {\n            val lat = degrees % 180\n            val normalizedLat = if (lat > 90) 180 - lat else if (lat < -90) -180 - lat else lat\n            // Determine whether the latitude is in the north or south hemisphere\n            val numEquatorCrosses = (degrees / 180).toInt()\n            return if (numEquatorCrosses % 2 == 0) normalizedLat else -normalizedLat\n        }\n\n        /**\n         * Restricts an angle to the range [-180, +180] degrees, wrapping angles outside the range. Wrapping takes place as\n         * though traversing a line of constant latitude which may pass through the antimeridian; angles less than -180 wrap\n         * back to +180, while angles greater than +180 wrap back to -180.\n         *\n         * @param degrees the angle to wrap in degrees\n         *\n         * @return the specified angle wrapped to the range [-180, +180] degrees\n         */\n        @JvmStatic\n        fun normalizeLongitude(degrees: Double): Double {\n            val lon = degrees % 360\n            return if (lon > 180) lon - 360 else if (lon < -180) 360 + lon else lon\n        }\n\n        /**\n         * Restricts an angle to the range [-180, +180] degrees, clamping angles outside the range. Angles less than -180\n         * are returned as -180, and angles greater than +180 are returned as +180. Angles within the range are returned\n         * unmodified.\n         *\n         * @param degrees the angle to clamp in degrees\n         *\n         * @return the specified angle clamped to the range [-180, +180] degrees\n         */\n        @JvmStatic\n        fun clampAngle180(degrees: Double) = degrees.coerceIn(-180.0, 180.0)\n\n        /**\n         * Restricts an angle to the range [0, 360] degrees, clamping angles outside the range. Angles less than 0 are\n         * returned as 0, and angles greater than 360 are returned as 360. Angles within the range are returned unmodified.\n         *\n         * @param degrees the angle to clamp in degrees\n         *\n         * @return the specified angle clamped to the range [0, 360] degrees\n         */\n        @JvmStatic\n        fun clampAngle360(degrees: Double) = degrees.coerceIn(0.0, 360.0)\n\n        /**\n         * Restricts an angle to the range [-90, +90] degrees, clamping angles outside the range. Angles less than -90 are\n         * returned as -90, and angles greater than +90 are returned as +90. Angles within the range are returned\n         * unmodified.\n         *\n         * @param degrees the angle to clamp in degrees\n         *\n         * @return the specified angle clamped to the range [-90, +90] degrees\n         */\n        @JvmStatic\n        fun clampLatitude(degrees: Double) = degrees.coerceIn(-90.0, 90.0)\n\n        /**\n         * Restricts an angle to the range [-180, +180] degrees, clamping angles outside the range. Angles less than -180\n         * are returned as 0, and angles greater than +180 are returned as +180. Angles within the range are returned\n         * unmodified.\n         *\n         * @param degrees the angle to clamp in degrees\n         *\n         * @return the specified angle clamped to the range [-180, +180] degrees\n         */\n        @JvmStatic\n        fun clampLongitude(degrees: Double) = degrees.coerceIn(-180.0, 180.0)\n\n        /**\n         * Computes the linear interpolation of two angles in the range [-180, +180] degrees according to a specified\n         * fractional amount. The fractional amount is interpreted as a relative proportion of the two angles, where 0.0\n         * indicates the first angle, 0.5 indicates an angle half way between the two angles, and 1.0 indicates the second\n         * angle.\n         * <br>\n         * The result of this method is undefined if the amount is outside the range [0, 1].\n         *\n         * @param amount the fractional proportion of the two angles in the range [0, 1]\n         * @param angle1 the first angle in degrees\n         * @param angle2 the second angle in degrees\n         *\n         * @return the interpolated angle in the range [-180, +180] degrees\n         */\n        @JvmStatic\n        fun interpolateAngle180(amount: Double, angle1: Angle, angle2: Angle): Angle {\n            // Normalize the two angles to the range [-180, +180].\n            var normalizedAngle1 = normalizeAngle180(angle1.inDegrees)\n            var normalizedAngle2 = normalizeAngle180(angle2.inDegrees)\n\n            // If the shortest arc between the two angles crosses the -180/+180 degree boundary, add 360 degrees to the\n            // smaller of the two angles then interpolate.\n            if (normalizedAngle1 - normalizedAngle2 > 180) normalizedAngle2 += 360.0\n            else if (normalizedAngle1 - normalizedAngle2 < -180) normalizedAngle1 += 360.0\n\n            // Linearly interpolate between the two angles then normalize the interpolated result. Normalizing the result is\n            // necessary when we have added 360 degrees to either angle in order to interpolate along the shortest arc.\n            val angle = (1 - amount) * normalizedAngle1 + amount * normalizedAngle2\n            return normalizeAngle180(angle).degrees\n        }\n\n        /**\n         * Computes the linear interpolation of two angles in the range [0, 360] degrees according to a specified fractional\n         * amount. The fractional amount is interpreted as a relative proportion of the two angles, where 0.0 indicates the\n         * first angle, 0.5 indicates an angle half way between the two angles, and 1.0 indicates the second angle.\n         * <br>\n         * The result of this method is undefined if the amount is outside the range [0, 1].\n         *\n         * @param amount the fractional proportion of the two angles in the range [0, 1]\n         * @param angle1 the first angle\n         * @param angle2 the second angle\n         *\n         * @return the interpolated angle in the range [0, 360] degrees\n         */\n        @JvmStatic\n        fun interpolateAngle360(amount: Double, angle1: Angle, angle2: Angle): Angle {\n            // Normalize the two angles to the range [-180, +180].\n            var normalizedAngle1 = normalizeAngle180(angle1.inDegrees)\n            var normalizedAngle2 = normalizeAngle180(angle2.inDegrees)\n\n            // If the shortest arc between the two angles crosses the -180/+180 degree boundary, add 360 degrees to the\n            // smaller of the two angles then interpolate.\n            if (normalizedAngle1 - normalizedAngle2 > 180) normalizedAngle2 += 360.0\n            else if (normalizedAngle1 - normalizedAngle2 < -180) normalizedAngle1 += 360.0\n\n            // Linearly interpolate between the two angles then normalize the interpolated result. Normalizing the result is\n            // necessary when we have added 360 degrees to either angle in order to interpolate along the shortest arc.\n            val angle = (1 - amount) * normalizedAngle1 + amount * normalizedAngle2\n            return normalizeAngle360(angle).degrees\n        }\n\n        /**\n         * Obtains the average of two angles. This method is commutative, so `midAngle(m, n)` and\n         * `midAngle(n, m)` are equivalent.\n         *\n         * @param a1 the first angle.\n         * @param a2 the second angle.\n         *\n         * @return the average of `a1` and `a2`\n         */\n        @JvmStatic\n        fun average(a1: Angle, a2: Angle) = fromDegrees(0.5 * (a1.inDegrees + a2.inDegrees))\n\n        @JvmStatic\n        fun max(a: Angle, b: Angle) = if (a.inDegrees >= b.inDegrees) a else b\n\n        @JvmStatic\n        fun min(a: Angle, b: Angle) = if (a.inDegrees <= b.inDegrees) a else b\n\n        /**\n         * Indicates whether a specified value is within the normal range of latitude, [-90, 90].\n         * @param degrees The value to test, in degrees.\n         * @returns true if the value is within the normal range of latitude, otherwise false.\n         */\n        @JvmStatic\n        fun isValidLatitude(degrees: Double) = degrees >= -90 && degrees <= 90\n\n        /**\n         * Indicates whether a specified value is within the normal range of longitude, [-180, 180].\n         * @param degrees The value to test, in degrees.\n         * @returns true if the value is within the normal range of longitude, otherwise false.\n         */\n        @JvmStatic\n        fun isValidLongitude(degrees: Double) = degrees >= -180 && degrees <= 180\n    }\n\n    init {\n        // NaN value is not suppoted due to unpredictable `compareTo(NaN)` behavior\n        require(!inDegrees.isNaN()) {\n            logMessage(ERROR, \"Angle\", \"init\", \"NaN is not supported!\")\n        }\n    }\n\n    /**\n     * Obtains the sum of these two angles.\n     * This method is commutative, so `a.add(b)` and `b.add(a)` are equivalent.\n     * Neither this angle nor angle is changed, instead the result is returned as a new angle.\n     *\n     * @param angle the angle to add to this one.\n     *\n     * @return an angle whose size is the total of these angles and angles size.\n     */\n    operator fun plus(angle: Angle) = fromDegrees(inDegrees + angle.inDegrees)\n    fun plusDegrees(degrees: Double) = fromDegrees(this.inDegrees + degrees)\n    fun plusRadians(radians: Double) = fromRadians(this.inRadians + radians)\n\n    /**\n     * Obtains the difference of these two angles. This method is not commutative.\n     * Neither this angle nor angle is changed, instead the result is returned as a new angle.\n     *\n     * @param angle the angle to subtract from this angle.\n     *\n     * @return a new angle corresponding to this angle's size minus angle's size.\n     */\n    operator fun minus(angle: Angle) = fromDegrees(inDegrees - angle.inDegrees)\n    fun minusDegrees(degrees: Double) = fromDegrees(this.inDegrees - degrees)\n    fun minusRadians(radians: Double) = fromRadians(this.inRadians - radians)\n\n    /**\n     * Multiplies this angle by another angle.\n     * This method is commutative, so `a.multiply(b)` and `b.multiply(a)` are equivalent.\n     * This angle remains unchanged. The result is returned as a new angle.\n     *\n     * @param angle the angle by which to multiply.\n     *\n     * @return a new angle whose size equals this angle's size multiplied by angle's size.\n     */\n    operator fun times(angle: Angle) = this * angle.inDegrees\n\n    /**\n     * Multiplies this angle by `multiplier`.\n     * This method is commutative, so `a.multiply(b)` and `b.multiply(a)` are equivalent.\n     * This angle remains unchanged. The result is returned as a new angle.\n     *\n     * @param multiplier a scalar by which this angle is multiplied.\n     *\n     * @return a new angle whose size equals this angle's size multiplied by `multiplier`.\n     */\n    operator fun times(multiplier: Double) = fromDegrees(inDegrees * multiplier)\n\n    /**\n     * Divides this angle by another angle.\n     * This angle remains unchanged. The result is returned as a new angle.\n     *\n     * @param angle the angle by which to divide.\n     *\n     * @return this angle's degrees divided by angle's degrees.\n     */\n    operator fun div(angle: Angle) = this / angle.inDegrees\n\n    /**\n     * Divides this angle by another angle.\n     * This angle remains unchanged. The result is returned as a new angle.\n     *\n     * @param divisor a scalar by which to divide.\n     *\n     * @return this angle's degrees divided by divisor.\n     */\n    operator fun div(divisor: Double): Angle {\n        require(divisor != 0.0) {\n            logMessage(ERROR, \"Angle\", \"div\", \"divideByZero\")\n        }\n        return fromDegrees(inDegrees / divisor)\n    }\n\n    /**\n     * Returns new angle with opposite sign.\n     */\n    operator fun unaryMinus() = Angle(-inDegrees)\n\n    /**\n     * Computes the shortest distance between this and angle, as an angle.\n     *\n     * @param angle the angle to measure angular distance to.\n     *\n     * @return the angular distance between this and `value`.\n     */\n    fun distanceTo(angle: Angle): Angle {\n        var distance = angle.inDegrees - inDegrees\n        if (distance < -180) distance += 360.0 else if (distance > 180) distance -= 360.0\n        return abs(distance).degrees\n    }\n\n    fun normalize180() = if (inDegrees in -180.0..180.0) this else normalizeAngle180(inDegrees).degrees\n\n    fun normalize360() = if (inDegrees in 0.0..360.0) this else normalizeAngle360(inDegrees).degrees\n\n    fun normalizeLatitude() = if (inDegrees in -90.0..90.0) this else normalizeLatitude(inDegrees).degrees\n\n    fun normalizeLongitude() = if (inDegrees in -180.0..180.0) this else normalizeLongitude(inDegrees).degrees\n\n    fun clampAngle180() = coerceIn(NEG180, POS180)\n\n    fun clampAngle360() = coerceIn(ZERO, POS360)\n\n    fun clampLatitude() = coerceIn(NEG90, POS90)\n\n    fun clampLongitude() = coerceIn(NEG180, POS180)\n\n    fun toDMS(): DoubleArray {\n        var angle = inDegrees\n        val sign = sign(angle)\n        angle *= sign\n        var d = floor(angle)\n        angle = (angle - d) * 60.0\n        var m = floor(angle)\n        angle = (angle - m) * 60.0\n        var s = round(angle * 100) / 100 // keep two decimals for seconds\n        if (s == 60.0) {\n            m++\n            s = 0.0\n        }\n        if (m == 60.0) {\n            d++\n            m = 0.0\n        }\n        return doubleArrayOf(sign, d, m, s)\n    }\n\n    /**\n     * Forms a decimal degrees [String] representation of this [Angle].\n     *\n     * @param digits the number of digits past the decimal point to include in the string.\n     *\n     * @return the value of this angle in decimal degrees as a string with the specified number of digits beyond the\n     * decimal point. The string is padded with trailing zeros to fill the number of post-decimal point\n     * positions requested.\n     */\n    fun toDecimalDegreesString(digits: Int): String {\n        require(digits in 0..15) {\n            logMessage(ERROR, \"Angle\", \"toDecimalDegreesString\", \"outOfRange\")\n        }\n        return \"%.${digits}f°\".format(inDegrees)\n    }\n\n    /**\n     * Obtains a [String] representation of this [Angle] formatted as degrees and decimal minutes.\n     *\n     * @return the value of this angle in degrees and decimal minutes as a string.\n     */\n    fun toDMmmString(): String {\n        val dms = toDMS()\n        val mf = if (dms[3] == 0.0) dms[2] else dms[2] + dms[3] / 60.0\n        return \"${if (dms[0] < 0) \"-\" else \"\"}%d° %2.3f’\".format(dms[1], mf)\n    }\n\n    /**\n     * Obtains a [String] representation of this [Angle] formatted as degrees, minutes and decimal seconds.\n     *\n     * @return the value of this angle in degrees, minutes and decimal seconds as a string.\n     */\n    fun toDMSssString(): String {\n        val dms = toDMS()\n        return \"${if (dms[0] < 0) \"-\" else \"\"}%d° %2d’ %2.1f”\".format(dms[1], dms[2], dms[3])\n    }\n\n    /**\n     * Obtains a [String] representation of this [Angle] formatted as degrees, minutes and seconds integer\n     * values.\n     *\n     * @return the value of this angle in degrees, minutes, seconds as a string.\n     */\n    fun toDMSString(): String {\n        val dms = toDMS()\n        return \"${if (dms[0] < 0) \"-\" else \"\"}%d° %d’ %.0f”\".format(dms[1], dms[2], dms[3])\n    }\n\n    /**\n     * Compares this [Angle] with another. Returns a negative integer if this is the smaller angle, a positive\n     * integer if this is the larger, and zero if both angles are equal.\n     *\n     * @param other the angle to compare against.\n     *\n     * @return -1 if this angle is smaller, 0 if both are equal and +1 if this angle is larger.\n     */\n    override operator fun compareTo(other: Angle) = inDegrees.compareTo(other.inDegrees)\n\n    override fun toString() = \"$inDegrees°\"\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Offset\nimport earth.worldwind.geom.Position\nimport earth.worldwind.layer.RenderableLayer\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Font\nimport earth.worldwind.render.FontWeight\nimport earth.worldwind.shape.Label\nimport earth.worldwind.shape.OrientationMode\n\nclass LabelsTutorial(private val engine: WorldWind): AbstractTutorial() {\n\n    private val layer = RenderableLayer(\"Labels\").apply {\n        // Create a basic label with the default attributes, including the default text color (white), the default text\n        // size (24 pixels), the system default font, and the default alignment (bottom center).\n        addRenderable(\n            Label(Position.fromDegrees(38.8977, -77.0365, 0.0), \"The White House\").apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n            }\n        )\n\n        // Create a label with a black text color, the default text size, the system default font, the default\n        // alignment, and a thick white text outline.\n        addRenderable(\n            Label(Position.fromDegrees(38.881389, -77.036944, 0.0), \"Thomas Jefferson Memorial\").apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n                attributes.apply {\n                    textColor = Color(0f, 0f, 0f, 1f) // black text via r,g,b,a\n                    outlineColor = Color(1f, 1f, 1f, 1f) // white outline via r,g,b,a\n                    outlineWidth = 5f // thicken the white outline\n                }\n            }\n        )\n\n        // Create a right-aligned label using a bottom-right offset.\n        addRenderable(\n            Label(Position.fromDegrees(38.8893, -77.050111, 0.0), \"Lincoln Memorial\").apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n                attributes.apply { textOffset = Offset.bottomRight() }\n            }\n        )\n\n        // Create a left-aligned label using a bottom-left offset.\n        addRenderable(\n            Label(Position.fromDegrees(38.889803, -77.009114, 0.0), \"United States Capitol\").apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n                attributes.apply { textOffset = Offset.bottomLeft() }\n            }\n        )\n\n        // Create a label with a 48 pixel text size and a bold font.\n        addRenderable(\n            Label(Position.fromDegrees(38.907192, -77.036871, 0.0), \"Washington\").apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n                attributes.apply { font = Font(\"arial\", FontWeight.BOLD, 28) }\n            }\n        )\n\n        // Create a label with its orientation fixed relative to the globe.\n        addRenderable(\n            Label(Position.fromDegrees(38.89, -77.023611, 0.0), \"National Mall\").apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n                rotationMode = OrientationMode.RELATIVE_TO_GLOBE\n            }\n        )\n    }\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n        engine.camera.set(\n            38.89.degrees, (-77.023611).degrees, 10e3,\n            AltitudeMode.ABSOLUTE, heading = Angle.ZERO, tilt = Angle.ZERO, roll = Angle.ZERO\n        )\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.radians\nimport earth.worldwind.geom.LookAt\nimport earth.worldwind.geom.Position\nimport kotlin.math.atan\nimport kotlin.math.sqrt\n\nclass LookAtViewTutorial(private val engine: WorldWind) : AbstractTutorial() {\n\n    override fun start() {\n        super.start()\n        setLookAtAction()\n    }\n\n    private fun setLookAtAction() {\n        // Create a view of LAX airport as seen from an aircraft above Santa Monica, CA.\n        val aircraft = Position.fromDegrees(34.0158333, -118.4513056, 2500.0)\n        // Aircraft above Santa Monica airport, altitude in meters\n        val airport = Position.fromDegrees(33.9424368, -118.4081222, 38.7)\n\n        // Compute heading and distance from aircraft to airport\n        val heading = aircraft.greatCircleAzimuth(airport)\n        val distanceRadians = aircraft.greatCircleDistance(airport)\n        val distanceMeters = distanceRadians * engine.globe.getRadiusAt(aircraft.latitude, aircraft.longitude)\n\n        // Compute camera settings\n        val altitude = aircraft.altitude - airport.altitude\n        val range = sqrt(altitude * altitude + distanceMeters * distanceMeters)\n        val tilt = atan(distanceMeters / aircraft.altitude).radians\n\n        // Apply new \"look at\" view\n        engine.cameraFromLookAt(LookAt(airport, AltitudeMode.ABSOLUTE, range, heading, tilt, roll = Angle.ZERO))\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.layer.graticule.MGRSGraticuleLayer\n\nclass MGRSGraticuleTutorial(private val engine: WorldWind) : AbstractTutorial() {\n    // Create a layer that displays the globe's tessellation geometry.\n    private val layer = MGRSGraticuleLayer()\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Position\nimport earth.worldwind.layer.RenderableLayer\nimport earth.worldwind.render.Color\nimport earth.worldwind.shape.Path\n\nclass PathsTutorial(private val engine: WorldWind) : AbstractTutorial() {\n\n    private val layer = RenderableLayer(\"Paths\").apply {\n        // Create a basic path with the default attributes, the default altitude mode (ABSOLUTE),\n        // and the default path type (GREAT_CIRCLE).\n        addRenderable(\n            Path(\n                listOf(\n                    Position.fromDegrees(50.0, -180.0, 1e5),\n                    Position.fromDegrees(30.0, -100.0, 1e6),\n                    Position.fromDegrees(50.0, -40.0, 1e5)\n                )\n            )\n        )\n\n        // Create a terrain following path with the default attributes, and the default path type (GREAT_CIRCLE).\n        addRenderable(\n            Path(\n                listOf(\n                    Position.fromDegrees(40.0, -180.0, 0.0),\n                    Position.fromDegrees(20.0, -100.0, 0.0),\n                    Position.fromDegrees(40.0, -40.0, 0.0)\n                )\n            ).apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND // clamp the path vertices to the ground\n                isFollowTerrain = true // follow the ground between path vertices\n            }\n        )\n\n        // Create an extruded path with the default attributes, the default altitude mode (ABSOLUTE),\n        // and the default path type (GREAT_CIRCLE).\n        addRenderable(\n            Path(\n                listOf(\n                    Position.fromDegrees(30.0, -180.0, 1e5),\n                    Position.fromDegrees(10.0, -100.0, 1e6),\n                    Position.fromDegrees(30.0, -40.0, 1e5)\n                )\n            ).apply {\n                isExtrude = true // extrude the path from the ground to each path position's altitude\n            }\n        )\n\n        // Create an extruded path with custom attributes that display the extruded vertical lines,\n        // make the extruded interior 50% transparent, and increase the path line with.\n        addRenderable(\n            Path(\n                listOf(\n                    Position.fromDegrees(20.0, -180.0, 1e5),\n                    Position.fromDegrees(0.0, -100.0, 1e6),\n                    Position.fromDegrees(20.0, -40.0, 1e5)\n                )\n            ).apply {\n                attributes.apply {\n                    isDrawVerticals = true // display the extruded verticals\n                    interiorColor = Color(1f, 1f, 1f, 0.5f) // 50% transparent white\n                    outlineWidth = 3f\n                }\n                isExtrude = true // extrude the path from the ground to each path position's altitude\n            }\n        )\n    }\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n        engine.camera.set(\n            30.0.degrees, (-100.0).degrees, engine.distanceToViewGlobeExtents * 1.1,\n            AltitudeMode.ABSOLUTE, heading = Angle.ZERO, tilt = Angle.ZERO, roll = Angle.ZERO\n        )\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.*\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.layer.RenderableLayer\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.shape.Placemark\nimport earth.worldwind.shape.PlacemarkAttributes\n\nclass PlacemarksTutorial(private val engine: WorldWind) : AbstractTutorial() {\n\n    private val layer = RenderableLayer(\"Placemarks\").apply {\n        // Create a simple placemark at downtown Ventura, CA. This placemark is a 20x20 cyan square centered on the\n        // geographic position. This placemark demonstrates the creation with a convenient factory method.\n        addRenderable(\n            Placemark.createWithColorAndSize(\n                Position.fromDegrees(34.281, -119.293, 0.0), Color(0f, 1f, 1f, 1f), 20\n            ).apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n            }\n        )\n\n        // Create an image-based placemark of an aircraft above the ground with a leader-line to the surface.\n        // This placemark demonstrates creation via a constructor and a convenient PlacemarkAttributes factory method.\n        // The image is scaled to 1.5 times its original size.\n        addRenderable(\n            Placemark(Position.fromDegrees(34.260, -119.2, 5000.0)).apply {\n                attributes = PlacemarkAttributes.createWithImageAndLeader(ImageSource.fromResource(MR.images.aircraft_fixwing)).apply {\n                    imageScale = 1.5\n                }\n            }\n        )\n\n        // Create an image-based placemark with a label at Oxnard Airport, CA. This placemark demonstrates creation\n        // with a constructor and a convenient PlacemarkAttributes factory method. The image is scaled to 2x\n        // its original size, with the bottom center of the image anchored at the geographic position.\n        addRenderable(\n            Placemark(Position.fromDegrees(34.200, -119.208, 0.0)).apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n                attributes = PlacemarkAttributes.createWithImage(ImageSource.fromResource(MR.images.airport_terminal)).apply {\n                    imageOffset = Offset.bottomCenter()\n                    imageScale = 2.0\n                }\n                displayName = \"Oxnard Airport\"\n            }\n        )\n\n        // Create an image-based placemark from a bitmap. This placemark demonstrates creation with a\n        // constructor and a convenient PlacemarkAttributes factory method. First, a 64x64 bitmap is loaded,\n        // and then it is passed into the placemark attributes. The bottom center of the image anchored\n        // at the geographic position.\n        addRenderable(\n            Placemark(Position.fromDegrees(34.300, -119.25, 0.0)).apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n                attributes = PlacemarkAttributes.createWithImage(ImageSource.fromResource(MR.images.ehipcc)).apply {\n                    imageOffset = Offset.bottomCenter()\n                }\n            }\n        )\n    }\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n        engine.cameraFromLookAt(\n            LookAt(\n                position = Position.fromDegrees(34.200, -119.208, 0.0),\n                altitudeMode = AltitudeMode.ABSOLUTE, range = 1e4,\n                heading = Angle.ZERO, tilt = 80.0.degrees, roll = Angle.ZERO\n            )\n        )\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Position\nimport earth.worldwind.layer.RenderableLayer\nimport earth.worldwind.render.Color\nimport earth.worldwind.shape.Polygon\n\nclass PolygonsTutorial(private val engine: WorldWind) : AbstractTutorial() {\n\n    private val layer = RenderableLayer(\"Polygons\").apply {\n        // Create a basic polygon with the default attributes, the default altitude mode (ABSOLUTE),\n        // and the default path type (GREAT_CIRCLE).\n        addRenderable(\n            Polygon(\n                listOf(\n                    Position.fromDegrees(40.0, -135.0, 5.0e5),\n                    Position.fromDegrees(45.0, -140.0, 7.0e5),\n                    Position.fromDegrees(50.0, -130.0, 9.0e5),\n                    Position.fromDegrees(45.0, -120.0, 7.0e5),\n                    Position.fromDegrees(40.0, -125.0, 5.0e5)\n                )\n            )\n        )\n\n        // Create a terrain following polygon with the default attributes, and the default path type (GREAT_CIRCLE).\n        addRenderable(\n            Polygon(\n                listOf(\n                    Position.fromDegrees(40.0, -105.0, 0.0),\n                    Position.fromDegrees(45.0, -110.0, 0.0),\n                    Position.fromDegrees(50.0, -100.0, 0.0),\n                    Position.fromDegrees(45.0, -90.0, 0.0),\n                    Position.fromDegrees(40.0, -95.0, 0.0)\n                )\n            ).apply {\n                altitudeMode = AltitudeMode.CLAMP_TO_GROUND // clamp the polygon vertices to the ground\n                followTerrain = true // follow the ground between polygon vertices\n            }\n        )\n\n        // Create an extruded polygon with the default attributes, the default altitude mode (ABSOLUTE),\n        // and the default path type (GREAT_CIRCLE).\n        addRenderable(\n            Polygon(\n                listOf(\n                    Position.fromDegrees(20.0, -135.0, 5.0e5),\n                    Position.fromDegrees(25.0, -140.0, 7.0e5),\n                    Position.fromDegrees(30.0, -130.0, 9.0e5),\n                    Position.fromDegrees(25.0, -120.0, 7.0e5),\n                    Position.fromDegrees(20.0, -125.0, 5.0e5)\n                )\n            ).apply {\n                isExtrude = true // extrude the polygon from the ground to each polygon position's altitude\n            }\n        )\n\n        // Create an extruded polygon with custom attributes that display the extruded vertical lines,\n        // make the extruded interior 50% transparent, and increase the polygon line with.\n        addRenderable(\n            Polygon(\n                listOf(\n                    Position.fromDegrees(20.0, -105.0, 5.0e5),\n                    Position.fromDegrees(25.0, -110.0, 7.0e5),\n                    Position.fromDegrees(30.0, -100.0, 9.0e5),\n                    Position.fromDegrees(25.0, -90.0, 7.0e5),\n                    Position.fromDegrees(20.0, -95.0, 5.0e5)\n                )\n            ).apply {\n                attributes.apply {\n                    isDrawVerticals = true // display the extruded verticals\n                    interiorColor = Color(1f, 1f, 1f, 0.5f) // 50% transparent white\n                    outlineWidth = 3f\n                }\n                isExtrude = true // extrude the polygon from the ground to each polygon position's altitude\n            }\n        )\n\n        // Create a polygon with an inner hole by specifying multiple polygon boundaries\n        addRenderable(\n            Polygon().apply {\n                addBoundary(\n                    listOf(\n                        Position.fromDegrees(0.0, -135.0, 5.0e5),\n                        Position.fromDegrees(5.0, -140.0, 7.0e5),\n                        Position.fromDegrees(10.0, -130.0, 9.0e5),\n                        Position.fromDegrees(5.0, -120.0, 7.0e5),\n                        Position.fromDegrees(0.0, -125.0, 5.0e5)\n                    )\n                )\n                addBoundary(\n                    listOf(\n                        Position.fromDegrees(2.5, -130.0, 6.0e5),\n                        Position.fromDegrees(5.0, -135.0, 7.0e5),\n                        Position.fromDegrees(7.5, -130.0, 8.0e5),\n                        Position.fromDegrees(5.0, -125.0, 7.0e5)\n                    )\n                )\n            }\n        )\n\n        // Create an extruded polygon with an inner hole and custom attributes that display the extruded vertical lines,\n        // make the extruded interior 50% transparent, and increase the polygon line with.\n        addRenderable(\n            Polygon(emptyList()).apply {\n                attributes.apply {\n                    isDrawVerticals = true // display the extruded verticals\n                    interiorColor = Color(1f, 1f, 1f, 0.5f) // 50% transparent white\n                    outlineWidth = 3f\n                }\n                addBoundary(\n                    listOf(\n                        Position.fromDegrees(0.0, -105.0, 5.0e5),\n                        Position.fromDegrees(5.0, -110.0, 7.0e5),\n                        Position.fromDegrees(10.0, -100.0, 9.0e5),\n                        Position.fromDegrees(5.0, -90.0, 7.0e5),\n                        Position.fromDegrees(0.0, -95.0, 5.0e5)\n                    )\n                )\n                addBoundary(\n                    listOf(\n                        Position.fromDegrees(2.5, -100.0, 6.0e5),\n                        Position.fromDegrees(5.0, -105.0, 7.0e5),\n                        Position.fromDegrees(7.5, -100.0, 8.0e5),\n                        Position.fromDegrees(5.0, -95.0, 7.0e5)\n                    )\n                )\n                isExtrude = true // extrude the polygon from the ground to each polygon position's altitude\n            }\n        )\n    }\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n        engine.camera.set(\n            30.0.degrees, (-115.0).degrees, engine.distanceToViewGlobeExtents * 1.1,\n            AltitudeMode.ABSOLUTE, heading = Angle.ZERO, tilt = Angle.ZERO, roll = Angle.ZERO\n        )\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.layer.ShowTessellationLayer\n\nclass ShowTessellationTutorial(private val engine: WorldWind) : AbstractTutorial() {\n    // Create a layer that displays the globe's tessellation geometry.\n    private val layer = ShowTessellationLayer()\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.LookAt\nimport earth.worldwind.geom.Offset\nimport earth.worldwind.geom.Position\nimport earth.worldwind.layer.RenderableLayer\nimport earth.worldwind.render.Color\nimport earth.worldwind.shape.OmnidirectionalSightline\nimport earth.worldwind.shape.Placemark\n\nclass SightlineTutorial(private val engine: WorldWind) : AbstractTutorial() {\n\n    private val layer = RenderableLayer(\"Sightline\").apply {\n        // Specify the sightline position, which is the origin of the line of sight calculation\n        val position = Position.fromDegrees(46.230, -122.190, 2500.0)\n        // Create the sightline, specifying the range of the sightline (meters)\n        addRenderable(\n            OmnidirectionalSightline(position, 10000.0).apply {\n                // Create attributes for the visible terrain\n                attributes.apply { interiorColor = Color(0f, 1f, 0f, 0.5f) }\n                // Create attributes for the occluded terrain\n                occludeAttributes.apply { interiorColor = Color(0.1f, 0.1f, 0.1f, 0.8f) }\n            }\n        )\n        // Create a Placemark to visualize the position of the sightline\n        addRenderable(\n            Placemark(position).apply {\n                attributes.apply {\n                    imageSource = earth.worldwind.render.image.ImageSource.fromResource(MR.images.aircraft_fixwing)\n                    imageOffset = Offset.bottomCenter()\n                    imageScale = 2.0\n                    isDrawLeader = true\n                }\n            }\n        )\n    }\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n        engine.cameraFromLookAt(\n            LookAt(\n                position = Position(46.230.degrees, (-122.190).degrees, 500.0), altitudeMode = AltitudeMode.ABSOLUTE,\n                range = 1.5e4, heading = 45.0.degrees, tilt = 70.0.degrees, roll = 0.0.degrees\n            )\n        )\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.layer.RenderableLayer\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.shape.SurfaceImage\n\nclass SurfaceImageTutorial(private val engine: WorldWind) : AbstractTutorial() {\n\n    private val layer = RenderableLayer(\"Surface image\").apply {\n        // Configure a Surface Image to display an Android resource showing the WorldWindEarth logo.\n        addRenderable(\n            SurfaceImage(\n                Sector.fromDegrees(37.46, 15.5, 0.5, 0.6),\n                ImageSource.fromResource(MR.images.worldwind_logo)\n            )\n        )\n\n        // Configure a Surface Image to display a remote image showing Mount Etna erupting on July 13th, 2001.\n        addRenderable(\n            SurfaceImage(\n                Sector.fromDegrees(37.46543388598137, 14.60128369746704, 0.45360804083528, 0.75704283995502),\n                ImageSource.fromUrlString(\"https://worldwind.arc.nasa.gov/android/tutorials/data/etna.jpg\")\n            )\n        )\n    }\n\n    override fun start() {\n        super.start()\n        engine.layers.addLayer(layer)\n        engine.camera.set(\n            37.46543388598137.degrees, 14.97980511744455.degrees, 4.0e5,\n            AltitudeMode.ABSOLUTE, heading = Angle.ZERO, tilt = Angle.ZERO, roll = Angle.ZERO\n        )\n    }\n\n    override fun stop() {\n        super.stop()\n        engine.layers.removeLayer(layer)\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.layer.TiledImageLayer\nimport earth.worldwind.ogc.WmsLayerFactory\nimport earth.worldwind.util.Logger\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nclass WmsLayerTutorial(private val engine: WorldWind, private val scope: CoroutineScope) : AbstractTutorial() {\n\n    private var wmsLayer: TiledImageLayer? = null\n    private var job: Job? = null\n\n    override fun start() {\n        super.start()\n        job = scope.launch {\n            try {\n                // Create an OGC Web Map Service (WMS) layer to display the\n                // surface temperature layer from NASA's Near Earth Observations WMS.\n                WmsLayerFactory.createLayer(\"https://neo.gsfc.nasa.gov/wms/wms\", listOf(\"MOD_LSTD_CLIM_M\")).also {\n                    if (isActive) {\n                        wmsLayer = it\n                        engine.layers.addLayer(it)\n                        WorldWind.requestRedraw()\n                    }\n                }\n                Logger.log(Logger.INFO, \"WMS layer creation succeeded\")\n            } catch (e: Exception) {\n                Logger.log(Logger.ERROR, \"WMS layer creation failed\", e)\n            }\n        }\n        engine.camera.apply {\n            position.altitude = engine.distanceToViewGlobeExtents * 1.1\n            heading = Angle.ZERO\n            tilt = Angle.ZERO\n            roll = Angle.ZERO\n        }\n    }\n\n    override fun stop() {\n        super.stop()\n        job?.cancel()\n        wmsLayer?.let { engine.layers.removeLayer(it) }.also { wmsLayer = null }\n    }\n\n}","package earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.layer.TiledImageLayer\nimport earth.worldwind.ogc.WmtsLayerFactory\nimport earth.worldwind.util.Logger\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nclass WmtsLayerTutorial(private val engine: WorldWind, private val scope: CoroutineScope) : AbstractTutorial() {\n\n    private var wmtsLayer: TiledImageLayer? = null\n    private var job: Job? = null\n\n    override fun start() {\n        super.start()\n        job = scope.launch {\n            try {\n                // Create an OGC Web Map Tile Service (WMTS) layer to display Global Hillshade based on GMTED2010\n                WmtsLayerFactory.createLayer(\"https://tiles.geoservice.dlr.de/service/wmts\", \"hillshade\").also {\n                    if (isActive) {\n                        wmtsLayer = it\n                        engine.layers.addLayer(it)\n                        WorldWind.requestRedraw()\n                    }\n                }\n                Logger.log(Logger.INFO, \"WMTS layer creation succeeded\")\n            } catch (e: Exception) {\n                Logger.log(Logger.ERROR, \"WMTS layer creation failed\", e)\n            }\n        }\n        engine.camera.apply {\n            position.altitude = engine.distanceToViewGlobeExtents * 1.1\n            heading = Angle.ZERO\n            tilt = Angle.ZERO\n            roll = Angle.ZERO\n        }\n    }\n\n    override fun stop() {\n        super.stop()\n        job?.cancel()\n        wmtsLayer?.let { engine.layers.removeLayer(it) }.also { wmtsLayer = null }\n    }\n\n}","@file:JsExport\n\npackage earth.worldwind.tutorials\n\nimport earth.worldwind.WorldWindow\nimport earth.worldwind.gesture.SelectDragCallback\nimport earth.worldwind.globe.elevation.coverage.BasicElevationCoverage\nimport earth.worldwind.layer.BackgroundLayer\nimport earth.worldwind.layer.atmosphere.AtmosphereLayer\nimport earth.worldwind.layer.mercator.google.GoogleLayer\nimport earth.worldwind.layer.starfield.StarFieldLayer\nimport earth.worldwind.render.Renderable\nimport earth.worldwind.shape.Movable\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport org.w3c.dom.*\n\nfun main() {\n    // Register an event listener to be called when the page is loaded.\n    window.onload = {\n        // Create a WorldWindow for the canvas.\n        val wwd = WorldWindow(document.getElementById(\"WorldWindow\") as HTMLCanvasElement)\n        val select = document.getElementById(\"Tutorials\") as HTMLSelectElement\n        val actionsContainer = document.getElementById(\"Actions\") as HTMLDivElement\n        val tutorials = mapOf (\n            \"Basic globe\" to BasicTutorial(wwd.engine),\n            \"Set camera view\" to CameraViewTutorial(wwd.engine),\n            \"Set Look At\" to LookAtViewTutorial(wwd.engine),\n            \"Placemarks\" to PlacemarksTutorial(wwd.engine),\n            \"Paths\" to PathsTutorial(wwd.engine),\n            \"Polygons\" to PolygonsTutorial(wwd.engine),\n            \"Ellipses\" to EllipsesTutorial(wwd.engine),\n            // TODO Uncomment when ImageSource.fromLineStipple will be implemented\n            //\"Dash and fill\" to ShapeDashAndFillTutorial(wwd.engine),\n            \"Labels\" to LabelsTutorial(wwd.engine),\n            \"Sight line\" to SightlineTutorial(wwd.engine),\n            \"Surface image\" to SurfaceImageTutorial(wwd.engine),\n            \"Show tessellation\" to ShowTessellationTutorial(wwd.engine),\n            \"MGRS Graticule\" to MGRSGraticuleTutorial(wwd.engine),\n            // TODO Uncomment when TIFF elevation data parsing will be implemented\n            //\"WCS Elevation\" to WcsElevationTutorial(wwd.engine),\n            \"WMS Layer\" to WmsLayerTutorial(wwd.engine, wwd.mainScope),\n            \"WMTS Layer\" to WmtsLayerTutorial(wwd.engine, wwd.mainScope),\n        )\n        var currentTutorial: String? = null\n\n        // Add some image layers to the WorldWindow's globe.\n        wwd.engine.layers.apply {\n            addLayer(BackgroundLayer())\n            addLayer(GoogleLayer(GoogleLayer.Type.SATELLITE))\n            addLayer(StarFieldLayer())\n            addLayer(AtmosphereLayer())\n        }\n\n        // Add elevation coverage source\n        wwd.engine.globe.elevationModel.addCoverage(BasicElevationCoverage())\n\n        // Allow pick and move any movable object\n        wwd.selectDragDetector.callback = object : SelectDragCallback {\n            override fun canPickRenderable(renderable: Renderable) = renderable is Movable\n            override fun canMoveRenderable(renderable: Renderable) = renderable is Movable\n        }\n\n        fun callAction(actionName: String) { currentTutorial?.let { tutorials[it]?.runAction(actionName) } }\n\n        fun createAction(actionName: String) {\n            (document.createElement(\"button\") as HTMLButtonElement).apply {\n                innerHTML = actionName\n                actionsContainer.append(this)\n                onclick = { callAction(actionName) }\n            }\n        }\n\n        fun selectTutorial(tutorial: String) {\n            currentTutorial?.let { tutorials[it]?.stop() }\n            currentTutorial = tutorial\n            tutorials[tutorial]?.run {\n                start()\n                //TODO actions\n                actionsContainer.innerHTML = \"\"\n                actions?.forEach { action -> createAction(action) }\n                actionsContainer.hidden = actions?.isEmpty() != false\n            }\n            wwd.requestRedraw()\n        }\n\n        tutorials.keys.forEach {\n            (document.createElement(\"option\") as HTMLOptionElement).apply {\n                value = it\n                innerHTML = it\n                select.append(this)\n            }\n        }\n        select.onchange = { event -> selectTutorial((event.target as HTMLSelectElement).value) }\n\n        selectTutorial(tutorials.keys.first())\n    }\n}",null,null,"package earth.worldwind\n\nimport dev.icerock.moko.graphics.Color\nimport dev.icerock.moko.resources.AssetResource\nimport dev.icerock.moko.resources.ColorResource\nimport dev.icerock.moko.resources.FileResource\nimport dev.icerock.moko.resources.FontResource\nimport dev.icerock.moko.resources.ImageResource\nimport dev.icerock.moko.resources.PluralsResource\nimport dev.icerock.moko.resources.ResourceContainer\nimport dev.icerock.moko.resources.StringResource\nimport kotlin.String\nimport kotlin.collections.List\n\npublic actual object MR {\n  private val contentHash: String = \"6693571b7fe9ec2ccae31f7ea03935df\"\n\n  public actual object strings : ResourceContainer<StringResource> {\n    public override fun values(): List<StringResource> = listOf()\n  }\n\n  public actual object plurals : ResourceContainer<PluralsResource> {\n    public override fun values(): List<PluralsResource> = listOf()\n  }\n\n  public actual object images : ResourceContainer<ImageResource> {\n    public actual val default_image: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/default_image.png\\\")\") as String, fileName = \"default_image.png\")\n\n    public actual val dnb_land_ocean_ice_2012: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/dnb_land_ocean_ice_2012.png\\\")\") as String, fileName =\n        \"dnb_land_ocean_ice_2012.png\")\n\n    public actual val sun_texture: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/sun_texture.png\\\")\") as String, fileName = \"sun_texture.png\")\n\n    public actual val worldwind_worldtopobathy2004053: ImageResource = ImageResource(fileUrl =\n        js(\"require(\\\"images/worldwind_worldtopobathy2004053.png\\\")\") as String, fileName =\n        \"worldwind_worldtopobathy2004053.png\")\n\n    public override fun values(): List<ImageResource> = listOf(default_image,\n        dnb_land_ocean_ice_2012, sun_texture, worldwind_worldtopobathy2004053)\n  }\n\n  public actual object fonts : ResourceContainer<FontResource> {\n    public override fun values(): List<FontResource> = listOf()\n  }\n\n  public actual object files : ResourceContainer<FileResource> {\n    public actual val stars: FileResource = FileResource(fileUrl =\n        js(\"require(\\\"files/stars.json\\\")\") as String)\n\n    public override fun values(): List<FileResource> = listOf(stars)\n  }\n\n  public actual object colors : ResourceContainer<ColorResource> {\n    public override fun values(): List<ColorResource> = listOf()\n  }\n\n  public actual object assets : ResourceContainer<AssetResource> {\n    public override fun values(): List<AssetResource> = listOf()\n  }\n}\n","package earth.worldwind\n\nimport earth.worldwind.geom.Location\nimport earth.worldwind.geom.LookAt\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Vec3\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\nimport kotlinx.datetime.Clock\nimport kotlinx.datetime.Instant\nimport kotlin.math.abs\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.roundToInt\n\n/**\n * Incrementally and smoothly moves the Camera to a specified position.\n */\nopen class GoToAnimator(\n    /**\n     * The [WorldWind] engine associated with this animator.\n     */\n    protected val engine: WorldWind\n) {\n    /**\n     * The frequency in milliseconds at which to animate the position change.\n     */\n    var animationFrequency = 20L\n    /**\n     * The animation's duration, in milliseconds. When the distance is short, less than twice the viewport\n     * size, the travel time is reduced proportionally to the distance to travel. It therefore takes less\n     * time to move shorter distances.\n     */\n    var travelTime = 3000\n    /**\n     * Main scope to launch animation\n     */\n    protected val mainScope get() = engine.renderResourceCache.mainScope\n    /**\n     * A temp variable used to hold the current view as a look at during calculations. Using an object level temp\n     * property negates the need for ad-hoc allocations and reduces load on the garbage collector.\n     */\n    protected val lookAt = LookAt()\n    protected var animationJob: Job? = null\n    protected var completionCallback: ((GoToAnimator) -> Unit)? = null\n    protected var targetPosition: Position? = null\n    protected var startPosition: Position? = null\n    protected var startTime = Instant.DISTANT_PAST\n    protected var maxAltitude = 0.0\n    protected var maxAltitudeReachedTime = Instant.DISTANT_PAST\n    protected var panVelocity = 0.0\n    protected var rangeVelocity = 0.0\n\n    /**\n     * Stop the current animation.\n     */\n    fun cancel() { animationJob?.cancel() }\n\n    /**\n     * Moves the camera to a specified look at location or position.\n     *\n     * @param position The [Location] or [Position] to move the camera to. If this\n     * argument contains an \"altitude\" property, as [Position] does, the end point of the navigation is\n     * at the specified altitude. Otherwise, the end point is at the current altitude of the camera.\n     * @param completionCallback If not null, specifies a function to call when the animation completes.\n     * The completion callback is called with a single argument, this animator.\n     */\n    open fun goTo(position: Location, completionCallback: ((GoToAnimator) -> Unit)? = null) {\n        this.completionCallback = completionCallback\n\n        engine.cameraAsLookAt(lookAt)\n        // Capture the target position and determine its altitude.\n        val targetPosition = Position(\n            position.latitude, position.longitude, if(position is Position) position.altitude else lookAt.range\n        ).also { targetPosition = it }\n\n        // Capture the start position and start time.\n        val startPosition = Position(lookAt.position.latitude, lookAt.position.longitude, lookAt.range).also { startPosition = it }\n        startTime = Clock.System.now()\n\n        // Determination of the pan and range velocities requires the distance to be travelled.\n        var animationDuration = travelTime\n        val panDistance = startPosition.greatCircleDistance(targetPosition)\n\n        // Determine how high we need to go to give the user context. The max altitude computed is approximately\n        // that needed to fit the start and end positions in the same viewport assuming a 45 degree field of view.\n        val pA = engine.globe.geographicToCartesian(startPosition.latitude, startPosition.longitude, 0.0, Vec3())\n        val pB = engine.globe.geographicToCartesian(targetPosition.latitude, targetPosition.longitude, 0.0, Vec3())\n        maxAltitude = pA.distanceTo(pB)\n\n        // Determine an approximate viewport size in radians in order to determine whether we actually change\n        // the range as we pan to the new location. We don't want to change the range if the distance between\n        // the start and target positions is small relative to the current viewport.\n        val viewportSize = engine.pixelSizeAtDistance(startPosition.altitude) *\n                engine.viewport.width / engine.globe.equatorialRadius\n\n        // Start and target positions are close, so don't back out.\n        if (panDistance <= 2 * viewportSize) maxAltitude = startPosition.altitude\n\n        // We need to capture the time the max altitude is reached in order to begin decreasing the range\n        // midway through the animation. If we're already above the max altitude, then that time is now since\n        // we don't back out if the current altitude is above the computed max altitude.\n        maxAltitudeReachedTime = if (maxAltitude <= lookAt.range) Clock.System.now() else Instant.DISTANT_PAST\n\n        // Compute the total range to travel since we need that to compute the range velocity.\n        // Note that the range velocity and pan velocity are computed so that the respective animations, which\n        // operate independently, finish at the same time.\n        val rangeDistance = if (maxAltitude > startPosition.altitude) {\n            max(0.0, maxAltitude - startPosition.altitude) + abs(targetPosition.altitude - maxAltitude)\n        } else {\n            abs(targetPosition.altitude - startPosition.altitude)\n        }\n\n        // Determine which distance governs the animation duration.\n        val animationDistance = max(panDistance, rangeDistance / engine.globe.equatorialRadius)\n        if (animationDistance == 0.0) return // current and target positions are the same\n\n        if (animationDistance < 2 * viewportSize) {\n            // Start and target positions are close, so reduce the travel time based on the\n            // distance to travel relative to the viewport size.\n            animationDuration = min(((animationDistance / viewportSize) * travelTime).roundToInt(), travelTime)\n        }\n\n        // Don't let the animation duration go to 0.\n        animationDuration = max(1, animationDuration)\n\n        // Determine the pan velocity, in radians per millisecond.\n        panVelocity = panDistance / animationDuration\n\n        // Determine the range velocity, in meters per millisecond.\n        rangeVelocity = rangeDistance / animationDuration // meters per millisecond\n\n        // Set up the animation timer.\n        setUpAnimationTimer()\n    }\n\n    protected open fun setUpAnimationTimer() {\n        animationJob?.cancel()\n        animationJob = mainScope.launch {\n            delay(animationFrequency)\n            if (!isActive || !update()) completionCallback?.invoke(this@GoToAnimator) else setUpAnimationTimer()\n        }\n    }\n\n    /**\n     * This is the timer callback function. It invokes the range animator and the pan animator.\n     */\n    protected open fun update(): Boolean {\n        val currentPosition = Position(lookAt.position.latitude, lookAt.position.longitude, lookAt.range)\n        val continueUpdateRange = updateRange(currentPosition)\n        val continueUpdateLocation = updateLocation(currentPosition)\n        WorldWind.requestRedraw()\n        return continueUpdateRange || continueUpdateLocation\n    }\n\n    /**\n     * This function animates the range.\n     */\n    protected open fun updateRange(currentPosition: Position): Boolean {\n        val startPosition = startPosition ?: return false\n        val targetPosition = targetPosition ?: return false\n\n        // If we haven't reached the maximum altitude, then step-wise increase it. Otherwise, step-wise change\n        // the range towards the target altitude.\n        val continueAnimation = if (maxAltitudeReachedTime == Instant.DISTANT_PAST) {\n            val elapsedTime = Clock.System.now() - startTime\n            val nextRange = min(startPosition.altitude + rangeVelocity * elapsedTime.inWholeMilliseconds, maxAltitude)\n            // We're done if we get withing 1 meter of the desired range.\n            if (abs(lookAt.range - nextRange) < 1) maxAltitudeReachedTime = Clock.System.now()\n            lookAt.range = nextRange\n            true\n        } else {\n            val elapsedTime = Clock.System.now() - maxAltitudeReachedTime\n            val nextRange = if (maxAltitude > targetPosition.altitude) {\n                max(maxAltitude - (rangeVelocity * elapsedTime.inWholeMilliseconds), targetPosition.altitude)\n            } else {\n                min(maxAltitude + (rangeVelocity * elapsedTime.inWholeMilliseconds), targetPosition.altitude)\n            }\n            lookAt.range = nextRange\n            // We're done if we get withing 1 meter of the desired range.\n            abs(lookAt.range - targetPosition.altitude) > 1\n        }\n\n        engine.cameraFromLookAt(lookAt)\n\n        return continueAnimation\n    }\n\n    /**\n     * This function animates the pan to the desired location.\n     */\n    protected open fun updateLocation(currentPosition: Position): Boolean {\n        val startPosition = startPosition ?: return false\n        val targetPosition = targetPosition ?: return false\n        val elapsedTime = Clock.System.now() - startTime\n        val distanceTravelled = startPosition.greatCircleDistance(currentPosition)\n        val distanceRemaining = currentPosition.greatCircleDistance(targetPosition)\n        val azimuthToTarget = currentPosition.greatCircleAzimuth(targetPosition)\n        val distanceForNow = panVelocity * elapsedTime.inWholeMilliseconds\n        val nextDistance = min(distanceForNow - distanceTravelled, distanceRemaining)\n        val nextLocation = currentPosition.greatCircleLocation(azimuthToTarget, nextDistance, Location())\n        var locationReached = false\n\n        lookAt.position.latitude = nextLocation.latitude\n        lookAt.position.longitude = nextLocation.longitude\n        engine.cameraFromLookAt(lookAt)\n\n        // We're done if we're within a meter of the desired location.\n        if (nextDistance < 1.0 / engine.globe.equatorialRadius) locationReached = true\n\n        return !locationReached\n    }\n}","package earth.worldwind\n\nimport earth.worldwind.geom.Position\nimport earth.worldwind.layer.Layer\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Renderable\nimport kotlin.jvm.JvmStatic\nimport kotlin.math.roundToInt\n\nopen class PickedObject protected constructor(\n    val identifier: Int, val userObject: Any, val layer: Layer? = null, val terrainPosition: Position? = null\n) {\n    var isOnTop = false\n        protected set\n    val isTerrain get() = terrainPosition != null\n\n    companion object {\n        @JvmStatic\n        fun fromRenderable(identifier: Int, renderable: Renderable, layer: Layer) =\n            PickedObject(identifier, renderable.pickDelegate ?: renderable, layer)\n\n        @JvmStatic\n        fun fromTerrain(identifier: Int, position: Position): PickedObject {\n            val positionCopy = Position(position)\n            return PickedObject(identifier, positionCopy, terrainPosition = positionCopy)\n        }\n\n        @JvmStatic\n        fun identifierToUniqueColor(identifier: Int, result: Color): Color {\n            val r8 = identifier shr 16 and 0xFF\n            val g8 = identifier shr 8 and 0xFF\n            val b8 = identifier and 0xFF\n            result.red = r8 / 0xFF.toFloat()\n            result.green = g8 / 0xFF.toFloat()\n            result.blue = b8 / 0xFF.toFloat()\n            result.alpha = 1f\n            return result\n        }\n\n        @JvmStatic\n        fun uniqueColorToIdentifier(color: Color): Int {\n            val r8 = (color.red * 0xFF).roundToInt()\n            val g8 = (color.green * 0xFF).roundToInt()\n            val b8 = (color.blue * 0xFF).roundToInt()\n            return r8 shl 16 or (g8 shl 8) or b8\n        }\n    }\n\n    internal fun markOnTop() { isOnTop = true }\n\n    override fun toString() = \"PickedObject(isOnTop=$isOnTop, identifier=$identifier, userObject=$userObject, layer=$layer, terrainPosition=$terrainPosition)\"\n}","package earth.worldwind\n\nopen class PickedObjectList {\n    protected val objectsById = mutableMapOf<Int, PickedObject>()\n    val objects get() = objectsById.values\n    val count get() = objectsById.size\n    val topPickedObject get() = objects.firstOrNull { po -> po.isOnTop }\n    val terrainPickedObject get() = objects.firstOrNull { po -> po.isTerrain }\n    val hasNonTerrainObjects get() = objects.firstOrNull { po -> !po.isTerrain } != null\n\n    fun offerPickedObject(pickedObject: PickedObject) { objectsById[pickedObject.identifier] = pickedObject }\n\n    fun pickedObjectWithId(identifier: Int) = objectsById[identifier]\n\n    fun clearPickedObjects() = objectsById.clear()\n\n    fun keepTopAndTerrainObjects() = objectsById.entries.removeAll { e -> !e.value.isOnTop && !e.value.isTerrain }\n\n    override fun toString() = objects.joinToString(\", \", \"PickedObjectList{\", \"}\") { po -> po.toString() }\n}",null,"package earth.worldwind\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.frame.BasicFrameController\nimport earth.worldwind.frame.Frame\nimport earth.worldwind.frame.FrameController\nimport earth.worldwind.frame.FrameMetrics\nimport earth.worldwind.geom.*\nimport earth.worldwind.geom.Angle.Companion.radians\nimport earth.worldwind.globe.Globe\nimport earth.worldwind.globe.projection.Wgs84Projection\nimport earth.worldwind.globe.terrain.BasicTessellator\nimport earth.worldwind.globe.terrain.Tessellator\nimport earth.worldwind.layer.LayerList\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.RenderResourceCache\nimport earth.worldwind.util.Logger\nimport earth.worldwind.util.kgl.*\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.datetime.TimeZone\nimport kotlin.jvm.JvmOverloads\nimport kotlin.jvm.JvmStatic\nimport kotlin.math.*\n\n/**\n * Main WorldWind model, containing globe, terrain, renderable layers, camera, viewport and frame rendering logic.\n */\nopen class WorldWind @JvmOverloads constructor(\n    /**\n     * Platform-dependent OpenGL implementation\n     */\n    gl: Kgl,\n    /**\n     * Platform-dependent GPU resource cache manager.\n     */\n    var renderResourceCache: RenderResourceCache,\n    /**\n     * Planet or celestial object approximated by a reference ellipsoid and elevation models.\n     */\n    var globe: Globe = Globe(Ellipsoid.WGS84, Wgs84Projection()),\n    /**\n     * Terrain model tessellator.\n     */\n    var tessellator: Tessellator = BasicTessellator(),\n    /**\n     * Frame rendering and drawing logic implementation.\n     */\n    var frameController: FrameController = BasicFrameController(),\n    /**\n     * Helper class implementing [FrameMetrics] to measure performance.\n     */\n    var frameMetrics: FrameMetrics? = null\n) {\n    /**\n     * List of renderable object layers to be displayed by this WorldWind.\n     */\n    var layers = LayerList()\n    /**\n     * Current user view point parameters: location, altitude, orientation and field of view.\n     */\n    var camera = Camera()\n    /**\n     * The [GoToAnimator] used by this WorldWindow to respond to its goTo method.\n     */\n    val goToAnimator = GoToAnimator(this)\n    /**\n     * Screen area occupied by this WorldWind.\n     */\n    val viewport = Viewport()\n    /**\n     * Keep pixel scale when changing the height of viewport by adapting field of view\n     */\n    var isKeepScale = true\n    /**\n     * Scale of logical pixel size to hardware display pixel size. Used to adopt general level of details to screen density.\n     */\n    var densityFactor = 1f\n        set(value) {\n            require(value > 0) {\n                Logger.logMessage(\n                    Logger.ERROR, \"WorldWind\", \"setDensityFactor\", \"invalidDensityFactor\"\n                )\n            }\n            field = value\n        }\n    /**\n     * Vertical exaggeration (VE) is a scale that is used to emphasize vertical features, which might be too small\n     * to identify relative to the horizontal scale.\n     */\n    var verticalExaggeration = 1.0\n        set(value) {\n            require(value > 0) {\n                Logger.logMessage(\n                    Logger.ERROR, \"WorldWind\", \"setVerticalExaggeration\", \"invalidVerticalExaggeration\"\n                )\n            }\n            field = value\n        }\n    /**\n     * Object altitude for horizon distance. Used to control when objects are clipped by the far plain behind the globe.\n     */\n    var atmosphereAltitude = 160000.0\n    /**\n     * Context related to frame rendering phase\n     */\n    protected val rc = RenderContext()\n    /**\n     * Context related to frame drawing phase\n     */\n    protected val dc = DrawContext(gl)\n    /**\n     * The number of bits in the depth buffer associated with this WorldWind.\n     */\n    protected var depthBits = 0\n    private val scratchModelview = Matrix4()\n    private val scratchProjection = Matrix4()\n    private val scratchPoint = Vec3()\n    private val scratchRay = Line()\n\n    init {\n        // Initialize default camera location based on user time zone\n        val initLocation = Location.fromTimeZone(TimeZone.currentSystemDefault())\n        // Fit globe to screen vertically with 10% margin.\n        val initAltitude = distanceToViewGlobeExtents * 1.1\n        camera.position.set(initLocation.latitude, initLocation.longitude, initAltitude)\n    }\n\n    /**\n     * Reset internal WorldWind state to initial values.\n     */\n    open fun reset() {\n        // Clear the render resource cache; it's entries are now invalid.\n        renderResourceCache.clear()\n\n        // Invalidate elevation model.\n        globe.elevationModel.invalidate()\n\n        // Clear the viewport dimensions.\n        viewport.setEmpty()\n\n        // Reset screen density factor.\n        densityFactor = 1f\n    }\n\n    /**\n     * Specify the default WorldWind OpenGL state.\n     */\n    open fun setupDrawContext() {\n        dc.gl.enable(GL_BLEND)\n        dc.gl.enable(GL_CULL_FACE)\n        dc.gl.enable(GL_DEPTH_TEST)\n        dc.gl.enableVertexAttribArray(0)\n        dc.gl.disable(GL_DITHER)\n        dc.gl.blendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA)\n        dc.gl.depthFunc(GL_LEQUAL)\n\n        // Clear any cached OpenGL resources and state, which are now invalid.\n        dc.contextLost()\n\n        // Set the WorldWindow's depth bits.\n        depthBits = dc.gl.getParameteri(GL_DEPTH_BITS)\n    }\n\n    /**\n     * Apply new viewport dimensions.\n     */\n    open fun setupViewport(width: Int, height: Int) {\n        dc.gl.viewport(0, 0, width, height)\n\n        // Keep pixel scale by adapting field of view on view port resize\n        if (isKeepScale && viewport.height != 0) {\n            try {\n                camera.fieldOfView *= height / viewport.height.toDouble()\n            } catch (ignore: IllegalArgumentException) {\n                // Keep original field of view in case new one does not fit requirements\n            }\n        }\n\n        viewport.set(0, 0, width, height)\n    }\n\n    /**\n     * Get look at orientation and range based on current camera position and specified geographic position\n     *\n     * @param result Pre-allocated look at object\n     * @return Look at orientation and range based on current camera position and specified geographic position\n     */\n    open fun cameraAsLookAt(result: LookAt): LookAt {\n        if (viewport.isEmpty || !pickTerrainPosition(viewport.width / 2.0, viewport.height / 2.0, result.position)) {\n            // Use point on horizon as a backup\n            cameraToViewingTransform(scratchModelview)\n            scratchModelview.extractEyePoint(scratchRay.origin)\n            scratchModelview.extractForwardVector(scratchRay.direction)\n            scratchRay.pointAt(globe.horizonDistance(camera.position.altitude), scratchPoint)\n            globe.cartesianToGeographic(scratchPoint.x, scratchPoint.y, scratchPoint.z, result.position)\n        }\n        globe.cartesianToLocalTransform(scratchPoint.x, scratchPoint.y, scratchPoint.z, scratchProjection)\n        scratchModelview.multiplyByMatrix(scratchProjection)\n        result.range = -scratchModelview.m[11]\n        result.heading = scratchModelview.extractHeading(camera.roll) // disambiguate heading and roll\n        result.tilt = scratchModelview.extractTilt()\n        result.roll = camera.roll // roll passes straight through\n        return result\n    }\n\n    /**\n     * Translate the original view's modelview matrix to account for the gesture's change.\n     *\n     * @param lookAt the look at position, orientation and range to be modified by translation.\n     * @param fromPoint the start point of translation.\n     * @param toPoint the finish point of translation.\n     */\n    open fun moveLookAt(lookAt: LookAt, fromPoint: Vec2, toPoint: Vec2) {\n        // Convert screen points to points on the globe ellipsoid. Do not transform if any point is outside the globe.\n        val from = Vec3()\n        if (!rayThroughScreenPoint(fromPoint.x, fromPoint.y, scratchRay) || !globe.intersect(scratchRay, from)) return\n        val to = Vec3()\n        if (!rayThroughScreenPoint(toPoint.x, toPoint.y, scratchRay) || !globe.intersect(scratchRay, to)) return\n\n        // Transform the original modelview matrix according to specified points.\n        lookAtToViewingTransform(lookAt, scratchModelview)\n        scratchModelview.multiplyByTranslation(to.x - from.x, to.y - from.y, to.z - from.z)\n\n        // Compute the globe point at the screen center from the perspective of the transformed view.\n        scratchModelview.extractEyePoint(scratchRay.origin)\n        scratchModelview.extractForwardVector(scratchRay.direction)\n        if (!globe.intersect(scratchRay, scratchPoint)) return\n        globe.cartesianToGeographic(scratchPoint.x, scratchPoint.y, scratchPoint.z, lookAt.position)\n\n        // Convert the transformed modelview matrix to view properties.\n        globe.cartesianToLocalTransform(scratchPoint.x, scratchPoint.y, scratchPoint.z, scratchProjection)\n        scratchModelview.multiplyByMatrix(scratchProjection)\n        lookAt.range = -scratchModelview.m[11]\n        lookAt.heading = scratchModelview.extractHeading(lookAt.roll) // disambiguate heading and roll\n        lookAt.tilt = scratchModelview.extractTilt()\n        lookAt.roll = lookAt.roll // roll passes straight through\n    }\n\n    /**\n     * Set camera position and orientation, based on look at position, orientation and range\n     *\n     * @param lookAt Look at position, orientation and range\n     */\n    open fun cameraFromLookAt(lookAt: LookAt) {\n        applyLookAtLimits(lookAt)\n        lookAtToViewingTransform(lookAt, scratchModelview)\n        scratchModelview.extractEyePoint(scratchPoint)\n        globe.cartesianToGeographic(scratchPoint.x, scratchPoint.y, scratchPoint.z, camera.position)\n        globe.cartesianToLocalTransform(scratchPoint.x, scratchPoint.y, scratchPoint.z, scratchProjection)\n        scratchModelview.multiplyByMatrix(scratchProjection)\n        camera.altitudeMode = AltitudeMode.ABSOLUTE // Calculated position is absolute\n        camera.heading = scratchModelview.extractHeading(lookAt.roll) // disambiguate heading and roll\n        camera.tilt = scratchModelview.extractTilt()\n        camera.roll = lookAt.roll // roll passes straight through\n\n        // Check if camera altitude is not under the surface\n        val position = camera.position\n        val elevation = globe.getElevation(\n            position.latitude, position.longitude\n        ) * verticalExaggeration + COLLISION_THRESHOLD\n        if (elevation > position.altitude) {\n            // Set camera altitude above the surface\n            position.altitude = elevation\n            // Compute new camera point\n            globe.geographicToCartesian(position.latitude, position.longitude, position.altitude, scratchPoint)\n            // Compute look at point\n            globe.geographicToCartesian(\n                lookAt.position.latitude,\n                lookAt.position.longitude,\n                lookAt.position.altitude,\n                scratchRay.origin\n            )\n            // Compute normal to globe in look at point\n            globe.geographicToCartesianNormal(lookAt.position.latitude, lookAt.position.longitude, scratchRay.direction)\n            // Calculate tilt angle between new camera point and look at point\n            scratchPoint.subtract(scratchRay.origin).normalize()\n            val dot = scratchRay.direction.dot(scratchPoint)\n            if (dot >= -1 && dot <= 1) camera.tilt = acos(dot).radians\n        }\n    }\n\n    /**\n     * More efficient way to determine terrain position at screen point using terrain from last rendered frame.\n     *\n     * @param x the screen point's X coordinate\n     * @param y the screen point's Y coordinate\n     * @param result a pre-allocated [Position] in which to store the computed geographic position\n     *\n     * @return true if the screen point could be converted; false if the screen point is not on the terrain\n     */\n    open fun pickTerrainPosition(x: Double, y: Double, result: Position) =\n        if (rayThroughScreenPoint(x, y, scratchRay) && tessellator.lastTerrain.intersect(scratchRay, scratchPoint)) {\n            globe.cartesianToGeographic(scratchPoint.x, scratchPoint.y, scratchPoint.z, result)\n            true\n        } else false\n\n    /**\n     * Transforms a Cartesian coordinate point to viewport coordinates.\n     * <br>\n     * This stores the converted point in the result argument, and returns a boolean value indicating whether the\n     * converted is successful. This returns false if the Cartesian point is clipped by either the WorldWindow's near\n     * clipping plane or far clipping plane.\n     *\n     * @param point  the Cartesian point in meters\n     * @param result a pre-allocated [Vec2] in which to return the screen point\n     *\n     * @return true if the transformation is successful, otherwise false\n     */\n    fun cartesianToScreenPoint(point: Vec3, result: Vec2) = cartesianToScreenPoint(point.x, point.y, point.z, result)\n\n    /**\n     * Transforms a Cartesian coordinate point to viewport coordinates.\n     * <br>\n     * This stores the converted point in the result argument, and returns a boolean value indicating whether the\n     * converted is successful. This returns false if the Cartesian point is clipped by either the WorldWindow's near\n     * clipping plane or far clipping plane.\n     *\n     * @param x      the Cartesian point's x component in meters\n     * @param y      the Cartesian point's y component in meters\n     * @param z      the Cartesian point's z component in meters\n     * @param result a pre-allocated [Vec2] in which to return the screen point\n     *\n     * @return true if the transformation is successful, otherwise false\n     */\n    open fun cartesianToScreenPoint(x: Double, y: Double, z: Double, result: Vec2): Boolean {\n        // Compute the WorldWindow's modelview-projection matrix.\n        computeViewingTransform(scratchProjection, scratchModelview)\n        scratchProjection.multiplyByMatrix(scratchModelview)\n\n        // Transform the Cartesian point to OpenGL screen coordinates. Complete the transformation by converting to\n        // viewport coordinates and discarding the screen Z component.\n        if (scratchProjection.project(x, y, z, viewport, scratchPoint)) {\n            result.x = scratchPoint.x\n            result.y = viewport.height - scratchPoint.y\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Transforms a geographic position to viewport coordinates.\n     * <br>\n     * This stores the converted point in the result argument, and returns a boolean value indicating whether the\n     * converted is successful. This returns false if the Cartesian point is clipped by either of the WorldWindow's\n     * near clipping plane or far clipping plane.\n     *\n     * @param position  the geographic position\n     * @param result    a pre-allocated [Vec2] in which to return the screen point\n     *\n     * @return true if the transformation is successful, otherwise false\n     */\n    fun geographicToScreenPoint(position: Position, result: Vec2) =\n        geographicToScreenPoint(position.latitude, position.longitude, position.altitude, result)\n\n    /**\n     * Transforms a geographic position to viewport coordinates.\n     * <br>\n     * This stores the converted point in the result argument, and returns a boolean value indicating whether the\n     * converted is successful. This returns false if the Cartesian point is clipped by either of the WorldWindow's\n     * near clipping plane or far clipping plane.\n     *\n     * @param latitude  the position's latitude\n     * @param longitude the position's longitude\n     * @param altitude  the position's altitude in meters\n     * @param result    a pre-allocated [Vec2] in which to return the screen point\n     *\n     * @return true if the transformation is successful, otherwise false\n     */\n    open fun geographicToScreenPoint(\n        latitude: Angle, longitude: Angle, altitude: Double, result: Vec2\n    ): Boolean {\n        // Convert the position from geographic coordinates to Cartesian coordinates.\n        globe.geographicToCartesian(latitude, longitude, altitude, scratchPoint)\n\n        // Convert the position from Cartesian coordinates to screen coordinates.\n        return cartesianToScreenPoint(scratchPoint, result)\n    }\n\n    /**\n     * Converts a screen point to the geographic coordinates on the globe ellipsoid, ignoring terrain altitude.\n     *\n     * @param x      the screen point's X coordinate\n     * @param y      the screen point's Y coordinate\n     * @param result Pre-allocated Position receives the geographic coordinates\n     *\n     * @return true if the screen point could be converted; false if the screen point is not on the globe\n     */\n    open fun screenPointToGroundPosition(x: Double, y: Double, result: Position) =\n        if (rayThroughScreenPoint(x, y, scratchRay) && globe.intersect(scratchRay, scratchPoint)) {\n            globe.cartesianToGeographic(scratchPoint.x, scratchPoint.y, scratchPoint.z, result)\n            true\n        } else false\n\n    /**\n     * Computes a Cartesian coordinate ray that passes through a screen point.\n     *\n     * @param x      the screen point's X coordinate\n     * @param y      the screen point's Y coordinate\n     * @param result a pre-allocated Line in which to return the computed ray\n     *\n     * @return the result set to the computed ray in Cartesian coordinates\n     */\n    open fun rayThroughScreenPoint(x: Double, y: Double, result: Line): Boolean {\n        // Compute the inverse modelview-projection matrix corresponding to the WorldWindow's current Camera state.\n        computeViewingTransform(scratchProjection, scratchModelview)\n        scratchProjection.multiplyByMatrix(scratchModelview).invert()\n\n        // Convert from viewport coordinates to OpenGL screen coordinates by inverting the Y axis.\n        // Transform the screen point to Cartesian coordinates at the near and far clip planes, store the result in the\n        // ray's origin and direction, respectively. Complete the ray direction by subtracting the near point from the\n        // far point and normalizing.\n        if (scratchProjection.unProject(x, viewport.height - y, viewport, result.origin, result.direction)) {\n            result.direction.subtract(result.origin).normalize()\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Returns the height of a pixel at a given distance from the eye point. This method assumes the model of a screen\n     * composed of rectangular pixels, where pixel coordinates denote infinitely thin space between pixels. The units of\n     * the returned size are in meters per pixel.\n     * <br>\n     * The result of this method is undefined if the distance is negative.\n     *\n     * @param distance the distance from the eye point in meters\n     *\n     * @return the pixel height in meters per pixel\n     */\n    open fun pixelSizeAtDistance(distance: Double): Double {\n        val tanFovY2 = tan(camera.fieldOfView.inRadians * 0.5)\n        val frustumHeight = 2 * distance * tanFovY2\n        return frustumHeight / viewport.height\n    }\n\n    /**\n     * Returns the minimum distance from the globe's surface necessary to make the globe's extents visible in this World\n     * Window.\n     */\n    val distanceToViewGlobeExtents get(): Double {\n        val sinFovY2 = sin(camera.fieldOfView.inRadians * 0.5)\n        val radius = globe.equatorialRadius\n        return radius / sinFovY2 - radius\n    }\n\n    open fun renderFrame(frame: Frame): Boolean {\n        // Mark the beginning of a frame render.\n        val pickMode = frame.isPickMode\n        if (!pickMode) frameMetrics?.beginRendering(rc)\n\n        // Set up the render context according to the WorldWindow's current state.\n        rc.globe = globe\n        rc.terrainTessellator = tessellator\n        rc.layers = layers\n        rc.camera = camera\n        rc.horizonDistance = globe.horizonDistance(camera.position.altitude)\n        globe.geographicToCartesian(\n            camera.position.latitude, camera.position.longitude, camera.position.altitude, rc.cameraPoint\n        )\n        rc.renderResourceCache = renderResourceCache\n        rc.verticalExaggeration = verticalExaggeration\n        rc.densityFactor = densityFactor\n\n        // Configure the frame's Cartesian modelview matrix and eye coordinate projection matrix.\n        computeViewingTransform(frame.projection, frame.modelview)\n        frame.viewport.copy(viewport)\n//        frame.infiniteProjection.setToInfiniteProjection(viewport.width, viewport.height, camera.fieldOfView, 1.0)\n//        frame.infiniteProjection.multiplyByMatrix(frame.modelview)\n        rc.viewport.copy(frame.viewport)\n        rc.projection.copy(frame.projection)\n        rc.modelview.copy(frame.modelview)\n        rc.modelviewProjection.setToMultiply(frame.projection, frame.modelview)\n        if (pickMode) rc.frustum.setToModelviewProjection(frame.projection, frame.modelview, frame.viewport, frame.pickViewport!!)\n        else rc.frustum.setToModelviewProjection(frame.projection, frame.modelview, frame.viewport)\n\n        // Accumulate the Drawables in the frame's drawable queue and drawable terrain data structures.\n        rc.drawableQueue = frame.drawableQueue\n        rc.drawableTerrain = frame.drawableTerrain\n        rc.pickedObjects = frame.pickedObjects\n        rc.pickDeferred = frame.pickDeferred\n        rc.pickViewport = frame.pickViewport\n        rc.pickPoint = frame.pickPoint\n        rc.pickRay = frame.pickRay\n        rc.isPickMode = frame.isPickMode\n\n        // Let the frame controller render the WorldWindow's current state.\n        frameController.renderFrame(rc)\n\n        // Propagate redraw requests submitted during rendering.\n        val isRedrawRequested = !pickMode && rc.isRedrawRequested\n\n        // Mark the end of a frame render.\n        if (!pickMode) frameMetrics?.endRendering(rc)\n\n        // Reset the render context's state in preparation for the next frame.\n        rc.reset()\n\n        return isRedrawRequested\n    }\n\n    open fun drawFrame(frame: Frame) {\n        // Mark the beginning of a frame draw.\n        val pickMode = frame.isPickMode\n        if (!pickMode) frameMetrics?.beginDrawing(dc)\n\n        // Set up the draw context according to the frame's current state.\n        dc.eyePoint.copy(frame.modelview.extractEyePoint(dc.eyePoint))\n        dc.viewport.copy(frame.viewport)\n        dc.projection.copy(frame.projection)\n        dc.modelview.copy(frame.modelview)\n        dc.modelviewProjection.setToMultiply(frame.projection, frame.modelview)\n//        dc.infiniteProjection.copy(frame.infiniteProjection)\n        dc.screenProjection.setToScreenProjection(\n            frame.viewport.width.toDouble(), frame.viewport.height.toDouble()\n        )\n\n        // Process the drawables in the frame's drawable queue and drawable terrain data structures.\n        dc.drawableQueue = frame.drawableQueue\n        dc.drawableTerrain = frame.drawableTerrain\n        dc.pickedObjects = frame.pickedObjects\n        dc.pickViewport = frame.pickViewport\n        dc.pickPoint = frame.pickPoint\n        dc.isPickMode = frame.isPickMode\n\n        // Let the frame controller draw the frame.\n        frameController.drawFrame(dc)\n\n        // Increment render resource cache age on each frame\n        renderResourceCache.incAge()\n\n        // Release resources evicted during the previous frame.\n        renderResourceCache.releaseEvictedResources(dc)\n\n        // Mark the end of a frame draw.\n        if (!pickMode) frameMetrics?.endDrawing(dc)\n\n        // Reset the draw context's state in preparation for the next frame.\n        dc.reset()\n    }\n\n    protected open fun computeViewingTransform(projection: Matrix4, modelview: Matrix4) {\n        // Compute the clip plane distances. The near distance is set to a large value that does not clip the globe's\n        // surface. The far distance is set to the smallest value that does not clip the atmosphere.\n        val eyeAltitude = camera.position.altitude\n        val eyeHorizon = globe.horizonDistance(eyeAltitude)\n        val atmosphereHorizon = globe.horizonDistance(atmosphereAltitude)\n\n        // The far distance is set to the smallest value that does not clip the atmosphere.\n        var far = eyeHorizon + atmosphereHorizon\n        if (far < 1e3) far = 1e3\n\n        //The near distance is set to a large value that does not clip the globe's surface.\n        val maxDepthValue = (1 shl depthBits) - 1\n        val farResolution = 10.0\n        var near = far / (maxDepthValue / (1 - farResolution / far) - maxDepthValue + 1)\n\n        // Prevent the near clip plane from intersecting the terrain.\n        val distanceToSurface = eyeAltitude - globe.getElevation(\n            camera.position.latitude, camera.position.longitude\n        ) * verticalExaggeration\n        if (distanceToSurface > 0) {\n            val tanHalfFov = tan(0.5 * camera.fieldOfView.inRadians)\n            val maxNearDistance = distanceToSurface / (2 * sqrt(2 * tanHalfFov * tanHalfFov + 1))\n            if (near > maxNearDistance) near = maxNearDistance\n        }\n        if (near < 1) near = 1.0\n\n        // Compute a perspective projection matrix given the WorldWindow's viewport, field of view, and clip distances.\n        projection.setToPerspectiveProjection(viewport.width, viewport.height, camera.fieldOfView, near, far)\n\n        // Compute a Cartesian transform matrix from the Camera.\n        cameraToViewingTransform(modelview)\n    }\n\n    protected open fun cameraToViewingTransform(result: Matrix4): Matrix4 {\n        // Transform by the local cartesian transform at the camera's position.\n        geographicToCartesianTransform(camera.position, camera.altitudeMode, result)\n\n        // Transform by the heading, tilt and roll.\n        result.multiplyByRotation(0.0, 0.0, 1.0, -camera.heading) // rotate clockwise about the Z axis\n        result.multiplyByRotation(1.0, 0.0, 0.0, camera.tilt) // rotate counter-clockwise about the X axis\n        result.multiplyByRotation(0.0, 0.0, 1.0, camera.roll) // rotate counter-clockwise about the Z axis (again)\n\n        // Make the transform a viewing matrix.\n        result.invertOrthonormal()\n        return result\n    }\n\n    protected open fun lookAtToViewingTransform(lookAt: LookAt, result: Matrix4): Matrix4 {\n        // Transform by the local cartesian transform at the look-at's position.\n        geographicToCartesianTransform(lookAt.position, lookAt.altitudeMode, result)\n\n        // Transform by the heading and tilt.\n        result.multiplyByRotation(0.0, 0.0, 1.0, -lookAt.heading) // rotate clockwise about the Z axis\n        result.multiplyByRotation(1.0, 0.0, 0.0, lookAt.tilt) // rotate counter-clockwise about the X axis\n        result.multiplyByRotation(0.0, 0.0, 1.0, lookAt.roll) // rotate counter-clockwise about the Z axis (again)\n\n        // Transform by the range.\n        result.multiplyByTranslation(0.0, 0.0, lookAt.range)\n\n        // Make the transform a viewing matrix.\n        result.invertOrthonormal()\n        return result\n    }\n\n    protected open fun geographicToCartesianTransform(position: Position, altitudeMode: AltitudeMode, result: Matrix4): Matrix4 {\n        when (altitudeMode) {\n            AltitudeMode.ABSOLUTE -> globe.geographicToCartesianTransform(\n                position.latitude, position.longitude, position.altitude, result\n            )\n            AltitudeMode.CLAMP_TO_GROUND -> globe.geographicToCartesianTransform(\n                position.latitude, position.longitude, globe.getElevation(\n                    position.latitude, position.longitude\n                ) * verticalExaggeration, result\n            )\n            AltitudeMode.RELATIVE_TO_GROUND -> globe.geographicToCartesianTransform(\n                position.latitude, position.longitude, (position.altitude + globe.getElevation(\n                    position.latitude, position.longitude\n                )) * verticalExaggeration, result\n            )\n        }\n        return result\n    }\n\n    protected open fun applyLookAtLimits(lookAt: LookAt) {\n        // Clamp latitude to between -90 and +90, and normalize longitude to between -180 and +180.\n        lookAt.position.latitude = lookAt.position.latitude.clampLatitude()\n        lookAt.position.longitude = lookAt.position.longitude.normalizeLongitude()\n\n        // Clamp range to values greater than 1 in order to prevent degenerating to a first-person lookAt when\n        // range is zero.\n        lookAt.range = lookAt.range.coerceIn(10.0, distanceToViewGlobeExtents * 2)\n\n        // Normalize heading to between -180 and +180.\n        lookAt.heading = lookAt.heading.normalize180()\n\n        // Clamp tilt to between 0 and +90 to prevent the viewer from going upside down.\n        lookAt.tilt = lookAt.tilt.coerceIn(Angle.ZERO, Angle.POS90)\n\n        // Normalize heading to between -180 and +180.\n        lookAt.roll = lookAt.roll.normalize180()\n\n        // Apply 2D limits when the globe is 2D.\n        if (globe.is2D) {\n            // Clamp range to prevent more than 360 degrees of visible longitude. Assumes a 45 degree horizontal\n            // field of view.\n            lookAt.range = lookAt.range.coerceIn(1.0, 2.0 * PI * globe.equatorialRadius)\n\n            // Force tilt to 0 when in 2D mode to keep the viewer looking straight down.\n            lookAt.tilt = Angle.ZERO\n        }\n    }\n\n    companion object {\n        protected const val COLLISION_THRESHOLD = 10.0 // 10m above surface\n\n        private val _events = MutableSharedFlow<Event>(extraBufferCapacity = 1)\n\n        /**\n         * Provides a global mechanism for broadcasting notifications within the WorldWind library.\n         */\n        @JvmStatic\n        val events = _events.asSharedFlow()\n\n        /**\n         * Requests that all WorldWindow instances update their display. Internally, this dispatches a REQUEST_REDRAW\n         * message to the WorldWind message center.\n         */\n        @JvmStatic\n        fun requestRedraw() { _events.tryEmit(Event.RequestRedraw) }\n\n        /**\n         * Requests render resource cache to remove specified resource ID from absent list\n         *\n         * @param resourceId resource ID to be removed from absent list\n         */\n        @JvmStatic\n        suspend fun unmarkResourceAbsent(resourceId: Int) { _events.emit(Event.UnmarkResourceAbsent(resourceId)) }\n    }\n\n    sealed interface Event {\n        /**\n         * Event requesting WorldWindow instances to update their display.\n         */\n        object RequestRedraw : Event\n        /**\n         * Event requesting RenderResourceCache to un-mark resource from absent list\n         *\n         * @param resourceId resource ID to be removed from absent list\n         */\n        data class UnmarkResourceAbsent(val resourceId: Int) : Event\n    }\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Range\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.buffer.ShortBufferObject\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.GL_FLOAT\nimport earth.worldwind.util.kgl.GL_LINES\nimport earth.worldwind.util.kgl.GL_TRIANGLE_STRIP\nimport earth.worldwind.util.kgl.GL_UNSIGNED_SHORT\nimport kotlin.jvm.JvmStatic\n\nopen class BasicDrawableTerrain protected constructor(): DrawableTerrain {\n    override val sector = Sector()\n    override val vertexOrigin = Vec3()\n    val lineElementRange = Range()\n    val triStripElementRange = Range()\n    var vertexPoints: FloatBufferObject? = null\n    var vertexTexCoords: FloatBufferObject? = null\n    var elements: ShortBufferObject? = null\n    private var pool: Pool<BasicDrawableTerrain>? = null\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<BasicDrawableTerrain>): BasicDrawableTerrain {\n            val instance = pool.acquire() ?: BasicDrawableTerrain()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        vertexPoints = null\n        vertexTexCoords = null\n        elements = null\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun useVertexPointAttrib(dc: DrawContext, attribLocation: Int): Boolean {\n        val bufferBound = vertexPoints?.bindBuffer(dc)?:false\n        if (bufferBound) dc.gl.vertexAttribPointer(attribLocation, 3, GL_FLOAT, false, 0, 0)\n        return bufferBound\n    }\n\n    override fun useVertexTexCoordAttrib(dc: DrawContext, attribLocation: Int): Boolean {\n        val bufferBound = vertexTexCoords?.bindBuffer(dc)?:false\n        if (bufferBound) dc.gl.vertexAttribPointer(attribLocation, 2, GL_FLOAT, false, 0, 0)\n        return bufferBound\n    }\n\n    override fun drawLines(dc: DrawContext): Boolean {\n        val bufferBound = elements?.bindBuffer(dc)?:false\n        if (bufferBound) dc.gl.drawElements(\n            GL_LINES, lineElementRange.length,\n            GL_UNSIGNED_SHORT, lineElementRange.lower * 2\n        )\n        return bufferBound\n    }\n\n    override fun drawTriangles(dc: DrawContext): Boolean {\n        val bufferBound = elements?.bindBuffer(dc)?:false\n        if (bufferBound) dc.gl.drawElements(\n            GL_TRIANGLE_STRIP, triStripElementRange.length,\n            GL_UNSIGNED_SHORT, triStripElementRange.lower * 2\n        )\n        return bufferBound\n    }\n\n    override fun draw(dc: DrawContext) {\n        drawTriangles(dc)\n    }\n}","package earth.worldwind.draw\n\nimport earth.worldwind.PickedObjectList\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.geom.Vec2\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.geom.Viewport\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Framebuffer\nimport earth.worldwind.render.Texture\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.util.kgl.*\n\nopen class DrawContext(val gl: Kgl) {\n    val eyePoint = Vec3()\n    val viewport = Viewport()\n    val projection = Matrix4()\n    val modelview = Matrix4()\n    val modelviewProjection = Matrix4()\n//    val infiniteProjection = Matrix4()\n    val screenProjection = Matrix4()\n    var drawableQueue: DrawableQueue? = null\n    var drawableTerrain: DrawableQueue? = null\n    var pickedObjects: PickedObjectList? = null\n    var pickViewport: Viewport? = null\n    var pickPoint: Vec2? = null\n    var isPickMode = false\n    private var framebuffer = KglFramebuffer.NONE\n    private var program = KglProgram.NONE\n    private var textureUnit = GL_TEXTURE0\n    private val textures = Array(32) {KglTexture.NONE}\n    private var arrayBuffer = KglBuffer.NONE\n    private var elementArrayBuffer = KglBuffer.NONE\n    private var scratchFramebufferCache: Framebuffer? = null\n    private var unitSquareBufferCache: FloatBufferObject? = null\n    private var scratchBuffer = ByteArray(4)\n    private val pixelArray = ByteArray(4)\n    /**\n     * Returns count of terrain drawables in queue\n     */\n    val drawableTerrainCount get() = drawableTerrain?.count?:0\n    /**\n     * Returns the name of the OpenGL framebuffer object that is currently active.\n     */\n    val currentFramebuffer get() = framebuffer\n    /**\n     * Returns the name of the OpenGL program object that is currently active.\n     */\n    val currentProgram get() = program\n    /**\n     * Returns the OpenGL multitexture unit that is currently active. Returns a value from the GL_TEXTUREi enumeration,\n     * where i ranges from 0 to 32.\n     */\n    val currentTextureUnit get() = textureUnit\n    /**\n     * Returns the name of the OpenGL texture 2D object currently bound to the active multitexture unit. The active\n     * multitexture unit may be determined by calling currentTextureUnit.\n     */\n    val currentTexture get() = currentTexture(textureUnit)\n    /**\n     * Returns an OpenGL framebuffer object suitable for offscreen drawing. The framebuffer has a 32-bit color buffer\n     * and a 32-bit depth buffer, both attached as OpenGL texture 2D objects.\n     * <br>\n     * The framebuffer may be used by any drawable and for any purpose. However, the draw context makes no guarantees\n     * about the framebuffer's contents. Drawables must clear the framebuffer before use, and must assume its contents\n     * may be modified by another drawable, either during the current frame or in a subsequent frame.\n     * <br>\n     * The OpenGL framebuffer object is created on first use and cached. Subsequent calls to this method return the\n     * cached buffer object.\n     */\n    val scratchFramebuffer get() = scratchFramebufferCache ?: Framebuffer().apply {\n        val colorAttachment = Texture(1024, 1024, GL_RGBA, GL_UNSIGNED_BYTE)\n        val depthAttachment = Texture(1024, 1024, GL_DEPTH_COMPONENT, GL_UNSIGNED_SHORT)\n        // TODO consider modifying Texture's tex parameter behavior in order to make this unnecessary\n        depthAttachment.setTexParameter(GL_TEXTURE_MIN_FILTER, GL_NEAREST)\n        depthAttachment.setTexParameter(GL_TEXTURE_MAG_FILTER, GL_NEAREST)\n        attachTexture(this@DrawContext, colorAttachment, GL_COLOR_ATTACHMENT0)\n        attachTexture(this@DrawContext, depthAttachment, GL_DEPTH_ATTACHMENT)\n    }.also { scratchFramebufferCache = it }\n    /**\n     * Returns an OpenGL buffer object containing a unit square expressed as four vertices at (0, 1), (0, 0), (1, 1) and\n     * (1, 0). Each vertex is stored as two 32-bit floating point coordinates. The four vertices are in the order\n     * required by a triangle strip.\n     * <br>\n     * The OpenGL buffer object is created on first use and cached. Subsequent calls to this method return the cached\n     * buffer object.\n     */\n    val unitSquareBuffer get() = unitSquareBufferCache ?: FloatBufferObject(\n        GL_ARRAY_BUFFER, floatArrayOf(0f, 1f, 0f, 0f, 1f, 1f, 1f, 0f)\n    ).also { unitSquareBufferCache = it }\n    /**\n     * Returns a scratch list suitable for accumulating entries during drawing. The list is cleared before each frame,\n     * otherwise its contents are undefined.\n     */\n    val scratchList = mutableListOf<Any>()\n\n    fun reset() {\n        eyePoint.set(0.0, 0.0, 0.0)\n        viewport.setEmpty()\n        projection.setToIdentity()\n        modelview.setToIdentity()\n        modelviewProjection.setToIdentity()\n        screenProjection.setToIdentity()\n//        infiniteProjection.setToIdentity()\n        drawableQueue = null\n        drawableTerrain = null\n        pickedObjects = null\n        pickViewport = null\n        pickPoint = null\n        isPickMode = false\n        scratchBuffer.fill(0)\n        scratchList.clear()\n    }\n\n    fun contextLost() {\n        // Clear objects and values associated with the current OpenGL context.\n        framebuffer = KglFramebuffer.NONE\n        program = KglProgram.NONE\n        textureUnit = GL_TEXTURE0\n        arrayBuffer = KglBuffer.NONE\n        elementArrayBuffer = KglBuffer.NONE\n        scratchFramebufferCache = null\n        unitSquareBufferCache = null\n        textures.fill(KglTexture.NONE)\n    }\n\n    fun peekDrawable() = drawableQueue?.peekDrawable()\n\n    fun pollDrawable() = drawableQueue?.pollDrawable()\n\n    fun rewindDrawables() { drawableQueue?.rewindDrawables() }\n\n    fun getDrawableTerrain(index: Int) = drawableTerrain?.getDrawable(index) as DrawableTerrain? ?: error(\"Invalid index\")\n\n    /**\n     * Makes an OpenGL framebuffer object active. The active framebuffer becomes the target of all OpenGL commands that\n     * render to the framebuffer or read from the framebuffer. This has no effect if the specified framebuffer object is\n     * already active. The default is framebuffer 0, indicating that the default framebuffer provided by the windowing\n     * system is active.\n     *\n     * @param framebuffer the name of the OpenGL framebuffer object to make active, or 0 to make the default\n     * framebuffer provided by the windowing system active\n     */\n    fun bindFramebuffer(framebuffer: KglFramebuffer) {\n        if (this.framebuffer != framebuffer) {\n            this.framebuffer = framebuffer\n            gl.bindFramebuffer(GL_FRAMEBUFFER, framebuffer)\n        }\n    }\n\n    /**\n     * Makes an OpenGL program object active as part of current rendering state. This has no effect if the specified\n     * program object is already active. The default is program 0, indicating that no program is active.\n     *\n     * @param program the name of the OpenGL program object to make active, or 0 to make no program active\n     */\n    fun useProgram(program: KglProgram) {\n        if (this.program != program) {\n            this.program = program\n            gl.useProgram(program)\n        }\n    }\n\n    /**\n     * Specifies the OpenGL multitexture unit to make active. This has no effect if the specified multitexture unit is\n     * already active. The default is GL_TEXTURE0.\n     *\n     * @param textureUnit the multitexture unit, one of GL_TEXTUREi, where i ranges from 0 to 32.\n     */\n    fun activeTextureUnit(textureUnit: Int) {\n        if (this.textureUnit != textureUnit) {\n            this.textureUnit = textureUnit\n            gl.activeTexture(textureUnit)\n        }\n    }\n\n    /**\n     * Returns the name of the OpenGL texture 2D object currently bound to the specified multitexture unit.\n     *\n     * @param textureUnit the multitexture unit, one of GL_TEXTUREi, where i ranges from 0 to 32.\n     *\n     * @return the currently bound texture 2D object, or 0 if no texture object is bound\n     */\n    fun currentTexture(textureUnit: Int) = textures[textureUnit - GL_TEXTURE0]\n\n    /**\n     * Makes an OpenGL texture 2D object bound to the current multitexture unit. This has no effect if the specified\n     * texture object is already bound. The default is texture 0, indicating that no texture is bound.\n     *\n     * @param texture the name of the OpenGL texture 2D object to make active, or 0 to make no texture active\n     */\n    fun bindTexture(texture: KglTexture) {\n        val textureUnitIndex = textureUnit - GL_TEXTURE0\n        if (textures[textureUnitIndex] != texture) {\n            textures[textureUnitIndex] = texture\n            gl.bindTexture(GL_TEXTURE_2D, texture)\n        }\n    }\n\n    /**\n     * Returns the name of the OpenGL buffer object bound to the specified target buffer.\n     *\n     * @param target the target buffer, either GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER\n     *\n     * @return the currently bound buffer object, or 0 if no buffer object is bound\n     */\n    fun currentBuffer(target: Int): KglBuffer {\n        return when (target) {\n            GL_ARRAY_BUFFER -> arrayBuffer\n            GL_ELEMENT_ARRAY_BUFFER -> elementArrayBuffer\n            else -> KglBuffer.NONE\n        }\n    }\n\n    /**\n     * Makes an OpenGL buffer object bound to a specified target buffer. This has no effect if the specified buffer\n     * object is already bound. The default is buffer 0, indicating that no buffer object is bound.\n     *\n     * @param target   the target buffer, either GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER\n     * @param buffer the name of the OpenGL buffer object to make active\n     */\n    fun bindBuffer(target: Int, buffer: KglBuffer) {\n        if (target == GL_ARRAY_BUFFER && arrayBuffer != buffer) {\n            arrayBuffer = buffer\n            gl.bindBuffer(target, buffer)\n        } else if (target == GL_ELEMENT_ARRAY_BUFFER && elementArrayBuffer != buffer) {\n            elementArrayBuffer = buffer\n            gl.bindBuffer(target, buffer)\n        } else {\n            gl.bindBuffer(target, buffer)\n        }\n    }\n\n    /**\n     * Reads the fragment color at a screen point in the currently active OpenGL frame buffer. The X and Y components\n     * indicate OpenGL screen coordinates, which originate in the frame buffer's lower left corner.\n     *\n     * @param x      the screen point's X component\n     * @param y      the screen point's Y component\n     * @param result an optional pre-allocated Color in which to return the fragment color, or null to return a new\n     * color\n     *\n     * @return the result argument set to the fragment color, or a new color if the result is null\n     */\n    fun readPixelColor(x: Int, y: Int, result: Color): Color {\n        // Read the fragment pixel as an RGBA 8888 color.\n        gl.readPixels(x, y, 1, 1, GL_RGBA, GL_UNSIGNED_BYTE, pixelArray)\n\n        // Convert the RGBA 8888 color to a WorldWind color.\n        result.red = (pixelArray[0].toInt() and 0xFF) / 0xFF.toFloat()\n        result.green = (pixelArray[1].toInt() and 0xFF) / 0xFF.toFloat()\n        result.blue = (pixelArray[2].toInt() and 0xFF) / 0xFF.toFloat()\n        result.alpha = (pixelArray[3].toInt() and 0xFF) / 0xFF.toFloat()\n        return result\n    }\n\n    /**\n     * Reads the unique fragment colors within a screen rectangle in the currently active OpenGL frame buffer. The\n     * components indicate OpenGL screen coordinates, which originate in the frame buffer's lower left corner.\n     *\n     * @param x      the screen rectangle's X component\n     * @param y      the screen rectangle's Y component\n     * @param width  the screen rectangle's width\n     * @param height the screen rectangle's height\n     *\n     * @return a set containing the unique fragment colors\n     */\n    fun readPixelColors(x: Int, y: Int, width: Int, height: Int): Set<Color> {\n        // Read the fragment pixels as a tightly packed array of RGBA 8888 colors.\n        val pixelCount = width * height\n        val pixelBuffer = scratchBuffer(pixelCount * 4)\n        gl.readPixels(x, y, width, height, GL_RGBA, GL_UNSIGNED_BYTE, pixelBuffer)\n        val resultSet = mutableSetOf<Color>()\n        var result = Color()\n        for (idx in 0 until pixelCount step 4) {\n            // Convert the RGBA 8888 color to a WorldWind color.\n            result.red = (pixelBuffer[idx + 0].toInt() and 0xFF) / 0xFF.toFloat()\n            result.green = (pixelBuffer[idx + 1].toInt() and 0xFF) / 0xFF.toFloat()\n            result.blue = (pixelBuffer[idx + 2].toInt() and 0xFF) / 0xFF.toFloat()\n            result.alpha = (pixelBuffer[idx + 3].toInt() and 0xFF) / 0xFF.toFloat()\n\n            // Accumulate the unique colors in a set.\n            if (resultSet.add(result)) result = Color()\n        }\n        return resultSet\n    }\n\n    /**\n     * Returns a scratch NIO buffer suitable for use during drawing. The returned buffer has capacity at least equal to\n     * the specified capacity. The buffer is cleared before each frame, otherwise its contents, position, limit and mark\n     * are undefined.\n     *\n     * @param capacity the buffer's minimum capacity in bytes\n     *\n     * @return the draw context's scratch buffer\n     */\n    fun scratchBuffer(capacity: Int): ByteArray {\n        if (scratchBuffer.size < capacity) scratchBuffer = ByteArray(capacity)\n        return scratchBuffer\n    }\n}",null,null,"package earth.worldwind.draw\n\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Texture\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.buffer.ShortBufferObject\nimport earth.worldwind.render.program.BasicShaderProgram\n\nopen class DrawShapeState internal constructor() {\n    companion object {\n        const val MAX_DRAW_ELEMENTS = 4\n    }\n\n    var program: BasicShaderProgram? = null\n    var vertexBuffer: FloatBufferObject? = null\n    var elementBuffer: ShortBufferObject? = null\n    val vertexOrigin = Vec3()\n    var vertexStride = 0\n    var enableCullFace = true\n    var enableDepthTest = true\n    var depthOffset = 0.0\n    protected val color = Color()\n    protected var lineWidth = 1f\n    protected var texture: Texture? = null\n    protected val texCoordMatrix = Matrix3()\n    private val texCoordAttrib = VertexAttrib()\n    internal var primCount = 0\n    internal val prims = Array(MAX_DRAW_ELEMENTS) { DrawElements() }\n\n    open fun reset() {\n        program = null\n        vertexBuffer = null\n        elementBuffer = null\n        vertexOrigin.set(0.0, 0.0, 0.0)\n        vertexStride = 0\n        enableCullFace = true\n        enableDepthTest = true\n        depthOffset = 0.0\n        color.set(1f, 1f, 1f, 1f)\n        lineWidth = 1f\n        texture = null\n        texCoordMatrix.setToIdentity()\n        texCoordAttrib.size = 0\n        texCoordAttrib.offset = 0\n        primCount = 0\n        for (idx in 0 until MAX_DRAW_ELEMENTS) prims[idx].texture = null\n    }\n\n    fun color(color: Color) = apply { this.color.copy(color) }\n\n    fun lineWidth(width: Float) = apply { lineWidth = width }\n\n    fun texture(texture: Texture?) = apply { this.texture = texture }\n\n    fun texCoordMatrix(matrix: Matrix3) = apply { texCoordMatrix.copy(matrix) }\n\n    fun texCoordAttrib(size: Int, offset: Int) = apply {\n        texCoordAttrib.size = size\n        texCoordAttrib.offset = offset\n    }\n\n    open fun drawElements(mode: Int, count: Int, type: Int, offset: Int) {\n        val prim = prims[primCount++]\n        prim.mode = mode\n        prim.count = count\n        prim.type = type\n        prim.offset = offset\n        prim.color.copy(color)\n        prim.lineWidth = lineWidth\n        prim.texture = texture\n        prim.texCoordMatrix.copy(texCoordMatrix)\n        prim.texCoordAttrib.size = texCoordAttrib.size\n        prim.texCoordAttrib.offset = texCoordAttrib.offset\n    }\n\n    internal open class DrawElements {\n        var mode = 0\n        var count = 0\n        var type = 0\n        var offset = 0\n        val color = Color()\n        var lineWidth = 0f\n        var texture: Texture? = null\n        val texCoordMatrix = Matrix3()\n        val texCoordAttrib = VertexAttrib()\n    }\n\n    internal open class VertexAttrib {\n        var size = 0\n        var offset = 0\n    }\n}","package earth.worldwind.draw\n\nopen class DrawableLambda(protected val lambda: (dc: DrawContext) -> Unit): Drawable {\n    override fun recycle() { }\n    /**\n     * Performs the actual rendering in OpenGL.\n     *\n     * @param dc The current draw context.\n     */\n    override fun draw(dc: DrawContext) = lambda(dc)\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.GL_DEPTH_TEST\nimport earth.worldwind.util.kgl.GL_FLOAT\nimport earth.worldwind.util.kgl.GL_LINES\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableLines protected constructor(): Drawable {\n    var vertexPoints: FloatBufferObject? = null\n    val mvpMatrix = Matrix4()\n    val color = Color()\n    var lineWidth = 1f\n    var enableDepthTest = true\n    var program: BasicShaderProgram? = null\n    private var pool: Pool<DrawableLines>? = null\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableLines>): DrawableLines {\n            val instance = pool.acquire() ?: DrawableLines()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        program = null\n        vertexPoints = null\n        pool?.release(this)\n        pool = null\n    }\n\n    /**\n     * Performs the actual rendering of the Placemark.\n     *\n     * @param dc The current draw context.\n     */\n    override fun draw(dc: DrawContext) {\n        val program = program ?: return // program unspecified\n        if (!program.useProgram(dc)) return // program failed to build\n        if (vertexPoints?.bindBuffer(dc) != true) return  // vertex buffer unspecified or failed to bind\n\n        // Disable texturing.\n        program.enableTexture(false)\n\n        // Use the leader's color.\n        program.loadColor(color)\n\n        // Use the leader's modelview-projection matrix.\n        program.loadModelviewProjection(mvpMatrix)\n\n        // Disable depth testing if requested.\n        if (!enableDepthTest) dc.gl.disable(GL_DEPTH_TEST)\n\n        // Apply the leader's line width in screen pixels.\n        dc.gl.lineWidth(lineWidth)\n\n        // Use the leader line as the vertex point attribute.\n        dc.gl.vertexAttribPointer(0 /*vertexPoint*/, 3, GL_FLOAT, false, 0, 0)\n\n        // Draw the leader line.\n        dc.gl.drawArrays(GL_LINES, 0 /*first*/, 2 /*count*/)\n\n        // Restore the default WorldWind OpenGL state.\n        if (!enableDepthTest) dc.gl.enable(GL_DEPTH_TEST)\n\n        dc.gl.lineWidth(1f)\n    }\n}","package earth.worldwind.draw\n\nimport kotlin.math.max\n\nopen class DrawableQueue internal constructor(){\n    protected var size = 0\n    protected var position = 0\n    protected var entries = arrayOfNulls<Entry>(size)\n    val count get() = size\n    /**\n     * Sorts drawables by ascending group ID, then ascending order, then by ascending ordinal.\n     */\n    protected open val sortComparator = Comparator<Entry?> { lhs, rhs ->\n        // Comparator accepts only non-null Entries\n        var result = lhs!!.groupId.compareTo(rhs!!.groupId)\n        if (result == 0) result = lhs.order.compareTo(rhs.order)\n        if (result == 0) result = lhs.ordinal.compareTo(rhs.ordinal)\n        result\n    }\n\n    companion object {\n        protected const val MIN_CAPACITY_INCREMENT = 12\n    }\n\n    fun offerDrawable(drawable: Drawable, groupId: DrawableGroup, depth: Double) {\n        val capacity = entries.size\n        if (capacity == size) {\n            val increment = max(capacity shr 1, MIN_CAPACITY_INCREMENT)\n            val newEntries = arrayOfNulls<Entry>(capacity + increment)\n            entries.copyInto(newEntries)\n            entries = newEntries\n        }\n        val entry = entries[size] ?: Entry().also { entries[size] = it }\n        entry.set(drawable, groupId, depth, size++)\n    }\n\n    fun getDrawable(index: Int) = if (index < size) entries[index]?.drawable else null\n\n    fun peekDrawable() = getDrawable(position)\n\n    fun pollDrawable() = getDrawable(position++)\n\n    fun rewindDrawables() { position = 0 }\n\n    fun sortDrawables() {\n        // Limit sort to non-null Entries only\n        entries.sortWith(sortComparator, 0, size)\n        position = 0\n    }\n\n    fun clearDrawables() {\n        for (idx in 0 until size) {\n            entries[idx]?.recycle()\n        }\n        size = 0\n        position = 0\n    }\n\n    protected open class Entry {\n        var drawable: Drawable? = null\n        var groupId = DrawableGroup.BACKGROUND\n        var order = 0.0\n        var ordinal = 0\n\n        fun set(drawable: Drawable, groupId: DrawableGroup, order: Double, ordinal: Int) {\n            this.drawable = drawable\n            this.groupId = groupId\n            this.order = order\n            this.ordinal = ordinal\n        }\n\n        fun recycle() {\n            drawable?.recycle()\n            drawable = null\n        }\n    }\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Texture\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.GL_DEPTH_TEST\nimport earth.worldwind.util.kgl.GL_FLOAT\nimport earth.worldwind.util.kgl.GL_TEXTURE0\nimport earth.worldwind.util.kgl.GL_TRIANGLE_STRIP\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableScreenTexture protected constructor(): Drawable {\n    val unitSquareTransform = Matrix4()\n    val color = Color()\n    var enableDepthTest = true\n    var program: BasicShaderProgram? = null\n    var texture: Texture? = null\n    private var pool: Pool<DrawableScreenTexture>? = null\n    private val mvpMatrix = Matrix4()\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableScreenTexture>): DrawableScreenTexture {\n            val instance = pool.acquire() ?: DrawableScreenTexture()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        program = null\n        texture = null\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        val program = program ?: return // program unspecified\n        if (!program.useProgram(dc)) return // program failed to build\n        if (!dc.unitSquareBuffer.bindBuffer(dc)) return // vertex buffer failed to bind\n\n        // Use the draw context's pick mode and use the drawable's color.\n        program.enablePickMode(dc.isPickMode)\n\n        // Make multi-texture unit 0 active.\n        dc.activeTextureUnit(GL_TEXTURE0)\n\n        // Disable writing to the depth buffer.\n        dc.gl.depthMask(false)\n\n        // Use a unit square as the vertex point and vertex tex coord attributes.\n        dc.gl.enableVertexAttribArray(1 /*vertexTexCoord*/) // only vertexPoint is enabled by default\n        dc.gl.vertexAttribPointer(0 /*vertexPoint*/, 2, GL_FLOAT, false, 0, 0)\n        dc.gl.vertexAttribPointer(1 /*vertexTexCoord*/, 2, GL_FLOAT, false, 0, 0)\n\n        // Draw this DrawableScreenTextures.\n        doDraw(dc, this)\n\n        // Draw all DrawableScreenTextures adjacent in the queue that share the same GLSL program.\n        while (true) {\n            val next = dc.peekDrawable() ?: break\n            if (!canBatchWith(next)) break // check if the drawable at the front of the queue can be batched\n            val drawable = dc.pollDrawable() as DrawableScreenTexture // take it off the queue\n            doDraw(dc, drawable)\n        }\n\n        // Restore the default WorldWind OpenGL state.\n        dc.gl.depthMask(true)\n        dc.gl.disableVertexAttribArray(1 /*vertexTexCoord*/) // only vertexPoint is enabled by default\n    }\n\n    protected open fun doDraw(dc: DrawContext, drawable: DrawableScreenTexture) {\n        val program = drawable.program ?: return\n\n        // Use the drawable's color.\n        program.loadColor(drawable.color)\n\n        // Attempt to bind the drawable's texture, configuring the shader program appropriately if there is no texture\n        // or if the texture failed to bind.\n        val texture = drawable.texture\n        if (texture?.bindTexture(dc) == true) {\n            program.enableTexture(true)\n            program.loadTexCoordMatrix(texture.coordTransform)\n        } else {\n            program.enableTexture(false)\n        }\n\n        // Use a modelview-projection matrix that transforms the unit square to screen coordinates.\n        drawable.mvpMatrix.setToMultiply(dc.screenProjection, drawable.unitSquareTransform)\n        program.loadModelviewProjection(drawable.mvpMatrix)\n\n        // Disable depth testing if requested.\n        if (!drawable.enableDepthTest) dc.gl.disable(GL_DEPTH_TEST)\n\n        // Draw the unit square as triangles.\n        dc.gl.drawArrays(GL_TRIANGLE_STRIP, 0, 4)\n\n        // Restore the default WorldWind OpenGL state.\n        if (!drawable.enableDepthTest) dc.gl.enable(GL_DEPTH_TEST)\n    }\n\n    protected open fun canBatchWith(that: Drawable) = that is DrawableScreenTexture && program === that.program\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.GL_CULL_FACE\nimport earth.worldwind.util.kgl.GL_DEPTH_TEST\nimport earth.worldwind.util.kgl.GL_FLOAT\nimport earth.worldwind.util.kgl.GL_TEXTURE0\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableShape protected constructor(): Drawable {\n    val drawState = DrawShapeState()\n    private var pool: Pool<DrawableShape>? = null\n    private val mvpMatrix = Matrix4()\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableShape>): DrawableShape {\n            val instance = pool.acquire() ?: DrawableShape()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        drawState.reset()\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        // TODO shape batching\n        val program = drawState.program ?: return // program unspecified\n        if (!program.useProgram(dc)) return // program failed to build\n        if (drawState.vertexBuffer?.bindBuffer(dc) != true) return  // vertex buffer unspecified or failed to bind\n        if (drawState.elementBuffer?.bindBuffer(dc) != true) return  // element buffer unspecified or failed to bind\n\n        // Use the draw context's pick mode.\n        program.enablePickMode(dc.isPickMode)\n\n        // Use the draw context's modelview projection matrix, transformed to shape local coordinates.\n        if (drawState.depthOffset != 0.0) {\n            mvpMatrix.copy(dc.projection).offsetProjectionDepth(drawState.depthOffset)\n            mvpMatrix.multiplyByMatrix(dc.modelview)\n        } else {\n            mvpMatrix.copy(dc.modelviewProjection)\n        }\n        mvpMatrix.multiplyByTranslation(\n            drawState.vertexOrigin.x,\n            drawState.vertexOrigin.y,\n            drawState.vertexOrigin.z\n        )\n        program.loadModelviewProjection(mvpMatrix)\n\n        // Disable triangle back face culling if requested.\n        if (!drawState.enableCullFace) dc.gl.disable(GL_CULL_FACE)\n\n        // Disable depth testing if requested.\n        if (!drawState.enableDepthTest) dc.gl.disable(GL_DEPTH_TEST)\n\n        // Make multi-texture unit 0 active.\n        dc.activeTextureUnit(GL_TEXTURE0)\n\n        // Use the shape's vertex point attribute and vertex texture coordinate attribute.\n        dc.gl.enableVertexAttribArray(1 /*vertexTexCoord*/)\n        dc.gl.vertexAttribPointer(0 /*vertexPoint*/, 3, GL_FLOAT, false, drawState.vertexStride, 0 /*offset*/)\n\n        // Draw the specified primitives.\n        for (idx in 0 until drawState.primCount) {\n            val prim = drawState.prims[idx]\n            program.loadColor(prim.color)\n            if (prim.texture?.bindTexture(dc) == true) {\n                program.loadTexCoordMatrix(prim.texCoordMatrix)\n                program.enableTexture(true)\n            } else {\n                program.enableTexture(false)\n            }\n            dc.gl.vertexAttribPointer(\n                1 /*vertexTexCoord*/,\n                prim.texCoordAttrib.size,\n                GL_FLOAT,\n                false,\n                drawState.vertexStride,\n                prim.texCoordAttrib.offset\n            )\n            dc.gl.lineWidth(prim.lineWidth)\n            dc.gl.drawElements(prim.mode, prim.count, prim.type, prim.offset)\n        }\n\n        // Restore the default WorldWind OpenGL state.\n        if (!drawState.enableCullFace) dc.gl.enable(GL_CULL_FACE)\n        if (!drawState.enableDepthTest) dc.gl.enable(GL_DEPTH_TEST)\n        dc.gl.lineWidth(1f)\n        dc.gl.enable(GL_CULL_FACE)\n        dc.gl.disableVertexAttribArray(1 /*vertexTexCoord*/)\n    }\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Angle.Companion.NEG90\nimport earth.worldwind.geom.Angle.Companion.POS180\nimport earth.worldwind.geom.Angle.Companion.POS90\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.program.SightlineProgram\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.*\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableSightline protected constructor(): Drawable {\n    val centerTransform = Matrix4()\n    var range = 0f\n    val visibleColor = Color(0f, 0f, 0f, 0f)\n    val occludedColor = Color(0f, 0f, 0f, 0f)\n    var program: SightlineProgram? = null\n    private var pool: Pool<DrawableSightline>? = null\n    private val sightlineView = Matrix4()\n    private val matrix = Matrix4()\n    private val cubeMapProjection = Matrix4()\n    private val cubeMapFace = arrayOf(\n        Matrix4().setToRotation(0.0, 0.0, 1.0, NEG90).multiplyByRotation(1.0, 0.0, 0.0, POS90),  // positive X\n        Matrix4().setToRotation(0.0, 0.0, 1.0, POS90).multiplyByRotation(1.0, 0.0, 0.0, POS90),  // negative X\n        Matrix4().setToRotation(1.0, 0.0, 0.0, POS90),  // positive Y\n        Matrix4().setToRotation(0.0, 0.0, 1.0, POS180).multiplyByRotation(1.0, 0.0, 0.0, POS90),  // negative Y\n        /*Matrix4().setToRotation(1.0, 0.0, 0.0, POS180),*/ // positive Z, intentionally omitted as terrain is never visible when looking up\n        Matrix4() // negative Z\n    )\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableSightline>): DrawableSightline {\n            val instance = pool.acquire() ?: DrawableSightline()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        visibleColor.set(0f, 0f, 0f, 0f)\n        occludedColor.set(0f, 0f, 0f, 0f)\n        program = null\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        val program = program ?: return // program unspecified\n        if (!program.useProgram(dc)) return // program failed to build\n\n        // Use the drawable's color.\n        program.loadRange(range)\n        program.loadColor(visibleColor, occludedColor)\n\n        // Configure the cube map projection matrix to capture one face of the cube map as far as the sightline's range.\n        cubeMapProjection.setToPerspectiveProjection(1, 1, POS90, 1.0, range.toDouble())\n\n        // TODO accumulate only the visible terrain, which can be used in both passes\n        // TODO give terrain a bounding box, test with a frustum set using depthviewProjection\n        for (m in cubeMapFace) {\n            sightlineView.copy(centerTransform)\n            sightlineView.multiplyByMatrix(m)\n            sightlineView.invertOrthonormal()\n            if (drawSceneDepth(dc)) drawSceneOcclusion(dc)\n        }\n    }\n\n    protected open fun drawSceneDepth(dc: DrawContext): Boolean {\n        val program = program ?: return false\n        try {\n            val framebuffer = dc.scratchFramebuffer\n            if (!framebuffer.bindFramebuffer(dc)) return false // framebuffer failed to bind\n\n            // Clear the framebuffer.\n            val depthTexture = framebuffer.getAttachedTexture(GL_DEPTH_ATTACHMENT)\n            dc.gl.viewport(0, 0, depthTexture.width, depthTexture.height)\n            dc.gl.clear(GL_DEPTH_BUFFER_BIT)\n\n            // Draw only depth values offset slightly away from the viewer.\n            dc.gl.colorMask(r = false, g = false, b = false, a = false)\n            dc.gl.enable(GL_POLYGON_OFFSET_FILL)\n            dc.gl.polygonOffset(4f, 4f)\n            for (idx in 0 until dc.drawableTerrainCount) {\n                // Get the drawable terrain associated with the draw context.\n                val terrain = dc.getDrawableTerrain(idx)\n                val terrainOrigin = terrain.vertexOrigin\n\n                // Use the terrain's vertex point attribute.\n                if (!terrain.useVertexPointAttrib(dc, 0 /*vertexPoint*/)) continue // vertex buffer failed to bind\n\n                // Draw the terrain onto one face of the cube map, from the sightline's point of view.\n                matrix.setToMultiply(cubeMapProjection, sightlineView)\n                matrix.multiplyByTranslation(terrainOrigin.x, terrainOrigin.y, terrainOrigin.z)\n                program.loadModelviewProjection(matrix)\n\n                // Draw the terrain as triangles.\n                terrain.drawTriangles(dc)\n            }\n        } finally {\n            // Restore the default World Wind OpenGL state.\n            dc.bindFramebuffer(KglFramebuffer.NONE)\n            dc.gl.viewport(dc.viewport.x, dc.viewport.y, dc.viewport.width, dc.viewport.height)\n            dc.gl.colorMask(r = true, g = true, b = true, a = true)\n            dc.gl.disable(GL_POLYGON_OFFSET_FILL)\n            dc.gl.polygonOffset(0f, 0f)\n        }\n        return true\n    }\n\n    protected open fun drawSceneOcclusion(dc: DrawContext) {\n        val program = program ?: return\n        try {\n            // Make multi-texture unit 0 active.\n            dc.activeTextureUnit(GL_TEXTURE0)\n            val depthTexture = dc.scratchFramebuffer.getAttachedTexture(GL_DEPTH_ATTACHMENT)\n            if (!depthTexture.bindTexture(dc)) return // framebuffer texture failed to bind\n            for (idx in 0 until dc.drawableTerrainCount) {\n                // Get the drawable terrain associated with the draw context.\n                val terrain = dc.getDrawableTerrain(idx)\n                val terrainOrigin = terrain.vertexOrigin\n\n                // Use the terrain's vertex point attribute.\n                if (!terrain.useVertexPointAttrib(dc, 0 /*vertexPoint*/)) continue  // vertex buffer failed to bind\n\n                // Use the draw context's modelview projection matrix, transformed to terrain local coordinates.\n                matrix.copy(dc.modelviewProjection)\n                matrix.multiplyByTranslation(terrainOrigin.x, terrainOrigin.y, terrainOrigin.z)\n                program.loadModelviewProjection(matrix)\n\n                // Map the terrain into one face of the cube map, from the sightline's point of view.\n                matrix.copy(sightlineView)\n                matrix.multiplyByTranslation(terrainOrigin.x, terrainOrigin.y, terrainOrigin.z)\n                program.loadSightlineProjection(cubeMapProjection, matrix)\n\n                // Draw the terrain as triangles.\n                terrain.drawTriangles(dc)\n            }\n        } finally {\n            // Unbind depth attachment texture to avoid feedback loop\n            dc.bindTexture(KglTexture.NONE)\n        }\n    }\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.util.Pool\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableSurfaceColor protected constructor(): Drawable {\n    val color = Color()\n    var program: BasicShaderProgram? = null\n    private var pool: Pool<DrawableSurfaceColor>? = null\n    private val mvpMatrix = Matrix4()\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableSurfaceColor>): DrawableSurfaceColor {\n            val instance = pool.acquire() ?: DrawableSurfaceColor()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        program = null\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        val program = program ?: return // program unspecified\n        if (!program.useProgram(dc)) return // program failed to build\n\n        // Configure the program to draw the specified color.\n        program.enableTexture(false)\n        program.loadColor(color)\n        for (idx in 0 until dc.drawableTerrainCount) {\n            // Get the drawable terrain associated with the draw context.\n            val terrain = dc.getDrawableTerrain(idx)\n\n            // Use the terrain's vertex point attribute.\n            if (!terrain.useVertexPointAttrib(dc, 0 /*vertexPoint*/)) continue  // vertex buffer failed to bind\n\n            // Use the draw context's modelview projection matrix, transformed to terrain local coordinates.\n            val terrainOrigin = terrain.vertexOrigin\n            mvpMatrix.copy(dc.modelviewProjection)\n            mvpMatrix.multiplyByTranslation(terrainOrigin.x, terrainOrigin.y, terrainOrigin.z)\n            program.loadModelviewProjection(mvpMatrix)\n\n            // Draw the terrain as triangles.\n            terrain.drawTriangles(dc)\n        }\n    }\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.Color\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.*\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableSurfaceShape protected constructor(): Drawable {\n    val sector = Sector()\n    val drawState = DrawShapeState()\n    private var pool: Pool<DrawableSurfaceShape>? = null\n    private val mvpMatrix = Matrix4()\n    private val textureMvpMatrix = Matrix4()\n    private val identityMatrix3 = Matrix3()\n    private val color = Color()\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableSurfaceShape>): DrawableSurfaceShape {\n            val instance = pool.acquire() ?: DrawableSurfaceShape()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        drawState.reset()\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        val program = drawState.program ?: return // program unspecified\n        if (!program.useProgram(dc)) return // program failed to build\n\n        // Make multi-texture unit 0 active.\n        dc.activeTextureUnit(GL_TEXTURE0)\n\n        // Set up to use vertex tex coord attributes.\n        dc.gl.enableVertexAttribArray(1 /*vertexTexCoord*/) // only vertexPoint is enabled by default\n\n        // Accumulate shapes in the draw context's scratch list.\n        // TODO accumulate in a geospatial quadtree\n        val scratchList = dc.scratchList\n        try {\n            // Add this shape.\n            scratchList.add(this)\n\n            // Add all shapes that are contiguous in the drawable queue.\n            while (true) {\n                val next = dc.peekDrawable() ?: break\n                if (next !is DrawableSurfaceShape) break // check if the drawable at the front of the queue can be batched\n                dc.pollDrawable() // take it off the queue\n                scratchList.add(next)\n            }\n\n            // Draw the accumulated shapes on each drawable terrain.\n            for (idx in 0 until dc.drawableTerrainCount) {\n                // Get the drawable terrain associated with the draw context.\n                val terrain = dc.getDrawableTerrain(idx)\n                // Draw the accumulated surface shapes to a texture representing the terrain's sector.\n                if (drawShapesToTexture(dc, terrain) > 0) {\n                    // Draw the texture containing the rasterized shapes onto the terrain geometry.\n                    drawTextureToTerrain(dc, terrain)\n                }\n            }\n        } finally {\n            // Clear the accumulated shapes.\n            scratchList.clear()\n            // Restore the default WorldWind OpenGL state.\n            dc.gl.disableVertexAttribArray(1 /*vertexTexCoord*/) // only vertexPoint is enabled by default\n        }\n    }\n\n    protected open fun drawShapesToTexture(dc: DrawContext, terrain: DrawableTerrain): Int {\n        // Shapes have been accumulated in the draw context's scratch list.\n        val scratchList = dc.scratchList\n\n        // The terrain's sector defines the geographic region in which to draw.\n        val terrainSector = terrain.sector\n\n        // Keep track of the number of shapes drawn into the texture.\n        var shapeCount = 0\n        val program = drawState.program ?: return 0\n        try {\n            val framebuffer = dc.scratchFramebuffer\n            if (!framebuffer.bindFramebuffer(dc)) return 0 // framebuffer failed to bind\n\n            // Clear the framebuffer and disable the depth test.\n            val colorAttachment = framebuffer.getAttachedTexture(GL_COLOR_ATTACHMENT0)\n            dc.gl.viewport(0, 0, colorAttachment.width, colorAttachment.height)\n            dc.gl.clear(GL_COLOR_BUFFER_BIT)\n            dc.gl.disable(GL_DEPTH_TEST)\n\n            // Use the draw context's pick mode.\n            program.enablePickMode(dc.isPickMode)\n\n            // Compute the tile common matrix that transforms geographic coordinates to texture fragments appropriate\n            // for the terrain sector.\n            // TODO capture this in a method on Matrix4\n            textureMvpMatrix.setToIdentity()\n            textureMvpMatrix.multiplyByTranslation(-1.0, -1.0, 0.0)\n            textureMvpMatrix.multiplyByScale(\n                2.0 / terrainSector.deltaLongitude.inDegrees,\n                2.0 / terrainSector.deltaLatitude.inDegrees,\n                0.0\n            )\n            textureMvpMatrix.multiplyByTranslation(\n                -terrainSector.minLongitude.inDegrees,\n                -terrainSector.minLatitude.inDegrees,\n                0.0\n            )\n            for (idx in 0 until scratchList.size) {\n                // Get the shape.\n                val shape = scratchList[idx] as DrawableSurfaceShape\n                if (!shape.sector.intersectsOrNextTo(terrainSector)) continue\n                if (shape.drawState.vertexBuffer?.bindBuffer(dc) != true) continue  // vertex buffer unspecified or failed to bind\n                if (shape.drawState.elementBuffer?.bindBuffer(dc) != true) continue  // element buffer unspecified or failed to bind\n\n                // Transform local shape coordinates to texture fragments appropriate for the terrain sector.\n                mvpMatrix.copy(textureMvpMatrix)\n                mvpMatrix.multiplyByTranslation(\n                    shape.drawState.vertexOrigin.x,\n                    shape.drawState.vertexOrigin.y,\n                    shape.drawState.vertexOrigin.z\n                )\n                program.loadModelviewProjection(mvpMatrix)\n\n                // Use the shape's vertex point attribute.\n                dc.gl.vertexAttribPointer(\n                    0 /*vertexPoint*/, 3, GL_FLOAT, false, shape.drawState.vertexStride, 0\n                )\n\n                // Draw the specified primitives to the framebuffer texture.\n                for (primIdx in 0 until shape.drawState.primCount) {\n                    val prim = shape.drawState.prims[primIdx]\n                    program.loadColor(prim.color)\n                    if (prim.texture?.bindTexture(dc) == true) {\n                        program.loadTexCoordMatrix(prim.texCoordMatrix)\n                        program.enableTexture(true)\n                    } else {\n                        program.enableTexture(false)\n                    }\n                    dc.gl.vertexAttribPointer(\n                        1 /*vertexTexCoord*/,\n                        prim.texCoordAttrib.size,\n                        GL_FLOAT,\n                        false,\n                        shape.drawState.vertexStride,\n                        prim.texCoordAttrib.offset\n                    )\n                    dc.gl.lineWidth(prim.lineWidth)\n                    dc.gl.drawElements(prim.mode, prim.count, prim.type, prim.offset)\n                }\n\n                // Accumulate the number of shapes drawn into the texture.\n                shapeCount++\n            }\n        } finally {\n            // Restore the default WorldWind OpenGL state.\n            dc.bindFramebuffer(KglFramebuffer.NONE)\n            dc.gl.viewport(dc.viewport.x, dc.viewport.y, dc.viewport.width, dc.viewport.height)\n            dc.gl.enable(GL_DEPTH_TEST)\n            dc.gl.lineWidth(1f)\n        }\n        return shapeCount\n    }\n\n    protected open fun drawTextureToTerrain(dc: DrawContext, terrain: DrawableTerrain) {\n        val program = drawState.program ?: return\n        try {\n            if (!terrain.useVertexPointAttrib(dc, 0 /*vertexPoint*/)) return  // terrain vertex attribute failed to bind\n            if (!terrain.useVertexTexCoordAttrib(dc, 1 /*vertexTexCoord*/)) return  // terrain vertex attribute failed to bind\n            val colorAttachment = dc.scratchFramebuffer.getAttachedTexture(GL_COLOR_ATTACHMENT0)\n            if (!colorAttachment.bindTexture(dc)) return  // framebuffer texture failed to bind\n\n            // Configure the program to draw texture fragments unmodified and aligned with the terrain.\n            // TODO consolidate pickMode and enableTexture into a single textureMode\n            // TODO it's confusing that pickMode must be disabled during surface shape render-to-texture\n            program.enablePickMode(false)\n            program.enableTexture(true)\n            program.loadTexCoordMatrix(identityMatrix3)\n            program.loadColor(color)\n\n            // Use the draw context's modelview projection matrix, transformed to terrain local coordinates.\n            val terrainOrigin = terrain.vertexOrigin\n            mvpMatrix.copy(dc.modelviewProjection)\n            mvpMatrix.multiplyByTranslation(terrainOrigin.x, terrainOrigin.y, terrainOrigin.z)\n            program.loadModelviewProjection(mvpMatrix)\n\n            // Draw the terrain as triangles.\n            terrain.drawTriangles(dc)\n        } finally {\n            // Unbind color attachment texture to avoid feedback loop\n            dc.bindTexture(KglTexture.NONE)\n        }\n    }\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Texture\nimport earth.worldwind.render.program.SurfaceTextureProgram\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.GL_TEXTURE0\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableSurfaceTexture protected constructor(): Drawable {\n    val sector = Sector()\n    val color = Color()\n    val texCoordMatrix = Matrix3()\n    var texture: Texture? = null\n    var program: SurfaceTextureProgram? = null\n    private var pool: Pool<DrawableSurfaceTexture>? = null\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableSurfaceTexture>): DrawableSurfaceTexture {\n            val instance = pool.acquire() ?: DrawableSurfaceTexture()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    fun set(\n        program: SurfaceTextureProgram?, sector: Sector?, texture: Texture?, texCoordMatrix: Matrix3?\n    ) = apply {\n        if (sector != null) this.sector.copy(sector) else this.sector.setEmpty()\n        this.color.set(1f, 1f, 1f, 1f)\n        if (texCoordMatrix != null) this.texCoordMatrix.copy(texCoordMatrix) else this.texCoordMatrix.setToIdentity()\n        this.texture = texture\n        this.program = program\n    }\n\n    override fun recycle() {\n        texture = null\n        program = null\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        val program = program ?: return // program unspecified\n        if (!program.useProgram(dc)) return // program failed to build\n\n        // Accumulate surface textures in the draw context's scratch list.\n        // TODO accumulate in a geospatial quadtree\n        val scratchList = dc.scratchList\n        try {\n            // Add this surface texture.\n            scratchList.add(this)\n\n            // Add all surface textures that are contiguous in the drawable queue.\n            while (true) {\n                val next = dc.peekDrawable() ?: break\n                if (!canBatchWith(next)) break // check if the drawable at the front of the queue can be batched\n                dc.pollDrawable() // take it off the queue\n                scratchList.add(next)\n            }\n\n            // Draw the accumulated surface textures.\n            drawSurfaceTextures(dc)\n        } finally {\n            // Clear the accumulated surface textures.\n            scratchList.clear()\n        }\n    }\n\n    protected open fun drawSurfaceTextures(dc: DrawContext) {\n        val program = program ?: return // program unspecified\n\n        // Use the draw context's pick mode.\n        program.enablePickMode(dc.isPickMode)\n\n        // Enable the program to display surface textures from multi-texture unit 0.\n        program.enableTexture(true)\n        dc.activeTextureUnit(GL_TEXTURE0)\n\n        // Set up to use vertex tex coord attributes.\n        dc.gl.enableVertexAttribArray(1)\n\n        // Surface textures have been accumulated in the draw context's scratch list.\n        val scratchList = dc.scratchList\n        for (idx in 0 until dc.drawableTerrainCount) {\n            // Get the drawable terrain associated with the draw context.\n            val terrain = dc.getDrawableTerrain(idx)\n\n            // Get the terrain's attributes, and keep a flag to ensure we apply the terrain's attributes at most once.\n            val terrainSector = terrain.sector\n            val terrainOrigin = terrain.vertexOrigin\n            var usingTerrainAttrs = false\n            for (jIdx in 0 until scratchList.size) {\n                // Get the surface texture and its sector.\n                val texture = scratchList[jIdx] as DrawableSurfaceTexture\n                val textureSector = texture.sector\n                if (!textureSector.intersects(terrainSector)) continue  // texture does not intersect the terrain\n                if (!texture.bindTexture(dc)) continue  // texture failed to bind\n\n                // Use the terrain's vertex point attribute and vertex tex coord attribute.\n                if (!usingTerrainAttrs &&\n                    terrain.useVertexPointAttrib(dc, 0 /*vertexPoint*/) &&\n                    terrain.useVertexTexCoordAttrib(dc, 1 /*vertexTexCoord*/)\n                ) {\n                    // Suppress subsequent tile state application until the next terrain.\n                    usingTerrainAttrs = true\n                    // Use the draw context's modelview projection matrix, transformed to terrain local coordinates.\n                    program.mvpMatrix.copy(dc.modelviewProjection)\n                    program.mvpMatrix.multiplyByTranslation(terrainOrigin.x, terrainOrigin.y, terrainOrigin.z)\n                    program.loadModelviewProjection()\n                }\n                if (!usingTerrainAttrs) continue  // terrain vertex attribute failed to bind\n\n                // Use tex coord matrices that register the surface texture correctly and mask terrain fragments that\n                // fall outside the surface texture's sector.\n                program.texCoordMatrix[0].copy(texture.texCoordMatrix)\n                program.texCoordMatrix[0].multiplyByTileTransform(terrainSector, textureSector)\n                program.texCoordMatrix[1].setToTileTransform(terrainSector, textureSector)\n                program.loadTexCoordMatrix()\n\n                // Use the surface texture's RGBA color.\n                program.loadColor(texture.color)\n\n                // Draw the terrain as triangles.\n                terrain.drawTriangles(dc)\n            }\n        }\n\n        // Restore the default WorldWind OpenGL state.\n        dc.gl.disableVertexAttribArray(1)\n    }\n\n    protected open fun canBatchWith(that: Drawable) = that is DrawableSurfaceTexture && program === that.program\n\n    private fun bindTexture(dc: DrawContext) = texture?.bindTexture(dc) == true\n}","package earth.worldwind.draw\n\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.util.Pool\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableTessellation protected constructor(): Drawable {\n    val color = Color()\n    var program: BasicShaderProgram? = null\n    private var pool: Pool<DrawableTessellation>? = null\n    private val mvpMatrix = Matrix4()\n    private val offsetMvpMatrix = Matrix4()\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableTessellation>): DrawableTessellation {\n            val instance = pool.acquire() ?: DrawableTessellation()\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    fun set(program: BasicShaderProgram?, color: Color?) = apply {\n        if (color != null) this.color.copy(color) else this.color.set(1f, 1f, 1f, 1f)\n        this.program = program\n    }\n\n    override fun recycle() {\n        program = null\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        val program = program ?: return // program unspecified\n        if (!program.useProgram(dc)) return // program failed to build\n\n        // Use the draw context's pick mode.\n        program.enablePickMode(dc.isPickMode)\n\n        // Configure the program to draw the specified color.\n        program.enableTexture(false)\n        program.loadColor(color)\n\n        // Suppress writes to the OpenGL depth buffer.\n        dc.gl.depthMask(false)\n\n        // Compute the portion of the modelview projection matrix that remains constant for each tile.\n        offsetMvpMatrix.copy(dc.projection)\n        offsetMvpMatrix.offsetProjectionDepth(-1.0e-3) // offset this layer's depth values toward the eye\n        offsetMvpMatrix.multiplyByMatrix(dc.modelview)\n        for (idx in 0 until dc.drawableTerrainCount) {\n            // Get the drawable terrain associated with the draw context.\n            val terrain = dc.getDrawableTerrain(idx)\n\n            // Use the terrain's vertex point attribute.\n            if (!terrain.useVertexPointAttrib(dc, 0 /*vertexPoint*/)) continue  // vertex buffer failed to bind\n\n            // Use the draw context's modelview projection matrix, transformed to terrain local coordinates.\n            val terrainOrigin = terrain.vertexOrigin\n            mvpMatrix.copy(offsetMvpMatrix)\n            mvpMatrix.multiplyByTranslation(terrainOrigin.x, terrainOrigin.y, terrainOrigin.z)\n            program.loadModelviewProjection(mvpMatrix)\n\n            // Draw the terrain as lines.\n            terrain.drawLines(dc)\n        }\n\n        // Restore default WorldWind OpenGL state.\n        dc.gl.depthMask(true)\n    }\n}","package earth.worldwind.frame\n\nimport earth.worldwind.PickedObject.Companion.fromTerrain\nimport earth.worldwind.PickedObject.Companion.identifierToUniqueColor\nimport earth.worldwind.PickedObject.Companion.uniqueColorToIdentifier\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.draw.DrawableSurfaceColor\nimport earth.worldwind.draw.DrawableSurfaceColor.Companion.obtain\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.kgl.GL_COLOR_BUFFER_BIT\nimport earth.worldwind.util.kgl.GL_DEPTH_BUFFER_BIT\nimport kotlin.math.roundToInt\n\nopen class BasicFrameController: FrameController {\n    private var pickColor = Color()\n    private val pickPoint = Vec3()\n    private val pickPos = Position()\n\n    override fun renderFrame(rc: RenderContext) {\n        rc.terrainTessellator!!.tessellate(rc)\n        if (rc.isPickMode) renderTerrainPickedObject(rc)\n        rc.layers!!.render(rc)\n        rc.sortDrawables()\n    }\n\n    protected open fun renderTerrainPickedObject(rc: RenderContext) {\n        if (rc.terrain!!.sector.isEmpty) return  // no terrain to pick\n\n        // Acquire a unique picked object ID for terrain.\n        val pickedObjectId = rc.nextPickedObjectId()\n\n        // Enqueue a drawable for processing on the OpenGL thread that displays terrain in the unique pick color.\n        val pool = rc.getDrawablePool<DrawableSurfaceColor>()\n        val drawable = obtain(pool)\n        identifierToUniqueColor(pickedObjectId, drawable.color)\n        drawable.program = rc.getShaderProgram { BasicShaderProgram() }\n        rc.offerSurfaceDrawable(drawable, Double.NEGATIVE_INFINITY)\n\n        // If the pick ray intersects the terrain, enqueue a picked object that associates the terrain drawable with its\n        // picked object ID and the intersection position.\n        val pickRay = rc.pickRay\n        if (pickRay != null && rc.terrain!!.intersect(pickRay, pickPoint)) {\n            rc.globe!!.cartesianToGeographic(pickPoint.x, pickPoint.y, pickPoint.z, pickPos)\n            rc.offerPickedObject(fromTerrain(pickedObjectId, pickPos))\n        }\n    }\n\n    override fun drawFrame(dc: DrawContext) {\n        clearFrame(dc)\n        drawDrawables(dc)\n        if (dc.isPickMode) resolvePick(dc)\n    }\n\n    protected open fun clearFrame(dc: DrawContext) {\n        dc.gl.clear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT)\n    }\n\n    protected open fun drawDrawables(dc: DrawContext) {\n        dc.rewindDrawables()\n        while (true) {\n            val next = dc.pollDrawable() ?: break\n            try {\n                next.draw(dc)\n            } catch (e: Exception) {\n                logMessage(\n                    ERROR, \"BasicFrameController\", \"drawDrawables\",\n                    \"Exception while drawing '$next'\", e\n                )\n                // Keep going. Draw the remaining drawables.\n            }\n        }\n    }\n\n    protected open fun resolvePick(dc: DrawContext) {\n        val pickedObjects = dc.pickedObjects ?: return\n        if (pickedObjects.count == 0) return  // no eligible objects; avoid expensive calls to glReadPixels\n        val pickViewport = dc.pickViewport ?: return\n        val pickPointOnly = dc.pickPoint != null && pickViewport.width <= 3 && pickViewport.height <= 3\n        var objectFound = false\n\n        dc.pickPoint?.let { pickPoint ->\n            // Read the fragment color at the pick point.\n            dc.readPixelColor(pickPoint.x.roundToInt(), pickPoint.y.roundToInt(), pickColor)\n\n            // Convert the fragment color to a picked object ID. It returns zero if the color cannot indicate a picked\n            // object ID, in which case no objects have been drawn at the pick point.\n            val topObjectId = uniqueColorToIdentifier(pickColor)\n            if (topObjectId != 0) {\n                val topObject = pickedObjects.pickedObjectWithId(topObjectId)\n                if (topObject != null) {\n                    if (!topObject.isTerrain) objectFound = true // Non-terrain object found in pick point\n                    if (pickPointOnly || objectFound) {\n                        topObject.markOnTop()\n                        // Remove picked objects except top and terrain in case of object found or point only mode\n                        // Using clearPickedObjects and two offerPickedObject is faster than keepTopAndTerrainObjects\n                        val terrainObject = pickedObjects.terrainPickedObject\n                        pickedObjects.clearPickedObjects()\n                        pickedObjects.offerPickedObject(topObject)\n                        // handles null objects and duplicate objects\n                        if (terrainObject != null) pickedObjects.offerPickedObject(terrainObject)\n                    }\n                } else if (pickPointOnly) pickedObjects.clearPickedObjects() // no eligible objects drawn at the pick point\n            } else if (pickPointOnly) pickedObjects.clearPickedObjects() // no objects drawn at the pick point\n        }\n\n        if (!pickPointOnly && !objectFound) {\n            // Read the unique fragment colors in the pick rectangle.\n            dc.readPixelColors(pickViewport.x, pickViewport.y, pickViewport.width, pickViewport.height).forEach { pickColor ->\n                // Convert the fragment color to a picked object ID. This returns zero if the color cannot indicate a picked\n                // object ID.\n                val topObjectId = uniqueColorToIdentifier(pickColor)\n                if (topObjectId != 0) {\n                    val topObject = pickedObjects.pickedObjectWithId(topObjectId)\n                    if (topObject?.isTerrain == false) topObject.markOnTop()\n                }\n            }\n\n            // Remove all picked objects not marked as on top or terrain.\n            pickedObjects.keepTopAndTerrainObjects()\n        }\n    }\n}","package earth.worldwind.frame\n\nimport earth.worldwind.PickedObjectList\nimport earth.worldwind.draw.DrawableQueue\nimport earth.worldwind.geom.Line\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.geom.Vec2\nimport earth.worldwind.geom.Viewport\nimport earth.worldwind.util.Pool\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlin.jvm.JvmStatic\n\nopen class Frame {\n    val viewport = Viewport()\n    val projection = Matrix4()\n    val modelview = Matrix4()\n//    val infiniteProjection = Matrix4()\n    val drawableQueue = DrawableQueue()\n    val drawableTerrain = DrawableQueue()\n    var pickedObjects: PickedObjectList? = null\n    var pickDeferred: CompletableDeferred<PickedObjectList>? = null\n    var pickViewport: Viewport? = null\n    var pickPoint: Vec2? = null\n    var pickRay: Line? = null\n    var isPickMode = false\n    private var pool: Pool<Frame>? = null\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<Frame>): Frame {\n            val instance = pool.acquire() ?: Frame()  // get an instance from the pool\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    open fun recycle() {\n        viewport.setEmpty()\n        projection.setToIdentity()\n        modelview.setToIdentity()\n//        infiniteProjection.setToIdentity()\n        drawableQueue.clearDrawables()\n        drawableTerrain.clearDrawables()\n        pickedObjects?.let{ pickDeferred?.complete(it) } // Complete deferred pick if available\n        pickedObjects = null\n        pickDeferred = null\n        pickViewport = null\n        pickPoint = null\n        pickRay = null\n        isPickMode = false\n        pool?.release(this) // return this instance to the pool\n        pool = null\n    }\n}","package earth.worldwind.geom\n\nimport earth.worldwind.geom.Angle.Companion.POS180\nimport earth.worldwind.geom.Angle.Companion.POS90\nimport earth.worldwind.globe.Globe\nimport kotlin.math.abs\nimport kotlin.math.sqrt\n\n/**\n * Represents a bounding box in Cartesian coordinates. Typically used as a bounding volume.\n */\nopen class BoundingBox {\n    /**\n     * The box's center point.\n     */\n    internal val center = Vec3(0.0, 0.0, 0.0)\n    /**\n     * The center point of the box's bottom. (The origin of the R axis.)\n     */\n    protected val bottomCenter = Vec3(-0.5, 0.0, 0.0)\n    /**\n     * The center point of the box's top. (The end of the R axis.)\n     */\n    protected val topCenter = Vec3(0.5, 0.0, 0.0)\n    /**\n     * The box's R axis, its longest axis.\n     */\n    protected val r = Vec3(1.0, 0.0, 0.0)\n    /**\n     * The box's S axis, its mid-length axis.\n     */\n    protected val s = Vec3(0.0, 1.0, 0.0)\n    /**\n     * The box's T axis, its shortest axis.\n     */\n    protected val t = Vec3(0.0, 0.0, 1.0)\n    /**\n     * The box's radius. (The half-length of its diagonal.)\n     */\n    protected var radius = sqrt(3.0)\n\n    private val endPoint1 = Vec3()\n    private val endPoint2 = Vec3()\n    private val scratchHeights = FloatArray(NUM_LAT * NUM_LON)\n    private val scratchPoints = FloatArray(NUM_LAT * NUM_LON * 3)\n\n    /**\n     * Indicates whether this bounding box is a unit box centered at the Cartesian origin (0, 0, 0).\n     *\n     * @return true if this bounding box is a unit box, otherwise false\n     */\n    val isUnitBox get() = center.x == 0.0 && center.y == 0.0 && center.z == 0.0 && radius == sqrt(3.0)\n\n    /**\n     * Sets this bounding box to a unit box centered at the Cartesian origin (0, 0, 0).\n     *\n     * @return This bounding box set to a unit box\n     */\n    fun setToUnitBox() = apply {\n        center.set(0.0, 0.0, 0.0)\n        bottomCenter.set(-0.5, 0.0, 0.0)\n        topCenter.set(0.5, 0.0, 0.0)\n\n        r.set(1.0, 0.0, 0.0)\n        s.set(0.0, 1.0, 0.0)\n        t.set(0.0, 0.0, 1.0)\n\n        radius = sqrt(3.0)\n    }\n\n    /**\n     * Sets this bounding box such that it minimally encloses a specified array of points.\n     *\n     * @param array  the array of points to consider\n     * @param count  the number of array elements to consider\n     * @param stride the number of coordinates between the first coordinate of adjacent points - must be at least 3\n     *\n     * @return This bounding box set to contain the specified array of points.\n     */\n    fun setToPoints(array: FloatArray, count: Int, stride: Int) = apply {\n        // Compute this box's axes by performing a principal component analysis on the array of points.\n        val matrix = Matrix4()\n        matrix.setToCovarianceOfPoints(array, count, stride)\n        matrix.extractEigenvectors(r, s, t)\n        r.normalize()\n        s.normalize()\n        t.normalize()\n\n        // Find the extremes along each axis.\n        var rMin = Double.POSITIVE_INFINITY\n        var rMax = Double.NEGATIVE_INFINITY\n        var sMin = Double.POSITIVE_INFINITY\n        var sMax = Double.NEGATIVE_INFINITY\n        var tMin = Double.POSITIVE_INFINITY\n        var tMax = Double.NEGATIVE_INFINITY\n\n        val p = Vec3()\n        for (idx in 0 until count step stride) {\n            p.set(array[idx].toDouble(), array[idx + 1].toDouble(), array[idx + 2].toDouble())\n\n            val pdr = p.dot(r)\n            if (rMin > pdr) rMin = pdr\n            if (rMax < pdr) rMax = pdr\n\n            val pds = p.dot(s)\n            if (sMin > pds) sMin = pds\n            if (sMax < pds) sMax = pds\n\n            val pdt = p.dot(t)\n            if (tMin > pdt) tMin = pdt\n            if (tMax < pdt) tMax = pdt\n        }\n\n        // Ensure that the extremes along each axis have nonzero separation.\n        if (rMax == rMin) rMax = rMin + 1\n        if (sMax == sMin) sMax = sMin + 1\n        if (tMax == tMin) tMax = tMin + 1\n\n        // Compute the box properties from its unit axes and the extremes along each axis.\n        val rLen = rMax - rMin\n        val sLen = sMax - sMin\n        val tLen = tMax - tMin\n\n        val rSum = rMax + rMin\n        val sSum = sMax + sMin\n        val tSum = tMax + tMin\n\n        val cx = 0.5 * (r.x * rSum + s.x * sSum + t.x * tSum)\n        val cy = 0.5 * (r.y * rSum + s.y * sSum + t.y * tSum)\n        val cz = 0.5 * (r.z * rSum + s.z * sSum + t.z * tSum)\n\n        val rx2 = 0.5 * r.x * rLen\n        val ry2 = 0.5 * r.y * rLen\n        val rz2 = 0.5 * r.z * rLen\n\n        center.set(cx, cy, cz)\n        topCenter.set(cx + rx2, cy + ry2, cz + rz2)\n        bottomCenter.set(cx - rx2, cy - ry2, cz - rz2)\n\n        r.multiply(rLen)\n        s.multiply(sLen)\n        t.multiply(tLen)\n\n        radius = 0.5 * sqrt(rLen * rLen + sLen * sLen + tLen * tLen)\n    }\n\n    /**\n     * Sets this bounding box such that it contains a specified sector on a specified globe with min and max terrain\n     * height.\n     * <br>\n     * To create a bounding box that contains the sector at mean sea level, specify zero for the minimum and maximum\n     * height. To create a bounding box that contains the terrain surface in this sector, specify the actual minimum and\n     * maximum height values associated with the terrain in the sector, multiplied by the scene's vertical\n     * exaggeration.\n     * <br>\n     *\n     * @param sector    the sector for which to create the bounding box\n     * @param globe     the globe associated with the sector\n     * @param minHeight the minimum terrain height within the sector\n     * @param maxHeight the maximum terrain height within the sector\n     *\n     * @return this bounding box set to contain the specified sector\n     */\n    fun setToSector(sector: Sector, globe: Globe, minHeight: Float, maxHeight: Float) = apply {\n        // Compute the cartesian points for a 3x3 geographic grid. This grid captures enough detail to bound the\n        // sector. Use minimum elevation at the corners and max elevation everywhere else.\n        val heights = scratchHeights\n        heights.fill(maxHeight)\n        heights[0] = minHeight\n        heights[2] = minHeight\n        heights[6] = minHeight\n        heights[8] = minHeight\n        val points = scratchPoints\n        globe.geographicToCartesianGrid(sector, NUM_LAT, NUM_LON, heights, 1.0f, null, points, 0, 0)\n\n        // Compute the local coordinate axes. Since we know this box is bounding a geographic sector, we use the\n        // local coordinate axes at its centroid as the box axes. Using these axes results in a box that has +-10%\n        // the volume of a box with axes derived from a principal component analysis, but is faster to compute.\n        val centroidLat = sector.centroidLatitude\n        val centroidLon = sector.centroidLongitude\n        val matrix = globe.geographicToCartesianTransform(centroidLat, centroidLon, 0.0, Matrix4())\n        val m = matrix.m\n        r.set(m[0], m[4], m[8])\n        s.set(m[1], m[5], m[9])\n        t.set(m[2], m[6], m[10])\n\n        // Find the extremes along each axis.\n        val rExtremes = doubleArrayOf(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY)\n        val sExtremes = doubleArrayOf(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY)\n        val tExtremes = doubleArrayOf(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY)\n\n        val p = Vec3()\n        for (idx in points.indices step 3) {\n            p.set(points[idx].toDouble(), points[idx + 1].toDouble(), points[idx + 2].toDouble())\n            adjustExtremes(r, rExtremes, s, sExtremes, t, tExtremes, p)\n        }\n\n        // If the sector encompasses more than one hemisphere, the 3x3 grid does not capture enough detail to bound\n        // the sector. The antipodal points along the parallel through the sector's centroid represent its extremes\n        // in longitude. Incorporate those antipodal points into the extremes along each axis.\n        if (sector.deltaLongitude > POS180) {\n            val altitude = maxHeight.toDouble()\n            globe.geographicToCartesian(sector.centroidLatitude, sector.centroidLongitude + POS90, altitude, endPoint1)\n            globe.geographicToCartesian(sector.centroidLatitude, sector.centroidLongitude - POS90, altitude, endPoint2)\n            adjustExtremes(r, rExtremes, s, sExtremes, t, tExtremes, endPoint1)\n            adjustExtremes(r, rExtremes, s, sExtremes, t, tExtremes, endPoint2)\n        }\n\n        // Sort the axes from most prominent to least prominent. The frustum intersection methods assume that the axes\n        // are defined in this way.\n        if (rExtremes[1] - rExtremes[0] < sExtremes[1] - sExtremes[0]) swapAxes(r, rExtremes, s, sExtremes)\n        if (sExtremes[1] - sExtremes[0] < tExtremes[1] - tExtremes[0]) swapAxes(s, sExtremes, t, tExtremes)\n        if (rExtremes[1] - rExtremes[0] < sExtremes[1] - sExtremes[0]) swapAxes(r, rExtremes, s, sExtremes)\n\n        // Compute the box properties from its unit axes and the extremes along each axis.\n        val rLen = rExtremes[1] - rExtremes[0]\n        val sLen = sExtremes[1] - sExtremes[0]\n        val tLen = tExtremes[1] - tExtremes[0]\n\n        val rSum = rExtremes[1] + rExtremes[0]\n        val sSum = sExtremes[1] + sExtremes[0]\n        val tSum = tExtremes[1] + tExtremes[0]\n\n        val cx = 0.5 * (r.x * rSum + s.x * sSum + t.x * tSum)\n        val cy = 0.5 * (r.y * rSum + s.y * sSum + t.y * tSum)\n        val cz = 0.5 * (r.z * rSum + s.z * sSum + t.z * tSum)\n\n        val rx2 = 0.5 * r.x * rLen\n        val ry2 = 0.5 * r.y * rLen\n        val rz2 = 0.5 * r.z * rLen\n\n        center.set(cx, cy, cz)\n        topCenter.set(cx + rx2, cy + ry2, cz + rz2)\n        bottomCenter.set(cx - rx2, cy - ry2, cz - rz2)\n\n        r.multiply(rLen)\n        s.multiply(sLen)\n        t.multiply(tLen)\n\n        radius = 0.5 * sqrt(rLen * rLen + sLen * sLen + tLen * tLen)\n    }\n\n    /**\n     * Translates this bounding box by specified components.\n     *\n     * @param x the X translation component\n     * @param y the Y translation component\n     * @param z the Z translation component\n     *\n     * @return this bounding box translated by the specified components\n     */\n    fun translate(x: Double, y: Double, z: Double) = apply {\n        center.x += x\n        center.y += y\n        center.z += z\n\n        bottomCenter.x += x\n        bottomCenter.y += y\n        bottomCenter.z += z\n\n        topCenter.x += x\n        topCenter.y += y\n        topCenter.z += z\n    }\n\n    fun distanceTo(point: Vec3): Double {\n        var minDist2 = Double.POSITIVE_INFINITY\n\n        // Start with distance to the center of the box.\n        var dist2 = center.distanceToSquared(point)\n        if (minDist2 > dist2) minDist2 = dist2\n\n        // Test distance to the bottom of the R axis.\n        dist2 = bottomCenter.distanceToSquared(point)\n        if (minDist2 > dist2) minDist2 = dist2\n\n        // Test distance to the top of the R axis.\n        dist2 = topCenter.distanceToSquared(point)\n        if (minDist2 > dist2) minDist2 = dist2\n\n        // Test distance to the bottom of the S axis.\n        endPoint1.x = center.x - 0.5 * s.x\n        endPoint1.y = center.y - 0.5 * s.y\n        endPoint1.z = center.z - 0.5 * s.z\n        dist2 = endPoint1.distanceToSquared(point)\n        if (minDist2 > dist2) minDist2 = dist2\n\n        // Test distance to the top of the S axis.\n        endPoint1.x = center.x + 0.5 * s.x\n        endPoint1.y = center.y + 0.5 * s.y\n        endPoint1.z = center.z + 0.5 * s.z\n        dist2 = endPoint1.distanceToSquared(point)\n        if (minDist2 > dist2) minDist2 = dist2\n        return sqrt(minDist2)\n    }\n\n    /**\n     * Indicates whether this bounding box intersects a specified frustum.\n     *\n     * @param frustum The frustum of interest.\n     *\n     * @return true if the specified frustum intersects this bounding box, otherwise false.\n     */\n    fun intersectsFrustum(frustum: Frustum): Boolean {\n        endPoint1.copy(bottomCenter)\n        endPoint2.copy(topCenter)\n        return intersectsAt(frustum.near) >= 0 && intersectsAt(frustum.far) >= 0\n                && intersectsAt(frustum.left) >= 0 && intersectsAt(frustum.right) >= 0\n                && intersectsAt(frustum.top) >= 0 && intersectsAt(frustum.bottom) >= 0\n    }\n\n    private fun intersectsAt(plane: Plane): Double {\n        val n = plane.normal\n        val effectiveRadius = 0.5 * (abs(s.dot(n)) + abs(t.dot(n)))\n\n        // Test the distance from the first end-point.\n        val dq1 = plane.dot(endPoint1)\n        val bq1 = dq1 <= -effectiveRadius\n\n        // Test the distance from the second end-point.\n        val dq2 = plane.dot(endPoint2)\n        val bq2 = dq2 <= -effectiveRadius\n        if (bq1 && bq2) return -1.0 // endpoints more distant from plane than effective radius; box is on neg. side of plane\n        if (bq1 == bq2) return 0.0 // endpoints less distant from plane than effective radius; can't draw any conclusions\n\n        // Compute and return the endpoints of the box on the positive side of the plane\n        val dot = n.x * (endPoint1.x - endPoint2.x) + n.y * (endPoint1.y - endPoint2.y) + n.z * (endPoint1.z - endPoint2.z)\n        val t = (effectiveRadius + dq1) / dot\n\n        // Truncate the line to only that in the positive half-space, e.g., inside the frustum.\n        val x = (endPoint2.x - endPoint1.x) * t + endPoint1.x\n        val y = (endPoint2.y - endPoint1.y) * t + endPoint1.y\n        val z = (endPoint2.z - endPoint1.z) * t + endPoint1.z\n        if (bq1) endPoint1.set(x, y, z) else endPoint2.set(x, y, z)\n        return t\n    }\n\n    override fun toString() = \"BoundingBox(center=$center, bottomCenter=$bottomCenter, topCenter=$topCenter, r=$r, s=$s, t=$t, radius=$radius)\"\n\n    companion object {\n        private const val NUM_LAT = 3\n        private const val NUM_LON = 3\n\n        private fun adjustExtremes(\n            r: Vec3, rExtremes: DoubleArray, s: Vec3, sExtremes: DoubleArray, t: Vec3, tExtremes: DoubleArray, p: Vec3\n        ) {\n            val pdr = p.dot(r)\n            if (rExtremes[0] > pdr) rExtremes[0] = pdr\n            if (rExtremes[1] < pdr) rExtremes[1] = pdr\n\n            val pds = p.dot(s)\n            if (sExtremes[0] > pds) sExtremes[0] = pds\n            if (sExtremes[1] < pds) sExtremes[1] = pds\n\n            val pdt = p.dot(t)\n            if (tExtremes[0] > pdt) tExtremes[0] = pdt\n            if (tExtremes[1] < pdt) tExtremes[1] = pdt\n        }\n\n        private fun swapAxes(a: Vec3, aExtremes: DoubleArray, b: Vec3, bExtremes: DoubleArray) {\n            a.swap(b)\n\n            var tmp = aExtremes[0]\n            aExtremes[0] = bExtremes[0]\n            bExtremes[0] = tmp\n\n            tmp = aExtremes[1]\n            aExtremes[1] = bExtremes[1]\n            bExtremes[1] = tmp\n        }\n    }\n}","package earth.worldwind.geom\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\n\n/**\n * Represents a bounding sphere in Cartesian coordinates. Typically used as a bounding volume.\n */\nopen class BoundingSphere {\n    /**\n     * The sphere's center point.\n     */\n    val center = Vec3()\n    /**\n     * The sphere's radius.\n     */\n    var radius = 1.0\n        set(value) {\n            require(value >= 0) {\n                logMessage(ERROR, \"BoundingSphere\", \"setRadius\", \"invalidRadius\")\n            }\n            field = value\n        }\n\n    /**\n     * Sets this bounding sphere to the specified center point and radius.\n     *\n     * @param center the new center point\n     * @param radius the new radius\n     *\n     * @return This bounding sphere with its center point and radius set to the specified values\n     */\n    fun set(center: Vec3, radius: Double) = apply {\n        this.center.copy(center)\n        this.radius = radius\n    }\n\n    /**\n     * Indicates whether this bounding sphere intersects a specified frustum.\n     *\n     * @param frustum the frustum of interest\n     *\n     * @return true if the specified frustum intersects this bounding sphere, otherwise false.\n     */\n    fun intersectsFrustum(frustum: Frustum): Boolean {\n        // See if the extent's bounding sphere is within or intersects the frustum. The dot product of the extent's\n        // center point with each plane's vector provides a distance to each plane. If this distance is less than\n        // -radius, the extent is completely clipped by that plane and therefore does not intersect the space enclosed\n        // by this Frustum.\n        val nr = -radius\n        return frustum.near.distanceToPoint(center) > nr && frustum.far.distanceToPoint(center) > nr\n                && frustum.left.distanceToPoint(center) > nr && frustum.right.distanceToPoint(center) > nr\n                && frustum.top.distanceToPoint(center) > nr && frustum.bottom.distanceToPoint(center) > nr\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is BoundingSphere) return false\n        return center == other.center && radius == other.radius\n    }\n\n    override fun hashCode(): Int {\n        var result = center.hashCode()\n        result = 31 * result + radius.hashCode()\n        return result\n    }\n\n    override fun toString() = \"BoundingSphere(center=$center, radius=$radius)\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.geom.AltitudeMode.ABSOLUTE\nimport earth.worldwind.geom.Angle.Companion.POS180\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\n\nopen class Camera {\n    val position = Position()\n    var altitudeMode = ABSOLUTE\n    var heading = ZERO\n    var tilt = ZERO\n    var roll = ZERO\n    var fieldOfView = 45.0.degrees\n        set(value) {\n            require(value > ZERO && value < POS180) {\n                logMessage(ERROR, \"Camera\", \"setFieldOfView\", \"invalidFieldOfView\")\n            }\n            field = value\n        }\n\n    fun set(\n        latitude: Angle, longitude: Angle, altitude: Double, altitudeMode: AltitudeMode,\n        heading: Angle, tilt: Angle, roll: Angle, fieldOfView: Angle\n    ) = set(latitude, longitude, altitude, altitudeMode, heading, tilt, roll).apply { this.fieldOfView = fieldOfView }\n\n    fun set(\n        latitude: Angle, longitude: Angle, altitude: Double, altitudeMode: AltitudeMode,\n        heading: Angle, tilt: Angle, roll: Angle\n    ) = apply {\n        this.position.set(latitude, longitude, altitude)\n        this.altitudeMode = altitudeMode\n        this.heading = heading\n        this.tilt = tilt\n        this.roll = roll\n    }\n\n    fun copy(camera: Camera) = set(\n        camera.position.latitude,\n        camera.position.longitude,\n        camera.position.altitude,\n        camera.altitudeMode,\n        camera.heading,\n        camera.tilt,\n        camera.roll,\n        camera.fieldOfView\n    )\n\n    override fun toString() = \"Camera(position=$position, altitudeMode=$altitudeMode, heading=$heading, tilt=$tilt, roll=$roll, fieldOfView=$fieldOfView)\"\n}","package earth.worldwind.geom\n\nimport kotlin.jvm.JvmStatic\n\n/**\n * Oblate ellipsoid with semi-major axis and inverse flattening.\n */\nopen class Ellipsoid(\n    /**\n     * One half of the ellipsoid's major axis length in meters, which runs through the center to opposite points on the\n     * equator.\n     */\n    val semiMajorAxis: Double,\n    /**\n     * Measure of the ellipsoid's compression. Indicates how much the ellipsoid's semi-minor axis is compressed relative\n     * to the semi-major axis. Expressed as `1/f`, where `f = (a - b) / a`, given the semi-major axis `a` and the semi-minor axis `b`.\n     */\n    val inverseFlattening: Double\n) {\n    /**\n     * Computes this ellipsoid's semi-minor length axis in meters. The semi-minor axis is one half of the ellipsoid's\n     * minor axis, which runs through the center to opposite points on the poles.\n     */\n    val semiMinorAxis: Double get() {\n        val f = 1 / inverseFlattening\n        return semiMajorAxis * (1 - f)\n    }\n    /**\n     * Computes this ellipsoid's eccentricity squared. The returned value is equivalent to `2*f - f*f`,\n     * where `f` is this ellipsoid's flattening.\n     */\n    val eccentricitySquared: Double get() {\n        val f = 1 / inverseFlattening\n        return 2 * f - f * f\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Ellipsoid) return false\n\n        if (semiMajorAxis != other.semiMajorAxis) return false\n        if (inverseFlattening != other.inverseFlattening) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = semiMajorAxis.hashCode()\n        result = 31 * result + inverseFlattening.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Ellipsoid(semiMajorAxis=$semiMajorAxis, inverseFlattening=$inverseFlattening)\"\n\n    companion object {\n        /**\n         * WGS 84 reference ellipsoid for Earth. The ellipsoid's semi-major axis and inverse flattening factor are\n         * configured according to the WGS 84 reference system (aka WGS 1984, EPSG:4326). WGS 84 reference values taken from\n         * [here](http://earth-info.nga.mil/GandG/publications/NGA_STND_0036_1_0_0_WGS84/NGA.STND.0036_1.0.0_WGS84.pdf).\n         */\n        @JvmStatic\n        val WGS84 = Ellipsoid(6378137.0, 298.257223563)\n    }\n}","package earth.worldwind.geom\n\n/**\n * Represents a six-sided view frustum in Cartesian coordinates with a corresponding viewport in screen coordinates.\n */\nopen class Frustum {\n    internal val left = Plane(1.0, 0.0, 0.0, 1.0)\n    internal val right = Plane(-1.0, 0.0, 0.0, 1.0)\n    internal val bottom = Plane(0.0, 1.0, 0.0, 1.0)\n    internal val top = Plane(0.0, -1.0, 0.0, 1.0)\n    internal val near = Plane(0.0, 0.0, -1.0, 1.0)\n    internal val far = Plane(0.0, 0.0, 1.0, 1.0)\n    internal val viewport = Viewport(0, 0, 1, 1)\n    protected val planes = arrayOf(left, right, top, bottom, near, far)\n    private val scratchMatrix = Matrix4()\n\n    /**\n     * Constructs a new unit frustum with each of its planes 1 meter from the center and a viewport with width and\n     * height both 1.\n     */\n    constructor()\n\n    /**\n     * Constructs a frustum from planes.\n     *\n     * @param left     the frustum's left plane\n     * @param right    the frustum's right plane\n     * @param bottom   the frustum's bottom plane\n     * @param top      the frustum's top plane\n     * @param near     the frustum's near plane\n     * @param far      the frustum's far plane\n     * @param viewport the frustum's viewport\n     */\n    constructor(left: Plane, right: Plane, bottom: Plane, top: Plane, near: Plane, far: Plane, viewport: Viewport): this() {\n        this.left.copy(left)\n        this.right.copy(right)\n        this.bottom.copy(bottom)\n        this.top.copy(top)\n        this.near.copy(near)\n        this.far.copy(far)\n        this.viewport.copy(viewport)\n    }\n\n    /**\n     * Sets this frustum to a unit frustum with each of its planes 1 meter from the center a viewport with width and\n     * height both 1.\n     *\n     * @return this frustum, set to a unit frustum\n     */\n    fun setToUnitFrustum() = apply {\n        left.set(1.0, 0.0, 0.0, 1.0)\n        right.set(-1.0, 0.0, 0.0, 1.0)\n        bottom.set(0.0, 1.0, 0.0, 1.0)\n        top.set(0.0, -1.0, 0.0, 1.0)\n        near.set(0.0, 0.0, -1.0, 1.0)\n        far.set(0.0, 0.0, 1.0, 1.0)\n        viewport.set(0, 0, 1, 1)\n    }\n\n    /**\n     * Sets this frustum to one appropriate for a modelview-projection matrix. A modelview-projection matrix's view\n     * frustum is a Cartesian volume that contains everything visible in a scene displayed using that\n     * modelview-projection matrix.\n     * <br>\n     * This method assumes that the specified matrices represents a projection matrix and a modelview matrix\n     * respectively. If this is not the case the results are undefined.\n     *\n     * @param projection the projection matrix to extract the frustum from\n     * @param modelview  the modelview matrix defining the frustum's position and orientation in Cartesian coordinates\n     * @param viewport   the screen coordinate viewport corresponding to the projection matrix\n     *\n     * @return this frustum, with its planes set to the modelview-projection matrix's view frustum, in Cartesian\n     * coordinates\n     */\n    fun setToModelviewProjection(projection: Matrix4, modelview: Matrix4, viewport: Viewport) = apply {\n        // Compute the transpose of the modelview matrix.\n        scratchMatrix.transposeMatrix(modelview)\n\n        // Get the components of the projection matrix.\n        val m = projection.m\n\n        // Left Plane = row 4 + row 1:\n        var x = m[12] + m[0]\n        var y = m[13] + m[1]\n        var z = m[14] + m[2]\n        var w = m[15] + m[3]\n        left.set(x, y, z, w) // normalizes the plane's coordinates\n        left.transformByMatrix(scratchMatrix)\n\n        // Right Plane = row 4 - row 1:\n        x = m[12] - m[0]\n        y = m[13] - m[1]\n        z = m[14] - m[2]\n        w = m[15] - m[3]\n        right.set(x, y, z, w) // normalizes the plane's coordinates\n        right.transformByMatrix(scratchMatrix)\n\n        // Bottom Plane = row 4 + row 2:\n        x = m[12] + m[4]\n        y = m[13] + m[5]\n        z = m[14] + m[6]\n        w = m[15] + m[7]\n        bottom.set(x, y, z, w) // normalizes the plane's coordinates\n        bottom.transformByMatrix(scratchMatrix)\n\n        // Top Plane = row 4 - row 2:\n        x = m[12] - m[4]\n        y = m[13] - m[5]\n        z = m[14] - m[6]\n        w = m[15] - m[7]\n        top.set(x, y, z, w) // normalizes the plane's coordinates\n        top.transformByMatrix(scratchMatrix)\n\n        // Near Plane = row 4 + row 3:\n        x = m[12] + m[8]\n        y = m[13] + m[9]\n        z = m[14] + m[10]\n        w = m[15] + m[11]\n        near.set(x, y, z, w) // normalizes the plane's coordinates\n        near.transformByMatrix(scratchMatrix)\n\n        // Far Plane = row 4 - row 3:\n        x = m[12] - m[8]\n        y = m[13] - m[9]\n        z = m[14] - m[10]\n        w = m[15] - m[11]\n        far.set(x, y, z, w) // normalizes the plane's coordinates\n        far.transformByMatrix(scratchMatrix)\n\n        // Copy the specified viewport.\n        this.viewport.copy(viewport)\n    }\n\n    /**\n     * Sets this frustum to one appropriate for a subset of a modelview-projection matrix. A modelview-projection\n     * matrix's view frustum is a Cartesian volume that contains everything visible in a scene displayed using that\n     * modelview-projection matrix. The subset is defined by the region within the original viewport that the frustum\n     * contains.\n     * <br>\n     * This method assumes that the specified matrices represents a projection matrix and a modelview matrix\n     * respectively. If this is not the case the results are undefined.\n     *\n     * @param projection  the projection matrix to extract the frustum from\n     * @param modelview   the modelview matrix defining the frustum's position and orientation in Cartesian coordinates\n     * @param viewport    the screen coordinate viewport corresponding to the projection matrix\n     * @param subViewport the screen coordinate region the frustum should contain\n     *\n     * @return this frustum, with its planes set to the modelview-projection matrix's view frustum, in Cartesian\n     * coordinates\n     */\n    fun setToModelviewProjection(projection: Matrix4, modelview: Matrix4, viewport: Viewport, subViewport: Viewport) = apply {\n        // Compute the sub-viewport's four edges in screen coordinates.\n        val left = subViewport.x.toDouble()\n        val right = (subViewport.x + subViewport.width).toDouble()\n        val bottom = subViewport.y.toDouble()\n        val top = (subViewport.y + subViewport.height).toDouble()\n\n        // Transform the sub-viewport's four edges from screen coordinates to Cartesian coordinates.\n        var bln: Vec3\n        var blf: Vec3\n        var brn: Vec3\n        var brf: Vec3\n        var tln: Vec3\n        var tlf: Vec3\n        var trn: Vec3\n        var trf: Vec3\n        val mvpInv = scratchMatrix.setToMultiply(projection, modelview).invert()\n        mvpInv.unProject(left, bottom, viewport, Vec3().also { bln = it }, Vec3().also { blf = it })\n        mvpInv.unProject(right, bottom, viewport, Vec3().also { brn = it }, Vec3().also { brf = it })\n        mvpInv.unProject(left, top, viewport, Vec3().also { tln = it }, Vec3().also { tlf = it })\n        mvpInv.unProject(right, top, viewport, Vec3().also { trn = it }, Vec3().also { trf = it })\n\n        val va = Vec3(tlf.x - bln.x, tlf.y - bln.y, tlf.z - bln.z)\n        val vb = Vec3(tln.x - blf.x, tln.y - blf.y, tln.z - blf.z)\n\n        val nl = va.cross(vb)\n        this.left.set(nl.x, nl.y, nl.z, -nl.dot(bln))\n        va.set(trn.x - brf.x, trn.y - brf.y, trn.z - brf.z)\n        vb.set(trf.x - brn.x, trf.y - brn.y, trf.z - brn.z)\n\n        val nr = va.cross(vb)\n        this.right.set(nr.x, nr.y, nr.z, -nr.dot(brn))\n        va.set(brf.x - bln.x, brf.y - bln.y, brf.z - bln.z)\n        vb.set(blf.x - brn.x, blf.y - brn.y, blf.z - brn.z)\n\n        val nb = va.cross(vb)\n        this.bottom.set(nb.x, nb.y, nb.z, -nb.dot(brn))\n        va.set(tlf.x - trn.x, tlf.y - trn.y, tlf.z - trn.z)\n        vb.set(trf.x - tln.x, trf.y - tln.y, trf.z - tln.z)\n\n        val nt = va.cross(vb)\n        this.top.set(nt.x, nt.y, nt.z, -nt.dot(tln))\n        va.set(tln.x - brn.x, tln.y - brn.y, tln.z - brn.z)\n        vb.set(trn.x - bln.x, trn.y - bln.y, trn.z - bln.z)\n\n        val nn = va.cross(vb)\n        this.near.set(nn.x, nn.y, nn.z, -nn.dot(bln))\n        va.set(trf.x - blf.x, trf.y - blf.y, trf.z - blf.z)\n        vb.set(tlf.x - brf.x, tlf.y - brf.y, tlf.z - brf.z)\n\n        val nf = va.cross(vb)\n        this.far.set(nf.x, nf.y, nf.z, -nf.dot(blf))\n\n        // Copy the specified sub-viewport.\n        this.viewport.copy(subViewport)\n    }\n\n    /**\n     * See if the point is entirely within the frustum. The dot product of the point with each plane's vector\n     * provides a distance to each plane. If this distance is less than 0, the point is clipped by that plane and\n     * neither intersects nor is contained by the space enclosed by this Frustum.\n     *\n     * @param point Vector to check\n     *\n     * @return true if point contains in frustum\n     */\n    fun containsPoint(point: Vec3) = far.dot(point) > 0 && left.dot(point) > 0 && right.dot(point) > 0\n            && top.dot(point) > 0 && bottom.dot(point) > 0 && near.dot(point) > 0\n\n    /**\n     * Determines whether a line segment intersects this frustum.\n     *\n     * @param pointA the first line segment endpoint\n     * @param pointB the second line segment endpoint\n     *\n     * @return true if the segment intersects or is contained in this frustum, otherwise false\n     */\n    fun intersectsSegment(pointA: Vec3, pointB: Vec3): Boolean {\n        // First do a trivial accept test.\n        if (containsPoint(pointA) || containsPoint(pointB)) return true\n        if (pointA == pointB) return false\n        for (plane in planes) {\n            // See if both points are behind the plane and therefore not in the frustum.\n            if (plane.onSameSide(pointA, pointB) < 0) return false\n\n            // See if the segment intersects the plane.\n            if (plane.clip(pointA, pointB) != null) return true\n        }\n        return false // segment does not intersect frustum\n    }\n\n    /**\n     * Determines whether a screen coordinate viewport intersects this frustum.\n     *\n     * @param viewport the viewport to test\n     *\n     * @return true if the viewport intersects or is contained in this frustum, otherwise false\n     */\n    fun intersectsViewport(viewport: Viewport) = this.viewport.intersects(viewport)\n}","package earth.worldwind.geom\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\n\n/**\n * Represents a line in Cartesian coordinates.\n */\nopen class Line {\n    /**\n     * This line's origin.\n     */\n    val origin = Vec3()\n    /**\n     * This line's direction.\n     */\n    val direction = Vec3()\n\n    /**\n     * Constructs a line with origin and direction both zero.\n     */\n    constructor()\n\n    /**\n     * Constructs a line with a specified origin and direction.\n     *\n     * @param origin    the line's origin\n     * @param direction the line's direction\n     */\n    constructor(origin: Vec3, direction: Vec3): this() { set(origin, direction) }\n\n    /**\n     * Constructs a line with the origin and direction from a specified line.\n     *\n     * @param line the line specifying origin and direction\n     */\n    constructor(line: Line): this(line.origin, line.direction)\n\n    /**\n     * Sets this line to a specified origin and direction.\n     *\n     * @param origin    the line's new origin\n     * @param direction the line's new direction\n     *\n     * @return this line, set to the new origin and direction\n     */\n    fun set(origin: Vec3, direction: Vec3) = apply {\n        this.origin.copy(origin)\n        this.direction.copy(direction)\n    }\n\n    /**\n     * Sets this line to the specified segment. This line has its origin at the first endpoint and its direction\n     * extending from the first endpoint to the second.\n     *\n     * @param pointA the segment's first endpoint\n     * @param pointB the segment's second endpoint\n     *\n     * @return this line, set to the specified segment\n     */\n    fun setToSegment(pointA: Vec3, pointB: Vec3) = apply {\n        origin.copy(pointA)\n        direction.set(pointB.x - pointA.x, pointB.y - pointA.y, pointB.z - pointA.z)\n    }\n\n    /**\n     * Computes a Cartesian point a specified distance along this line.\n     *\n     * @param distance The distance from this line's origin at which to compute the point.\n     * @param result   A pre-allocated [Vec3] instance in which to return the computed point.\n     *\n     * @return The specified result argument containing the computed point.\n     */\n    fun pointAt(distance: Double, result: Vec3): Vec3 {\n        result.x = origin.x + direction.x * distance\n        result.y = origin.y + direction.y * distance\n        result.z = origin.z + direction.z * distance\n        return result\n    }\n\n    /**\n     * Computes the first intersection of a triangle strip with this line. This line is interpreted as a ray;\n     * intersection points behind the line's origin are ignored.\n     * <br>\n     * The triangle strip is specified by a list of vertex points and a list of elements indicating the triangle strip\n     * tessellation of those vertices. The triangle strip elements are interpreted in the same manner as OpenGL, where\n     * each index indicates a vertex position rather than an actual index into the points array (e.g. a triangle strip\n     * index of 1 indicates the XYZ tuple starting at array index 3).\n     *\n     * @param points   an array of points containing XYZ tuples\n     * @param stride   the number of coordinates between the first coordinate of adjacent points - must be at least 3\n     * @param elements an array of indices into the points defining the triangle strip organization\n     * @param count    the number of indices to consider\n     * @param result   a pre-allocated Vec3 in which to return the nearest intersection point, if any\n     *\n     * @return true if this line intersects the triangle strip, otherwise false\n     *\n     * @throws IllegalArgumentException If array is empty, if the stride is less than 3,\n     * if the count is less than 0\n     */\n    fun triStripIntersection(points: FloatArray, stride: Int, elements: ShortArray, count: Int, result: Vec3): Boolean {\n        require(points.size >= stride) {\n            logMessage(ERROR, \"Line\", \"triStripIntersection\", \"missingArray\")\n        }\n        require(stride >= 3) {\n            logMessage(ERROR, \"Line\", \"triStripIntersection\", \"invalidStride\")\n        }\n        require(elements.isNotEmpty()) {\n            logMessage(ERROR, \"Line\", \"triStripIntersection\", \"missingArray\")\n        }\n        require(count >= 0) {\n            logMessage(ERROR, \"Line\", \"triStripIntersection\", \"invalidCount\")\n        }\n\n        // Taken from Moller and Trumbore\n        // http://www.cs.virginia.edu/~gfx/Courses/2003/ImageSynthesis/papers/Acceleration/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf\n\n        // Adapted from the original ray-triangle intersection algorithm to optimize for ray-triangle strip\n        // intersection. We optimize by reusing constant terms, replacing use of Vec3 with inline primitives, and\n        // exploiting the triangle strip organization to reuse computations common to adjacent triangles. These\n        // optimizations reduced worst-case terrain picking performance for Web WorldWind by approximately 50% in\n        // Chrome on a 2010 iMac and a Nexus 9.\n        val vx = direction.x\n        val vy = direction.y\n        val vz = direction.z\n        val sx = origin.x\n        val sy = origin.y\n        val sz = origin.z\n        var tMin = Double.POSITIVE_INFINITY\n        val epsilon = 0.00001\n\n        // Get the triangle strip's first vertex.\n        var vertex = elements[0] * stride\n        var vert1x = points[vertex++]\n        var vert1y = points[vertex++]\n        var vert1z = points[vertex]\n\n        // Get the triangle strip's second vertex.\n        vertex = elements[1] * stride\n        var vert2x = points[vertex++]\n        var vert2y = points[vertex++]\n        var vert2z = points[vertex]\n\n        // Compute the intersection of each triangle with the specified ray.\n        for (idx in 2 until count) {\n            // Move the last two vertices into the first two vertices. This takes advantage of the triangle strip's\n            // structure and avoids redundant reads from points and elements. During the first iteration this places the\n            // triangle strip's first three vertices in vert0, vert1 and vert2, respectively.\n            val vert0x = vert1x\n            val vert0y = vert1y\n            val vert0z = vert1z\n            vert1x = vert2x\n            vert1y = vert2y\n            vert1z = vert2z\n\n            // Get the triangle strip's next vertex.\n            vertex = elements[idx] * stride\n            vert2x = points[vertex++]\n            vert2y = points[vertex++]\n            vert2z = points[vertex]\n\n            // find vectors for two edges sharing point a: vert1 - vert0 and vert2 - vert0\n            val edge1x = vert1x - vert0x\n            val edge1y = vert1y - vert0y\n            val edge1z = vert1z - vert0z\n            val edge2x = vert2x - vert0x\n            val edge2y = vert2y - vert0y\n            val edge2z = vert2z - vert0z\n\n            // Compute cross product of line direction and edge2\n            val px = vy * edge2z - vz * edge2y\n            val py = vz * edge2x - vx * edge2z\n            val pz = vx * edge2y - vy * edge2x\n\n            // Get determinant\n            val det = edge1x * px + edge1y * py + edge1z * pz // edge1 dot p\n            // if det is near zero then ray lies in plane of triangle\n            if (det > -epsilon && det < epsilon) continue\n\n            val invDet = 1.0 / det\n\n            // Compute distance for vertex A to ray origin: origin - vert0\n            val tx = sx - vert0x\n            val ty = sy - vert0y\n            val tz = sz - vert0z\n\n            // Calculate u parameter and test bounds: 1/det * t dot p\n            val u = invDet * (tx * px + ty * py + tz * pz)\n            if (u < -epsilon || u > 1 + epsilon) continue\n\n            // Prepare to test v parameter: tvec cross edge1\n            val qx = ty * edge1z - tz * edge1y\n            val qy = tz * edge1x - tx * edge1z\n            val qz = tx * edge1y - ty * edge1x\n\n            // Calculate v parameter and test bounds: 1/det * dir dot q\n            val v = invDet * (vx * qx + vy * qy + vz * qz)\n            if (v < -epsilon || u + v > 1 + epsilon) continue\n\n            // Calculate the point of intersection on the line: t = 1/det * edge2 dot q\n            val t = invDet * (edge2x * qx + edge2y * qy + edge2z * qz)\n            if (t >= 0 && t < tMin) tMin = t\n        }\n        if (tMin != Double.POSITIVE_INFINITY) result.set(sx + vx * tMin, sy + vy * tMin, sz + vz * tMin)\n        return tMin != Double.POSITIVE_INFINITY\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Line) return false\n        return origin == other.origin && direction == other.direction\n    }\n\n    override fun hashCode(): Int {\n        var result = origin.hashCode()\n        result = 31 * result + direction.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Line(origin=$origin, direction=$direction)\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.geom.Angle.Companion.POS180\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.geom.Angle.Companion.fromDegrees\nimport earth.worldwind.geom.Angle.Companion.fromRadians\nimport earth.worldwind.geom.Angle.Companion.normalizeLongitude\nimport earth.worldwind.shape.PathType\nimport earth.worldwind.shape.PathType.GREAT_CIRCLE\nimport earth.worldwind.shape.PathType.RHUMB_LINE\nimport kotlinx.datetime.Clock\nimport kotlinx.datetime.TimeZone\nimport kotlinx.datetime.offsetIn\nimport kotlin.jvm.JvmStatic\nimport kotlin.math.*\n\n/**\n * Geographic location with a latitude and longitude.\n */\nopen class Location(\n    /**\n     * The location's latitude.\n     */\n    var latitude: Angle,\n    /**\n     * The location's longitude.\n     */\n    var longitude: Angle\n) {\n    /**\n     * Constructs a location with latitude and longitude both 0.\n     */\n    constructor(): this(latitude = ZERO, longitude = ZERO)\n\n    /**\n     * Constructs a location with the latitude and longitude of a specified location.\n     *\n     * @param location the location specifying the coordinates\n     */\n    constructor(location: Location): this(location.latitude, location.longitude)\n\n    companion object {\n        protected const val NEAR_ZERO_THRESHOLD = 1e-15\n        protected val timeZoneLatitudes = mapOf(\n            -12 to -45, // GMT-12\n            -11 to -30, // GMT-11\n            -10 to 20, // GMT-10\n            -9 to 45, // GMT-9\n            -8 to 40, // GMT-8\n            -7 to 35, // GMT-7\n            -6 to 30, // GMT-6\n            -5 to 25, // GMT-5\n            -4 to -15, // GMT-4\n            -3 to 0, // GMT-3\n            -2 to 45, // GMT-2\n            -1 to 30, // GMT-1\n            0 to 30, // GMT+0\n            1 to 20, // GMT+1\n            2 to 20, // GMT+2\n            3 to 25, // GMT+3\n            4 to 30, // GMT+4\n            5 to 35, // GMT+5\n            6 to 30, // GMT+6\n            7 to 25, // GMT+7\n            8 to -30, // GMT+8\n            9 to -30, // GMT+9\n            10 to -30, // GMT+10\n            11 to -45, // GMT+11\n            12 to -45 // GMT+12\n        )\n\n        /**\n         * Constructs a location with a specified latitude and longitude in degrees.\n         *\n         * @param latitudeDegrees  the latitude in degrees\n         * @param longitudeDegrees the longitude in degrees\n         *\n         * @return the new location\n         */\n        @JvmStatic\n        fun fromDegrees(latitudeDegrees: Double, longitudeDegrees: Double) =\n            Location(fromDegrees(latitudeDegrees), fromDegrees(longitudeDegrees))\n\n        /**\n         * Constructs a location with a specified latitude and longitude in radians.\n         *\n         * @param latitudeRadians  the latitude in radians\n         * @param longitudeRadians the longitude in radians\n         *\n         * @return the new location\n         */\n        @JvmStatic\n        fun fromRadians(latitudeRadians: Double, longitudeRadians: Double) =\n            Location(fromRadians(latitudeRadians), fromRadians(longitudeRadians))\n\n        /**\n         * Constructs an approximate location for a specified time zone. Used when selecting an initial camera position\n         * based on the device's current time zone.\n         *\n         * @param timeZone the time zone in question\n         *\n         * @return the new location\n         */\n        @JvmStatic\n        fun fromTimeZone(timeZone: TimeZone): Location {\n            val secPerHour = 3.6e3\n            val offsetSec = Clock.System.now().offsetIn(timeZone).totalSeconds\n            val offsetHours = (offsetSec / secPerHour).toInt()\n            // use a pre-determined latitude or 0 if none is available\n            val latDegrees = (timeZoneLatitudes[offsetHours]?:0).toDouble()\n            val lonDegrees = 180.0 * offsetHours / 12 // center on the time zone's average longitude\n            return Location(fromDegrees(latDegrees), fromDegrees(lonDegrees))\n        }\n\n        /**\n         * Determines whether a list of locations crosses the antimeridian.\n         *\n         * @param locations the locations to test\n         *\n         * @return true if the antimeridian is crossed, false otherwise\n         */\n        @JvmStatic\n        fun locationsCrossAntimeridian(locations: List<Location>): Boolean {\n            // Check the list's length. A list with fewer than two locations does not cross the antimeridan.\n            val len = locations.size\n            if (len < 2) return false\n\n            // Compute the longitude attributes associated with the first location.\n            var lon1 = normalizeLongitude(locations[0].longitude.inDegrees)\n            var sig1 = sign(lon1)\n\n            // Iterate over the segments in the list. A segment crosses the antimeridian if its endpoint longitudes have\n            // different signs and are more than 180 degrees apart (but not 360, which indicates the longitudes are the same).\n            for (idx in 1 until len) {\n                val lon2 = normalizeLongitude(locations[idx].longitude.inDegrees)\n                val sig2 = sign(lon2)\n                if (sig1 != sig2) {\n                    val delta = abs(lon1 - lon2)\n                    if (delta > 180 && delta < 360) return true\n                }\n                lon1 = lon2\n                sig1 = sig2\n            }\n            return false\n        }\n    }\n\n    /**\n     * Sets this location to a specified latitude and longitude.\n     *\n     * @param latitude  the new latitude\n     * @param longitude the new longitude\n     *\n     * @return this location with its latitude and longitude set to the specified values\n     */\n    fun set(latitude: Angle, longitude: Angle) = apply {\n        this.latitude = latitude\n        this.longitude = longitude\n    }\n\n    /**\n     * Sets this location to a specified latitude and longitude in degrees.\n     *\n     * @param latitudeDegrees  the new latitude in degrees\n     * @param longitudeDegrees the new longitude in degrees\n     *\n     * @return this location with its latitude and longitude set to the specified values\n     */\n    fun setDegrees(latitudeDegrees: Double, longitudeDegrees: Double) =\n        set(fromDegrees(latitudeDegrees), fromDegrees(longitudeDegrees))\n\n    /**\n     * Sets this location to a specified latitude and longitude in radians.\n     *\n     * @param latitudeRadians  the new latitude in radians\n     * @param longitudeRadians the new longitude in radians\n     *\n     * @return this location with its latitude and longitude set to the specified values\n     */\n    fun setRadians(latitudeRadians: Double, longitudeRadians: Double) =\n        set(fromRadians(latitudeRadians), fromRadians(longitudeRadians))\n\n    /**\n     * Sets this location to the latitude and longitude of a specified location.\n     *\n     * @param location the location specifying the new coordinates\n     *\n     * @return this location with its latitude and longitude set to that of the specified location\n     */\n    fun copy(location: Location) = set(location.latitude, location.longitude)\n\n    /**\n     * Compute a location along a path between two locations. The amount indicates the fraction of the path at which to\n     * compute a location. This value is typically between 0 and 1, where 0 indicates the begin location (this location)\n     * and 1 indicates the end location.\n     *\n     * @param endLocation the path's end location\n     * @param pathType    [PathType] indicating type of path to assume\n     * @param amount      the fraction of the path at which to compute a location\n     * @param result      a pre-allocated Location in which to return the computed location\n     *\n     * @return the result argument set to the computed location\n     */\n    fun interpolateAlongPath(endLocation: Location, pathType: PathType, amount: Double, result: Location): Location {\n        return if (this == endLocation) {\n            result.latitude = latitude\n            result.longitude = longitude\n            result\n        } else when (pathType) {\n            GREAT_CIRCLE -> {\n                val azimuth = greatCircleAzimuth(endLocation)\n                val distanceRadians = greatCircleDistance(endLocation) * amount\n                greatCircleLocation(azimuth, distanceRadians, result)\n            }\n            RHUMB_LINE -> {\n                val azimuth = rhumbAzimuth(endLocation)\n                val distanceRadians = rhumbDistance(endLocation) * amount\n                rhumbLocation(azimuth, distanceRadians, result)\n            }\n            else -> {\n                val azimuth = linearAzimuth(endLocation)\n                val distanceRadians = linearDistance(endLocation) * amount\n                linearLocation(azimuth, distanceRadians, result)\n            }\n        }\n    }\n\n    /**\n     * Computes the azimuth angle (clockwise from North) for the great circle path between this location and a specified\n     * location. This angle can be used as the starting azimuth for a great circle path beginning at this location, and\n     * passing through the specified location. This function uses a spherical model, not elliptical.\n     *\n     * @param location the great circle path's ending location\n     *\n     * @return the computed azimuth\n     */\n    fun greatCircleAzimuth(location: Location): Angle {\n        val lat1 = latitude.inRadians\n        val lon1 = longitude.inRadians\n        val lat2 = location.latitude.inRadians\n        val lon2 = location.longitude.inRadians\n        if (lat1 == lat2 && lon1 == lon2) return ZERO\n        if (lon1 == lon2) return if (lat1 > lat2) POS180 else ZERO\n\n        // Taken from \"Map Projections - A Working Manual\", page 30, equation 5-4b.\n        // The atan2() function is used in place of the traditional atan(y/x) to simplify the case when x == 0.\n        val y = cos(lat2) * sin(lon2 - lon1)\n        val x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(lon2 - lon1)\n        val azimuthRadians = atan2(y, x)\n        return if (azimuthRadians.isNaN()) ZERO else fromRadians(azimuthRadians)\n    }\n\n    /**\n     * Computes the angular distance of the great circle path between this location and a specified location. In\n     * radians, this angle is the arc length of the segment between the two locations. To compute a distance in meters\n     * from this value, multiply the return value by the radius of the globe. This function uses a spherical model, not\n     * elliptical.\n     *\n     * @param location the great circle path's ending location\n     *\n     * @return the computed angular distance in radians\n     */\n    fun greatCircleDistance(location: Location): Double {\n        val lat1Radians = latitude.inRadians\n        val lon1Radians = longitude.inRadians\n        val lat2Radians = location.latitude.inRadians\n        val lon2Radians = location.longitude.inRadians\n        if (lat1Radians == lat2Radians && lon1Radians == lon2Radians) return 0.0\n\n        // \"Haversine formula,\" taken from http://en.wikipedia.org/wiki/Great-circle_distance#Formul.C3.A6\n        val a = sin((lat2Radians - lat1Radians) / 2.0)\n        val b = sin((lon2Radians - lon1Radians) / 2.0)\n        val c = a * a + cos(lat1Radians) * cos(lat2Radians) * b * b\n        val distanceRadians = 2.0 * asin(sqrt(c))\n        return if (distanceRadians.isNaN()) 0.0 else distanceRadians\n    }\n\n    /**\n     * Computes the location on the great circle path starting at this location and traversing with the specified\n     * azimuth and angular distance. This function uses a spherical model, not elliptical.\n     *\n     * @param azimuth         the starting azimuth\n     * @param distanceRadians the angular distance along the path in radians\n     * @param result          a pre-allocated Location in which to return the computed location\n     *\n     * @return the result argument set to the computed location\n     */\n    fun greatCircleLocation(azimuth: Angle, distanceRadians: Double, result: Location): Location {\n        if (distanceRadians == 0.0) {\n            result.latitude = latitude\n            result.longitude = longitude\n            return result\n        }\n        val latRadians = latitude.inRadians\n        val lonRadians = longitude.inRadians\n        val azimuthRadians = azimuth.inRadians\n        val cosLat = cos(latRadians)\n        val sinLat = sin(latRadians)\n        val cosAzimuth = cos(azimuthRadians)\n        val sinAzimuth = sin(azimuthRadians)\n        val sinDistance = sin(distanceRadians)\n        val cosDistance = cos(distanceRadians)\n\n        // Taken from \"Map Projections - A Working Manual\", page 31, equation 5-5 and 5-6.\n        val endLatRadians = asin(sinLat * cosDistance + cosLat * sinDistance * cosAzimuth)\n        val endLonRadians = lonRadians + atan2(\n            sinDistance * sinAzimuth, cosLat * cosDistance - sinLat * sinDistance * cosAzimuth\n        )\n        if (endLatRadians.isNaN() || endLonRadians.isNaN()) {\n            result.latitude = latitude\n            result.longitude = longitude\n        } else {\n            result.latitude = fromRadians(endLatRadians).normalizeLatitude()\n            result.longitude = fromRadians(endLonRadians).normalizeLongitude()\n        }\n        return result\n    }\n\n    /**\n     * Computes the azimuth angle (clockwise from North) for the rhumb path (line of constant azimuth) between this\n     * location and a specified location. This angle can be used as the starting azimuth for a rhumb path beginning at\n     * this location, and passing through the specified location. This function uses a spherical model, not elliptical.\n     *\n     * @param location the rhumb path's ending location\n     *\n     * @return the computed azimuth\n     */\n    fun rhumbAzimuth(location: Location): Angle {\n        val lat1 = latitude.inRadians\n        val lon1 = longitude.inRadians\n        val lat2 = location.latitude.inRadians\n        val lon2 = location.longitude.inRadians\n        if (lat1 == lat2 && lon1 == lon2) return ZERO\n        var dLon = lon2 - lon1\n        val dPhi = ln(tan(lat2 / 2.0 + PI / 4) / tan(lat1 / 2.0 + PI / 4))\n\n        // If lonChange over 180 take shorter rhumb across 180 meridian.\n        if (abs(dLon) > PI) dLon = if (dLon > 0) -(2 * PI - dLon) else 2 * PI + dLon\n        val azimuthRadians = atan2(dLon, dPhi)\n        return if (azimuthRadians.isNaN()) ZERO else fromRadians(azimuthRadians)\n    }\n\n    /**\n     * Computes the angular distance of the rhumb path (line of constant azimuth) between this location and a specified\n     * location. In radians, this angle is the arc length of the segment between the two locations. To compute a\n     * distance in meters from this value, multiply the return value by the radius of the globe. This function uses a\n     * spherical model, not elliptical.\n     *\n     * @param location the great circle path's ending location\n     *\n     * @return the computed angular distance in radians\n     */\n    fun rhumbDistance(location: Location): Double {\n        val lat1 = latitude.inRadians\n        val lon1 = longitude.inRadians\n        val lat2 = location.latitude.inRadians\n        val lon2 = location.longitude.inRadians\n        if (lat1 == lat2 && lon1 == lon2) return 0.0\n        val dLat = lat2 - lat1\n        var dLon = lon2 - lon1\n        // Avoid indeterminates along E/W courses when lat end points are \"nearly\" identical\n        val q = if (abs(dLat) < NEAR_ZERO_THRESHOLD) cos(lat1)\n        else {\n            val dPhi = ln(tan(lat2 / 2.0 + PI / 4) / tan(lat1 / 2.0 + PI / 4))\n            dLat / dPhi\n        }\n\n        // If lonChange over 180 take shorter rhumb across 180 meridian.\n        if (abs(dLon) > PI) dLon = if (dLon > 0) -(2 * PI - dLon) else 2 * PI + dLon\n        val distanceRadians = sqrt(dLat * dLat + q * q * dLon * dLon)\n        return if (distanceRadians.isNaN()) 0.0 else distanceRadians\n    }\n\n    /**\n     * Computes the location on a rhumb path (line of constant azimuth) starting at this location and traversing with\n     * the specified azimuth and angular distance. This function uses a spherical model, not elliptical.\n     *\n     * @param azimuth         the starting azimuth\n     * @param distanceRadians the angular distance along the path in radians\n     * @param result          a pre-allocated Location in which to return the computed location\n     *\n     * @return the result argument set to the computed location\n     */\n    fun rhumbLocation(azimuth: Angle, distanceRadians: Double, result: Location): Location {\n        if (distanceRadians == 0.0) {\n            result.latitude = latitude\n            result.longitude = longitude\n            return result\n        }\n        val latRadians = latitude.inRadians\n        val lonRadians = longitude.inRadians\n        val azimuthRadians = azimuth.inRadians\n        var endLatRadians = latRadians + distanceRadians * cos(azimuthRadians)\n        val dLat = endLatRadians - latRadians\n        // Avoid indeterminates along E/W courses when lat end points are \"nearly\" identical\n        val q = if (abs(dLat) < NEAR_ZERO_THRESHOLD) cos(latRadians)\n        else {\n            val dPhi = ln(tan(endLatRadians / 2 + PI / 4) / tan(latRadians / 2 + PI / 4))\n            dLat / dPhi\n        }\n        val dLon = distanceRadians * sin(azimuthRadians) / q\n\n        // Handle latitude passing over either pole.\n        if (abs(endLatRadians) > PI / 2) endLatRadians = if (endLatRadians > 0) PI - endLatRadians else -PI - endLatRadians\n        val endLonRadians = (lonRadians + dLon + PI) % (2 * PI) - PI\n        if (endLatRadians.isNaN() || endLonRadians.isNaN()) {\n            result.latitude = latitude\n            result.longitude = longitude\n        } else {\n            result.latitude = fromRadians(endLatRadians).normalizeLatitude()\n            result.longitude = fromRadians(endLonRadians).normalizeLongitude()\n        }\n        return result\n    }\n\n    /**\n     * Computes the azimuth angle (clockwise from North) for the linear path between this location and a specified\n     * location. This angle can be used as the starting azimuth for a linear path beginning at this location, and\n     * passing through the specified location. This function uses a flat-earth approximation proximal to this location.\n     *\n     * @param location the linear path's ending location\n     *\n     * @return the computed azimuth\n     */\n    fun linearAzimuth(location: Location): Angle {\n        val lat1 = latitude.inRadians\n        val lon1 = longitude.inRadians\n        val lat2 = location.latitude.inRadians\n        val lon2 = location.longitude.inRadians\n        if (lat1 == lat2 && lon1 == lon2) return ZERO\n        var dLon = lon2 - lon1\n        val dPhi = lat2 - lat1\n\n        // If longitude change is over 180 take shorter path across 180 meridian.\n        if (abs(dLon) > PI) dLon = if (dLon > 0) -(2 * PI - dLon) else 2 * PI + dLon\n        val azimuthRadians = atan2(dLon, dPhi)\n        return if (azimuthRadians.isNaN()) ZERO else fromRadians(azimuthRadians)\n    }\n\n    /**\n     * Computes the angular distance of the linear path between this location and a specified location. In radians, this\n     * angle is the arc length of the segment between the two locations. To compute a distance in meters from this\n     * value, multiply the return value by the radius of the globe. This function uses a flat-earth approximation\n     * proximal to this location.\n     *\n     * @param location the great circle path's ending location\n     *\n     * @return the computed angular distance in radians\n     */\n    fun linearDistance(location: Location): Double {\n        val lat1 = latitude.inRadians\n        val lon1 = longitude.inRadians\n        val lat2 = location.latitude.inRadians\n        val lon2 = location.longitude.inRadians\n        if (lat1 == lat2 && lon1 == lon2) return 0.0\n        val dLat = lat2 - lat1\n        var dLon = lon2 - lon1\n\n        // If lonChange over 180 take shorter path across 180 meridian.\n        if (abs(dLon) > PI) dLon = if (dLon > 0) -(2 * PI - dLon) else 2 * PI + dLon\n        val distanceRadians = sqrt(dLat * dLat + dLon * dLon)\n        return if (distanceRadians.isNaN()) 0.0 else distanceRadians\n    }\n\n    /**\n     * Computes the location on the linear path starting at this location and traversing with the specified azimuth and\n     * angular distance. This function uses a flat-earth approximation proximal to this location.\n     *\n     * @param azimuth         the starting azimuth\n     * @param distanceRadians the angular distance along the path in radians\n     * @param result          a pre-allocated Location in which to return the computed location\n     *\n     * @return the result argument set to the computed location\n     */\n    fun linearLocation(azimuth: Angle, distanceRadians: Double, result: Location): Location {\n        if (distanceRadians == 0.0) {\n            result.latitude = latitude\n            result.longitude = longitude\n            return result\n        }\n        val latRadians = latitude.inRadians\n        val lonRadians = longitude.inRadians\n        val azimuthRadians = azimuth.inRadians\n        var endLatRadians = latRadians + distanceRadians * cos(azimuthRadians)\n\n        // Handle latitude passing over either pole.\n        if (abs(endLatRadians) > PI / 2) endLatRadians = if (endLatRadians > 0) PI - endLatRadians else -PI - endLatRadians\n        val endLonRadians = (lonRadians + distanceRadians * sin(azimuthRadians) + PI) % (2 * PI) - PI\n        if (endLatRadians.isNaN() || endLonRadians.isNaN()) {\n            result.latitude = latitude\n            result.longitude = longitude\n        } else {\n            result.latitude = fromRadians(endLatRadians).normalizeLatitude()\n            result.longitude = fromRadians(endLonRadians).normalizeLongitude()\n        }\n        return result\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Location) return false\n        return latitude == other.latitude && longitude == other.longitude\n    }\n\n    override fun hashCode(): Int {\n        var result = latitude.hashCode()\n        result = 31 * result + longitude.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Location(latitude=$latitude, longitude=$longitude)\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.geom.Angle.Companion.ZERO\n\nopen class LookAt(\n    val position: Position, var altitudeMode: AltitudeMode, var range: Double, var heading: Angle, var tilt: Angle, var roll: Angle,\n) {\n    constructor(): this(\n        position = Position(),\n        altitudeMode = AltitudeMode.ABSOLUTE,\n        range = 0.0,\n        heading = ZERO,\n        tilt = ZERO,\n        roll = ZERO)\n\n    constructor(lookAt: LookAt): this(\n        lookAt.position,\n        lookAt.altitudeMode,\n        lookAt.range,\n        lookAt.heading,\n        lookAt.tilt,\n        lookAt.roll\n    )\n\n    fun set(\n        latitude: Angle, longitude: Angle, altitude: Double, altitudeMode: AltitudeMode,\n        range: Double, heading: Angle, tilt: Angle, roll: Angle\n    ) = apply {\n        this.position.set(latitude, longitude, altitude)\n        this.altitudeMode = altitudeMode\n        this.range = range\n        this.heading = heading\n        this.tilt = tilt\n        this.roll = roll\n    }\n\n    fun copy(lookAt: LookAt) = set(\n        lookAt.position.latitude, lookAt.position.longitude, lookAt.position.altitude,\n        lookAt.altitudeMode, lookAt.range, lookAt.heading, lookAt.tilt, lookAt.roll\n    )\n\n    override fun toString() = \"LookAt(position=$position, altitudeMode=$altitudeMode, range=$range, heading=$heading, tilt=$tilt, roll=$roll)\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.math.cos\nimport kotlin.math.sin\n\n/**\n * 3 x 3 matrix in row-major order.\n */\nopen class Matrix3 private constructor(\n    /**\n     * The matrix's components, stored in row-major order.\n     */\n    val m: DoubleArray\n){\n    companion object {\n        /**\n         * The components for the 3 x 3 identity matrix, stored in row-major order.\n         */\n        internal val identity = doubleArrayOf(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n        )\n    }\n\n    /**\n     * Constructs a 3 x 3 identity matrix.\n     */\n    constructor(): this(identity.copyOf())\n\n    /**\n     * Constructs a 3 x 3 matrix with specified components.\n     *\n     * @param m11 matrix element at row 1, column 1\n     * @param m12 matrix element at row 1, column 2\n     * @param m13 matrix element at row 1, column 3\n     * @param m21 matrix element at row 2, column 1\n     * @param m22 matrix element at row 2, column 2\n     * @param m23 matrix element at row 2, column 3\n     * @param m31 matrix element at row 3, column 1\n     * @param m32 matrix element at row 3, column 2\n     * @param m33 matrix element at row 3, column 3\n     */\n    constructor(\n        m11: Double, m12: Double, m13: Double,\n        m21: Double, m22: Double, m23: Double,\n        m31: Double, m32: Double, m33: Double\n    ): this(doubleArrayOf(m11, m12, m13, m21, m22, m23, m31, m32, m33))\n\n    /**\n     * Constructs a 3 x 3 matrix with the components of a specified matrix.\n     *\n     * @param matrix the matrix specifying the new components\n     */\n    constructor(matrix: Matrix3): this(matrix.m.copyOf())\n\n    /**\n     * Sets this 3 x 3 matrix to specified components.\n     *\n     * @param m11 matrix element at row 1, column 1\n     * @param m12 matrix element at row 1, column 2\n     * @param m13 matrix element at row 1, column 3\n     * @param m21 matrix element at row 2, column 1\n     * @param m22 matrix element at row 2, column 2\n     * @param m23 matrix element at row 2, column 3\n     * @param m31 matrix element at row 3, column 1\n     * @param m32 matrix element at row 3, column 2\n     * @param m33 matrix element at row 3, column 3\n     *\n     * @return this matrix set to the specified components\n     */\n    fun set(\n        m11: Double, m12: Double, m13: Double,\n        m21: Double, m22: Double, m23: Double,\n        m31: Double, m32: Double, m33: Double\n    ) = apply {\n        m[0] = m11\n        m[1] = m12\n        m[2] = m13\n        m[3] = m21\n        m[4] = m22\n        m[5] = m23\n        m[6] = m31\n        m[7] = m32\n        m[8] = m33\n    }\n\n    /**\n     * Sets this 3 x 3 matrix to the components of a specified matrix.\n     *\n     * @param matrix the matrix specifying the new components\n     *\n     * @return this matrix with its components set to that of the specified matrix\n     */\n    fun copy(matrix: Matrix3) = apply { matrix.m.copyInto(m) }\n\n    /**\n     * Sets the translation components of this matrix to specified values.\n     *\n     * @param x the X translation component\n     * @param y the Y translation component\n     *\n     * @return this matrix with its translation components set to the specified values and all other components\n     * unmodified\n     */\n    fun setTranslation(x: Double, y: Double) = apply {\n        m[2] = x\n        m[5] = y\n    }\n\n    /**\n     * Sets the rotation components of this matrix to a specified angle. Positive angles are interpreted as\n     * counter-clockwise rotation.\n     *\n     * @param angle the angle of rotation\n     *\n     * @return this matrix with its rotation components set to the specified values and all other components unmodified\n     */\n    fun setRotation(angle: Angle) = apply {\n        val c = cos(angle.inRadians)\n        val s = sin(angle.inRadians)\n        m[0] = c\n        m[1] = -s\n        m[3] = s\n        m[4] = c\n    }\n\n    /**\n     * Sets the scale components of this matrix to specified values.\n     *\n     * @param xScale the X scale component\n     * @param yScale the Y scale component\n     *\n     * @return this matrix with its scale components set to the specified values and all other components unmodified\n     */\n    fun setScale(xScale: Double, yScale: Double) = apply {\n        m[0] = xScale\n        m[4] = yScale\n    }\n\n    /**\n     * Sets this matrix to the 3 x 3 identity matrix.\n     *\n     * @return this matrix, set to the identity matrix\n     */\n    fun setToIdentity() = apply { identity.copyInto(m) }\n\n    /**\n     * Sets this matrix to a translation matrix with specified translation components.\n     *\n     * @param x the X translation component\n     * @param y the Y translation component\n     *\n     * @return this matrix with its translation components set to those specified and all other components set to that\n     * of an identity matrix\n     */\n    fun setToTranslation(x: Double, y: Double) = apply {\n        m[0] = 1.0\n        m[1] = 0.0\n        m[2] = x\n        m[3] = 0.0\n        m[4] = 1.0\n        m[5] = y\n        m[6] = 0.0\n        m[7] = 0.0\n        m[8] = 1.0\n    }\n\n    /**\n     * Sets this matrix to a rotation matrix with a specified angle. Positive angles are interpreted as\n     * counter-clockwise rotation.\n     *\n     * @param angle the angle of rotation\n     *\n     * @return this matrix with its rotation components set to those specified and all other components set to that of\n     * an identity matrix\n     */\n    fun setToRotation(angle: Angle) = apply {\n        val c = cos(angle.inRadians)\n        val s = sin(angle.inRadians)\n        m[0] = c\n        m[1] = -s\n        m[2] = 0.0\n        m[3] = s\n        m[4] = c\n        m[5] = 0.0\n        m[6] = 0.0\n        m[7] = 0.0\n        m[8] = 1.0\n    }\n\n    /**\n     * Sets this matrix to a scale matrix with specified scale components.\n     *\n     * @param xScale the X scale component\n     * @param yScale the Y scale component\n     *\n     * @return this matrix with its scale components set to those specified and all other components set to that of an\n     * identity matrix\n     */\n    fun setToScale(xScale: Double, yScale: Double) = apply {\n        m[0] = xScale\n        m[1] = 0.0\n        m[2] = 0.0\n        m[3] = 0.0\n        m[4] = yScale\n        m[5] = 0.0\n        m[6] = 0.0\n        m[7] = 0.0\n        m[8] = 1.0\n    }\n\n    /**\n     * Sets this matrix to one that flips and shifts the y-axis. The resultant matrix maps Y=0 to Y=1 and Y=1 to Y=0.\n     * All existing values are overwritten. This matrix is usually used to change the coordinate origin from an upper\n     * left coordinate origin to a lower left coordinate origin.\n     * <br>\n     * This matrix is typically necessary to align the coordinate system of images (top-left origin) with that of OpenGL\n     * (bottom-left origin).\n     *\n     * @return this matrix set to values described above\n     */\n    fun setToVerticalFlip() = apply {\n        m[0] = 1.0\n        m[1] = 0.0\n        m[2] = 0.0\n        m[3] = 0.0\n        m[4] = -1.0\n        m[5] = 1.0\n        m[6] = 0.0\n        m[7] = 0.0\n        m[8] = 1.0\n    }\n\n    /**\n     * Sets this matrix to one that transforms normalized coordinates from a source sector to a destination sector.\n     * Normalized coordinates within a sector range from 0 to 1, with (0, 0) indicating the lower left corner and (1, 1)\n     * indicating the upper right. The resultant matrix maps a normalized source coordinate (X, Y) to its corresponding\n     * normalized destination coordinate (X', Y').\n     * <br>\n     * This matrix typically necessary to transform texture coordinates from one geographic region to another. For\n     * example, the texture coordinates for a terrain tile spanning one region must be transformed to coordinates\n     * appropriate for an image tile spanning a potentially different region.\n     *\n     * @param src the source sector\n     * @param dst the destination sector\n     *\n     * @return this matrix set to values described above\n     */\n    fun setToTileTransform(src: Sector, dst: Sector) = apply {\n        val srcDeltaLat = src.deltaLatitude.inDegrees\n        val srcDeltaLon = src.deltaLongitude.inDegrees\n        val dstDeltaLat = dst.deltaLatitude.inDegrees\n        val dstDeltaLon = dst.deltaLongitude.inDegrees\n        val xs = srcDeltaLon / dstDeltaLon\n        val ys = srcDeltaLat / dstDeltaLat\n        val xt = (src.minLongitude.inDegrees - dst.minLongitude.inDegrees) / dstDeltaLon\n        val yt = (src.minLatitude.inDegrees - dst.minLatitude.inDegrees) / dstDeltaLat\n        m[0] = xs\n        m[1] = 0.0\n        m[2] = xt\n        m[3] = 0.0\n        m[4] = ys\n        m[5] = yt\n        m[6] = 0.0\n        m[7] = 0.0\n        m[8] = 1.0\n    }\n\n    /**\n     * Sets this matrix to the matrix product of two specified matrices.\n     *\n     * @param a the first matrix multiplicand\n     * @param b The second matrix multiplicand\n     *\n     * @return this matrix set to the product of a x b\n     */\n    fun setToMultiply(a: Matrix3, b: Matrix3) = apply {\n        val ma = a.m\n        val mb = b.m\n        m[0] = ma[0] * mb[0] + ma[1] * mb[3] + ma[2] * mb[6]\n        m[1] = ma[0] * mb[1] + ma[1] * mb[4] + ma[2] * mb[7]\n        m[2] = ma[0] * mb[2] + ma[1] * mb[5] + ma[2] * mb[8]\n        m[3] = ma[3] * mb[0] + ma[4] * mb[3] + ma[5] * mb[6]\n        m[4] = ma[3] * mb[1] + ma[4] * mb[4] + ma[5] * mb[7]\n        m[5] = ma[3] * mb[2] + ma[4] * mb[5] + ma[5] * mb[8]\n        m[6] = ma[6] * mb[0] + ma[7] * mb[3] + ma[8] * mb[6]\n        m[7] = ma[6] * mb[1] + ma[7] * mb[4] + ma[8] * mb[7]\n        m[8] = ma[6] * mb[2] + ma[7] * mb[5] + ma[8] * mb[8]\n    }\n\n    /**\n     * Multiplies this matrix by a translation matrix with specified translation values.\n     *\n     * @param x the X translation component\n     * @param y the Y translation component\n     *\n     * @return this matrix multiplied by the translation matrix implied by the specified values\n     */\n    fun multiplyByTranslation(x: Double, y: Double) = apply {\n        multiplyByMatrix(1.0, 0.0, x, 0.0, 1.0, y, 0.0, 0.0, 1.0)\n    }\n\n    /**\n     * Multiplies this matrix by a rotation matrix about a specified axis and angle. Positive angles are interpreted as\n     * counter-clockwise rotation.\n     *\n     * @param angle the angle of rotation\n     *\n     * @return this matrix multiplied by the rotation matrix implied by the specified values\n     */\n    fun multiplyByRotation(angle: Angle) = apply {\n        val c = cos(angle.inRadians)\n        val s = sin(angle.inRadians)\n        multiplyByMatrix(c, -s, 0.0, s, c, 0.0, 0.0, 0.0, 1.0)\n    }\n\n    /**\n     * Multiplies this matrix by a scale matrix with specified values.\n     *\n     * @param xScale the X scale component\n     * @param yScale the Y scale component\n     *\n     * @return this matrix multiplied by the scale matrix implied by the specified values\n     */\n    fun multiplyByScale(xScale: Double, yScale: Double) = apply {\n        multiplyByMatrix(xScale, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 1.0)\n    }\n\n    /**\n     * Multiplies this matrix by a matrix that flips and shifts the y-axis. The vertical flip matrix maps Y=0 to Y=1 and\n     * Y=1 to Y=0. This matrix is usually used to change the coordinate origin from an upper left coordinate origin to a\n     * lower left coordinate origin.\n     * <br>\n     * This is typically necessary to align the coordinate system of images (top-left origin) with that of OpenGL\n     * (bottom-left origin).\n     *\n     * @return this matrix multiplied by a vertical flip matrix implied by values described above\n     */\n    fun multiplyByVerticalFlip() = apply {\n        m[2] += m[1]\n        m[5] += m[4]\n        m[8] += m[7]\n        m[1] = -m[1]\n        m[4] = -m[4]\n        m[7] = -m[7]\n    }\n\n    /**\n     * Multiplies this matrix by a matrix that transforms normalized coordinates from a source sector to a destination\n     * sector. Normalized coordinates within a sector range from 0 to 1, with (0, 0) indicating the lower left corner\n     * and (1, 1) indicating the upper right. The resultant matrix maps a normalized source coordinate (X, Y) to its\n     * corresponding normalized destination coordinate (X', Y').\n     * <br>\n     * This matrix typically necessary to transform texture coordinates from one geographic region to another. For\n     * example, the texture coordinates for a terrain tile spanning one region must be transformed to coordinates\n     * appropriate for an image tile spanning a potentially different region.\n     *\n     * @param src the source sector\n     * @param dst the destination sector\n     *\n     * @return this matrix multiplied by the transform matrix implied by values described above\n     */\n    fun multiplyByTileTransform(src: Sector, dst: Sector) = apply {\n        val srcDeltaLat = src.deltaLatitude.inDegrees\n        val srcDeltaLon = src.deltaLongitude.inDegrees\n        val dstDeltaLat = dst.deltaLatitude.inDegrees\n        val dstDeltaLon = dst.deltaLongitude.inDegrees\n        val xs = srcDeltaLon / dstDeltaLon\n        val ys = srcDeltaLat / dstDeltaLat\n        val xt = (src.minLongitude.inDegrees - dst.minLongitude.inDegrees) / dstDeltaLon\n        val yt = (src.minLatitude.inDegrees - dst.minLatitude.inDegrees) / dstDeltaLat\n\n        m[2] += m[0] * xt + m[1] * yt\n        m[5] += m[3] * xt + m[4] * yt\n        m[8] += m[6] * xt + m[6] * yt\n        m[0] *= xs\n        m[1] *= ys\n        m[3] *= xs\n        m[4] *= ys\n        m[6] *= xs\n        m[7] *= ys\n    }\n\n    /**\n     * Multiplies this matrix by a specified matrix.\n     *\n     * @param matrix the matrix to multiply with this matrix\n     *\n     * @return this matrix after multiplying it by the specified matrix\n     */\n    fun multiplyByMatrix(matrix: Matrix3) = apply {\n        val ma = m\n        val mb = matrix.m\n        var ma0 = ma[0]\n        var ma1 = ma[1]\n        var ma2 = ma[2]\n        ma[0] = ma0 * mb[0] + ma1 * mb[3] + ma2 * mb[6]\n        ma[1] = ma0 * mb[1] + ma1 * mb[4] + ma2 * mb[7]\n        ma[2] = ma0 * mb[2] + ma1 * mb[5] + ma2 * mb[8]\n        ma0 = ma[3]\n        ma1 = ma[4]\n        ma2 = ma[5]\n        ma[3] = ma0 * mb[0] + ma1 * mb[3] + ma2 * mb[6]\n        ma[4] = ma0 * mb[1] + ma1 * mb[4] + ma2 * mb[7]\n        ma[5] = ma0 * mb[2] + ma1 * mb[5] + ma2 * mb[8]\n        ma0 = ma[6]\n        ma1 = ma[7]\n        ma2 = ma[8]\n        ma[6] = ma0 * mb[0] + ma1 * mb[3] + ma2 * mb[6]\n        ma[7] = ma0 * mb[1] + ma1 * mb[4] + ma2 * mb[7]\n        ma[8] = ma0 * mb[2] + ma1 * mb[5] + ma2 * mb[8]\n    }\n\n    /**\n     * Multiplies this matrix by a matrix specified by individual components.\n     *\n     * @param m11 matrix element at row 1, column 1\n     * @param m12 matrix element at row 1, column 2\n     * @param m13 matrix element at row 1, column 3\n     * @param m21 matrix element at row 2, column 1\n     * @param m22 matrix element at row 2, column 2\n     * @param m23 matrix element at row 2, column 3\n     * @param m31 matrix element at row 3, column 1\n     * @param m32 matrix element at row 3, column 2\n     * @param m33 matrix element at row 3, column 3\n     *\n     * @return this matrix with its components multiplied by the specified values\n     */\n    fun multiplyByMatrix(\n        m11: Double, m12: Double, m13: Double,\n        m21: Double, m22: Double, m23: Double,\n        m31: Double, m32: Double, m33: Double\n    ) = apply {\n        var mr1 = m[0]\n        var mr2 = m[1]\n        var mr3 = m[2]\n        m[0] = mr1 * m11 + mr2 * m21 + mr3 * m31\n        m[1] = mr1 * m12 + mr2 * m22 + mr3 * m32\n        m[2] = mr1 * m13 + mr2 * m23 + mr3 * m33\n        mr1 = m[3]\n        mr2 = m[4]\n        mr3 = m[5]\n        m[3] = mr1 * m11 + mr2 * m21 + mr3 * m31\n        m[4] = mr1 * m12 + mr2 * m22 + mr3 * m32\n        m[5] = mr1 * m13 + mr2 * m23 + mr3 * m33\n        mr1 = m[6]\n        mr2 = m[7]\n        mr3 = m[8]\n        m[6] = mr1 * m11 + mr2 * m21 + mr3 * m31\n        m[7] = mr1 * m12 + mr2 * m22 + mr3 * m32\n        m[8] = mr1 * m13 + mr2 * m23 + mr3 * m33\n    }\n\n    /**\n     * Transposes this matrix in place.\n     *\n     * @return this matrix, transposed.\n     */\n    fun transpose() = apply {\n        var tmp = m[1]\n        m[1] = m[3]\n        m[3] = tmp\n\n        tmp = m[2]\n        m[2] = m[6]\n        m[6] = tmp\n\n        tmp = m[5]\n        m[5] = m[7]\n        m[7] = tmp\n    }\n\n    /**\n     * Transposes the specified matrix and stores the result in this matrix.\n     *\n     * @param matrix the matrix whose transpose is computed\n     *\n     * @return this matrix set to the transpose of the specified matrix\n     */\n    fun transposeMatrix(matrix: Matrix3) = apply {\n        m[0] = matrix.m[0]\n        m[1] = matrix.m[3]\n        m[2] = matrix.m[6]\n        m[3] = matrix.m[1]\n        m[4] = matrix.m[4]\n        m[5] = matrix.m[7]\n        m[6] = matrix.m[2]\n        m[7] = matrix.m[5]\n        m[8] = matrix.m[8]\n    }\n\n    /**\n     * Transposes this matrix, storing the result in the specified single precision array. The result is compatible with\n     * GLSL uniform matrices, and can be passed to the function glUniformMatrix3fv.\n     *\n     * @param result a pre-allocated array of length 9 in which to return the transposed components\n     *\n     * @return the result argument set to the transposed components\n     */\n    fun transposeToArray(result: FloatArray, offset: Int): FloatArray {\n        var o = offset\n        require(result.size - o >= 9) {\n            logMessage(ERROR, \"Matrix4\", \"transposeToArray\", \"missingArray\")\n        }\n        result[o++] = m[0].toFloat()\n        result[o++] = m[3].toFloat()\n        result[o++] = m[6].toFloat()\n        result[o++] = m[1].toFloat()\n        result[o++] = m[4].toFloat()\n        result[o++] = m[7].toFloat()\n        result[o++] = m[2].toFloat()\n        result[o++] = m[5].toFloat()\n        result[o] = m[8].toFloat()\n        return result\n    }\n\n    /**\n     * Inverts this matrix in place.\n     * <br>\n     * This throws an exception if this matrix is singular.\n     *\n     * @return this matrix, inverted\n     *\n     * @throws IllegalArgumentException If this matrix cannot be inverted\n     */\n    fun invert(): Matrix3 {\n        throw UnsupportedOperationException(\"Matrix3.invert is not implemented\") // TODO\n    }\n\n    /**\n     * Inverts the specified matrix and stores the result in this matrix.\n     * <br>\n     * This throws an exception if the matrix is singular.\n     * <br>\n     * The result of this method is undefined if this matrix is passed in as the matrix to invert.\n     *\n     * @param matrix the matrix whose inverse is computed\n     *\n     * @return this matrix set to the inverse of the specified matrix\n     */\n    fun invertMatrix(matrix: Matrix3): Matrix3 { \n        TODO(\"Matrix3.invertMatrix is not implemented\")\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Matrix3) return false\n        return m.contentEquals(other.m)\n    }\n\n    override fun hashCode() = m.contentHashCode()\n\n    override fun toString() =\n        \"Matrix3([${m[0]}, ${m[1]}, ${m[2]}], [${m[3]}, ${m[4]}, ${m[5]}], [${m[6]}, ${m[7]}, ${m[8]}])\"\n}",null,"package earth.worldwind.geom\n\nimport earth.worldwind.geom.Angle.Companion.POS180\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.geom.Angle.Companion.radians\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.math.*\n\n/**\n * 4 x 4 matrix in row-major order.\n */\nopen class Matrix4 private constructor(\n    /**\n     * The matrix's components, stored in row-major order.\n     */\n    val m: DoubleArray\n){\n    companion object {\n        protected const val NEAR_ZERO_THRESHOLD = 1.0e-8\n        protected const val TINY = 1.0e-20\n        protected const val EPSILON = 1.0e-10\n        protected const val MAX_SWEEPS = 32\n\n        /**\n         * The components for the 4 x 4 identity matrix, stored in row-major order.\n         */\n        internal val identity = doubleArrayOf(\n            1.0, 0.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 0.0,\n            0.0, 0.0, 1.0, 0.0,\n            0.0, 0.0, 0.0, 1.0\n        )\n\n        /**\n         * Inverts a 4 x 4 matrix, storing the result in a destination argument. The source and destination arguments\n         * represent a 4 x 4 matrix with a one-dimensional array in row-major order. The source and destination may\n         * reference the same array.\n         *\n         * @param src the matrix components to invert in row-major order\n         * @param dst the inverted components in row-major order\n         *\n         * @return true if the matrix was successfully inverted, false otherwise\n         */\n        protected fun invert(src: DoubleArray, dst: DoubleArray): Boolean {\n            // Copy the specified matrix into a mutable two-dimensional array.\n            val a = Array(4) { DoubleArray(4) }\n            a[0][0] = src[0]\n            a[0][1] = src[1]\n            a[0][2] = src[2]\n            a[0][3] = src[3]\n            a[1][0] = src[4]\n            a[1][1] = src[5]\n            a[1][2] = src[6]\n            a[1][3] = src[7]\n            a[2][0] = src[8]\n            a[2][1] = src[9]\n            a[2][2] = src[10]\n            a[2][3] = src[11]\n            a[3][0] = src[12]\n            a[3][1] = src[13]\n            a[3][2] = src[14]\n            a[3][3] = src[15]\n\n            val index = IntArray(4)\n            var d = ludcmp(a, index)\n\n            // Compute the matrix's determinant.\n            for (i in 0..3) d *= a[i][i]\n\n            // The matrix is singular if its determinant is zero or very close to zero.\n            if (abs(d) < NEAR_ZERO_THRESHOLD) return false\n\n            val y = Array(4) { DoubleArray(4) }\n            val col = DoubleArray(4)\n            for (j in 0..3) {\n                for (i in 0..3) col[i] = 0.0\n                col[j] = 1.0\n                lubksb(a, index, col)\n                for (i in 0..3) y[i][j] = col[i]\n            }\n            dst[0] = y[0][0]\n            dst[1] = y[0][1]\n            dst[2] = y[0][2]\n            dst[3] = y[0][3]\n            dst[4] = y[1][0]\n            dst[5] = y[1][1]\n            dst[6] = y[1][2]\n            dst[7] = y[1][3]\n            dst[8] = y[2][0]\n            dst[9] = y[2][1]\n            dst[10] = y[2][2]\n            dst[11] = y[2][3]\n            dst[12] = y[3][0]\n            dst[13] = y[3][1]\n            dst[14] = y[3][2]\n            dst[15] = y[3][3]\n            return true\n        }\n\n        /**\n         * Utility method to perform an LU factorization of a matrix. Algorithm derived from \"Numerical Recipes in C\", Press\n         * et al., 1988.\n         *\n         * @param A     matrix to be factored\n         * @param index permutation vector\n         *\n         * @return condition number of matrix\n         */\n        protected fun ludcmp(A: Array<DoubleArray>, index: IntArray): Double {\n            val vv = DoubleArray(4)\n            var d = 1.0\n            var temp: Double\n            for (i in 0..3) {\n                var big = 0.0\n                for (j in 0..3) if (abs(A[i][j]).also { temp = it } > big) big = temp\n                if (big == 0.0) return 0.0 // Matrix is singular if the entire row contains zero.\n                else vv[i] = 1 / big\n            }\n            for (j in 0..3) {\n                for (i in 0 until j) {\n                    var sum = A[i][j]\n                    for (k in 0 until i) sum -= A[i][k] * A[k][j]\n                    A[i][j] = sum\n                }\n                var big = 0.0\n                var imax = -1\n                var dum: Double\n                for (i in j..3) {\n                    var sum = A[i][j]\n                    for (k in 0 until j) sum -= A[i][k] * A[k][j]\n                    A[i][j] = sum\n                    if (vv[i] * abs(sum).also { dum = it } >= big) {\n                        big = dum\n                        imax = i\n                    }\n                }\n                if (j != imax) {\n                    for (k in 0..3) {\n                        dum = A[imax][k]\n                        A[imax][k] = A[j][k]\n                        A[j][k] = dum\n                    }\n                    d = -d\n                    vv[imax] = vv[j]\n                }\n                index[j] = imax\n                if (A[j][j] == 0.0) A[j][j] = TINY\n                if (j != 3) {\n                    dum = 1.0 / A[j][j]\n                    for (i in (j + 1)..3) {\n                        A[i][j] *= dum\n                    }\n                }\n            }\n            return d\n        }\n\n        /**\n         * Utility method to solve a linear system with an LU factorization of a matrix. Solves Ax=b, where A is in LU\n         * factorized form. Algorithm derived from \"Numerical Recipes in C\", Press et al., 1988\n         *\n         * @param A     an LU factorization of a matrix\n         * @param index permutation vector of that LU factorization\n         * @param b     vector to be solved\n         */\n        protected fun lubksb(A: Array<DoubleArray>, index: IntArray, b: DoubleArray) {\n            var ii = -1\n            for (i in 0..3) {\n                val ip = index[i]\n                var sum = b[ip]\n                b[ip] = b[i]\n                if (ii != -1) for (j in ii until i) sum -= A[i][j] * b[j]\n                else if (sum != 0.0) ii = i\n                b[i] = sum\n            }\n            for (i in 3 downTo 0) {\n                var sum = b[i]\n                for (j in (i + 1)..3) sum -= A[i][j] * b[j]\n                b[i] = sum / A[i][i]\n            }\n        }\n    }\n\n    /**\n     * Constructs a 4 x 4 identity matrix.\n     */\n    constructor(): this(identity.copyOf())\n\n    /**\n     * Constructs a 4 x 4 matrix with specified components.\n     *\n     * @param m11 matrix element at row 1, column 1\n     * @param m12 matrix element at row 1, column 2\n     * @param m13 matrix element at row 1, column 3\n     * @param m14 matrix element at row 1, column 4\n     * @param m21 matrix element at row 2, column 1\n     * @param m22 matrix element at row 2, column 2\n     * @param m23 matrix element at row 2, column 3\n     * @param m24 matrix element at row 2, column 4\n     * @param m31 matrix element at row 3, column 1\n     * @param m32 matrix element at row 3, column 2\n     * @param m33 matrix element at row 3, column 3\n     * @param m34 matrix element at row 3, column 4\n     * @param m41 matrix element at row 4, column 1\n     * @param m42 matrix element at row 4, column 2\n     * @param m43 matrix element at row 4, column 3\n     * @param m44 matrix element at row 4, column 4\n     */\n    constructor(\n        m11: Double, m12: Double, m13: Double, m14: Double,\n        m21: Double, m22: Double, m23: Double, m24: Double,\n        m31: Double, m32: Double, m33: Double, m34: Double,\n        m41: Double, m42: Double, m43: Double, m44: Double\n    ): this(doubleArrayOf(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44))\n\n    /**\n     * Constructs a 4 x 4 matrix with the components of a specified matrix.\n     *\n     * @param matrix the matrix specifying the new components\n     */\n    constructor(matrix: Matrix4): this(matrix.m.copyOf())\n\n    /**\n     * Sets this 4 x 4 matrix to specified components.\n     *\n     * @param m11 matrix element at row 1, column 1\n     * @param m12 matrix element at row 1, column 2\n     * @param m13 matrix element at row 1, column 3\n     * @param m14 matrix element at row 1, column 4\n     * @param m21 matrix element at row 2, column 1\n     * @param m22 matrix element at row 2, column 2\n     * @param m23 matrix element at row 2, column 3\n     * @param m24 matrix element at row 2, column 4\n     * @param m31 matrix element at row 3, column 1\n     * @param m32 matrix element at row 3, column 2\n     * @param m33 matrix element at row 3, column 3\n     * @param m34 matrix element at row 3, column 4\n     * @param m41 matrix element at row 4, column 1\n     * @param m42 matrix element at row 4, column 2\n     * @param m43 matrix element at row 4, column 3\n     * @param m44 matrix element at row 4, column 4\n     *\n     * @return this matrix set to the specified components\n     */\n    fun set(\n        m11: Double, m12: Double, m13: Double, m14: Double,\n        m21: Double, m22: Double, m23: Double, m24: Double,\n        m31: Double, m32: Double, m33: Double, m34: Double,\n        m41: Double, m42: Double, m43: Double, m44: Double\n    ) = apply {\n        m[0] = m11\n        m[1] = m12\n        m[2] = m13\n        m[3] = m14\n        m[4] = m21\n        m[5] = m22\n        m[6] = m23\n        m[7] = m24\n        m[8] = m31\n        m[9] = m32\n        m[10] = m33\n        m[11] = m34\n        m[12] = m41\n        m[13] = m42\n        m[14] = m43\n        m[15] = m44\n    }\n\n    /**\n     * Sets this 4 x 4 matrix to the components of a specified matrix.\n     *\n     * @param matrix the matrix specifying the new components\n     *\n     * @return this matrix with its components set to that of the specified matrix\n     */\n    fun copy(matrix: Matrix4) = apply { matrix.m.copyInto(m) }\n\n    /**\n     * Sets the translation components of this matrix to specified values.\n     *\n     * @param x the X translation component\n     * @param y the Y translation component\n     * @param z the Z translation component\n     *\n     * @return this matrix with its translation components set to the specified values and all other components\n     * unmodified\n     */\n    fun setTranslation(x: Double, y: Double, z: Double) = apply {\n        m[3] = x\n        m[7] = y\n        m[11] = z\n    }\n\n    /**\n     * Sets the rotation components of this matrix to a specified axis and angle. Positive angles are interpreted as\n     * counter-clockwise rotation about the axis when viewed when viewed from the positive end of the axis, looking\n     * toward the negative end of the axis.\n     * <br>\n     * The result of this method is undefined if the axis components are not a unit vector.\n     *\n     * @param x     the X component of the rotation axis unit vector\n     * @param y     the Y component of the rotation axis unit vector\n     * @param z     the Z component of the rotation axis unit vector\n     * @param angle the angle of rotation\n     *\n     * @return this matrix with its rotation components set to the specified values and all other components unmodified\n     */\n    fun setRotation(x: Double, y: Double, z: Double, angle: Angle) = apply {\n        val c = cos(angle.inRadians)\n        val s = sin(angle.inRadians)\n        m[0] = c + (1 - c) * x * x\n        m[1] = (1 - c) * x * y - s * z\n        m[2] = (1 - c) * x * z + s * y\n        m[4] = (1 - c) * x * y + s * z\n        m[5] = c + (1 - c) * y * y\n        m[6] = (1 - c) * y * z - s * x\n        m[8] = (1 - c) * x * z - s * y\n        m[9] = (1 - c) * y * z + s * x\n        m[10] = c + (1 - c) * z * z\n    }\n\n    /**\n     * Sets the scale components of this matrix to specified values.\n     *\n     * @param xScale the X scale component\n     * @param yScale the Y scale component\n     * @param zScale the Z scale component\n     *\n     * @return this matrix with its scale components set to the specified values and all other components unmodified\n     */\n    fun setScale(xScale: Double, yScale: Double, zScale: Double) = apply {\n        m[0] = xScale\n        m[5] = yScale\n        m[10] = zScale\n    }\n\n    /**\n     * Sets this matrix to the 4 x 4 identity matrix.\n     *\n     * @return this matrix, set to the identity matrix\n     */\n    fun setToIdentity() = apply { identity.copyInto(m) }\n\n    /**\n     * Sets this matrix to a translation matrix with specified translation components.\n     *\n     * @param x the X translation component\n     * @param y the Y translation component\n     * @param z the Z translation component\n     *\n     * @return this matrix with its translation components set to those specified and all other components set to that\n     * of an identity matrix\n     */\n    fun setToTranslation(x: Double, y: Double, z: Double) = apply {\n        m[0] = 1.0\n        m[1] = 0.0\n        m[2] = 0.0\n        m[3] = x\n        m[4] = 0.0\n        m[5] = 1.0\n        m[6] = 0.0\n        m[7] = y\n        m[8] = 0.0\n        m[9] = 0.0\n        m[10] = 1.0\n        m[11] = z\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = 0.0\n        m[15] = 1.0\n    }\n\n    /**\n     * Sets this matrix to a rotation matrix with a specified axis and angle. Positive angles are interpreted as\n     * counter-clockwise rotation about the axis when viewed when viewed from the positive end of the axis, looking\n     * toward the negative end of the axis.\n     * <br>\n     * The result of this method is undefined if the axis components are not a unit vector.\n     *\n     * @param x     the X component of the rotation axis unit vector\n     * @param y     the Y component of the rotation axis unit vector\n     * @param z     the Z component of the rotation axis unit vector\n     * @param angle the angle of rotation\n     *\n     * @return this matrix with its rotation components set to those specified and all other components set to that of\n     * an identity matrix\n     */\n    fun setToRotation(x: Double, y: Double, z: Double, angle: Angle) = apply {\n        val c = cos(angle.inRadians)\n        val s = sin(angle.inRadians)\n        m[0] = c + (1 - c) * x * x\n        m[1] = (1 - c) * x * y - s * z\n        m[2] = (1 - c) * x * z + s * y\n        m[3] = 0.0\n        m[4] = (1 - c) * x * y + s * z\n        m[5] = c + (1 - c) * y * y\n        m[6] = (1 - c) * y * z - s * x\n        m[7] = 0.0\n        m[8] = (1 - c) * x * z - s * y\n        m[9] = (1 - c) * y * z + s * x\n        m[10] = c + (1 - c) * z * z\n        m[11] = 0.0\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = 0.0\n        m[15] = 1.0\n    }\n\n    /**\n     * Sets this matrix to a scale matrix with specified scale components.\n     *\n     * @param xScale the X scale component\n     * @param yScale the Y scale component\n     * @param zScale the Z scale component\n     *\n     * @return this matrix with its scale components set to those specified and all other components set to that of an\n     * identity matrix\n     */\n    fun setToScale(xScale: Double, yScale: Double, zScale: Double) = apply {\n        m[0] = xScale\n        m[1] = 0.0\n        m[2] = 0.0\n        m[3] = 0.0\n        m[4] = 0.0\n        m[5] = yScale\n        m[6] = 0.0\n        m[7] = 0.0\n        m[8] = 0.0\n        m[9] = 0.0\n        m[10] = zScale\n        m[11] = 0.0\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = 0.0\n        m[15] = 1.0\n    }\n\n    /**\n     * Sets this matrix to the matrix product of two specified matrices.\n     *\n     * @param a the first matrix multiplicand\n     * @param b The second matrix multiplicand\n     *\n     * @return this matrix set to the product of a x b\n     */\n    fun setToMultiply(a: Matrix4, b: Matrix4) = apply {\n        val ma = a.m\n        val mb = b.m\n        m[0] = ma[0] * mb[0] + ma[1] * mb[4] + ma[2] * mb[8] + ma[3] * mb[12]\n        m[1] = ma[0] * mb[1] + ma[1] * mb[5] + ma[2] * mb[9] + ma[3] * mb[13]\n        m[2] = ma[0] * mb[2] + ma[1] * mb[6] + ma[2] * mb[10] + ma[3] * mb[14]\n        m[3] = ma[0] * mb[3] + ma[1] * mb[7] + ma[2] * mb[11] + ma[3] * mb[15]\n        m[4] = ma[4] * mb[0] + ma[5] * mb[4] + ma[6] * mb[8] + ma[7] * mb[12]\n        m[5] = ma[4] * mb[1] + ma[5] * mb[5] + ma[6] * mb[9] + ma[7] * mb[13]\n        m[6] = ma[4] * mb[2] + ma[5] * mb[6] + ma[6] * mb[10] + ma[7] * mb[14]\n        m[7] = ma[4] * mb[3] + ma[5] * mb[7] + ma[6] * mb[11] + ma[7] * mb[15]\n        m[8] = ma[8] * mb[0] + ma[9] * mb[4] + ma[10] * mb[8] + ma[11] * mb[12]\n        m[9] = ma[8] * mb[1] + ma[9] * mb[5] + ma[10] * mb[9] + ma[11] * mb[13]\n        m[10] = ma[8] * mb[2] + ma[9] * mb[6] + ma[10] * mb[10] + ma[11] * mb[14]\n        m[11] = ma[8] * mb[3] + ma[9] * mb[7] + ma[10] * mb[11] + ma[11] * mb[15]\n        m[12] = ma[12] * mb[0] + ma[13] * mb[4] + ma[14] * mb[8] + ma[15] * mb[12]\n        m[13] = ma[12] * mb[1] + ma[13] * mb[5] + ma[14] * mb[9] + ma[15] * mb[13]\n        m[14] = ma[12] * mb[2] + ma[13] * mb[6] + ma[14] * mb[10] + ma[15] * mb[14]\n        m[15] = ma[12] * mb[3] + ma[13] * mb[7] + ma[14] * mb[11] + ma[15] * mb[15]\n    }\n\n    /**\n     * Sets this matrix to an infinite perspective projection matrix for the specified viewport dimensions, vertical\n     * field of view and near clip distance.\n     * <br>\n     * An infinite perspective projection matrix maps points in a manner similar to a standard projection matrix, but is\n     * not bounded by depth. Objects at any depth greater than or equal to the near distance may be rendered. In\n     * addition, this matrix interprets vertices with a w-coordinate of 0 as infinitely far from the camera in the\n     * direction indicated by the point's coordinates.\n     * <br>\n     * The field of view must be positive and less than 180. The near distance must be positive.\n     *\n     * @param viewportWidth  the viewport width in screen coordinates\n     * @param viewportHeight the viewport height in screen coordinates\n     * @param vFieldOfView   the vertical field of view\n     * @param nearDistance   the near clip plane distance in model coordinates\n     *\n     * @throws IllegalArgumentException If either the width or the height is less than or equal to zero, if the field of\n     * view is less than or equal to zero or greater than 180, if the near distance is\n     * less than or equal to zero\n     */\n    fun setToInfiniteProjection(\n        viewportWidth: Int, viewportHeight: Int, vFieldOfView: Angle, nearDistance: Double\n    ) = apply {\n        require(viewportWidth > 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToInfiniteProjection\", \"invalidWidth\")\n        }\n        require(viewportHeight > 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToInfiniteProjection\", \"invalidHeight\")\n        }\n        require(vFieldOfView > ZERO && vFieldOfView < POS180) {\n            logMessage(ERROR, \"Matrix4\", \"setToInfiniteProjection\", \"invalidFieldOfView\")\n        }\n        require(nearDistance > 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToInfiniteProjection\", \"invalidClipDistance\")\n        }\n\n        // Compute the dimensions of the near rectangle given the specified parameters.\n        val aspect = viewportWidth / viewportHeight.toDouble()\n        val tanFov2 = tan(vFieldOfView.inRadians * 0.5)\n        val nearHeight = 2 * nearDistance * tanFov2\n        val nearWidth = nearHeight * aspect\n\n        // Taken from Mathematics for 3D Game Programming and Computer Graphics, Second Edition, equation 4.52.\n        m[0] = 2 * nearDistance / nearWidth\n        m[1] = 0.0\n        m[2] = 0.0\n        m[3] = 0.0\n        m[4] = 0.0\n        m[5] = 2 * nearDistance / nearHeight\n        m[6] = 0.0\n        m[7] = 0.0\n        m[8] = 0.0\n        m[9] = 0.0\n        m[10] = -1.0\n        m[11] = -2 * nearDistance\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = -1.0\n        m[15] = 0.0\n    }\n\n    /**\n     * Sets this matrix to a perspective projection matrix for the specified viewport dimensions, vertical field of view\n     * and clip distances.\n     * <br>\n     * A perspective projection matrix maps points in eye coordinates into clip coordinates in a way that causes distant\n     * objects to appear smaller, and preserves the appropriate depth information for each point. In model coordinates,\n     * a perspective projection is defined by frustum originating at the eye position and extending outward in the\n     * viewer's direction. The near distance and the far distance identify the minimum and maximum distance,\n     * respectively, at which an object in the scene is visible.\n     * <br>\n     * The field of view must be positive and less than 180. Near and far distances must be positive and must not be\n     * equal to one another.\n     *\n     * @param viewportWidth  the viewport width in screen coordinates\n     * @param viewportHeight the viewport height in screen coordinates\n     * @param vFieldOfView   the vertical field of view\n     * @param nearDistance   the near clip plane distance in model coordinates\n     * @param farDistance    the far clip plane distance in model coordinates\n     *\n     * @throws IllegalArgumentException If either the width or the height is less than or equal to zero, if the field of\n     * view is less than or equal to zero or greater than 180, if the near and far\n     * distances are equal, or if either the near or far distance are less than or\n     * equal to zero\n     */\n    fun setToPerspectiveProjection(\n        viewportWidth: Int, viewportHeight: Int, vFieldOfView: Angle, nearDistance: Double, farDistance: Double\n    ) = apply {\n        require(viewportWidth > 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToPerspectiveProjection\", \"invalidWidth\")\n        }\n        require(viewportHeight > 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToPerspectiveProjection\", \"invalidHeight\")\n        }\n        require(vFieldOfView > ZERO && vFieldOfView < POS180) {\n            logMessage(ERROR, \"Matrix4\", \"setToPerspectiveProjection\", \"invalidFieldOfView\")\n        }\n        require(nearDistance != farDistance) {\n            logMessage(ERROR, \"Matrix4\", \"setToPerspectiveProjection\", \"invalidClipDistance\")\n        }\n        require(nearDistance > 0 && farDistance > 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToPerspectiveProjection\", \"invalidClipDistance\")\n        }\n\n        // Compute the dimensions of the near rectangle given the specified parameters.\n        val aspect = viewportWidth / viewportHeight.toDouble()\n        val tanFov2 = tan(vFieldOfView.inRadians * 0.5)\n        val nearHeight = 2 * nearDistance * tanFov2\n        val nearWidth = nearHeight * aspect\n\n        // Taken from Mathematics for 3D Game Programming and Computer Graphics, Second Edition, equation 4.52.\n        m[0] = 2 * nearDistance / nearWidth\n        m[1] = 0.0\n        m[2] = 0.0\n        m[3] = 0.0\n        m[4] = 0.0\n        m[5] = 2 * nearDistance / nearHeight\n        m[6] = 0.0\n        m[7] = 0.0\n        m[8] = 0.0\n        m[9] = 0.0\n        m[10] = -(farDistance + nearDistance) / (farDistance - nearDistance)\n        m[11] = -(2 * nearDistance * farDistance) / (farDistance - nearDistance)\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = -1.0\n        m[15] = 0.0\n    }\n\n    /**\n     * Sets this matrix to a screen projection matrix for the specified viewport dimensions.\n     * <br>\n     * A screen projection matrix is an orthographic projection that interprets points in model coordinates as\n     * representing a screen XY and a Z depth. Screen projection matrices therefore map coordinates directly into screen\n     * coordinates without modification. A point's XY coordinates are interpreted as literal screen coordinates and must\n     * be in the viewport to be visible. A point's Z coordinate is interpreted as a depth value that ranges from 0 to 1.\n     * Additionally, the screen projection matrix preserves the depth value returned by\n     * `RenderContext.project`.\n     *\n     * @param viewportWidth  the viewport width in screen coordinates\n     * @param viewportHeight the viewport height in screen coordinates\n     *\n     * @throws IllegalArgumentException If either the width or the height is less than or equal to zero\n     */\n    fun setToScreenProjection(viewportWidth: Double, viewportHeight: Double) = apply {\n        require(viewportWidth > 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToScreenProjection\", \"invalidWidth\")\n        }\n        require(viewportHeight > 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToScreenProjection\", \"invalidHeight\")\n        }\n\n        // Taken from Mathematics for 3D Game Programming and Computer Graphics, Second Edition, equation 4.57.\n        // Simplified to assume that the viewport origin is (0, 0).\n        //\n        // The third row of this projection matrix is configured so that points with z coordinates representing\n        // depth values ranging from 0 to 1 are not modified after transformation into window coordinates. This\n        // projection matrix maps z values in the range [0, 1] to the range [-1, 1] by applying the following\n        // function to incoming z coordinates:\n        //\n        // zp = z0 * 2 - 1\n        //\n        // Where 'z0' is the point's z coordinate and 'zp' is the projected z coordinate. The GPU then maps the\n        // projected z coordinate into window coordinates in the range [0, 1] by applying the following function:\n        //\n        // zw = zp * 0.5 + 0.5\n        //\n        // The result is that a point's z coordinate is effectively passed to the GPU without modification.\n        m[0] = 2 / viewportWidth\n        m[1] = 0.0\n        m[2] = 0.0\n        m[3] = -1.0\n        m[4] = 0.0\n        m[5] = 2 / viewportHeight\n        m[6] = 0.0\n        m[7] = -1.0\n        m[8] = 0.0\n        m[9] = 0.0\n        m[10] = 2.0\n        m[11] = -1.0\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = 0.0\n        m[15] = 1.0\n    }\n\n    /**\n     * Sets this matrix to the symmetric covariance Matrix computed from an array of points.\n     * <br>\n     * The computed covariance matrix represents the correlation between each pair of x-, y-, and z-coordinates as\n     * they're distributed about the point array's arithmetic mean. Its layout is as follows:\n     * <br>\n     * ` C(x, x)  C(x, y)  C(x, z) <br> C(x, y)  C(y, y)  C(y, z) <br> C(x, z)  C(y, z)  C(z, z) `\n     * <br>\n     * C(i, j) is the covariance of coordinates i and j, where i or j are a coordinate's dispersion about its mean\n     * value. If any entry is zero, then there's no correlation between the two coordinates defining that entry. If the\n     * returned matrix is diagonal, then all three coordinates are uncorrelated, and the specified point is distributed\n     * evenly about its mean point.\n     *\n     * @param array  the array of points to consider\n     * @param count  the number of array elements to consider\n     * @param stride the number of coordinates between the first coordinate of adjacent points - must be at least 3\n     *\n     * @return this matrix set to the covariance matrix for the specified array of points\n     *\n     * @throws IllegalArgumentException If the array is null or empty, if the count is less than 0, or if the stride is\n     * less than 3\n     */\n    fun setToCovarianceOfPoints(array: FloatArray, count: Int, stride: Int) = apply {\n        require(array.size >= stride) {\n            logMessage(ERROR, \"Matrix4\", \"setToCovarianceOfPoints\", \"invalidArray\")\n        }\n        require(count >= 0) {\n            logMessage(ERROR, \"Matrix4\", \"setToCovarianceOfPoints\", \"invalidCount\")\n        }\n        require(stride >= 3) {\n            logMessage(ERROR, \"Matrix4\", \"setToCovarianceOfPoints\", \"invalidStride\")\n        }\n\n        var mx = 0.0\n        var my = 0.0\n        var mz = 0.0\n        var c11 = 0.0\n        var c22 = 0.0\n        var c33 = 0.0\n        var c12 = 0.0\n        var c13 = 0.0\n        var c23 = 0.0\n        var numPoints = 0.0\n        for (idx in 0 until count step stride) {\n            mx += array[idx]\n            my += array[idx + 1]\n            mz += array[idx + 2]\n            numPoints++\n        }\n        mx /= numPoints\n        my /= numPoints\n        mz /= numPoints\n        for (idx in 0 until count step stride) {\n            val dx = array[idx] - mx\n            val dy = array[idx + 1] - my\n            val dz = array[idx + 2] - mz\n            c11 += dx * dx\n            c22 += dy * dy\n            c33 += dz * dz\n            c12 += dx * dy // c12 = c21\n            c13 += dx * dz // c13 = c31\n            c23 += dy * dz // c23 = c32\n        }\n        m[0] = c11 / numPoints\n        m[1] = c12 / numPoints\n        m[2] = c13 / numPoints\n        m[3] = 0.0\n        m[4] = c12 / numPoints\n        m[5] = c22 / numPoints\n        m[6] = c23 / numPoints\n        m[7] = 0.0\n        m[8] = c13 / numPoints\n        m[9] = c23 / numPoints\n        m[10] = c33 / numPoints\n        m[11] = 0.0\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = 0.0\n        m[15] = 0.0\n    }\n\n    /**\n     * Multiplies this matrix by a translation matrix with specified translation values.\n     *\n     * @param x the X translation component\n     * @param y the Y translation component\n     * @param z the Z translation component\n     *\n     * @return this matrix multiplied by the translation matrix implied by the specified values\n     */\n    fun multiplyByTranslation(x: Double, y: Double, z: Double) = apply {\n        m[3] += m[0] * x + m[1] * y + m[2] * z\n        m[7] += m[4] * x + m[5] * y + m[6] * z\n        m[11] += m[8] * x + m[9] * y + m[10] * z\n        m[15] += m[12] * x + m[13] * y + m[14] * z\n    }\n\n    /**\n     * Multiplies this matrix by a rotation matrix about a specified axis and angle. Positive angles are interpreted as\n     * counter-clockwise rotation about the axis.\n     *\n     * @param x     the X component of the rotation axis\n     * @param y     the Y component of the rotation axis\n     * @param z     the Z component of the rotation axis\n     * @param angle the angle of rotation\n     *\n     * @return this matrix multiplied by the rotation matrix implied by the specified values\n     */\n    fun multiplyByRotation(x: Double, y: Double, z: Double, angle: Angle) = apply {\n        val c = cos(angle.inRadians)\n        val s = sin(angle.inRadians)\n        multiplyByMatrix(\n            c + (1 - c) * x * x,\n            (1 - c) * x * y - s * z,\n            (1 - c) * x * z + s * y,\n            0.0,\n            (1 - c) * x * y + s * z,\n            c + (1 - c) * y * y,\n            (1 - c) * y * z - s * x,\n            0.0,\n            (1 - c) * x * z - s * y,\n            (1 - c) * y * z + s * x,\n            c + (1 - c) * z * z,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            1.0\n        )\n    }\n\n    /**\n     * Multiplies this matrix by a scale matrix with specified values.\n     *\n     * @param xScale the X scale component\n     * @param yScale the Y scale component\n     * @param zScale the Z scale component\n     *\n     * @return this matrix multiplied by the scale matrix implied by the specified values\n     */\n    fun multiplyByScale(xScale: Double, yScale: Double, zScale: Double) = apply {\n        m[0] *= xScale\n        m[4] *= xScale\n        m[8] *= xScale\n        m[12] *= xScale\n        m[1] *= yScale\n        m[5] *= yScale\n        m[9] *= yScale\n        m[13] *= yScale\n        m[2] *= zScale\n        m[6] *= zScale\n        m[10] *= zScale\n        m[14] *= zScale\n    }\n\n    /**\n     * Multiplies this matrix by a specified matrix.\n     *\n     * @param matrix the matrix to multiply with this matrix\n     *\n     * @return this matrix after multiplying it by the specified matrix\n     */\n    fun multiplyByMatrix(matrix: Matrix4) = apply {\n        val ma = m\n        val mb = matrix.m\n        var ma0 = ma[0]\n        var ma1 = ma[1]\n        var ma2 = ma[2]\n        var ma3 = ma[3]\n        ma[0] = ma0 * mb[0] + ma1 * mb[4] + ma2 * mb[8] + ma3 * mb[12]\n        ma[1] = ma0 * mb[1] + ma1 * mb[5] + ma2 * mb[9] + ma3 * mb[13]\n        ma[2] = ma0 * mb[2] + ma1 * mb[6] + ma2 * mb[10] + ma3 * mb[14]\n        ma[3] = ma0 * mb[3] + ma1 * mb[7] + ma2 * mb[11] + ma3 * mb[15]\n        ma0 = ma[4]\n        ma1 = ma[5]\n        ma2 = ma[6]\n        ma3 = ma[7]\n        ma[4] = ma0 * mb[0] + ma1 * mb[4] + ma2 * mb[8] + ma3 * mb[12]\n        ma[5] = ma0 * mb[1] + ma1 * mb[5] + ma2 * mb[9] + ma3 * mb[13]\n        ma[6] = ma0 * mb[2] + ma1 * mb[6] + ma2 * mb[10] + ma3 * mb[14]\n        ma[7] = ma0 * mb[3] + ma1 * mb[7] + ma2 * mb[11] + ma3 * mb[15]\n        ma0 = ma[8]\n        ma1 = ma[9]\n        ma2 = ma[10]\n        ma3 = ma[11]\n        ma[8] = ma0 * mb[0] + ma1 * mb[4] + ma2 * mb[8] + ma3 * mb[12]\n        ma[9] = ma0 * mb[1] + ma1 * mb[5] + ma2 * mb[9] + ma3 * mb[13]\n        ma[10] = ma0 * mb[2] + ma1 * mb[6] + ma2 * mb[10] + ma3 * mb[14]\n        ma[11] = ma0 * mb[3] + ma1 * mb[7] + ma2 * mb[11] + ma3 * mb[15]\n        ma0 = ma[12]\n        ma1 = ma[13]\n        ma2 = ma[14]\n        ma3 = ma[15]\n        ma[12] = ma0 * mb[0] + ma1 * mb[4] + ma2 * mb[8] + ma3 * mb[12]\n        ma[13] = ma0 * mb[1] + ma1 * mb[5] + ma2 * mb[9] + ma3 * mb[13]\n        ma[14] = ma0 * mb[2] + ma1 * mb[6] + ma2 * mb[10] + ma3 * mb[14]\n        ma[15] = ma0 * mb[3] + ma1 * mb[7] + ma2 * mb[11] + ma3 * mb[15]\n    }\n\n    /**\n     * Multiplies this matrix by a matrix specified by individual components.\n     *\n     * @param m11 matrix element at row 1, column 1\n     * @param m12 matrix element at row 1, column 2\n     * @param m13 matrix element at row 1, column 3\n     * @param m14 matrix element at row 1, column 4\n     * @param m21 matrix element at row 2, column 1\n     * @param m22 matrix element at row 2, column 2\n     * @param m23 matrix element at row 2, column 3\n     * @param m24 matrix element at row 2, column 4\n     * @param m31 matrix element at row 3, column 1\n     * @param m32 matrix element at row 3, column 2\n     * @param m33 matrix element at row 3, column 3\n     * @param m34 matrix element at row 3, column 4\n     * @param m41 matrix element at row 4, column 1\n     * @param m42 matrix element at row 4, column 2\n     * @param m43 matrix element at row 4, column 3\n     * @param m44 matrix element at row 4, column 4\n     *\n     * @return this matrix with its components multiplied by the specified values\n     */\n    fun multiplyByMatrix(\n        m11: Double, m12: Double, m13: Double, m14: Double,\n        m21: Double, m22: Double, m23: Double, m24: Double,\n        m31: Double, m32: Double, m33: Double, m34: Double,\n        m41: Double, m42: Double, m43: Double, m44: Double\n    ) = apply {\n        var mr1 = m[0]\n        var mr2 = m[1]\n        var mr3 = m[2]\n        var mr4 = m[3]\n        m[0] = mr1 * m11 + mr2 * m21 + mr3 * m31 + mr4 * m41\n        m[1] = mr1 * m12 + mr2 * m22 + mr3 * m32 + mr4 * m42\n        m[2] = mr1 * m13 + mr2 * m23 + mr3 * m33 + mr4 * m43\n        m[3] = mr1 * m14 + mr2 * m24 + mr3 * m34 + mr4 * m44\n        mr1 = m[4]\n        mr2 = m[5]\n        mr3 = m[6]\n        mr4 = m[7]\n        m[4] = mr1 * m11 + mr2 * m21 + mr3 * m31 + mr4 * m41\n        m[5] = mr1 * m12 + mr2 * m22 + mr3 * m32 + mr4 * m42\n        m[6] = mr1 * m13 + mr2 * m23 + mr3 * m33 + mr4 * m43\n        m[7] = mr1 * m14 + mr2 * m24 + mr3 * m34 + mr4 * m44\n        mr1 = m[8]\n        mr2 = m[9]\n        mr3 = m[10]\n        mr4 = m[11]\n        m[8] = mr1 * m11 + mr2 * m21 + mr3 * m31 + mr4 * m41\n        m[9] = mr1 * m12 + mr2 * m22 + mr3 * m32 + mr4 * m42\n        m[10] = mr1 * m13 + mr2 * m23 + mr3 * m33 + mr4 * m43\n        m[11] = mr1 * m14 + mr2 * m24 + mr3 * m34 + mr4 * m44\n        mr1 = m[12]\n        mr2 = m[13]\n        mr3 = m[14]\n        mr4 = m[15]\n        m[12] = mr1 * m11 + mr2 * m21 + mr3 * m31 + mr4 * m41\n        m[13] = mr1 * m12 + mr2 * m22 + mr3 * m32 + mr4 * m42\n        m[14] = mr1 * m13 + mr2 * m23 + mr3 * m33 + mr4 * m43\n        m[15] = mr1 * m14 + mr2 * m24 + mr3 * m34 + mr4 * m44\n    }\n\n    /**\n     * Transposes this matrix in place.\n     *\n     * @return this matrix, transposed.\n     */\n    fun transpose() = apply {\n        var tmp = m[1]\n        m[1] = m[4]\n        m[4] = tmp\n\n        tmp = m[2]\n        m[2] = m[8]\n        m[8] = tmp\n\n        tmp = m[3]\n        m[3] = m[12]\n        m[12] = tmp\n\n        tmp = m[6]\n        m[6] = m[9]\n        m[9] = tmp\n\n        tmp = m[7]\n        m[7] = m[13]\n        m[13] = tmp\n\n        tmp = m[11]\n        m[11] = m[14]\n        m[14] = tmp\n    }\n\n    /**\n     * Sets this matrix to the transpose of a specified matrix.\n     *\n     * @param matrix the matrix whose transpose is to be computed\n     *\n     * @return this matrix with its values set to the transpose of the specified matrix\n     */\n    fun transposeMatrix(matrix: Matrix4) = apply {\n        m[0] = matrix.m[0]\n        m[1] = matrix.m[4]\n        m[2] = matrix.m[8]\n        m[3] = matrix.m[12]\n        m[4] = matrix.m[1]\n        m[5] = matrix.m[5]\n        m[6] = matrix.m[9]\n        m[7] = matrix.m[13]\n        m[8] = matrix.m[2]\n        m[9] = matrix.m[6]\n        m[10] = matrix.m[10]\n        m[11] = matrix.m[14]\n        m[12] = matrix.m[3]\n        m[13] = matrix.m[7]\n        m[14] = matrix.m[11]\n        m[15] = matrix.m[15]\n    }\n\n    /**\n     * Transposes this matrix, storing the result in the specified single precision array. The result is compatible with\n     * GLSL uniform matrices, and can be passed to the function glUniformMatrix4fv.\n     *\n     * @param result a pre-allocated array of length 16 in which to return the transposed components\n     *\n     * @return the result argument set to the transposed components\n     */\n    fun transposeToArray(result: FloatArray, offset: Int): FloatArray {\n        var o = offset\n        require(result.size - o >= 16) {\n            logMessage(ERROR, \"Matrix4\", \"transposeToArray\", \"missingArray\")\n        }\n        result[o++] = m[0].toFloat()\n        result[o++] = m[4].toFloat()\n        result[o++] = m[8].toFloat()\n        result[o++] = m[12].toFloat()\n        result[o++] = m[1].toFloat()\n        result[o++] = m[5].toFloat()\n        result[o++] = m[9].toFloat()\n        result[o++] = m[13].toFloat()\n        result[o++] = m[2].toFloat()\n        result[o++] = m[6].toFloat()\n        result[o++] = m[10].toFloat()\n        result[o++] = m[14].toFloat()\n        result[o++] = m[3].toFloat()\n        result[o++] = m[7].toFloat()\n        result[o++] = m[11].toFloat()\n        result[o] = m[15].toFloat()\n        return result\n    }\n\n    /**\n     * Inverts this matrix in place.\n     * <br>\n     * This throws an exception if this matrix is singular.\n     *\n     * @return this matrix, inverted\n     *\n     * @throws IllegalArgumentException If this matrix cannot be inverted\n     */\n    fun invert() = apply {\n        val success = invert(m, m) // passing the same array as src and dst is supported\n        require(success) {\n            // the matrix is singular\n            logMessage(ERROR, \"Matrix4\", \"invertMatrix\", \"singularMatrix\")\n        }\n    }\n\n    /**\n     * Inverts the specified matrix and stores the result in this matrix.\n     * <br>\n     * This throws an exception if the specified matrix is singular.\n     * <br>\n     * The result of this method is undefined if this matrix is passed in as the matrix to invert.\n     *\n     * @param matrix the matrix whose inverse is computed\n     *\n     * @return this matrix set to the inverse of the specified matrix\n     *\n     * @throws IllegalArgumentException If the matrix cannot be inverted\n     */\n    fun invertMatrix(matrix: Matrix4) = apply {\n        val success = invert(matrix.m, m) // store inverse of matrix in this matrix\n        require(success) {\n            // the matrix is singular\n            logMessage(ERROR, \"Matrix4\", \"invertMatrix\", \"singularMatrix\")\n        }\n    }\n\n    /**\n     * Inverts this orthonormal transform matrix in place. This matrix's upper 3x3 is transposed, then its fourth column\n     * is transformed by the transposed upper 3x3 and negated.\n     * <br>\n     * The result of this method is undefined if this matrix's values are not consistent with those of an orthonormal\n     * transform.\n     *\n     * @return this matrix, inverted\n     */\n    fun invertOrthonormal() = apply {\n        // This is assumed to contain matrix 3D transformation matrix. The upper 3x3 is transposed, the translation\n        // components are multiplied by the transposed-upper-3x3 and negated.\n        var tmp = m[1]\n        m[1] = m[4]\n        m[4] = tmp\n\n        tmp = m[2]\n        m[2] = m[8]\n        m[8] = tmp\n\n        tmp = m[6]\n        m[6] = m[9]\n        m[9] = tmp\n\n        val x = m[3]\n        val y = m[7]\n        val z = m[11]\n\n        m[3] = -(m[0] * x) - m[1] * y - m[2] * z\n        m[7] = -(m[4] * x) - m[5] * y - m[6] * z\n        m[11] = -(m[8] * x) - m[9] * y - m[10] * z\n\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = 0.0\n        m[15] = 1.0\n    }\n\n    /**\n     * Inverts the specified orthonormal transform matrix and stores the result in 'this' matrix. The specified matrix's\n     * upper 3x3 is transposed, then its fourth column is transformed by the transposed upper 3x3 and negated.  The\n     * result is stored in 'this' matrix.\n     * <br>\n     * The result of this method is undefined if this matrix is passed in as the matrix to invert, or if the matrix's\n     * values are not consistent with those of an orthonormal transform.\n     *\n     * @param matrix the matrix whose inverse is computed. The matrix is assumed to represent an orthonormal transform\n     * matrix.\n     *\n     * @return this matrix set to the inverse of the specified matrix\n     */\n    fun invertOrthonormalMatrix(matrix: Matrix4) = apply {\n        // The matrix is assumed to contain matrix 3D transformation matrix. The upper 3x3 is transposed, the translation\n        // components are multiplied by the transposed-upper-3x3 and negated.\n        m[0] = matrix.m[0]\n        m[1] = matrix.m[4]\n        m[2] = matrix.m[8]\n        m[3] = -(matrix.m[0] * matrix.m[3]) - matrix.m[4] * matrix.m[7] - matrix.m[8] * matrix.m[11]\n        m[4] = matrix.m[1]\n        m[5] = matrix.m[5]\n        m[6] = matrix.m[9]\n        m[7] = -(matrix.m[1] * matrix.m[3]) - matrix.m[5] * matrix.m[7] - matrix.m[9] * matrix.m[11]\n        m[8] = matrix.m[2]\n        m[9] = matrix.m[6]\n        m[10] = matrix.m[10]\n        m[11] = -(matrix.m[2] * matrix.m[3]) - matrix.m[6] * matrix.m[7] - matrix.m[10] * matrix.m[11]\n        m[12] = 0.0\n        m[13] = 0.0\n        m[14] = 0.0\n        m[15] = 1.0\n    }\n\n    /**\n     * Applies a specified depth offset to this projection matrix. The depth offset may be any real number and is\n     * typically used to draw geometry slightly closer to the user's eye in order to give those shapes visual priority\n     * over nearby or geometry. An offset of zero has no effect. An offset less than zero brings depth values closer to\n     * the eye, while an offset greater than zero pushes depth values away from the eye.\n     * <br>\n     * The result of this method is undefined if this matrix is not a projection matrix. Projection matrices can be\n     * created by calling `setToPerspectiveProjection` or `setToScreenProjection`\n     * <br>\n     * Depth offset may be applied to both perspective and screen projection matrices. The effect on each type is\n     * outlined here:\n     * <br>\n     * **Perspective Projection**\n     * <br>\n     * The effect of depth offset on a perspective projection increases exponentially with distance from the eye. This\n     * has the effect of adjusting the offset for the loss in depth precision with geometry drawn further from the eye.\n     * Distant geometry requires a greater offset to differentiate itself from nearby geometry, while close geometry\n     * does not.\n     * <br>\n     * **Screen Projection**\n     * <br>\n     * The effect of depth offset on an screen projection increases linearly with distance from the eye. While it is\n     * reasonable to apply a depth offset to an screen projection, the effect is most appropriate when applied to the\n     * projection used to draw the scene. For example, when an object's coordinates are projected by a perspective\n     * projection into screen coordinates then drawn using a screen projection, it is best to apply the offset to the\n     * original perspective projection. The method `RenderContext.project` performs the correct behavior for\n     * the projection type used to draw the scene.\n     *\n     * @param depthOffset the amount of offset to apply\n     *\n     * @return this matrix with its components adjusted to account for the specified depth offset\n     */\n    fun offsetProjectionDepth(depthOffset: Double) = apply { m[10] *= 1 + depthOffset }\n\n    /**\n     * Returns this viewing matrix's eye point. In model coordinates, a viewing matrix's eye point is the point the\n     * viewer is looking from and maps to the center of the screen.\n     * <br>\n     * The result of this method is undefined if this matrix is not a viewing matrix.\n     *\n     * @param result a pre-allocated `Vec3` in which to return the extracted value\n     *\n     * @return the specified result argument containing the viewing matrix's eye point\n     */\n    fun extractEyePoint(result: Vec3): Vec3 {\n        // The eye point of a modelview matrix is computed by transforming the origin (0, 0, 0, 1) by the matrix's\n        // inverse. This is equivalent to transforming the inverse of this matrix's translation components in the\n        // rightmost column by the transpose of its upper 3x3 components.\n        result.x = -(m[0] * m[3]) - m[4] * m[7] - m[8] * m[11]\n        result.y = -(m[1] * m[3]) - m[5] * m[7] - m[9] * m[11]\n        result.z = -(m[2] * m[3]) - m[6] * m[7] - m[10] * m[11]\n        return result\n    }\n\n    /**\n     * Returns this viewing matrix's forward vector.\n     * <br>\n     * The result of this method is undefined if this matrix is not a viewing matrix.\n     *\n     * @param result a pre-allocated `Vec3` in which to return the extracted value\n     *\n     * @return the specified result argument containing the viewing matrix's forward vector\n     */\n    fun extractForwardVector(result: Vec3): Vec3 {\n        // The forward vector of a modelview matrix is computed by transforming the negative Z axis (0, 0, -1, 0) by the\n        // matrix's inverse. We have pre-computed the result inline here to simplify this computation.\n        result.x = -m[8]\n        result.y = -m[9]\n        result.z = -m[10]\n        return result\n    }\n\n    /**\n     * Returns this viewing matrix's heading angle. The roll argument enables the caller to disambiguate\n     * heading and roll when the two rotation axes for heading and roll are parallel, causing gimbal lock.\n     * <br>\n     * The result of this method is undefined if this matrix is not a viewing matrix.\n     *\n     * @param roll the viewing matrix's roll angle, or 0 if the roll angle is unknown\n     *\n     * @return the extracted heading angle\n     */\n    fun extractHeading(roll: Angle): Angle {\n        val cr = cos(roll.inRadians)\n        val sr = sin(roll.inRadians)\n        val ch = cr * m[0] - sr * m[4]\n        val sh = sr * m[5] - cr * m[1]\n        return atan2(sh, ch).radians\n    }\n\n    /**\n     * Returns this viewing matrix's tilt angle.\n     * <br>\n     * The result of this method is undefined if this matrix is not a viewing matrix.\n     *\n     * @return the extracted heading angle\n     */\n    fun extractTilt(): Angle {\n        val ct = m[10]\n        val st = sqrt(m[2] * m[2] + m[6] * m[6])\n        return atan2(st, ct).radians\n    }\n\n    /**\n     * Returns this symmetric matrix's eigenvectors. The eigenvectors are returned in the specified result arguments in\n     * order of descending magnitude (most prominent to least prominent). Each eigenvector has length equal to its\n     * corresponding eigenvalue.\n     * <br>\n     * This method returns false if this matrix is not a symmetric matrix.\n     *\n     * @param result1 a pre-allocated Vec3 in which to return the most prominent eigenvector\n     * @param result2 a pre-allocated Vec3 in which to return the second most prominent eigenvector\n     * @param result3 a pre-allocated Vec3 in which to return the least prominent eigenvector\n     *\n     * @return true if this matrix is symmetric and its eigenvectors can be determined, otherwise false\n     */\n    fun extractEigenvectors(result1: Vec3, result2: Vec3, result3: Vec3): Boolean {\n        // Taken from Mathematics for 3D Game Programming and Computer Graphics, Second Edition,\n        // listing 14.6.\n        if (m[1] != m[4] || m[2] != m[8] || m[6] != m[9]) return false // matrix is not symmetric\n\n        // Since the matrix is symmetric m12=m21, m13=m31 and m23=m32, therefore we can ignore the values m21,\n        // m32 and m32.\n        var m11 = m[0]\n        var m12 = m[1]\n        var m13 = m[2]\n        var m22 = m[5]\n        var m23 = m[6]\n        var m33 = m[10]\n        val r = Array(3) { DoubleArray(3) }\n        r[2][2] = 1.0\n        r[1][1] = r[2][2]\n        r[0][0] = r[1][1]\n        for (a in 0 until MAX_SWEEPS) {\n            // Exit if off-diagonal entries small enough\n            if (abs(m12) < EPSILON && abs(m13) < EPSILON && abs(m23) < EPSILON) break\n\n            // Annihilate (1,2) entry.\n            if (m12 != 0.0) {\n                val u = (m22 - m11) * 0.5 / m12\n                val u2 = u * u\n                val u2p1 = u2 + 1\n                val t = if (u2p1 != u2) (if (u < 0) -1 else 1) * (sqrt(u2p1) - abs(u)) else 0.5 / u\n                val c = 1 / sqrt(t * t + 1)\n                val s = c * t\n                m11 -= t * m12\n                m22 += t * m12\n                m12 = 0.0\n                var temp = c * m13 - s * m23\n                m23 = s * m13 + c * m23\n                m13 = temp\n                for (i in 0..2) {\n                    temp = c * r[i][0] - s * r[i][1]\n                    r[i][1] = s * r[i][0] + c * r[i][1]\n                    r[i][0] = temp\n                }\n            }\n\n            // Annihilate (1,3) entry.\n            if (m13 != 0.0) {\n                val u = (m33 - m11) * 0.5 / m13\n                val u2 = u * u\n                val u2p1 = u2 + 1\n                val t = if (u2p1 != u2) (if (u < 0) -1 else 1) * (sqrt(u2p1) - abs(u)) else 0.5 / u\n                val c = 1 / sqrt(t * t + 1)\n                val s = c * t\n                m11 -= t * m13\n                m33 += t * m13\n                m13 = 0.0\n                var temp = c * m12 - s * m23\n                m23 = s * m12 + c * m23\n                m12 = temp\n                for (i in 0..2) {\n                    temp = c * r[i][0] - s * r[i][2]\n                    r[i][2] = s * r[i][0] + c * r[i][2]\n                    r[i][0] = temp\n                }\n            }\n\n            // Annihilate (2,3) entry.\n            if (m23 != 0.0) {\n                val u = (m33 - m22) * 0.5 / m23\n                val u2 = u * u\n                val u2p1 = u2 + 1\n                val t = if (u2p1 != u2) (if (u < 0) -1 else 1) * (sqrt(u2p1) - abs(u)) else 0.5 / u\n                val c = 1 / sqrt(t * t + 1)\n                val s = c * t\n                m22 -= t * m23\n                m33 += t * m23\n                m23 = 0.0\n                var temp = c * m12 - s * m13\n                m13 = s * m12 + c * m13\n                m12 = temp\n                for (i in 0..2) {\n                    temp = c * r[i][1] - s * r[i][2]\n                    r[i][2] = s * r[i][1] + c * r[i][2]\n                    r[i][1] = temp\n                }\n            }\n        }\n\n        // Sort the eigenvectors by descending magnitude.\n        var i1 = 0\n        var i2 = 1\n        var i3 = 2\n        if (m11 < m22) {\n            val temp = m11\n            m11 = m22\n            m22 = temp\n            val itemp = i1\n            i1 = i2\n            i2 = itemp\n        }\n        if (m22 < m33) {\n            val temp = m22\n            m22 = m33\n            m33 = temp\n            val itemp = i2\n            i2 = i3\n            i3 = itemp\n        }\n        if (m11 < m22) {\n            val temp = m11\n            m11 = m22\n            m22 = temp\n            val itemp = i1\n            i1 = i2\n            i2 = itemp\n        }\n        result1.set(r[0][i1], r[1][i1], r[2][i1])\n        result2.set(r[0][i2], r[1][i2], r[2][i2])\n        result3.set(r[0][i3], r[1][i3], r[2][i3])\n        result1.normalize()\n        result2.normalize()\n        result3.normalize()\n        result1.multiply(m11)\n        result2.multiply(m22)\n        result3.multiply(m33)\n        return true\n    }\n\n    /**\n     * Projects a Cartesian point to screen coordinates. This method assumes this matrix represents an inverse\n     * modelview-projection matrix. The result of this method is undefined if this matrix is not an inverse\n     * modelview-projection matrix.\n     * <br>\n     * The resultant screen point is in OpenGL screen coordinates, with the origin in the bottom-left corner and axes\n     * that extend up and to the right from the origin.\n     * <br>\n     * This stores the projected point in the result argument, and returns a boolean value indicating whether or not the\n     * projection is successful. This returns false if the Cartesian point is clipped by the near clipping plane or the\n     * far clipping plane.\n     *\n     * @param x        the Cartesian point's X component\n     * @param y        the Cartesian point's y component\n     * @param z        the Cartesian point's z component\n     * @param viewport the viewport defining the screen point's coordinate system\n     * @param result   a pre-allocated [Vec3] in which to return the projected point\n     *\n     * @return true if the transformation is successful, otherwise false\n     */\n    fun project(x: Double, y: Double, z: Double, viewport: Viewport, result: Vec3): Boolean {\n        // Transform the model point from model coordinates to eye coordinates then to clip coordinates. This inverts\n        // the Z axis and stores the negative of the eye coordinate Z value in the W coordinate.\n        var sx = m[0] * x + m[1] * y + m[2] * z + m[3]\n        var sy = m[4] * x + m[5] * y + m[6] * z + m[7]\n        var sz = m[8] * x + m[9] * y + m[10] * z + m[11]\n        val sw = m[12] * x + m[13] * y + m[14] * z + m[15]\n        if (sw == 0.0) return false\n\n        // Complete the conversion from model coordinates to clip coordinates by dividing by W. The resultant X, Y\n        // and Z coordinates are in the range [-1,1].\n        sx /= sw\n        sy /= sw\n        sz /= sw\n\n        // Clip the point against the near and far clip planes.\n        if (sz < -1 || sz > 1) return false\n\n        // Convert the point from clip coordinate to the range [0,1]. This enables the X and Y coordinates to be\n        // converted to screen coordinates, and the Z coordinate to represent a depth value in the range[0,1].\n        sx = sx * 0.5 + 0.5\n        sy = sy * 0.5 + 0.5\n        sz = sz * 0.5 + 0.5\n\n        // Convert the X and Y coordinates from the range [0,1] to screen coordinates.\n        sx = sx * viewport.width + viewport.x\n        sy = sy * viewport.height + viewport.y\n        result.x = sx\n        result.y = sy\n        result.z = sz\n        return true\n    }\n\n    /**\n     * Un-projects a screen coordinate point to Cartesian coordinates at the near clip plane and the far clip plane.\n     * This method assumes this matrix represents an inverse modelview-projection matrix. The result of this method is\n     * undefined if this matrix is not an inverse modelview-projection matrix.\n     * <br>\n     * The screen point is understood to be in OpenGL screen coordinates, with the origin in the bottom-left corner and\n     * axes that extend up and to the right from the origin.\n     * <br>\n     * This function stores the un-projected points in the result argument, and a boolean value indicating whether the\n     * un-projection is successful.\n     *\n     * @param x          the screen point's X component\n     * @param y          the screen point's Y component\n     * @param viewport   the viewport defining the screen point's coordinate system\n     * @param nearResult a pre-allocated [Vec3] in which to return the un-projected near clip plane point\n     * @param farResult  a pre-allocated [Vec3] in which to return the un-projected far clip plane point\n     *\n     * @return true if the transformation is successful, otherwise false\n     */\n    fun unProject(x: Double, y: Double, viewport: Viewport, nearResult: Vec3, farResult: Vec3): Boolean {\n        // Convert the XY screen coordinates to coordinates in the range [0, 1]. This enables the XY coordinates to\n        // be converted to clip coordinates.\n        var sx = (x - viewport.x) / viewport.width\n        var sy = (y - viewport.y) / viewport.height\n\n        // Convert from coordinates in the range [0, 1] to clip coordinates in the range [-1, 1].\n        sx = sx * 2 - 1\n        sy = sy * 2 - 1\n\n        // Transform the screen point from clip coordinates to model coordinates. This is a partial transformation that\n        // factors out the contribution from the screen point's X and Y components. The contribution from the Z\n        // component, which is both -1 and +1, is included next.\n        val mx = m[0] * sx + m[1] * sy + m[3]\n        val my = m[4] * sx + m[5] * sy + m[7]\n        val mz = m[8] * sx + m[9] * sy + m[11]\n        val mw = m[12] * sx + m[13] * sy + m[15]\n\n        // Transform the screen point at the near clip plane (z = -1) to model coordinates.\n        val nx = mx - m[2]\n        val ny = my - m[6]\n        val nz = mz - m[10]\n        val nw = mw - m[14]\n\n        // Transform the screen point at the far clip plane (z = +1) to model coordinates.\n        val fx = mx + m[2]\n        val fy = my + m[6]\n        val fz = mz + m[10]\n        val fw = mw + m[14]\n        if (nw == 0.0 || fw == 0.0) return false\n\n        // Complete the conversion from near clip coordinates to model coordinates by dividing by the W component.\n        nearResult.x = nx / nw\n        nearResult.y = ny / nw\n        nearResult.z = nz / nw\n\n        // Complete the conversion from far clip coordinates to model coordinates by dividing by the W component.\n        farResult.x = fx / fw\n        farResult.y = fy / fw\n        farResult.z = fz / fw\n        return true\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Matrix4) return false\n        return m.contentEquals(other.m)\n    }\n\n    override fun hashCode() = m.contentHashCode()\n\n    override fun toString() =\n        \"Matrix4([${m[0]}, ${m[1]}, ${m[2]}, ${m[3]}], [${m[4]}, ${m[5]}, ${m[6]}, ${m[7]}], [${m[8]}, ${m[9]}, ${m[10]}, ${m[11]}], [${m[12]}, ${m[13]}, ${m[14]}, ${m[15]}])\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.geom.OffsetMode.FRACTION\nimport earth.worldwind.geom.OffsetMode.INSET_PIXELS\nimport kotlin.jvm.JvmStatic\n\n/**\n * Specifies an offset relative to a rectangle. Used by renderable shapes.\n */\nopen class Offset(\n    /**\n     * The units of this instance's X offset. See this class' constructor description for a list of the possible\n     * values.\n     */\n    var xUnits: OffsetMode,\n    /**\n     * The offset in the X dimension, interpreted according to this instance's xUnits argument.\n     */\n    var x: Double,\n    /**\n     * The units of this instance's Y offset. See this class' constructor description for a list of the possible\n     * values.\n     */\n    var yUnits: OffsetMode,\n    /**\n     * The offset in the Y dimension, interpreted according to this instance's yUnits argument.\n     */\n    var y: Double\n) {\n    /**\n     * Creates a new offset of this offset with identical property values.\n     */\n    constructor(offset: Offset): this(offset.xUnits, offset.x, offset.yUnits, offset.y)\n\n    companion object {\n        /**\n         * This factory method returns a new offset used for anchoring a rectangle to its center.\n         */\n        @JvmStatic fun center() = Offset(FRACTION, 0.5, FRACTION, 0.5)\n        /**\n         * This factory method returns a new offset used for anchoring a rectangle to its bottom-left corner.\n         */\n        @JvmStatic fun bottomLeft() = Offset(FRACTION, 0.0, FRACTION, 0.0)\n        /**\n         * This factory method returns a new offset for anchoring a rectangle to its center of its bottom edge.\n         */\n        @JvmStatic fun bottomCenter() = Offset(FRACTION, 0.5, FRACTION, 0.0)\n        /**\n         * This factory method returns a new offset for anchoring a rectangle to its bottom-right corner.\n         */\n        @JvmStatic fun bottomRight() = Offset(FRACTION, 1.0, FRACTION, 0.0)\n        /**\n         * This factory method returns a new offset for anchoring a rectangle its top-left corner.\n         */\n        @JvmStatic fun topLeft() = Offset(FRACTION, 0.0, FRACTION, 1.0)\n        /**\n         * This factory method returns a new offset for anchoring a rectangle to the center of its top edge.\n         */\n        @JvmStatic fun topCenter() = Offset(FRACTION, 0.5, FRACTION, 1.0)\n        /**\n         * This factory method returns a new offset for anchoring a rectangle to its top-right corner.\n         */\n        @JvmStatic fun topRight() = Offset(FRACTION, 1.0, FRACTION, 1.0)\n    }\n\n    /**\n     * Sets this offset to identical property values of the specified offset.\n     */\n    fun copy(offset: Offset) = apply {\n        x = offset.x\n        y = offset.y\n        xUnits = offset.xUnits\n        yUnits = offset.yUnits\n    }\n\n    /**\n     * Returns this offset's absolute X and Y coordinates in pixels for a rectangle of a specified size in pixels. The\n     * returned offset is in pixels relative to the rectangle's origin, and is defined in the coordinate system used by\n     * the caller.\n     *\n     * @param width  the rectangle's width in pixels\n     * @param height the rectangles height in pixels\n     * @param result a pre-allocated Vec2 in which to return the computed offset relative to the rectangle's origin\n     *\n     * @return the result argument set to the computed offset\n     */\n    fun offsetForSize(width: Double, height: Double, result: Vec2): Vec2 {\n        val x = when (xUnits) {\n            FRACTION -> width * x\n            INSET_PIXELS -> width - x\n            else -> x // default to OFFSET_PIXELS\n        }\n        val y = when (yUnits) {\n            FRACTION -> height * y\n            INSET_PIXELS -> height - y\n            else -> y // default to OFFSET_PIXELS\n        }\n        return result.set(x, y)\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Offset) return false\n        return xUnits == other.xUnits && x == other.x && yUnits == other.yUnits && y == other.y\n    }\n\n    override fun hashCode(): Int {\n        var result = xUnits.hashCode()\n        result = 31 * result + x.hashCode()\n        result = 31 * result + yUnits.hashCode()\n        result = 31 * result + y.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Offset(xUnits=$xUnits, x=$x, yUnits=$yUnits, y=$y)\"\n}","package earth.worldwind.geom\n\n/**\n * Represents a plane in Cartesian coordinates. The plane's X, Y and Z components indicate the plane's normal vector.\n * The distance component indicates the plane's distance from the origin relative to its unit normal.\n */\nopen class Plane {\n    companion object {\n        protected const val NEAR_ZERO_THRESHOLD = 1e-10\n    }\n\n    /**\n     * The normal vector to the plane.\n     */\n    val normal = Vec3(0.0, 0.0, 1.0)\n    /**\n     * The plane's distance from the origin.\n     */\n    var distance = 0.0\n\n    /**\n     * Constructs a plane in the X-Y plane with its unit normal pointing along the Z axis.\n     */\n    constructor()\n\n    /**\n     * Constructs a plane with specified normal vector components and distance from the origin.\n     * This constructor normalizes the components, ensuring that the plane has a unit normal vector.\n     *\n     * @param x        the X component of the plane's normal vector\n     * @param y        the Y component of the plane's normal vector\n     * @param z        the Z component of the plane's normal vector\n     * @param distance the plane's distance from the origin\n     */\n    constructor(x: Double, y: Double, z: Double, distance: Double) { set(x, y, z, distance) }\n\n    /**\n     * Constructs a plane with the normal vector and distance from a specified plane.\n     *\n     * @param plane the plane specifying the normal vector and distance\n     */\n    constructor(plane: Plane): this() { copy(plane) }\n\n    /**\n     * Computes the distance between this plane and a point.\n     *\n     * @param point the point whose distance to compute\n     *\n     * @return the computed distance\n     */\n    fun distanceToPoint(point: Vec3) = dot(point)\n\n    /**\n     * Sets this plane's specified normal vector and distance to specified values. This normalizes the components,\n     * ensuring that the plane has a unit normal vector.\n     *\n     * @param x        the X component of the plane's normal vector\n     * @param y        the Y component of the plane's normal vector\n     * @param z        the Z component of the plane's normal vector\n     * @param distance the plane's distance from the origin\n     *\n     * @return this plane with its normal vector and distance set to specified values\n     */\n    fun set(x: Double, y: Double, z: Double, distance: Double) = apply {\n        normal.x = x\n        normal.y = y\n        normal.z = z\n        this.distance = distance\n        normalizeIfNeeded()\n    }\n\n    /**\n     * Sets this plane's normal vector and distance to that of a specified plane.\n     *\n     * @param plane the plane specifying the normal vector and distance\n     *\n     * @return this plane with its normal vector and distance set to those of the specified plane\n     */\n    fun copy(plane: Plane) = apply {\n        // Assumes the specified plane's parameters are normalized.\n        normal.copy(plane.normal)\n        distance = plane.distance\n    }\n\n    /**\n     * Transforms this plane by a specified matrix.\n     *\n     * @param matrix the matrix to apply to this plane\n     *\n     * @return this plane transformed by the specified matrix\n     */\n    fun transformByMatrix(matrix: Matrix4) = apply {\n        val m = matrix.m\n        val x = m[0] * normal.x + m[1] * normal.y + m[2] * normal.z + m[3] * distance\n        val y = m[4] * normal.x + m[5] * normal.y + m[6] * normal.z + m[7] * distance\n        val z = m[8] * normal.x + m[9] * normal.y + m[10] * normal.z + m[11] * distance\n        val distance = m[12] * normal.x + m[13] * normal.y + m[14] * normal.z + m[15] * distance\n        normal.x = x\n        normal.y = y\n        normal.z = z\n        this.distance = distance\n        normalizeIfNeeded()\n    }\n\n    /**\n     * Computes the dot product of this plane's components with a specified vector. Since the plane was defined with a\n     * unit normal vector, this function returns the distance of the vector from the plane.\n     *\n     * @param vector the vector to dot with this plane's components\n     *\n     * @return the computed dot product\n     */\n    fun dot(vector: Vec3) = normal.dot(vector) + distance\n\n    /**\n     * Determines whether a specified line segment intersects this plane.\n     *\n     * @param endPoint1 the line segment's first end point\n     * @param endPoint2 the line segment's second end point\n     *\n     * @return true if the line segment intersects this plane, otherwise false\n     */\n    fun intersectsSegment(endPoint1: Vec3, endPoint2: Vec3): Boolean {\n        val distance1 = dot(endPoint1)\n        val distance2 = dot(endPoint2)\n        return distance1 * distance2 <= 0\n    }\n\n    /**\n     * Determines whether two points are on the same side of this plane.\n     *\n     * @param pointA the first point\n     * @param pointB the second point\n     *\n     * @return -1 if both points are on the negative side of this plane, +1 if both points are on the positive side of\n     * this plane, 0 if the points are on opposite sides of this plane\n     */\n    fun onSameSide(pointA: Vec3, pointB: Vec3): Int {\n        val da = distanceToPoint(pointA)\n        val db = distanceToPoint(pointB)\n        if (da < 0 && db < 0) return -1\n        return if (da > 0 && db > 0) 1 else 0\n    }\n\n    /**\n     * Clips a line segment to this plane, returning an two-point array indicating the clipped segment. If the direction\n     * of the line formed by the two points is positive with respect to this plane's normal vector, the first point in\n     * the array will be the intersection point on the plane, and the second point will be the original segment end\n     * point. If the direction of the line is negative with respect to this plane's normal vector, the first point in\n     * the array will be the original segment's begin point, and the second point will be the intersection point on the\n     * plane. If the segment does not intersect the plane, null is returned. If the segment is coincident with the\n     * plane, the input points are returned, in their input order.\n     *\n     * @param pointA the first line segment endpoint\n     * @param pointB the second line segment endpoint\n     *\n     * @return an array of two points both on the positive side of the plane, or null if the segment does not intersect\n     * this plane\n     */\n    fun clip(pointA: Vec3, pointB: Vec3): Array<Vec3>? {\n        if (pointA == pointB) return null\n\n        // Get the projection of the segment onto the plane.\n        val line = Line().setToSegment(pointA, pointB)\n        val lDotV = normal.dot(line.direction)\n\n        // Are the line and plane parallel?\n        if (lDotV == 0.0) { // line and plane are parallel and may be coincident.\n            val lDotS = dot(line.origin)\n            return if (lDotS == 0.0) arrayOf(pointA, pointB) // line is coincident with the plane\n            else null // line is not coincident with the plane.\n        }\n\n        // Not parallel so the line intersects. But does the segment intersect?\n        val t = -dot(line.origin) / lDotV // lDotS / lDotV\n        if (t < 0 || t > 1) return null // segment does not intersect\n        val p = line.pointAt(t, Vec3())\n        return if (lDotV > 0) arrayOf(p, pointB) else arrayOf(pointA, p)\n    }\n\n    protected open fun normalizeIfNeeded() {\n        // Compute the plane normal's magnitude in order to determine whether or not the plane needs normalization.\n        val magnitude = normal.magnitude\n\n        // Don't normalize a zero vector; the result is NaN when it should be 0.0.\n        if (magnitude == 0.0) return\n\n        // Don't normalize a unit vector, this indicates that the caller has already normalized the vector, but floating\n        // point round-off results in a length not exactly 1.0. Since we're normalizing on the caller's behalf, we want\n        // to avoid unnecessary any normalization that modifies the specified values.\n        if (magnitude >= 1 - NEAR_ZERO_THRESHOLD && magnitude <= 1 + NEAR_ZERO_THRESHOLD) return\n\n        // Normalize the caller-specified plane coordinates.\n        normal.x /= magnitude\n        normal.y /= magnitude\n        normal.z /= magnitude\n        distance /= magnitude\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Plane) return false\n        return normal == other.normal && distance == other.distance\n    }\n\n    override fun hashCode(): Int {\n        var result = normal.hashCode()\n        result = 31 * result + distance.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Plane(normal=$normal, distance=$distance)\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.geom.Angle.Companion.fromDegrees\nimport earth.worldwind.geom.Angle.Companion.fromRadians\nimport earth.worldwind.shape.PathType\nimport kotlin.jvm.JvmStatic\n\n/**\n * Geographic position with a latitude and longitude and altitude in meters.\n */\nopen class Position(\n    /**\n     * The position's latitude.\n     */\n    latitude: Angle,\n    /**\n     * The position's longitude.\n     */\n    longitude: Angle,\n    /**\n     * The position's altitude in meters.\n     */\n    var altitude: Double\n): Location(latitude, longitude) {\n    /**\n     * Constructs a position with latitude, longitude and altitude all 0.\n     */\n    constructor(): this(latitude = ZERO, longitude = ZERO, altitude = 0.0)\n\n    /**\n     * Constructs a position with the latitude, longitude and altitude of a specified position.\n     *\n     * @param position the position specifying the coordinates\n     */\n    constructor(position: Position): this(position.latitude, position.longitude, position.altitude)\n\n    companion object {\n        /**\n         * Constructs a position with a specified latitude and longitude in degrees and altitude in meters.\n         *\n         * @param latitudeDegrees  the latitude in degrees\n         * @param longitudeDegrees the longitude in degrees\n         * @param altitude         the altitude in meters\n         *\n         * @return the new position\n         */\n        @JvmStatic\n        fun fromDegrees(latitudeDegrees: Double, longitudeDegrees: Double, altitude: Double) =\n            Position(fromDegrees(latitudeDegrees), fromDegrees(longitudeDegrees), altitude)\n\n        /**\n         * Constructs a position with a specified latitude and longitude in radians and altitude in meters.\n         *\n         * @param latitudeRadians  the latitude in radians\n         * @param longitudeRadians the longitude in radians\n         * @param altitude         the altitude in meters\n         *\n         * @return the new position\n         */\n        @JvmStatic\n        fun fromRadians(latitudeRadians: Double, longitudeRadians: Double, altitude: Double) =\n            Position(fromRadians(latitudeRadians), fromRadians(longitudeRadians), altitude)\n    }\n\n    /**\n     * Sets this position to a specified latitude and longitude and altitude in meters.\n     *\n     * @param latitude  the new latitude\n     * @param longitude the new longitude\n     * @param altitude  the new altitude in meters\n     *\n     * @return this position with its latitude, longitude and altitude set to the specified values\n     */\n    fun set(latitude: Angle, longitude: Angle, altitude: Double) = apply {\n        set(latitude, longitude)\n        this.altitude = altitude\n    }\n\n    /**\n     * Sets this position to a specified latitude and longitude in degrees and altitude in meters.\n     *\n     * @param latitudeDegrees  the new latitude in degrees\n     * @param longitudeDegrees the new longitude in degrees\n     * @param altitude         the new altitude in meters\n     *\n     * @return this position with its latitude, longitude and altitude set to the specified values\n     */\n    fun setDegrees(latitudeDegrees: Double, longitudeDegrees: Double, altitude: Double) = apply {\n        setDegrees(latitudeDegrees, longitudeDegrees)\n        this.altitude = altitude\n    }\n\n    /**\n     * Sets this position to a specified latitude and longitude in radians and altitude in meters.\n     *\n     * @param latitudeRadians  the new latitude in radians\n     * @param longitudeRadians the new longitude in radians\n     * @param altitude         the new altitude in meters\n     *\n     * @return this position with its latitude, longitude and altitude set to the specified values\n     */\n    fun setRadians(latitudeRadians: Double, longitudeRadians: Double, altitude: Double) = apply {\n        setRadians(latitudeRadians, longitudeRadians)\n        this.altitude = altitude\n    }\n\n    /**\n     * Sets this position to the latitude, longitude and altitude of a specified position.\n     *\n     * @param position the position specifying the new coordinates\n     *\n     * @return this position with its latitude, longitude and altitude set to that of the specified position\n     */\n    fun copy(position: Position) = set(position.latitude, position.longitude, position.altitude)\n\n    /**\n     * Compute a position along a path between two positions. The amount indicates the fraction of the path at which to\n     * compute a position. This value is typically between 0 and 1, where 0 indicates the begin position (this position)\n     * and 1 indicates the end position.\n     *\n     * @param endPosition the path's end position\n     * @param pathType    [PathType] indicating type of path to assume\n     * @param amount      the fraction of the path at which to compute a position\n     * @param result      a pre-allocated Position in which to return the computed result\n     *\n     * @return the result argument set to the computed position\n     */\n    fun interpolateAlongPath(endPosition: Position, pathType: PathType, amount: Double, result: Position): Position {\n        // Interpolate latitude and longitude.\n        super.interpolateAlongPath(endPosition, pathType, amount, result)\n        // Interpolate altitude.\n        result.altitude = (1 - amount) * altitude + amount * endPosition.altitude\n        return result\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Position) return false\n        if (!super.equals(other)) return false\n        return altitude == other.altitude\n    }\n\n    override fun hashCode(): Int {\n        var result = super.hashCode()\n        result = 31 * result + altitude.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Position(latitude=$latitude, longitude=$longitude, altitude=$altitude)\"\n}","package earth.worldwind.geom\n\n/**\n * Continuous interval in a one-dimensional coordinate system expressed as a lower bound an an upper bound, inclusive.\n */\nopen class Range(\n    /**\n     * The range's lower bound, inclusive.\n     */\n    var lower: Int,\n    /**\n     * The range's upper bound, inclusive.\n     */\n    var upper: Int\n) {\n    /**\n     * Constructs an empty range with lower and upper both zero.\n     */\n    constructor(): this(lower = 0, upper = 0)\n\n    /**\n     * Constructs a range with the lower bound and upper bound of a specified range.\n     *\n     * @param range the range specifying the values\n     */\n    constructor(range: Range) : this(range.lower, range.upper)\n\n    /**\n     * Returns the length of the interval between this range's lower bound and upper bound, or 0 if this range is empty.\n     */\n    val length get() = if (upper > lower) upper - lower else 0\n\n    /**\n     * Indicates whether or not this range is empty. An range is empty when its lower bound is greater than or equal to\n     * its upper bound.\n     *\n     * @return true if this range is empty, false otherwise\n     */\n    val isEmpty get() = lower >= upper\n\n    /**\n     * Sets this range to an empty range.\n     *\n     * @return this range with its lower bound and upper bound both set to zero\n     */\n    fun setEmpty() = set(0, 0)\n\n    /**\n     * Sets this range to the specified lower bound and upper bound.\n     *\n     * @param lower the new lower bound, inclusive\n     * @param upper the new upper bound, inclusive\n     *\n     * @return this range set to the specified values\n     */\n    fun set(lower: Int, upper: Int) = apply {\n        this.lower = lower\n        this.upper = upper\n    }\n\n    /**\n     * Sets this range to the lower bound and upper bound of a specified range.\n     *\n     * @param range the range specifying the new values\n     *\n     * @return this range with its lower bound and upper bound set to that of the specified range\n     */\n    fun copy(range: Range) = set(range.lower, range.upper)\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Range) return false\n        return lower == other.lower && upper == other.upper\n    }\n\n    override fun hashCode(): Int {\n        var result = lower\n        result = 31 * result + upper\n        return result\n    }\n\n    override fun toString() = \"Range(lower=$lower, upper=$upper)\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.geom.Angle.Companion.NEG180\nimport earth.worldwind.geom.Angle.Companion.NEG90\nimport earth.worldwind.geom.Angle.Companion.POS180\nimport earth.worldwind.geom.Angle.Companion.POS90\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.geom.Angle.Companion.average\nimport earth.worldwind.geom.Angle.Companion.clampLatitude\nimport earth.worldwind.geom.Angle.Companion.clampLongitude\nimport earth.worldwind.geom.Angle.Companion.fromDegrees\nimport earth.worldwind.geom.Angle.Companion.fromRadians\nimport earth.worldwind.geom.Angle.Companion.max\nimport earth.worldwind.geom.Angle.Companion.min\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.jvm.JvmStatic\n\n/**\n * Geographic rectangular region.\n */\nopen class Sector(\n    /**\n     * The sector's minimum latitude.\n     */\n    var minLatitude: Angle,\n    /**\n     * The sector's maximum latitude.\n     */\n    var maxLatitude: Angle,\n    /**\n     * The sector's minimum longitude.\n     */\n    var minLongitude: Angle,\n    /**\n     * The sector's maximum longitude.\n     */\n    var maxLongitude: Angle\n) {\n    /**\n     * Indicates whether this sector has no dimensions.\n     */\n    val isEmpty get() = minLatitude == ZERO && maxLatitude == ZERO && minLongitude == ZERO && maxLongitude == ZERO\n    /**\n     * Indicates whether this sector contains the full range of latitude [90 to +90] and longitude [-180 to +180].\n     */\n    val isFullSphere get() = minLatitude == NEG90 && maxLatitude == POS90 && minLongitude == NEG180 && maxLongitude == POS180\n    /**\n     * Returns the angle between this sector's minimum and maximum latitudes.\n     */\n    val deltaLatitude get() = maxLatitude - minLatitude\n    /**\n     * Returns the angle between this sector's minimum and maximum longitudes.\n     */\n    val deltaLongitude get() = maxLongitude - minLongitude\n    /**\n     * Returns the angle midway between this sector's minimum and maximum latitudes.\n     */\n    val centroidLatitude get() = average(minLatitude, maxLatitude)\n    /**\n     * Returns the angle midway between this sector's minimum and maximum longitudes.\n     */\n    val centroidLongitude get() = average(minLongitude, maxLongitude)\n\n    /**\n     * Constructs an empty sector with minimum and maximum latitudes and longitudes all 0.\n     */\n    constructor(): this(minLatitude = ZERO, maxLatitude = ZERO, minLongitude = ZERO, maxLongitude = ZERO)\n\n    /**\n     * Constructs a sector with the minimum and maximum latitudes and longitudes of a specified sector.\n     *\n     * @param sector the sector specifying the coordinates\n     */\n    constructor(sector: Sector): this(sector.minLatitude, sector.maxLatitude, sector.minLongitude, sector.maxLongitude)\n\n    companion object {\n        @JvmStatic\n        fun fromDegrees(minLatDegrees: Double, minLonDegrees: Double, deltaLatDegrees: Double, deltaLonDegrees: Double): Sector {\n            val maxLatDegrees = if (deltaLatDegrees > 0)\n                clampLatitude(minLatDegrees + deltaLatDegrees) else minLatDegrees\n            val maxLonDegrees = if (deltaLonDegrees > 0)\n                clampLongitude(minLonDegrees + deltaLonDegrees) else minLonDegrees\n            return Sector(\n                fromDegrees(minLatDegrees), fromDegrees(maxLatDegrees),\n                fromDegrees(minLonDegrees), fromDegrees(maxLonDegrees)\n            )\n        }\n\n        @JvmStatic\n        fun fromRadians(minLatRadians: Double, minLonRadians: Double, deltaLatRadians: Double, deltaLonRadians: Double): Sector {\n            val maxLatRadians = if (deltaLatRadians > 0)\n                clampLatitude(minLatRadians + deltaLatRadians) else minLatRadians\n            val maxLonRadians = if (deltaLonRadians > 0)\n                clampLongitude(minLonRadians + deltaLonRadians) else minLonRadians\n            return Sector(\n                fromRadians(minLatRadians), fromRadians(maxLatRadians),\n                fromRadians(minLonRadians), fromRadians(maxLonRadians)\n            )\n        }\n    }\n\n    /**\n     * Computes the location of the angular center of this sector, which is the mid-angle of each of this sector's\n     * latitude and longitude dimensions.\n     *\n     * @param result a pre-allocated [Location] in which to return the computed centroid\n     *\n     * @return the specified result argument containing the computed centroid\n     */\n    fun centroid(result: Location): Location {\n        result.latitude = centroidLatitude\n        result.longitude = centroidLongitude\n        return result\n    }\n\n    /**\n     * Sets this sector to the specified latitude, longitude and dimension.\n     *\n     * @param minLatitude    the minimum latitude, i.e., the latitude at the southwest corner of the sector.\n     * @param minLongitude   the minimum longitude, i.e., the longitude at the southwest corner of the sector.\n     * @param deltaLatitude  the width of the sector; must equal to or greater than zero.\n     * @param deltaLongitude the height of the sector; must equal to or greater than zero.\n     *\n     * @return this sector with its coordinates set to the specified values\n     */\n    fun set(minLatitude: Angle, minLongitude: Angle, deltaLatitude: Angle, deltaLongitude: Angle) = apply {\n        this.minLatitude = minLatitude\n        this.minLongitude = minLongitude\n        maxLatitude = if (deltaLatitude > ZERO) (minLatitude + deltaLatitude).clampLatitude() else minLatitude\n        maxLongitude = if (deltaLongitude > ZERO) (minLongitude + deltaLongitude).clampLongitude() else minLongitude\n    }\n\n    /**\n     * Sets this sector to the specified latitude, longitude and dimension in degrees.\n     *\n     * @param minLatitude    the minimum latitude in degrees, i.e., the latitude at the southwest corner of the sector.\n     * @param minLongitude   the minimum longitude in degrees, i.e., the longitude at the southwest corner of the sector.\n     * @param deltaLatitude  the width of the sector in degrees; must equal to or greater than zero.\n     * @param deltaLongitude the height of the sector in degrees; must equal to or greater than zero.\n     *\n     * @return this sector with its coordinates set to the specified values\n     */\n    fun setDegrees(minLatitude: Double, minLongitude: Double, deltaLatitude: Double, deltaLongitude: Double) = set(\n        fromDegrees(minLatitude), fromDegrees(minLongitude),\n        fromDegrees(deltaLatitude), fromDegrees(deltaLongitude),\n    )\n\n    /**\n     * Sets this sector to the specified latitude, longitude and dimension in radians.\n     *\n     * @param minLatitude    the minimum latitude in radians, i.e., the latitude at the southwest corner of the sector.\n     * @param minLongitude   the minimum longitude in radians, i.e., the longitude at the southwest corner of the sector.\n     * @param deltaLatitude  the width of the sector in radians; must equal to or greater than zero.\n     * @param deltaLongitude the height of the sector in radians; must equal to or greater than zero.\n     *\n     * @return this sector with its coordinates set to the specified values\n     */\n    fun setRadians(minLatitude: Double, minLongitude: Double, deltaLatitude: Double, deltaLongitude: Double) = set(\n        fromRadians(minLatitude), fromRadians(minLongitude),\n        fromRadians(deltaLatitude), fromRadians(deltaLongitude),\n    )\n\n    /**\n     * Sets this sector to the minimum and maximum latitudes and longitudes of a specified sector.\n     *\n     * @param sector the sector specifying the new coordinates\n     *\n     * @return this sector with its coordinates set to that of the specified sector\n     */\n    fun copy(sector: Sector) = apply {\n        minLatitude = sector.minLatitude\n        maxLatitude = sector.maxLatitude\n        minLongitude = sector.minLongitude\n        maxLongitude = sector.maxLongitude\n    }\n\n    /**\n     * Sets this sector to an empty sector.\n     *\n     * @return this sector with its coordinates set to an empty sector\n     */\n    fun setEmpty() = apply {\n        minLatitude = ZERO\n        maxLatitude = ZERO\n        minLongitude = ZERO\n        maxLongitude = ZERO\n    }\n\n    /**\n     * Sets this sector to the full range of latitude [90 to +90] and longitude [-180 to +180].\n     *\n     * @return this sector with its coordinates set to the full range of latitude and longitude\n     */\n    fun setFullSphere() = apply {\n        minLatitude = NEG90\n        maxLatitude = POS90\n        minLongitude = NEG180\n        maxLongitude = POS180\n    }\n\n    /**\n     * Indicates whether this sector intersects a specified sector. Two sectors intersect when both the latitude\n     * boundaries and the longitude boundaries overlap by a non-zero amount. An empty sector never intersects another\n     * sector.\n     * <br>\n     * The sectors are assumed to have normalized angles (angles within the range [-90, +90] latitude and [-180, +180]\n     * longitude).\n     *\n     * @param sector the sector to test intersection with\n     *\n     * @return true if the specified sector intersections this sector, false otherwise\n     */\n    fun intersects(sector: Sector) = minLatitude < sector.maxLatitude && maxLatitude > sector.minLatitude\n            && minLongitude < sector.maxLongitude && maxLongitude > sector.minLongitude\n\n    /**\n     * Indicates if this sector is next to, or intersects, a specified sector. Two sectors intersect when the conditions\n     * of the [Sector.intersects] methods have been met, and if the boundary or corner is shared with the\n     * specified sector. This is a temporary implementation and will be deprecated in future releases.\n     * <br>\n     * The sectors are assumed to have normalized angles (angles within the range [-90, +90] latitude and [-180, +180]\n     * longitude).\n     *\n     * @param sector the sector to test intersection with\n     *\n     * @return true if the specified sector intersects or is next to this sector, false otherwise\n     */\n    fun intersectsOrNextTo(sector: Sector) = minLatitude <= sector.maxLatitude && maxLatitude >= sector.minLatitude\n            && minLongitude <= sector.maxLongitude && maxLongitude >= sector.minLongitude\n\n    /**\n     * Computes the intersection of this sector and a specified sector, storing the result in this sector and returning\n     * whether or not the sectors intersect. Two sectors intersect when both the latitude boundaries and the longitude\n     * boundaries overlap by a non-zero amount. An empty sector never intersects another sector. When there is no\n     * intersection, this returns false and leaves this sector unchanged.\n     * <br>\n     * The sectors are assumed to have normalized angles (angles within the range [-90, +90] latitude and [-180, +180]\n     * longitude).\n     *\n     * @param sector the sector to intersect with\n     *\n     * @return this true if this sector intersects the specified sector, false otherwise\n     */\n    fun intersect(sector: Sector): Boolean {\n        if (minLatitude < sector.maxLatitude && maxLatitude > sector.minLatitude // latitudes intersect\n            && minLongitude < sector.maxLongitude && maxLongitude > sector.minLongitude // longitudes intersect\n        ) {\n            if (minLatitude < sector.minLatitude) minLatitude = sector.minLatitude\n            if (maxLatitude > sector.maxLatitude) maxLatitude = sector.maxLatitude\n            if (minLongitude < sector.minLongitude) minLongitude = sector.minLongitude\n            if (maxLongitude > sector.maxLongitude) maxLongitude = sector.maxLongitude\n            return true\n        }\n        return false // the two sectors do not intersect\n    }\n\n    /**\n     * Indicates whether this sector contains a specified geographic location.\n     * An empty sector never contains a location.\n     * Assumes normalized angles: [-90, +90], [-180, +180]\n     *\n     * @param latitude  the location's latitude\n     * @param longitude the location's longitude\n     *\n     * @return true if this sector contains the location, false otherwise\n     */\n    fun contains(latitude: Angle, longitude: Angle) = latitude in minLatitude..maxLatitude && longitude in minLongitude..maxLongitude\n\n    /**\n     * Indicates whether this sector contains a specified geographic location. An empty sector never contains a\n     * location.\n     *\n     * @param location  the location\n     *\n     * @return true if this sector contains the location, false otherwise\n     */\n    fun contains(location: Location) = contains(location.latitude, location.longitude)\n\n    /**\n     * Indicates whether this sector fully contains a specified sector. This sector contains the specified sector when\n     * the specified sector's boundaries are completely contained within this sector's boundaries, or are equal to this\n     * sector's boundaries. An empty sector never contains another sector.\n     * <br>\n     * The sectors are assumed to have normalized angles (angles within the range [-90, +90] latitude and [-180, +180]\n     * longitude).\n     *\n     * @param sector the sector to test containment with\n     *\n     * @return true if the specified sector contains this sector, false otherwise\n     */\n    fun contains(sector: Sector) = minLatitude <= sector.minLatitude && maxLatitude >= sector.maxLatitude\n            && minLongitude <= sector.minLongitude && maxLongitude >= sector.maxLongitude\n\n    /**\n     * Sets this sector to the union of itself and a specified location.\n     * Assumes normalized angles: [-90, +90], [-180, +180]\n     *\n     * @param latitude  the location's latitude\n     * @param longitude the location's longitude\n     *\n     * @return this sector, set to its union with the specified location\n     */\n    fun union(latitude: Angle, longitude: Angle) = apply {\n        if (!isEmpty) {\n            minLatitude = min(minLatitude, latitude)\n            maxLatitude = max(maxLatitude, latitude)\n            minLongitude = min(minLongitude, longitude)\n            maxLongitude = max(maxLongitude, longitude)\n        } else {\n            minLatitude = latitude\n            maxLatitude = latitude\n            minLongitude = longitude\n            maxLongitude = longitude\n        }\n    }\n\n    /**\n     * Sets this sector to the union of itself and a specified location.\n     *\n     * @param location  the location\n     *\n     * @return this sector, set to its union with the specified location\n     */\n    fun union(location: Location) = union(location.latitude, location.longitude)\n\n    /**\n     * Sets this sector to the union of itself and an array of specified locations. If this sector is empty, it bounds\n     * the specified locations. The array is understood to contain location of at least two coordinates organized as\n     * (longitude, latitude, ...), where stride indicates the number of coordinates between longitude values.\n     *\n     * @param array  the array of locations to consider\n     * @param count  the number of array elements to consider\n     * @param stride the number of coordinates between the first coordinate of adjacent locations - must be at least 2\n     *\n     * @return This bounding box set to contain the specified array of locations.\n     *\n     * @throws IllegalArgumentException If the array is empty, if the count is less than 0, or if the stride is\n     * less than 2\n     */\n    fun union(array: FloatArray, count: Int, stride: Int) = apply {\n        require(array.size >= stride) {\n            logMessage(ERROR, \"Sector\", \"union\", \"missingArray\")\n        }\n        require(count >= 0) {\n            logMessage(ERROR, \"Sector\", \"union\", \"invalidCount\")\n        }\n        require(stride >= 2) {\n            logMessage(ERROR, \"Sector\", \"union\", \"invalidStride\")\n        }\n        val empty = isEmpty\n        var minLat = if (empty) Double.MAX_VALUE else minLatitude.inDegrees\n        var maxLat = if (empty) -Double.MAX_VALUE else maxLatitude.inDegrees\n        var minLon = if (empty) Double.MAX_VALUE else minLongitude.inDegrees\n        var maxLon = if (empty) -Double.MAX_VALUE else maxLongitude.inDegrees\n        for (idx in 0 until count step stride) {\n            val lon = array[idx].toDouble()\n            val lat = array[idx + 1].toDouble()\n            if (maxLat < lat) maxLat = lat\n            if (minLat > lat) minLat = lat\n            if (maxLon < lon) maxLon = lon\n            if (minLon > lon) minLon = lon\n        }\n        if (minLat < Double.MAX_VALUE) minLatitude = fromDegrees(minLat)\n        if (maxLat > -Double.MAX_VALUE) maxLatitude = fromDegrees(maxLat)\n        if (minLon < Double.MAX_VALUE) minLongitude = fromDegrees(minLon)\n        if (maxLon > -Double.MAX_VALUE) maxLongitude = fromDegrees(maxLon)\n    }\n\n    /**\n     * Sets this sector to the union of itself and a specified sector.\n     * This has no effect if the specified sector is empty.\n     * If this sector is empty, it is set to the specified sector.\n     * Assumes normalized angles: [-90, +90], [-180, +180]\n     *\n     * @param sector the sector to union with\n     *\n     * @return this sector, set to its union with the specified sector\n     */\n    fun union(sector: Sector) = apply {\n        if (!sector.isEmpty) {\n            // specified sector not empty\n            if (!isEmpty) {\n                // this sector not empty, make a union\n                if (minLatitude > sector.minLatitude) minLatitude = sector.minLatitude\n                if (maxLatitude < sector.maxLatitude) maxLatitude = sector.maxLatitude\n                if (minLongitude > sector.minLongitude) minLongitude = sector.minLongitude\n                if (maxLongitude < sector.maxLongitude) maxLongitude = sector.maxLongitude\n            } else {\n                // this sector is empty, set to the specified sector\n                minLatitude = sector.minLatitude\n                maxLatitude = sector.maxLatitude\n                minLongitude = sector.minLongitude\n                maxLongitude = sector.maxLongitude\n            }\n        }\n    }\n\n    /**\n     * Translates this sector by a specified geographic increment.\n     * <br>\n     * The translated sector is assumed to have normalized angles (angles within the range [-90, +90] latitude and\n     * [-180, +180] longitude).\n     *\n     * @param deltaLatitudeDegrees  the translation's latitude increment in degrees\n     * @param deltaLongitudeDegrees the translation's longitude increment in degrees\n     *\n     * @return this sector, translated by the specified increment\n     */\n    fun translate(deltaLatitudeDegrees: Double, deltaLongitudeDegrees: Double) = apply {\n        minLatitude = minLatitude.plusDegrees(deltaLatitudeDegrees)\n        maxLatitude = maxLatitude.plusDegrees(deltaLatitudeDegrees)\n        minLongitude = minLongitude.plusDegrees(deltaLongitudeDegrees)\n        maxLongitude = maxLongitude.plusDegrees(deltaLongitudeDegrees)\n    }\n\n    override fun equals(other: Any?): Boolean {\n        // if (this === other) return true // Empty sector is not equal self\n        if (other !is Sector) return false\n        if (isEmpty && other.isEmpty) return false // Two empty sectors are not equal\n        return minLatitude == other.minLatitude && maxLatitude == other.maxLatitude\n                && minLongitude == other.minLongitude && maxLongitude == other.maxLongitude\n    }\n\n    override fun hashCode(): Int {\n        var result = minLatitude.hashCode()\n        result = 31 * result + maxLatitude.hashCode()\n        result = 31 * result + minLongitude.hashCode()\n        result = 31 * result + maxLongitude.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Sector(minLatitude=$minLatitude, maxLatitude=$maxLatitude, minLongitude=$minLongitude, maxLongitude=$maxLongitude)\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.geom.Sector.Companion.fromDegrees\nimport kotlin.math.ceil\n\nopen class TileMatrix internal constructor(\n    val sector: Sector, val ordinal: Int, val matrixWidth: Int, val matrixHeight: Int, val tileWidth: Int, val tileHeight: Int\n) {\n    val degreesPerPixel get() = sector.deltaLatitude.inDegrees / (matrixHeight * tileHeight)\n\n    fun tileKey(row: Int, column: Int): Long {\n        val lOrd = (ordinal and 0xFF).toLong() // 8 bits\n        val lRow = (row and 0xFFFFFFF).toLong() // 28 bits\n        val lCol = (column and 0xFFFFFFF).toLong() // 28 bits\n        return lOrd.shl(56) or lRow.shl(28) or lCol\n    }\n\n    fun tileSector(row: Int, column: Int): Sector {\n        val deltaLat = sector.deltaLatitude.inDegrees / matrixHeight\n        val deltaLon = sector.deltaLongitude.inDegrees / matrixWidth\n        val minLat = sector.maxLatitude.inDegrees - deltaLat * (row + 1)\n        val minLon = sector.minLongitude.inDegrees + deltaLon * column\n        return fromDegrees(minLat, minLon, deltaLat, deltaLon)\n    }\n\n    /**\n     * Calculates amount of tiles, which fit specified sector\n     *\n     * @param sector the desired sector to check tile count\n     * @return Number of tiles which fit specified sector at this level\n     */\n    fun tilesInSector(sector: Sector): Int {\n        val deltaLat = this.sector.deltaLatitude.inDegrees / matrixHeight\n        val deltaLon = this.sector.deltaLongitude.inDegrees / matrixWidth\n        val tilesPerLat = ceil(sector.deltaLatitude.inDegrees / deltaLat).toInt()\n        val tilesPerLon = ceil(sector.deltaLongitude.inDegrees / deltaLon).toInt()\n        return tilesPerLat * tilesPerLon\n    }\n}","package earth.worldwind.geom\n\nimport earth.worldwind.util.Logger.makeMessage\nimport kotlin.jvm.JvmStatic\n\nopen class TileMatrixSet(val sector: Sector, val entries: List<TileMatrix>) {\n    /**\n     * Construct empty tile matrix set.\n     */\n    constructor(): this(Sector(), emptyList<TileMatrix>())\n\n    companion object {\n        @JvmStatic\n        fun fromTilePyramid(\n            sector: Sector, matrixWidth: Int, matrixHeight: Int, tileWidth: Int, tileHeight: Int, resolution: Angle\n        ): TileMatrixSet {\n            require(resolution > Angle.ZERO) {\n                makeMessage(\"TileMatrixSet\", \"fromTilePyramid\", \"invalidResolution\")\n            }\n            var idx = 0\n            var width = matrixWidth\n            var height = matrixHeight\n            val tileMatrices = mutableListOf<TileMatrix>()\n            do {\n                val matrix = TileMatrix(sector, idx++, width, height, tileWidth, tileHeight)\n                tileMatrices.add(matrix)\n                width *= 2\n                height *= 2\n            } while (matrix.degreesPerPixel > resolution.inDegrees)\n            return TileMatrixSet(sector, tileMatrices)\n        }\n    }\n\n    fun indexOfMatrixNearest(degreesPerPixel: Double): Int {\n        var nearestIdx = -1\n        var nearestDelta2 = Double.POSITIVE_INFINITY\n        for (idx in entries.indices) {\n            val delta = entries[idx].degreesPerPixel - degreesPerPixel\n            val delta2 = delta * delta\n            if (nearestDelta2 > delta2) {\n                nearestDelta2 = delta2\n                nearestIdx = idx\n            }\n        }\n        return nearestIdx\n    }\n}","package earth.worldwind.geom\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.math.sqrt\n\n/**\n * Two-component vector with X and Y coordinates.\n */\nopen class Vec2(\n    /**\n     * The vector's X component.\n     */\n    var x: Double,\n    /**\n     * The vector's Y component.\n     */\n    var y: Double\n) {\n    /**\n     * Computes the squared magnitude of this vector. This is equivalent to squaring the result of\n     * `magnitude` but is potentially much more efficient.\n     *\n     * @return the squared magnitude of this vector\n     */\n    open val magnitudeSquared get() = x * x + y * y\n    /**\n     * Computes the magnitude of this vector.\n     *\n     * @return the magnitude of this vector\n     */\n    val magnitude get() = sqrt(magnitudeSquared)\n\n    /**\n     * Constructs a two-component vector with X and Y both 0.\n     */\n    constructor(): this(x = 0.0, y = 0.0)\n\n    /**\n     * Constructs a two-component vector with the X and Y of a specified vector.\n     *\n     * @param vector the vector specifying the components\n     */\n    constructor(vector: Vec2): this(vector.x, vector.y)\n\n    /**\n     * Copies this vector's components to the specified single precision array. The result is compatible with GLSL\n     * uniform vectors, and can be passed to the function glUniform2fv.\n     *\n     * @param result a pre-allocated array of length 2 in which to return the components\n     *\n     * @return the result argument set to this vector's components\n     */\n    open fun toArray(result: FloatArray, offset: Int): FloatArray {\n        var o = offset\n        require(result.size - o >= 2) {\n            logMessage(ERROR, \"Vec2\", \"toArray\", \"missingArray\")\n        }\n        result[o++] = x.toFloat()\n        result[o] = y.toFloat()\n        return result\n    }\n\n    /**\n     * Computes the distance from this vector to another vector.\n     *\n     * @param vector the vector to compute the distance to\n     *\n     * @return the distance between the vectors\n     */\n    fun distanceTo(vector: Vec2) = sqrt(distanceToSquared(vector))\n\n    /**\n     * Computes the squared distance from this vector to a specified vector. This is equivalent to squaring the result\n     * of `distanceTo` but is potentially much more efficient.\n     *\n     * @param vector the vector to compute the distance to\n     *\n     * @return the squared distance between the vectors\n     */\n    fun distanceToSquared(vector: Vec2): Double {\n        val dx = x - vector.x\n        val dy = y - vector.y\n        return dx * dx + dy * dy\n    }\n\n    /**\n     * Sets this vector to the specified X and Y.\n     *\n     * @param x the new X component\n     * @param y the new Y component\n     *\n     * @return this vector set to the specified values\n     */\n    fun set(x: Double, y: Double) = apply {\n        this.x = x\n        this.y = y\n    }\n\n    /**\n     * Sets this vector to the X and Y of a specified vector.\n     *\n     * @param vector the vector specifying the new components\n     *\n     * @return this vector with its X and Y set to that of the specified vector\n     */\n    fun copy(vector: Vec2) = set(vector.x, vector.y)\n\n    /**\n     * Swaps this vector with the specified vector. This vector's components are set to the values of the specified\n     * vector's components, and the specified vector's components are set to the values of this vector's components.\n     *\n     * @param vector the vector to swap with this vector\n     *\n     * @return this vector set to the values of the specified vector\n     */\n    fun swap(vector: Vec2) = apply {\n        var tmp = x\n        x = vector.x\n        vector.x = tmp\n\n        tmp = y\n        y = vector.y\n        vector.y = tmp\n    }\n\n    /**\n     * Adds a specified vector to this vector.\n     *\n     * @param vector the vector to add\n     *\n     * @return this vector after adding the specified vector to it\n     */\n    fun add(vector: Vec2) = apply { plusAssign(vector) }\n\n    /**\n     * Creates new vector containing sum of this and specified vectors.\n     *\n     * @param vector the vector to add\n     *\n     * @return new vector containing sum of this and specified vectors.\n     */\n    operator fun plus(vector: Vec2) = Vec2(this).apply { plusAssign(vector) }\n\n    /**\n     * Adds a specified vector to this vector.\n     *\n     * @param vector the vector to add\n     */\n    operator fun plusAssign(vector: Vec2) {\n        x += vector.x\n        y += vector.y\n    }\n\n    /**\n     * Subtracts a specified vector from this vector.\n     *\n     * @param vector the vector to subtract\n     *\n     * @return this vector after subtracting the specified vector from it\n     */\n    fun subtract(vector: Vec2) = apply { minusAssign(vector) }\n\n    /**\n     * Creates new vector containing difference of this and specified vectors.\n     *\n     * @param vector the vector to subtract\n     *\n     * @return new vector containing difference of this and specified vectors.\n     */\n    operator fun minus(vector: Vec2) = Vec2(this).apply { minusAssign(vector) }\n\n    /**\n     * Subtracts a specified vector from this vector.\n     *\n     * @param vector the vector to subtract\n     */\n    operator fun minusAssign(vector: Vec2) {\n        x -= vector.x\n        y -= vector.y\n    }\n\n    /**\n     * Multiplies this vector by a scalar.\n     *\n     * @param scalar the scalar to multiply this vector by\n     *\n     * @return this vector multiplied by the specified scalar\n     */\n    open fun multiply(scalar: Double) = apply { timesAssign(scalar) }\n\n    /**\n     * Creates new vector containing this vector multiplied by a scalar.\n     *\n     * @param scalar the scalar to multiply this vector by\n     *\n     * @return new vector containing this vector multiplied by a scalar.\n     */\n    open operator fun times(scalar: Double) = Vec2(this).apply { timesAssign(scalar) }\n\n    /**\n     * Multiplies this vector by a scalar.\n     *\n     * @param scalar the scalar to multiply this vector by\n     */\n    open operator fun timesAssign(scalar: Double) {\n        x *= scalar\n        y *= scalar\n    }\n\n    /**\n     * Multiplies this vector by a 3x3 matrix. The multiplication is performed with an implicit Z component of 1. The\n     * resultant Z component of the product is then divided through the X and Y components.\n     *\n     * @param matrix the matrix to multiply this vector by\n     *\n     * @return this vector multiplied by the specified matrix\n     */\n    fun multiplyByMatrix(matrix: Matrix3) = apply {\n        val m = matrix.m\n        val x = m[0] * x + m[1] * y + m[2]\n        val y = m[3] * this.x + m[4] * y + m[5]\n        val z = m[6] * this.x + m[7] * this.y + m[8]\n        this.x = x / z\n        this.y = y / z\n    }\n\n    /**\n     * Divides this vector by a scalar.\n     *\n     * @param divisor the scalar to divide this vector by\n     *\n     * @return this vector divided by the specified scalar\n     */\n    open fun divide(divisor: Double) = apply { divAssign(divisor) }\n\n    /**\n     * Creates new vector containing this vector divided by a scalar.\n     *\n     * @param divisor the scalar to divide this vector by\n     *\n     * @return new vector containing this vector divided by a scalar\n     */\n    open operator fun div(divisor: Double) = Vec2(this).apply { divAssign(divisor) }\n\n    /**\n     * Divides this vector by a scalar.\n     *\n     * @param divisor the scalar to divide this vector by\n     */\n    open operator fun divAssign(divisor: Double) {\n        x /= divisor\n        y /= divisor\n    }\n\n    /**\n     * Creates new vector which has components with opposite sign to the vector.\n     *\n     * @return new vector, which has components with opposite sign to the vector\n     */\n    open operator fun unaryMinus() = Vec2(this).negate()\n\n    /**\n     * Negates the components of this vector.\n     *\n     * @return this vector, negated\n     */\n    open fun negate() = apply {\n        x = -x\n        y = -y\n    }\n\n    /**\n     * Normalizes this vector to a unit vector.\n     *\n     * @return this vector, normalized\n     */\n    open fun normalize() = apply {\n        val magnitude = magnitude\n        if (magnitude != 0.0) {\n            x /= magnitude\n            y /= magnitude\n        }\n    }\n\n    /**\n     * Computes the scalar dot product of this vector and a specified vector.\n     *\n     * @param vector the vector to multiply\n     *\n     * @return the dot product of the two vectors\n     */\n    fun dot(vector: Vec2) = x * vector.x + y * vector.y\n\n    /**\n     * Mixes (interpolates) a specified vector with this vector, modifying this vector.\n     *\n     * @param vector The vector to mix with this one\n     * @param weight The relative weight of this vector, typically in the range [0,1]\n     *\n     * @return this vector modified to the mix of itself and the specified vector\n     */\n    fun mix(vector: Vec2, weight: Double) = apply {\n        val w0 = 1 - weight\n        x = x * w0 + vector.x * weight\n        y = y * w0 + vector.y * weight\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Vec2) return false\n        return x == other.x && y == other.y\n    }\n\n    override fun hashCode(): Int {\n        var result = x.hashCode()\n        result = 31 * result + y.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Vec2(x=$x, y=$y)\"\n}","package earth.worldwind.geom\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.math.sqrt\n\n/**\n * Three-component vector with X, Y and Z coordinates.\n */\nopen class Vec3(\n    /**\n     * The vector's X component.\n     */\n    x: Double,\n    /**\n     * The vector's Y component.\n     */\n    y: Double,\n    /**\n     * The vector's Z component.\n     */\n    var z: Double\n): Vec2(x, y) {\n    /**\n     * Computes the squared magnitude of this vector. This is equivalent to squaring the result of\n     * `magnitude` but is potentially much more efficient.\n     */\n    override val magnitudeSquared get() = super.magnitudeSquared + z * z\n\n    /**\n     * Constructs a three-component vector with X, Y and Z all 0.\n     */\n    constructor(): this(x = 0.0, y = 0.0, z = 0.0)\n\n    /**\n     * Constructs a three-component vector with the X, Y and Z of a specified vector.\n     *\n     * @param vector the vector specifying the components\n     */\n    constructor(vector: Vec3): this(vector.x, vector.y, vector.z)\n\n    /**\n     * Copies this vector's components to the specified single precision array. The result is compatible with GLSL\n     * uniform vectors, and can be passed to the function glUniform3fv.\n     *\n     * @param result a pre-allocated array of length 3 in which to return the components\n     *\n     * @return the result argument set to this vector's components\n     */\n    override fun toArray(result: FloatArray, offset: Int): FloatArray {\n        var o = offset\n        require(result.size - o >= 3) {\n            logMessage(ERROR, \"Vec3\", \"toArray\", \"missingArray\")\n        }\n        result[o++] = x.toFloat()\n        result[o++] = y.toFloat()\n        result[o] = z.toFloat()\n        return result\n    }\n\n    /**\n     * Computes the distance from this vector to another vector.\n     *\n     * @param vector The vector to compute the distance to\n     *\n     * @return the distance between the vectors\n     */\n    fun distanceTo(vector: Vec3) = sqrt(distanceToSquared(vector))\n\n    /**\n     * Computes the squared distance from this vector to a specified vector. This is equivalent to squaring the result\n     * of `distanceTo` but is potentially much more efficient.\n     *\n     * @param vector the vector to compute the distance to\n     *\n     * @return the squared distance between the vectors\n     */\n    fun distanceToSquared(vector: Vec3): Double {\n        val dx = x - vector.x\n        val dy = y - vector.y\n        val dz = z - vector.z\n        return dx * dx + dy * dy + dz * dz\n    }\n\n    /**\n     * Sets this vector to the specified X, Y and Z.\n     *\n     * @param x the new X component\n     * @param y the new Y component\n     * @param z the new Z component\n     *\n     * @return this vector set to the specified values\n     */\n    fun set(x: Double, y: Double, z: Double) = apply {\n        set(x, y)\n        this.z = z\n    }\n\n    /**\n     * Sets this vector to the X, Y and Z of a specified vector.\n     *\n     * @param vector the vector specifying the new components\n     *\n     * @return this vector with its X, Y and Z set to that of the specified vector\n     */\n    fun copy(vector: Vec3) = set(vector.x, vector.y, vector.z)\n\n    /**\n     * Swaps this vector with the specified vector. This vector's components are set to the values of the specified\n     * vector's components, and the specified vector's components are set to the values of this vector's components.\n     *\n     * @param vector the vector to swap with this vector\n     *\n     * @return this vector set to the values of the specified vector\n     */\n    fun swap(vector: Vec3) = apply {\n        super.swap(vector)\n        val tmp = z\n        z = vector.z\n        vector.z = tmp\n    }\n\n    /**\n     * Adds a specified vector to this vector.\n     *\n     * @param vector the vector to add\n     *\n     * @return this vector after adding the specified vector to it\n     */\n    fun add(vector: Vec3) = apply { plusAssign(vector) }\n\n    /**\n     * Creates new vector containing sum of this and specified vectors.\n     *\n     * @param vector the vector to add\n     *\n     * @return new vector containing sum of this and specified vectors.\n     */\n    operator fun plus(vector: Vec3) = Vec3(this).apply { plusAssign(vector) }\n\n    /**\n     * Adds a specified vector to this vector.\n     *\n     * @param vector the vector to add\n     */\n    operator fun plusAssign(vector: Vec3) {\n        super.plusAssign(vector)\n        z += vector.z\n    }\n\n    /**\n     * Subtracts a specified vector from this vector.\n     *\n     * @param vector the vector to subtract\n     *\n     * @return this vector after subtracting the specified vector from it\n     */\n    fun subtract(vector: Vec3) = apply { minusAssign(vector) }\n\n    /**\n     * Creates new vector containing difference of this and specified vectors.\n     *\n     * @param vector the vector to subtract\n     *\n     * @return new vector containing difference of this and specified vectors.\n     */\n    operator fun minus(vector: Vec3) = Vec3(this).apply { minusAssign(vector) }\n\n    /**\n     * Subtracts a specified vector from this vector.\n     *\n     * @param vector the vector to subtract\n     */\n    operator fun minusAssign(vector: Vec3) {\n        super.minusAssign(vector)\n        z -= vector.z\n    }\n\n    /**\n     * Multiplies this vector by a scalar.\n     *\n     * @param scalar the scalar to multiply this vector by\n     *\n     * @return this vector multiplied by the specified scalar\n     */\n    override fun multiply(scalar: Double) = apply { timesAssign(scalar) }\n\n    /**\n     * Creates new vector containing this vector multiplied by a scalar.\n     *\n     * @param scalar the scalar to multiply this vector by\n     *\n     * @return new vector containing this vector multiplied by a scalar.\n     */\n    override fun times(scalar: Double) = Vec3(this).apply { timesAssign(scalar) }\n\n    /**\n     * Multiplies this vector by a scalar.\n     *\n     * @param scalar the scalar to multiply this vector by\n     */\n    override fun timesAssign(scalar: Double) {\n        super.timesAssign(scalar)\n        z *= scalar\n    }\n\n    /**\n     * Multiplies this vector by a 4x4 matrix. The multiplication is performed with an implicit W component of 1. The\n     * resultant W component of the product is then divided through the X, Y, and Z components.\n     *\n     * @param matrix the matrix to multiply this vector by\n     *\n     * @return this vector multiplied by the specified matrix\n     */\n    fun multiplyByMatrix(matrix: Matrix4) = apply {\n        val m = matrix.m\n        val x = m[0] * x + m[1] * y + m[2] * z + m[3]\n        val y = m[4] * this.x + m[5] * y + m[6] * z + m[7]\n        val z = m[8] * this.x + m[9] * this.y + m[10] * z + m[11]\n        val w = m[12] * this.x + m[13] * this.y + m[14] * this.z + m[15]\n        this.x = x / w\n        this.y = y / w\n        this.z = z / w\n    }\n\n    /**\n     * Divides this vector by a scalar.\n     *\n     * @param divisor the scalar to divide this vector by\n     *\n     * @return this vector divided by the specified scalar\n     */\n    override fun divide(divisor: Double) = apply { divAssign(divisor) }\n\n    /**\n     * Creates new vector containing this vector divided by a scalar.\n     *\n     * @param divisor the scalar to divide this vector by\n     *\n     * @return new vector containing this vector divided by a scalar\n     */\n    override fun div(divisor: Double) = Vec3(this).apply { divAssign(divisor) }\n\n    /**\n     * Divides this vector by a scalar.\n     *\n     * @param divisor the scalar to divide this vector by\n     */\n    override fun divAssign(divisor: Double) {\n        super.divAssign(divisor)\n        z /= divisor\n    }\n\n    /**\n     * Creates new vector which has components with opposite sign to the vector.\n     *\n     * @return new vector, which has components with opposite sign to the vector\n     */\n    override fun unaryMinus() = Vec3(this).negate()\n\n    /**\n     * Negates the components of this vector.\n     *\n     * @return this vector, negated\n     */\n    override fun negate() = apply {\n        super.negate()\n        z = -z\n    }\n\n    /**\n     * Normalizes this vector to a unit vector.\n     *\n     * @return this vector, normalized\n     */\n    override fun normalize() = apply {\n        val magnitude = magnitude\n        if (magnitude != 0.0) {\n            x /= magnitude\n            y /= magnitude\n            z /= magnitude\n        }\n    }\n\n    /**\n     * Computes the scalar dot product of this vector and a specified vector.\n     *\n     * @param vector the vector to multiply\n     *\n     * @return the dot product of the two vectors\n     */\n    fun dot(vector: Vec3) = super.dot(vector) + z * vector.z\n\n    /**\n     * Computes the cross product of this vector and a specified vector, modifying this vector.\n     *\n     * @param vector the vector to cross with this vector\n     *\n     * @return this vector set to the cross product of itself and the specified vector\n     */\n    fun cross(vector: Vec3) = apply {\n        val x = y * vector.z - z * vector.y\n        val y = z * vector.x - this.x * vector.z\n        val z = this.x * vector.y - this.y * vector.x\n        this.x = x\n        this.y = y\n        this.z = z\n    }\n\n    /**\n     * Computes the cross product of two vectors, setting this vector to the result.\n     *\n     * @param a the first vector\n     * @param b the second vector\n     *\n     * @return this vector set to the cross product of the two specified vectors\n     */\n    fun cross(a: Vec3, b: Vec3) = apply {\n        x = a.y * b.z - a.z * b.y\n        y = a.z * b.x - a.x * b.z\n        z = a.x * b.y - a.y * b.x\n    }\n\n    /**\n     * Mixes (interpolates) a specified vector with this vector, modifying this vector.\n     *\n     * @param vector The vector to mix with this one\n     * @param weight The relative weight of this vector, typically in the range [0,1]\n     *\n     * @return this vector modified to the mix of itself and the specified vector\n     */\n    fun mix(vector: Vec3, weight: Double) = apply {\n        val w0 = 1 - weight\n        x = x * w0 + vector.x * weight\n        y = y * w0 + vector.y * weight\n        z = z * w0 + vector.z * weight\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Vec3) return false\n        if (!super.equals(other)) return false\n        return z == other.z\n    }\n\n    override fun hashCode(): Int {\n        var result = super.hashCode()\n        result = 31 * result + z.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Vec3(x=$x, y=$y, z=$z)\"\n}","package earth.worldwind.geom\n\n/**\n * Rectangular region in a two-dimensional coordinate system expressed as an origin and dimensions extending from the\n * origin.\n */\nopen class Viewport(\n    /**\n     * The X component of the viewport's origin.\n     */\n    var x: Int,\n    /**\n     * The Y component of the viewport's origin.\n     */\n    var y: Int,\n    /**\n     * The viewport's width.\n     */\n    var width: Int,\n    /**\n     * The viewport's height.\n     */\n    var height: Int\n) {\n    /**\n     * Constructs an empty viewport width X, Y, width and height all zero.\n     */\n    constructor(): this(x = 0, y = 0,  width = 0,  height = 0)\n\n    /**\n     * Constructs a viewport with the origin and dimensions of a specified viewport.\n     *\n     * @param viewport the viewport specifying the values\n     */\n    constructor(viewport: Viewport): this(viewport.x, viewport.y, viewport.width, viewport.height)\n\n    /**\n     * Indicates whether this viewport is empty. A viewport is empty when either its width or its height are\n     * zero (or negative).\n     *\n     * @return true if this viewport is empty, false otherwise\n     */\n    val isEmpty get() = width <= 0 || height <= 0\n\n    /**\n     * Sets this viewport to an empty viewport.\n     *\n     * @return this viewport with its width and height both set to zero\n     */\n    fun setEmpty() = apply {\n        width = 0\n        height = 0\n    }\n\n    /**\n     * Sets this viewport to the specified origin and dimensions.\n     *\n     * @param x      the new X component of the viewport's lower left corner\n     * @param y      the new Y component of the viewport's lower left corner\n     * @param width  the viewport's new width\n     * @param height the viewport's new height\n     *\n     * @return this viewport set to the specified values\n     */\n    fun set(x: Int, y: Int, width: Int, height: Int) = apply {\n        this.x = x\n        this.y = y\n        this.width = width\n        this.height = height\n    }\n\n    /**\n     * Sets this viewport to the origin and dimensions of a specified viewport.\n     *\n     * @param viewport the viewport specifying the new values\n     *\n     * @return this viewport with its origin and dimensions set to that of the specified viewport\n     */\n    fun copy(viewport: Viewport) = set(viewport.x, viewport.y, viewport.width, viewport.height)\n\n    /**\n     * Indicates whether this viewport intersects a specified viewport. Two viewport intersect when both overlap by a\n     * non-zero amount. An empty viewport never intersects another viewport.\n     *\n     * @param x      the X component of the viewport to test intersection with\n     * @param y      the Y component of the viewport to test intersection with\n     * @param width  the viewport width to test intersection with\n     * @param height the viewport height to test intersection with\n     *\n     * @return true if the specified viewport intersections this viewport, false otherwise\n     */\n    fun intersects(x: Int, y: Int, width: Int, height: Int) =\n        this.width > 0 && this.height > 0 && width > 0 && height > 0\n                && this.x < x + width && x < this.x + this.width\n                && this.y < y + height && y < this.y + this.height\n\n    /**\n     * Indicates whether this viewport intersects a specified viewport. Two viewport intersect when both overlap by a\n     * non-zero amount. An empty viewport never intersects another viewport.\n     *\n     * @param viewport the viewport to test intersection with\n     *\n     * @return true if the specified viewport intersections this viewport, false otherwise\n     */\n    fun intersects(viewport: Viewport) =\n        width > 0 && height > 0 && viewport.width > 0 && viewport.height > 0\n                && x < viewport.x + viewport.width && viewport.x < x + width\n                && y < viewport.y + viewport.height && viewport.y < y + height\n\n    /**\n     * Computes the intersection of this viewport and a specified viewport, storing the result in this viewport and\n     * returning whether the viewport intersects. Two viewport intersect when both overlap by a non-zero amount.\n     * An empty viewport never intersects another viewport.\n     * <br>\n     * When there is no intersection, this returns false and leaves this viewport unchanged. To test for intersection\n     * without modifying this viewport, use [intersects].\n     *\n     * @param x      the X component of the viewport to intersect with\n     * @param y      the Y component of the viewport to intersect with\n     * @param width  the viewport width to intersect with\n     * @param height the viewport height to intersect with\n     *\n     * @return true if this viewport intersects the specified viewport, false otherwise\n     */\n    fun intersect(x: Int, y: Int, width: Int, height: Int): Boolean {\n        if (this.width > 0 && this.height > 0 && width > 0 && height > 0\n            && this.x < x + width && x < this.x + this.width\n            && this.y < y + height && y < this.y + this.height) {\n            if (this.x < x) {\n                this.width -= x - this.x\n                this.x = x\n            }\n            if (this.y < y) {\n                this.height -= y - this.y\n                this.y = y\n            }\n            if (this.x + this.width > x + width) this.width = x + width - this.x\n            if (this.y + this.height > y + height) this.height = y + height - this.y\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Computes the intersection of this viewport and a specified viewport, storing the result in this viewport and\n     * returning whether the viewport intersects. Two viewport intersect when both overlap by a non-zero amount.\n     * An empty viewport never intersects another viewport.\n     * <br>\n     * When there is no intersection, this returns false and leaves this viewport unchanged. To test for intersection\n     * without modifying this viewport, use [intersects].\n     *\n     * @param viewport the viewport to intersect with\n     *\n     * @return true if this viewport intersects the specified viewport, false otherwise\n     */\n    fun intersect(viewport: Viewport): Boolean {\n        if (width > 0 && height > 0 && viewport.width > 0 && viewport.height > 0\n            && x < viewport.x + viewport.width && viewport.x < x + width\n            && y < viewport.y + viewport.height && viewport.y < y + height) {\n            if (x < viewport.x) {\n                width -= viewport.x - x\n                x = viewport.x\n            }\n            if (y < viewport.y) {\n                height -= viewport.y - y\n                y = viewport.y\n            }\n            if (x + width > viewport.x + viewport.width) width = viewport.x + viewport.width - x\n            if (y + height > viewport.y + viewport.height) height = viewport.y + viewport.height - y\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Indicates whether this viewport contains a specified point. An empty viewport never contains a point.\n     *\n     * @param point the point\n     *\n     * @return true if this viewport contains the point, false otherwise\n     */\n    fun contains(point: Vec2) = contains(point.x, point.y)\n\n    /**\n     * Indicates whether this viewport contains a specified point. An empty viewport never contains a point.\n     *\n     * @param x the point's X component\n     * @param y the point's Y component\n     *\n     * @return true if this viewport contains the point, false otherwise\n     */\n    fun contains(x: Number, y: Number) = x.toDouble() >= this.x && x.toDouble() < this.x + width\n            && y.toDouble() >= this.y && y.toDouble() < this.y + height\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Viewport) return false\n        return x == other.x && y == other.y && width == other.width && height == other.height\n    }\n\n    override fun hashCode(): Int {\n        var result = x\n        result = 31 * result + y\n        result = 31 * result + width\n        result = 31 * result + height\n        return result\n    }\n\n    override fun toString() = \"Viewport(x=$x, y=$y, width=$width, height=$height)\"\n}","package earth.worldwind.geom.coords\r\n\r\nimport earth.worldwind.geom.Angle\r\nimport earth.worldwind.geom.Angle.Companion.radians\r\nimport kotlin.jvm.JvmStatic\r\n\r\n/**\r\n * This class holds an immutable MGRS coordinate string along with\r\n * the corresponding latitude and longitude.\r\n */\r\nclass MGRSCoord private constructor(val latitude: Angle, val longitude: Angle, private val MGRSString: String) {\r\n    companion object {\r\n        /**\r\n         * Create a MGRS coordinate from a pair of latitude and longitude [Angle]\r\n         * with the maximum precision of five digits (one meter).\r\n         *\r\n         * @param latitude the latitude [Angle].\r\n         * @param longitude the longitude [Angle].\r\n         * @return the corresponding [MGRSCoord].\r\n         * @throws IllegalArgumentException if the conversion to MGRS coordinates fails.\r\n         */\r\n        @JvmStatic\r\n        fun fromLatLon(latitude: Angle, longitude: Angle) = fromLatLon(latitude, longitude, 5)\r\n\r\n        /**\r\n         * Create a MGRS coordinate from a pair of latitude and longitude [Angle]\r\n         * with the given precision or number of digits (1 to 5).\r\n         *\r\n         * @param latitude the latitude [Angle].\r\n         * @param longitude the longitude [Angle].\r\n         * @param precision the number of digits used for easting and northing (1 to 5).\r\n         * @return the corresponding [MGRSCoord].\r\n         * @throws IllegalArgumentException if the conversion to MGRS coordinates fails.\r\n         */\r\n        @JvmStatic\r\n        fun fromLatLon(latitude: Angle, longitude: Angle, precision: Int): MGRSCoord {\r\n            val converter = MGRSCoordConverter()\r\n            val err = converter.convertGeodeticToMGRS(latitude.inRadians, longitude.inRadians, precision)\r\n            require(err == MGRSCoordConverter.NO_ERROR) { \"MGRS Conversion Error\" }\r\n            return MGRSCoord(latitude, longitude, converter.mgrsString)\r\n        }\r\n\r\n        /**\r\n         * Create a MGRS coordinate from a standard MGRS coordinate text string.\r\n         *\r\n         * The string will be converted to uppercase and stripped of all spaces before being evaluated.\r\n         *\r\n         * Valid examples:<br>\r\n         * 32TLP5626635418<br>\r\n         * 32 T LP 56266 35418<br>\r\n         * 11S KU 528 111<br>\r\n         *\r\n         * @param MGRSString the MGRS coordinate text string.\r\n         * @return the corresponding [MGRSCoord].\r\n         * @throws IllegalArgumentException if the [MGRSString] is empty,\r\n         * the [Globe] is null, or the conversion to geodetic coordinates fails (invalid coordinate string).\r\n         */\r\n        @JvmStatic\r\n        fun fromString(MGRSString: String): MGRSCoord {\r\n            var str = MGRSString\r\n            str = str.uppercase().replace(\" \", \"\")\r\n            val converter = MGRSCoordConverter()\r\n            val err = converter.convertMGRSToGeodetic(str)\r\n            require(err == MGRSCoordConverter.NO_ERROR) { \"MGRS Conversion Error\" }\r\n            return MGRSCoord(converter.latitude.radians, converter.longitude.radians, str)\r\n        }\r\n    }\r\n\r\n    override fun toString() = MGRSString\r\n}","package earth.worldwind.geom.coords\r\n\r\nimport earth.worldwind.geom.Angle.Companion.radians\r\nimport earth.worldwind.util.format.format\r\nimport kotlin.math.PI\r\nimport kotlin.math.floor\r\nimport kotlin.math.pow\r\n\r\n/*\r\n * Converter used to translate MGRS coordinate strings to and from geodetic latitude and longitude.\r\n * Ported to Kotlin from the NGA GeoTrans mgrs.c and mgrs.h code. Contains routines to convert from Geodetic to MGRS and\r\n * the other direction.\r\n */\r\ninternal class MGRSCoordConverter {\r\n    companion object {\r\n        const val NO_ERROR = 0\r\n        private const val LAT_ERROR = 0x0001\r\n        private const val LON_ERROR = 0x0002\r\n        const val STRING_ERROR = 0x0004\r\n        private const val PRECISION_ERROR = 0x0008\r\n        private const val EASTING_ERROR = 0x0040\r\n        private const val NORTHING_ERROR = 0x0080\r\n        private const val HEMISPHERE_ERROR = 0x0200\r\n        private const val LAT_WARNING = 0x0400\r\n        private const val UTM_ERROR = 0x1000\r\n        private const val UPS_ERROR = 0x2000\r\n        private const val PI_OVER_2 = PI / 2.0\r\n        private const val MAX_PRECISION = 5\r\n        private const val MIN_UTM_LAT = -80 * PI / 180.0 // -80 degrees in radians\r\n        private const val MAX_UTM_LAT = 84 * PI / 180.0 // 84 degrees in radians\r\n        const val DEG_TO_RAD = 0.017453292519943295 // PI/180\r\n        private const val RAD_TO_DEG = 57.29577951308232 // 180/PI\r\n        private const val MIN_EAST_NORTH = 0.0\r\n        private const val MAX_EAST_NORTH = 4000000.0\r\n        private const val TWO_MIL = 2000000.0\r\n        private const val ONE_HT = 100000.0\r\n        private const val CLARKE_1866 = \"CC\"\r\n        private const val CLARKE_1880 = \"CD\"\r\n        private const val BESSEL_1841 = \"BR\"\r\n        private const val BESSEL_1841_NAMIBIA = \"BN\"\r\n        private const val LETTER_A = 0 /* ARRAY INDEX FOR LETTER A               */\r\n        private const val LETTER_B = 1 /* ARRAY INDEX FOR LETTER B               */\r\n        private const val LETTER_C = 2 /* ARRAY INDEX FOR LETTER C               */\r\n        private const val LETTER_D = 3 /* ARRAY INDEX FOR LETTER D               */\r\n        private const val LETTER_E = 4 /* ARRAY INDEX FOR LETTER E               */\r\n        private const val LETTER_F = 5 /* ARRAY INDEX FOR LETTER E               */\r\n        private const val LETTER_G = 6 /* ARRAY INDEX FOR LETTER H               */\r\n        private const val LETTER_H = 7 /* ARRAY INDEX FOR LETTER H               */\r\n        private const val LETTER_I = 8 /* ARRAY INDEX FOR LETTER I               */\r\n        private const val LETTER_J = 9 /* ARRAY INDEX FOR LETTER J               */\r\n        private const val LETTER_K = 10 /* ARRAY INDEX FOR LETTER J               */\r\n        private const val LETTER_L = 11 /* ARRAY INDEX FOR LETTER L               */\r\n        private const val LETTER_M = 12 /* ARRAY INDEX FOR LETTER M               */\r\n        private const val LETTER_N = 13 /* ARRAY INDEX FOR LETTER N               */\r\n        private const val LETTER_O = 14 /* ARRAY INDEX FOR LETTER O               */\r\n        private const val LETTER_P = 15 /* ARRAY INDEX FOR LETTER P               */\r\n        private const val LETTER_Q = 16 /* ARRAY INDEX FOR LETTER Q               */\r\n        private const val LETTER_R = 17 /* ARRAY INDEX FOR LETTER R               */\r\n        private const val LETTER_S = 18 /* ARRAY INDEX FOR LETTER S               */\r\n        private const val LETTER_T = 19 /* ARRAY INDEX FOR LETTER S               */\r\n        private const val LETTER_U = 20 /* ARRAY INDEX FOR LETTER U               */\r\n        private const val LETTER_V = 21 /* ARRAY INDEX FOR LETTER V               */\r\n        private const val LETTER_W = 22 /* ARRAY INDEX FOR LETTER W               */\r\n        private const val LETTER_X = 23 /* ARRAY INDEX FOR LETTER X               */\r\n        private const val LETTER_Y = 24 /* ARRAY INDEX FOR LETTER Y               */\r\n        private const val LETTER_Z = 25 /* ARRAY INDEX FOR LETTER Z               */\r\n        private const val MGRS_LETTERS = 3 /* NUMBER OF LETTERS IN MGRS              */\r\n        private const val alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n\r\n        // UPS Constants are in the following order:\r\n        // letter representing latitude band\r\n        // 2nd letter range - high number\r\n        // 2nd letter range - low number\r\n        // 3rd letter range - high number (UPS)\r\n        // False easting based on 2nd letter\r\n        // False northing based on 3rd letter\r\n        private val upsConstants = arrayOf(\r\n            intArrayOf(LETTER_A, LETTER_J, LETTER_Z, LETTER_Z, 800000, 800000),\r\n            intArrayOf(LETTER_B, LETTER_A, LETTER_R, LETTER_Z, 2000000, 800000),\r\n            intArrayOf(LETTER_Y, LETTER_J, LETTER_Z, LETTER_P, 800000, 1300000),\r\n            intArrayOf(LETTER_Z, LETTER_A, LETTER_J, LETTER_P, 2000000, 1300000)\r\n        )\r\n\r\n        // Latitude Band Constants are in the following order:\r\n        // letter representing latitude band\r\n        // minimum northing for latitude band\r\n        // upper latitude for latitude band\r\n        // lower latitude for latitude band\r\n        private val latitudeBandConstants = arrayOf(\r\n            doubleArrayOf(LETTER_C.toDouble(), 1100000.0, -72.0, -80.5, 0.0),\r\n            doubleArrayOf(LETTER_D.toDouble(), 2000000.0, -64.0, -72.0, 2000000.0),\r\n            doubleArrayOf(LETTER_E.toDouble(), 2800000.0, -56.0, -64.0, 2000000.0),\r\n            doubleArrayOf(LETTER_F.toDouble(), 3700000.0, -48.0, -56.0, 2000000.0),\r\n            doubleArrayOf(LETTER_G.toDouble(), 4600000.0, -40.0, -48.0, 4000000.0),\r\n            doubleArrayOf(LETTER_H.toDouble(), 5500000.0, -32.0, -40.0, 4000000.0),\r\n            doubleArrayOf(LETTER_J.toDouble(), 6400000.0, -24.0, -32.0, 6000000.0),\r\n            doubleArrayOf(LETTER_K.toDouble(), 7300000.0, -16.0, -24.0, 6000000.0),\r\n            doubleArrayOf(LETTER_L.toDouble(), 8200000.0, -8.0, -16.0, 8000000.0),\r\n            doubleArrayOf(LETTER_M.toDouble(), 9100000.0, 0.0, -8.0, 8000000.0),\r\n            doubleArrayOf(LETTER_N.toDouble(), 0.0, 8.0, 0.0, 0.0),\r\n            doubleArrayOf(LETTER_P.toDouble(), 800000.0, 16.0, 8.0, 0.0),\r\n            doubleArrayOf(LETTER_Q.toDouble(), 1700000.0, 24.0, 16.0, 0.0),\r\n            doubleArrayOf(LETTER_R.toDouble(), 2600000.0, 32.0, 24.0, 2000000.0),\r\n            doubleArrayOf(LETTER_S.toDouble(), 3500000.0, 40.0, 32.0, 2000000.0),\r\n            doubleArrayOf(LETTER_T.toDouble(), 4400000.0, 48.0, 40.0, 4000000.0),\r\n            doubleArrayOf(LETTER_U.toDouble(), 5300000.0, 56.0, 48.0, 4000000.0),\r\n            doubleArrayOf(LETTER_V.toDouble(), 6200000.0, 64.0, 56.0, 6000000.0),\r\n            doubleArrayOf(LETTER_W.toDouble(), 7000000.0, 72.0, 64.0, 6000000.0),\r\n            doubleArrayOf(LETTER_X.toDouble(), 7900000.0, 84.5, 72.0, 6000000.0)\r\n        )\r\n    }\r\n\r\n    var latitude = 0.0\r\n        private set\r\n    var longitude = 0.0\r\n        private set\r\n    var mgrsString = \"\"\r\n        private set\r\n    private var ltr2LowValue = 0\r\n    private var ltr2HighValue = 0 // this is only used for doing MGRS to xxx conversions.\r\n    private var falseNorthing = 0.0\r\n    private var lastLetter = 0\r\n    private var lastError = NO_ERROR\r\n    private var north = 0.0\r\n    private var south = 0.0\r\n    private var minNorthing = 0.0\r\n    private var northingOffset = 0.0\r\n    private val mgrsEllipsoidCode = \"WE\"\r\n\r\n    private class MGRSComponents(\r\n        val zone: Int, val latitudeBand: Int, val squareLetter1: Int, val squareLetter2: Int,\r\n        val easting: Double, val northing: Double, val precision: Int\r\n    ) {\r\n        override fun toString() = \"MGRS: \" + zone + \" \" + alphabet[latitudeBand] + \" \" +\r\n                    alphabet[squareLetter1] + alphabet[squareLetter2] + \" \" +\r\n                    easting + \" \" + northing + \" \" + \"(\" + precision + \")\"\r\n    }\r\n\r\n    /**\r\n     * The function ConvertMGRSToGeodetic converts an MGRS coordinate string to Geodetic (latitude and longitude)\r\n     * coordinates according to the current ellipsoid parameters.  If any errors occur, the error code(s) are returned\r\n     * by the function, otherwise UTM_NO_ERROR is returned.\r\n     *\r\n     * @param MGRSString MGRS coordinate string.\r\n     *\r\n     * @return the error code.\r\n     */\r\n    fun convertMGRSToGeodetic(MGRSString: String): Int {\r\n        latitude = 0.0\r\n        longitude = 0.0\r\n        val mgrs = breakMGRSString(MGRSString) ?: return lastError\r\n        var errorCode = NO_ERROR\r\n        if (mgrs.zone != 0) {\r\n            val utm = convertMGRSToUTM(MGRSString)\r\n            if (utm != null) {\r\n                latitude = utm.latitude.inRadians\r\n                longitude = utm.longitude.inRadians\r\n            } else errorCode = UTM_ERROR\r\n        } else {\r\n            val ups = convertMGRSToUPS(MGRSString)\r\n            if (ups != null) {\r\n                latitude = ups.latitude.inRadians\r\n                longitude = ups.longitude.inRadians\r\n            } else errorCode = UPS_ERROR\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Break_MGRS_String breaks down an MGRS coordinate string into its component parts. Updates\r\n     * last_error.\r\n     *\r\n     * @param MGRSString the MGRS coordinate string\r\n     *\r\n     * @return the corresponding [MGRSComponents] or null.\r\n     */\r\n    private fun breakMGRSString(MGRSString: String): MGRSComponents? {\r\n        var str = MGRSString\r\n        var i = 0\r\n        var errorCode = NO_ERROR\r\n        var zone = 0\r\n        val letters = IntArray(3)\r\n        var easting = 0L\r\n        var northing = 0L\r\n        var precision = 0\r\n        str = str.uppercase().replace(\"\\\\s\", \"\")\r\n        var j = i\r\n        while (i < str.length && str[i].isDigit()) i++\r\n        var numDigits = i - j\r\n        if (numDigits <= 2) {\r\n            if (numDigits > 0) {\r\n                /* get zone */\r\n                zone = str.substring(j, i).toInt()\r\n                if (zone < 1 || zone > 60) errorCode = errorCode or STRING_ERROR\r\n            }\r\n        }\r\n        j = i\r\n        while (i < str.length && str[i].isLetter()) i++\r\n        val numLetters = i - j\r\n        if (numLetters == 3) {\r\n            /* get letters */\r\n            letters[0] = alphabet.indexOf(str[j].uppercaseChar())\r\n            if (letters[0] == LETTER_I || letters[0] == LETTER_O) errorCode = errorCode or STRING_ERROR\r\n            letters[1] = alphabet.indexOf(str[j + 1].uppercaseChar())\r\n            if (letters[1] == LETTER_I || letters[1] == LETTER_O) errorCode = errorCode or STRING_ERROR\r\n            letters[2] = alphabet.indexOf(str[j + 2].uppercaseChar())\r\n            if (letters[2] == LETTER_I || letters[2] == LETTER_O) errorCode = errorCode or STRING_ERROR\r\n        } else errorCode = errorCode or STRING_ERROR\r\n        j = i\r\n        while (i < str.length && str[i].isDigit()) i++\r\n        numDigits = i - j\r\n        if (numDigits <= 10 && numDigits % 2 == 0) {\r\n            /* get easting, northing and precision */\r\n            /* get easting & northing */\r\n            val n = numDigits / 2\r\n            precision = n\r\n            if (n > 0) {\r\n                easting = str.substring(j, j + n).toLong()\r\n                northing = str.substring(j + n, j + n + n).toLong()\r\n                val multiplier = 10.0.pow(5 - n).toLong()\r\n                easting *= multiplier\r\n                northing *= multiplier\r\n            } else {\r\n                easting = 0\r\n                northing = 0\r\n            }\r\n        } else errorCode = errorCode or STRING_ERROR\r\n        lastError = errorCode\r\n        return if (errorCode == NO_ERROR) MGRSComponents(\r\n            zone, letters[0], letters[1], letters[2],\r\n            easting.toDouble(), northing.toDouble(), precision\r\n        ) else null\r\n    }\r\n\r\n    /**\r\n     * The function Get_Latitude_Band_Min_Northing receives a latitude band letter and uses the Latitude_Band_Table to\r\n     * determine the minimum northing for that latitude band letter. Updates min_northing.\r\n     *\r\n     * @param letter Latitude band letter.\r\n     *\r\n     * @return the error code.\r\n     */\r\n    private fun getLatitudeBandMinNorthing(letter: Int): Int {\r\n        var errorCode = NO_ERROR\r\n        when (letter) {\r\n            in LETTER_C..LETTER_H -> {\r\n                minNorthing = latitudeBandConstants[letter - 2][1]\r\n                northingOffset = latitudeBandConstants[letter - 2][4]\r\n            }\r\n            in LETTER_J..LETTER_N -> {\r\n                minNorthing = latitudeBandConstants[letter - 3][1]\r\n                northingOffset = latitudeBandConstants[letter - 3][4]\r\n            }\r\n            in LETTER_P..LETTER_X -> {\r\n                minNorthing = latitudeBandConstants[letter - 4][1]\r\n                northingOffset = latitudeBandConstants[letter - 4][4]\r\n            }\r\n            else -> errorCode = errorCode or STRING_ERROR\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Get_Latitude_Range receives a latitude band letter and uses the Latitude_Band_Table to determine the\r\n     * latitude band boundaries for that latitude band letter. Updates north and south.\r\n     *\r\n     * @param letter the Latitude band letter\r\n     *\r\n     * @return the error code.\r\n     */\r\n    private fun getLatitudeRange(letter: Int): Int {\r\n        var errorCode = NO_ERROR\r\n        when (letter) {\r\n            in LETTER_C..LETTER_H -> {\r\n                north = latitudeBandConstants[letter - 2][2] * DEG_TO_RAD\r\n                south = latitudeBandConstants[letter - 2][3] * DEG_TO_RAD\r\n            }\r\n            in LETTER_J..LETTER_N -> {\r\n                north = latitudeBandConstants[letter - 3][2] * DEG_TO_RAD\r\n                south = latitudeBandConstants[letter - 3][3] * DEG_TO_RAD\r\n            }\r\n            in LETTER_P..LETTER_X -> {\r\n                north = latitudeBandConstants[letter - 4][2] * DEG_TO_RAD\r\n                south = latitudeBandConstants[letter - 4][3] * DEG_TO_RAD\r\n            }\r\n            else -> errorCode = errorCode or STRING_ERROR\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function convertMGRSToUTM converts an MGRS coordinate string to UTM projection (zone, hemisphere, easting and\r\n     * northing) coordinates according to the current ellipsoid parameters.  Updates last_error if any errors occurred.\r\n     *\r\n     * @param MGRSString the MGRS coordinate string\r\n     *\r\n     * @return the corresponding [UTMCoord] or null.\r\n     */\r\n    private fun convertMGRSToUTM(MGRSString: String): UTMCoord? {\r\n        var errorCode = NO_ERROR\r\n        var utm: UTMCoord? = null\r\n        val mgrs = breakMGRSString(MGRSString)\r\n        if (mgrs == null) errorCode = errorCode or STRING_ERROR else {\r\n            if (mgrs.latitudeBand == LETTER_X && (mgrs.zone == 32 || mgrs.zone == 34 || mgrs.zone == 36))\r\n                errorCode = errorCode or STRING_ERROR\r\n            else {\r\n                val hemisphere = if (mgrs.latitudeBand < LETTER_N) Hemisphere.S else Hemisphere.N\r\n                getGridValues(mgrs.zone)\r\n\r\n                // Check that the second letter of the MGRS string is within\r\n                // the range of valid second letter values\r\n                // Also check that the third letter is valid\r\n                if (mgrs.squareLetter1 < ltr2LowValue || mgrs.squareLetter1 > ltr2HighValue ||\r\n                    mgrs.squareLetter2 > LETTER_V) errorCode = errorCode or STRING_ERROR\r\n                if (errorCode == NO_ERROR) {\r\n                    var gridNorthing = mgrs.squareLetter2 * ONE_HT\r\n                    var gridEasting = (mgrs.squareLetter1 - ltr2LowValue + 1) * ONE_HT\r\n                    if (ltr2LowValue == LETTER_J && mgrs.squareLetter1 > LETTER_O) gridEasting -= ONE_HT\r\n                    if (mgrs.squareLetter2 > LETTER_O) gridNorthing -= ONE_HT\r\n                    if (mgrs.squareLetter2 > LETTER_I) gridNorthing -= ONE_HT\r\n                    if (gridNorthing >= TWO_MIL) gridNorthing -= TWO_MIL\r\n                    errorCode = getLatitudeBandMinNorthing(mgrs.latitudeBand)\r\n                    if (errorCode == NO_ERROR) {\r\n                        gridNorthing -= falseNorthing\r\n                        if (gridNorthing < 0.0) gridNorthing += TWO_MIL\r\n                        gridNorthing += northingOffset\r\n                        if (gridNorthing < minNorthing) gridNorthing += TWO_MIL\r\n                        val easting = gridEasting + mgrs.easting\r\n                        val northing = gridNorthing + mgrs.northing\r\n                        try {\r\n                            utm = UTMCoord.fromUTM(mgrs.zone, hemisphere, easting, northing)\r\n                            latitude = utm.latitude.inRadians\r\n                            val divisor = 10.0.pow(mgrs.precision)\r\n                            errorCode = getLatitudeRange(mgrs.latitudeBand)\r\n                            if (errorCode == NO_ERROR) {\r\n                                if (!(south - DEG_TO_RAD / divisor <= latitude\r\n                                            && latitude <= north + DEG_TO_RAD / divisor)\r\n                                ) errorCode = errorCode or LAT_WARNING\r\n                            }\r\n                        } catch (e: Exception) {\r\n                            errorCode = UTM_ERROR\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        lastError = errorCode\r\n        return if (errorCode == NO_ERROR || errorCode == LAT_WARNING) utm else null\r\n    }\r\n\r\n    /**\r\n     * The function convertGeodeticToMGRS converts Geodetic (latitude and longitude) coordinates to an MGRS coordinate\r\n     * string, according to the current ellipsoid parameters.  If any errors occur, the error code(s) are returned by\r\n     * the function, otherwise MGRS_NO_ERROR is returned.\r\n     *\r\n     * @param latitude  Latitude in radians\r\n     * @param longitude Longitude in radian\r\n     * @param precision Precision level of MGRS string\r\n     *\r\n     * @return error code\r\n     */\r\n    fun convertGeodeticToMGRS(latitude: Double, longitude: Double, precision: Int): Int {\r\n        mgrsString = \"\"\r\n        var errorCode = NO_ERROR\r\n        if (latitude < -PI_OVER_2 || latitude > PI_OVER_2) errorCode = LAT_ERROR\r\n        if (longitude < -PI || longitude > 2 * PI) errorCode = LON_ERROR\r\n        if (precision < 0 || precision > MAX_PRECISION) errorCode = PRECISION_ERROR\r\n        if (errorCode == NO_ERROR) {\r\n            errorCode = if (latitude < MIN_UTM_LAT || latitude > MAX_UTM_LAT) {\r\n                try {\r\n                    val ups = UPSCoord.fromLatLon(latitude.radians, longitude.radians)\r\n                    errorCode or convertUPSToMGRS(ups.hemisphere, ups.easting, ups.northing, precision)\r\n                } catch (e: Exception) {\r\n                    UPS_ERROR\r\n                }\r\n            } else {\r\n                try {\r\n                    val utm = UTMCoord.fromLatLon(latitude.radians, longitude.radians)\r\n                    errorCode or convertUTMToMGRS(utm.zone, latitude, utm.easting, utm.northing, precision)\r\n                } catch (e: Exception) {\r\n                    UTM_ERROR\r\n                }\r\n            }\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Convert_UPS_To_MGRS converts UPS (hemisphere, easting, and northing) coordinates to an MGRS\r\n     * coordinate string according to the current ellipsoid parameters.  If any errors occur, the error code(s) are\r\n     * returned by the function, otherwise MGRS_NO_ERROR is returned.\r\n     *\r\n     * @param hemisphere hemisphere either [Hemisphere.N] of [Hemisphere.S].\r\n     * @param easting    easting/X in meters\r\n     * @param northing   northing/Y in meters\r\n     * @param precision  precision level of MGRS string\r\n     *\r\n     * @return error value\r\n     */\r\n    private fun convertUPSToMGRS(hemisphere: Hemisphere, easting: Double, northing: Double, precision: Int): Int {\r\n        var east = easting\r\n        var north = northing\r\n        val falseEasting: Double /* False easting for 2nd letter                 */\r\n        val falseNorthing: Double /* False northing for 3rd letter                */\r\n        var gridEasting: Double /* easting used to derive 2nd letter of MGRS    */\r\n        var gridNorthing: Double /* northing used to derive 3rd letter of MGRS   */\r\n        val ltr2LowValue: Int /* 2nd letter range - low number                */\r\n        val letters = IntArray(MGRS_LETTERS) /* Number location of 3 letters in alphabet     */\r\n        var errorCode = NO_ERROR\r\n        if (Hemisphere.N != hemisphere && Hemisphere.S != hemisphere) errorCode = errorCode or HEMISPHERE_ERROR\r\n        if (east < MIN_EAST_NORTH || east > MAX_EAST_NORTH) errorCode = errorCode or EASTING_ERROR\r\n        if (north < MIN_EAST_NORTH || north > MAX_EAST_NORTH) errorCode = errorCode or NORTHING_ERROR\r\n        if (precision < 0 || precision > MAX_PRECISION) errorCode = errorCode or PRECISION_ERROR\r\n        if (errorCode == NO_ERROR) {\r\n            val divisor = 10.0.pow(5 - precision)\r\n            east = roundMGRS(east / divisor) * divisor\r\n            north = roundMGRS(north / divisor) * divisor\r\n            if (Hemisphere.N == hemisphere) {\r\n                if (east >= TWO_MIL) letters[0] = LETTER_Z else letters[0] = LETTER_Y\r\n                val index = letters[0] - 22\r\n                ltr2LowValue = upsConstants[index][1]\r\n                falseEasting = upsConstants[index][4].toDouble()\r\n                falseNorthing = upsConstants[index][5].toDouble()\r\n            } else {\r\n                if (east >= TWO_MIL) letters[0] = LETTER_B else letters[0] = LETTER_A\r\n                ltr2LowValue = upsConstants[letters[0]][1]\r\n                falseEasting = upsConstants[letters[0]][4].toDouble()\r\n                falseNorthing = upsConstants[letters[0]][5].toDouble()\r\n            }\r\n            gridNorthing = north\r\n            gridNorthing -= falseNorthing\r\n            letters[2] = (gridNorthing / ONE_HT).toInt()\r\n            if (letters[2] > LETTER_H) letters[2] = letters[2] + 1\r\n            if (letters[2] > LETTER_N) letters[2] = letters[2] + 1\r\n            gridEasting = east\r\n            gridEasting -= falseEasting\r\n            letters[1] = ltr2LowValue + (gridEasting / ONE_HT).toInt()\r\n            if (east < TWO_MIL) {\r\n                if (letters[1] > LETTER_L) letters[1] = letters[1] + 3\r\n                if (letters[1] > LETTER_U) letters[1] = letters[1] + 2\r\n            } else {\r\n                if (letters[1] > LETTER_C) letters[1] = letters[1] + 2\r\n                if (letters[1] > LETTER_H) letters[1] = letters[1] + 1\r\n                if (letters[1] > LETTER_L) letters[1] = letters[1] + 3\r\n            }\r\n            makeMGRSString(0, letters, east, north, precision)\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function UTM_To_MGRS calculates an MGRS coordinate string based on the zone, latitude, easting and northing.\r\n     *\r\n     * @param zone      Zone number\r\n     * @param latitude  Latitude in radians\r\n     * @param easting   Easting\r\n     * @param northing  Northing\r\n     * @param precision Precision\r\n     *\r\n     * @return error code\r\n     */\r\n    private fun convertUTMToMGRS(zone: Int, latitude: Double, easting: Double, northing: Double, precision: Int): Int {\r\n        var east = easting\r\n        var north = northing\r\n        var gridEasting: Double /* Easting used to derive 2nd letter of MGRS   */\r\n        var gridNorthing: Double /* Northing used to derive 3rd letter of MGRS  */\r\n        val letters = IntArray(MGRS_LETTERS) /* Number location of 3 letters in alphabet    */\r\n\r\n        /* Round easting and northing values */\r\n        val divisor = 10.0.pow(5 - precision)\r\n        east = roundMGRS(east / divisor) * divisor\r\n        north = roundMGRS(north / divisor) * divisor\r\n        getGridValues(zone)\r\n        val errorCode = getLatitudeLetter(latitude)\r\n        letters[0] = lastLetter\r\n        if (errorCode == NO_ERROR) {\r\n            gridNorthing = north\r\n            if (gridNorthing == 1e7) gridNorthing -= 1.0\r\n            while (gridNorthing >= TWO_MIL) gridNorthing -= TWO_MIL\r\n            gridNorthing += falseNorthing\r\n            if (gridNorthing >= TWO_MIL) gridNorthing -= TWO_MIL\r\n            letters[2] = (gridNorthing / ONE_HT).toInt()\r\n            if (letters[2] > LETTER_H) letters[2] = letters[2] + 1\r\n            if (letters[2] > LETTER_N) letters[2] = letters[2] + 1\r\n            gridEasting = east\r\n            if (letters[0] == LETTER_V && zone == 31 && gridEasting == 500000.0) gridEasting -= 1.0 /* SUBTRACT 1 METER */\r\n            letters[1] = ltr2LowValue + ((gridEasting / ONE_HT).toInt() - 1)\r\n            if (ltr2LowValue == LETTER_J && letters[1] > LETTER_N) letters[1] = letters[1] + 1\r\n            makeMGRSString(zone, letters, east, north, precision)\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Get_Grid_Values sets the letter range used for the 2nd letter in the MGRS coordinate string, based\r\n     * on the set number of the utm zone. It also sets the false northing using a value of A for the second letter of\r\n     * the grid square, based on the grid pattern and set number of the utm zone.\r\n     * <br>\r\n     * Key values that are set in this function include:  ltr2_low_value, ltr2_high_value, and false_northing.\r\n     *\r\n     * @param zone Zone number\r\n     */\r\n    private fun getGridValues(zone: Int) {\r\n        var setNumber = zone % 6 /* Set number (1-6) based on UTM zone number */\r\n        if (setNumber == 0) setNumber = 6\r\n        val aaPattern = if (mgrsEllipsoidCode.compareTo(CLARKE_1866) == 0\r\n            || mgrsEllipsoidCode.compareTo(CLARKE_1880) == 0\r\n            || mgrsEllipsoidCode.compareTo(BESSEL_1841) == 0\r\n            || mgrsEllipsoidCode.compareTo(BESSEL_1841_NAMIBIA) == 0\r\n            ) 0 else 1 /* Pattern based on ellipsoid code */\r\n        if (setNumber == 1 || setNumber == 4) {\r\n            ltr2LowValue = LETTER_A\r\n            ltr2HighValue = LETTER_H\r\n        } else if (setNumber == 2 || setNumber == 5) {\r\n            ltr2LowValue = LETTER_J\r\n            ltr2HighValue = LETTER_R\r\n        } else if (setNumber == 3 || setNumber == 6) {\r\n            ltr2LowValue = LETTER_S\r\n            ltr2HighValue = LETTER_Z\r\n        }\r\n\r\n        /* False northing at A for second letter of grid square */\r\n        falseNorthing = if (aaPattern == 1) {\r\n            if (setNumber % 2 == 0) 500000.0\r\n            else 0.0\r\n        } else {\r\n            if (setNumber % 2 == 0) 1500000.0\r\n            else 1000000.00\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The function receives a latitude value and uses the Latitude_Band_Table to determine the\r\n     * latitude band letter for that latitude.\r\n     *\r\n     * @param latitude latitude to turn into code\r\n     *\r\n     * @return error code\r\n     */\r\n    private fun getLatitudeLetter(latitude: Double): Int {\r\n        var errorCode = NO_ERROR\r\n        val latDeg = latitude * RAD_TO_DEG\r\n        if (latDeg >= 72 && latDeg < 84.5) lastLetter = LETTER_X\r\n        else if (latDeg > -80.5 && latDeg < 72) {\r\n            val temp = (latitude + 80.0 * DEG_TO_RAD) / (8.0 * DEG_TO_RAD) + 1.0e-12\r\n            lastLetter = latitudeBandConstants[temp.toInt()][0].toInt()\r\n        } else errorCode = errorCode or LAT_ERROR\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Round_MGRS rounds the input value to the nearest integer, using the standard engineering rule. The\r\n     * rounded integer value is then returned.\r\n     *\r\n     * @param value Value to be rounded\r\n     *\r\n     * @return rounded double value\r\n     */\r\n    private fun roundMGRS(value: Double): Double {\r\n        val floorValue = floor(value)\r\n        val fraction = value - floorValue\r\n        var intValue = floorValue.toLong()\r\n        if (fraction > 0.5 || fraction == 0.5 && intValue % 2 == 1L) intValue++\r\n        return intValue.toDouble()\r\n    }\r\n\r\n    /**\r\n     * The function Make_MGRS_String constructs an MGRS string from its component parts.\r\n     *\r\n     * @param zone      UTM Zone\r\n     * @param letters   MGRS coordinate string letters\r\n     * @param easting   Easting value\r\n     * @param northing  Northing value\r\n     * @param precision Precision level of MGRS string\r\n     */\r\n    private fun makeMGRSString(zone: Int, letters: IntArray, easting: Double, northing: Double, precision: Int) {\r\n        var east = easting\r\n        var north = northing\r\n        mgrsString = if (zone != 0) \"%02d\".format(zone) else \"  \"\r\n        for (j in 0..2) {\r\n            if (letters[j] < 0 || letters[j] > 26) return\r\n            mgrsString += alphabet[letters[j]]\r\n        }\r\n        val divisor = 10.0.pow(5 - precision)\r\n        east %= 100000.0\r\n        if (east >= 99999.5) east = 99999.0\r\n\r\n        // Here we need to only use the number requesting in the precision\r\n        val iEast = (east / divisor).toInt()\r\n        var sEast = StringBuilder(iEast.toString())\r\n        if (sEast.length > precision) sEast = StringBuilder(sEast.substring(0, precision - 1))\r\n        else for (i in 0 until precision - sEast.length) sEast.insert(0, \"0\")\r\n        mgrsString = \"$mgrsString $sEast\"\r\n        north %= 100000.0\r\n        if (north >= 99999.5) north = 99999.0\r\n        val iNorth = (north / divisor).toInt()\r\n        var sNorth = StringBuilder(iNorth.toString())\r\n        if (sNorth.length > precision) sNorth = StringBuilder(sNorth.substring(0, precision - 1))\r\n        else for (i in 0 until precision - sNorth.length) sNorth.insert(0, \"0\")\r\n        mgrsString = \"$mgrsString $sNorth\"\r\n    }\r\n\r\n    /**\r\n     * The function Convert_MGRS_To_UPS converts an MGRS coordinate string to UPS (hemisphere, easting, and northing)\r\n     * coordinates, according to the current ellipsoid parameters. If any errors occur, the error code(s) are returned\r\n     * by the function, otherwise UPS_NO_ERROR is returned.\r\n     *\r\n     * @param MGRS the MGRS coordinate string.\r\n     *\r\n     * @return a corresponding [UPSCoord] instance.\r\n     */\r\n    private fun convertMGRSToUPS(MGRS: String): UPSCoord? {\r\n        val ltr2HighValue: Int /* 2nd letter range - high number             */\r\n        val ltr3HighValue: Int /* 3rd letter range - high number (UPS)       */\r\n        val ltr2LowValue: Int /* 2nd letter range - low number              */\r\n        val falseEasting: Double /* False easting for 2nd letter               */\r\n        val falseNorthing: Double /* False northing for 3rd letter              */\r\n        var gridEasting: Double /* easting for 100,000 meter grid square      */\r\n        var gridNorthing: Double /* northing for 100,000 meter grid square     */\r\n        var errorCode = NO_ERROR\r\n        val hemisphere: Hemisphere\r\n        var easting: Double\r\n        var northing: Double\r\n        val mgrs = breakMGRSString(MGRS)\r\n        if (mgrs != null) {\r\n            if (mgrs.zone > 0) errorCode = errorCode or STRING_ERROR\r\n            if (errorCode == NO_ERROR) {\r\n                easting = mgrs.easting\r\n                northing = mgrs.northing\r\n                if (mgrs.latitudeBand >= LETTER_Y) {\r\n                    hemisphere = Hemisphere.N\r\n                    val index = mgrs.latitudeBand - 22\r\n                    ltr2LowValue = upsConstants[index][1]\r\n                    ltr2HighValue = upsConstants[index][2]\r\n                    ltr3HighValue = upsConstants[index][3]\r\n                    falseEasting = upsConstants[index][4].toDouble()\r\n                    falseNorthing = upsConstants[index][5].toDouble()\r\n                } else {\r\n                    hemisphere = Hemisphere.S\r\n                    ltr2LowValue = upsConstants[mgrs.latitudeBand][1]\r\n                    ltr2HighValue = upsConstants[mgrs.latitudeBand][2]\r\n                    ltr3HighValue = upsConstants[mgrs.latitudeBand][3]\r\n                    falseEasting = upsConstants[mgrs.latitudeBand][4].toDouble()\r\n                    falseNorthing = upsConstants[mgrs.latitudeBand][5].toDouble()\r\n                }\r\n\r\n                // Check that the second letter of the MGRS string is within\r\n                // the range of valid second letter values\r\n                // Also check that the third letter is valid\r\n                if (mgrs.squareLetter1 < ltr2LowValue || mgrs.squareLetter1 > ltr2HighValue ||\r\n                    mgrs.squareLetter1 == LETTER_D || mgrs.squareLetter1 == LETTER_E ||\r\n                    mgrs.squareLetter1 == LETTER_M || mgrs.squareLetter1 == LETTER_N ||\r\n                    mgrs.squareLetter1 == LETTER_V || mgrs.squareLetter1 == LETTER_W ||\r\n                    mgrs.squareLetter2 > ltr3HighValue) errorCode = STRING_ERROR\r\n                if (errorCode == NO_ERROR) {\r\n                    gridNorthing = mgrs.squareLetter2 * ONE_HT + falseNorthing\r\n                    if (mgrs.squareLetter2 > LETTER_I) gridNorthing -= ONE_HT\r\n                    if (mgrs.squareLetter2 > LETTER_O) gridNorthing -= ONE_HT\r\n                    gridEasting = (mgrs.squareLetter1 - ltr2LowValue) * ONE_HT + falseEasting\r\n                    if (ltr2LowValue != LETTER_A) {\r\n                        if (mgrs.squareLetter1 > LETTER_L) gridEasting -= 300000.0\r\n                        if (mgrs.squareLetter1 > LETTER_U) gridEasting -= 200000.0\r\n                    } else {\r\n                        if (mgrs.squareLetter1 > LETTER_C) gridEasting -= 200000.0\r\n                        if (mgrs.squareLetter1 > LETTER_I) gridEasting -= ONE_HT\r\n                        if (mgrs.squareLetter1 > LETTER_L) gridEasting -= 300000.0\r\n                    }\r\n                    easting += gridEasting\r\n                    northing += gridNorthing\r\n                    return UPSCoord.fromUPS(hemisphere, easting, northing)\r\n                }\r\n            }\r\n        }\r\n        return null\r\n    }\r\n}","package earth.worldwind.geom.coords\r\n\r\nimport kotlin.math.*\r\n\r\n/**\r\n * Ported to Kotlin from the NGA GeoTrans polarst.c and polarst.h code.\r\n */\r\ninternal class PolarCoordConverter {\r\n    companion object {\r\n        private const val NO_ERROR = 0x0000\r\n        private const val LAT_ERROR = 0x0001\r\n        private const val LON_ERROR = 0x0002\r\n        private const val ORIGIN_LAT_ERROR = 0x0004\r\n        private const val ORIGIN_LON_ERROR = 0x0008\r\n        const val EASTING_ERROR = 0x0010\r\n        const val NORTHING_ERROR = 0x0020\r\n        private const val A_ERROR = 0x0040\r\n        private const val INV_F_ERROR = 0x0080\r\n        const val RADIUS_ERROR = 0x0100\r\n        private const val PI_OVER_2 = PI / 2.0\r\n        private const val PI_Over_4 = PI / 4.0\r\n        private const val TWO_PI = 2.0 * PI\r\n    }\r\n\r\n    /* Ellipsoid Parameters, default to WGS 84  */\r\n    private var a = 6378137.0 /* Semi-major axis of ellipsoid in meters  */\r\n    private var f = 1 / 298.257223563 /* Flattening of ellipsoid  */\r\n    private var es = 0.08181919084262188000 /* Eccentricity of ellipsoid    */\r\n    private var esOver2 = .040909595421311 /* es / 2.0 */\r\n    private var southernHemisphere = 0.0 /* Flag variable */\r\n    private var mc = 1.0\r\n    private var tc = 1.0\r\n    private var e4 = 1.0033565552493\r\n    private var amc = 6378137.0 /* Polar_a * mc */\r\n    private var twoA = 12756274.0 /* 2.0 * Polar_a */\r\n\r\n    /* Polar Stereographic projection Parameters */\r\n    private var originLat = PI * 90 / 180 /* Latitude of origin in radians */\r\n    private var originLong = 0.0 /* Longitude of origin in radians */\r\n    private var falseEasting = 0.0 /* False easting in meters */\r\n    private var falseNorthing = 0.0 /* False northing in meters */\r\n\r\n    /* Maximum variance for easting and northing values for WGS 84. */\r\n    private var deltaEasting = 12713601.0\r\n    private var deltaNorthing = 12713601.0\r\n\r\n    var easting = 0.0\r\n        private set\r\n    var northing = 0.0\r\n        private set\r\n    var latitude = 0.0\r\n        private set\r\n    var longitude = 0.0\r\n        private set\r\n\r\n    /**\r\n     * The function setPolarStereographicParameters receives the ellipsoid parameters and Polar Stereographic projection\r\n     * parameters as inputs, and sets the corresponding state variables.  If any errors occur, error code(s) are\r\n     * returned by the function, otherwise POLAR_NO_ERROR is returned.\r\n     *\r\n     * @param a              Semi-major axis of ellipsoid, in meters\r\n     * @param f              Flattening of ellipsoid\r\n     * @param latitude       Latitude of true scale, in radians\r\n     * @param longitude      Longitude down from pole, in radians\r\n     * @param easting  Easting (X) at center of projection, in meters\r\n     * @param northing Northing (Y) at center of projection, in meters\r\n     * @return error code\r\n     */\r\n    fun setPolarStereographicParameters(\r\n        a: Double, f: Double, latitude: Double, longitude: Double, easting: Double, northing: Double\r\n    ): Int {\r\n        var lon = longitude\r\n        val invF = 1 / f\r\n        val epsilon = 1.0e-2\r\n        var errorCode = NO_ERROR\r\n        /* Semi-major axis must be greater than zero */\r\n        if (a <= 0.0) errorCode = errorCode or A_ERROR\r\n        /* Inverse flattening must be between 250 and 350 */\r\n        if (invF < 250 || invF > 350) errorCode = errorCode or INV_F_ERROR\r\n        /* Origin Latitude out of range */\r\n        if (latitude < -PI_OVER_2 || latitude > PI_OVER_2) errorCode = errorCode or ORIGIN_LAT_ERROR\r\n        /* Origin Longitude out of range */\r\n        if (lon < -PI || lon > TWO_PI) errorCode = errorCode or ORIGIN_LON_ERROR\r\n        /* no errors */\r\n        if (errorCode == NO_ERROR) {\r\n            this.a = a\r\n            twoA = 2.0 * this.a\r\n            this.f = f\r\n            if (lon > PI) lon -= TWO_PI\r\n            if (latitude < 0) {\r\n                southernHemisphere = 1.0\r\n                originLat = -latitude\r\n                originLong = -lon\r\n            } else {\r\n                southernHemisphere = 0.0\r\n                originLat = latitude\r\n                originLong = lon\r\n            }\r\n            falseEasting = easting\r\n            falseNorthing = northing\r\n            val es2 = 2 * this.f - this.f * this.f\r\n            es = sqrt(es2)\r\n            esOver2 = es / 2.0\r\n            if (abs(abs(originLat) - PI_OVER_2) > 1.0e-10) {\r\n                val sLat = sin(originLat)\r\n                val esSin = es * sLat\r\n                val powEs = ((1.0 - esSin) / (1.0 + esSin)).pow(esOver2)\r\n                val cLat = cos(originLat)\r\n                mc = cLat / sqrt(1.0 - esSin * esSin)\r\n                amc = this.a * mc\r\n                tc = tan(PI_Over_4 - originLat / 2.0) / powEs\r\n            } else {\r\n                val onePlusEs = 1.0 + es\r\n                val oneMinusEs = 1.0 - es\r\n                e4 = sqrt(onePlusEs.pow(onePlusEs) * oneMinusEs.pow(oneMinusEs))\r\n            }\r\n        }\r\n\r\n        /* Calculate Radius */\r\n        convertGeodeticToPolarStereographic(0.0, originLong)\r\n        deltaNorthing = this.northing * 2 // Increased range for accepted easting and northing values\r\n        deltaNorthing = abs(deltaNorthing) + epsilon\r\n        deltaEasting = deltaNorthing\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Convert_Geodetic_To_Polar_Stereographic converts geodetic coordinates (latitude and longitude) to\r\n     * Polar Stereographic coordinates (easting and northing), according to the current ellipsoid and Polar\r\n     * Stereographic projection parameters. If any errors occur, error code(s) are returned by the function, otherwise\r\n     * POLAR_NO_ERROR is returned.\r\n     *\r\n     * @param latitude  latitude, in radians\r\n     * @param longitude Longitude, in radians\r\n     * @return error code\r\n     */\r\n    fun convertGeodeticToPolarStereographic(latitude: Double, longitude: Double): Int {\r\n        var lat = latitude\r\n        var lon = longitude\r\n        var errorCode = NO_ERROR\r\n        /* Latitude out of range */\r\n        if (lat < -PI_OVER_2 || lat > PI_OVER_2) errorCode = errorCode or LAT_ERROR\r\n        /* Latitude and Origin Latitude in different hemispheres */\r\n        if (lat < 0 && southernHemisphere == 0.0) errorCode = errorCode or LAT_ERROR\r\n        /* Latitude and Origin Latitude in different hemispheres */\r\n        if (lat > 0 && southernHemisphere == 1.0) errorCode = errorCode or LAT_ERROR\r\n        /* Longitude out of range */\r\n        if (lon < -PI || lon > TWO_PI) errorCode = errorCode or LON_ERROR\r\n        /* no errors */\r\n        if (errorCode == NO_ERROR) {\r\n            if (abs(abs(lat) - PI_OVER_2) < 1.0e-10) {\r\n                easting = 0.0\r\n                northing = 0.0\r\n            } else {\r\n                if (southernHemisphere != 0.0) {\r\n                    lon *= -1.0\r\n                    lat *= -1.0\r\n                }\r\n                var dLam = lon - originLong\r\n                if (dLam > PI) dLam -= TWO_PI\r\n                if (dLam < -PI) dLam += TWO_PI\r\n                val sLat = sin(lat)\r\n                val esSin = es * sLat\r\n                val powEs = ((1.0 - esSin) / (1.0 + esSin)).pow(esOver2)\r\n                val t = tan(PI_Over_4 - lat / 2.0) / powEs\r\n                val rho = if (abs(abs(originLat) - PI_OVER_2) > 1.0e-10) amc * t / tc else twoA * t / e4\r\n                if (southernHemisphere != 0.0) {\r\n                    easting = -(rho * sin(dLam) - falseEasting)\r\n                    northing = rho * cos(dLam) + falseNorthing\r\n                } else easting = rho * sin(dLam) + falseEasting\r\n                northing = -rho * cos(dLam) + falseNorthing\r\n            }\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Convert_Polar_Stereographic_To_Geodetic converts Polar\r\n     * Stereographic coordinates (easting and northing) to geodetic\r\n     * coordinates (latitude and longitude) according to the current ellipsoid\r\n     * and Polar Stereographic projection Parameters. If any errors occur, the\r\n     * code(s) are returned by the function, otherwise POLAR_NO_ERROR\r\n     * is returned.\r\n     *\r\n     * @param Easting Easting (X), in meters\r\n     * @param Northing Northing (Y), in meters\r\n     * @return error code\r\n     */\r\n    fun convertPolarStereographicToGeodetic(Easting: Double, Northing: Double): Int {\r\n        var dy = 0.0\r\n        var dx = 0.0\r\n        var rho = 0.0\r\n        var tempPhi = 0.0\r\n        var errorCode = NO_ERROR\r\n        val minEasting = falseEasting - deltaEasting\r\n        val maxEasting = falseEasting + deltaEasting\r\n        val minNorthing = falseNorthing - deltaNorthing\r\n        val maxNorthing = falseNorthing + deltaNorthing\r\n        /* Easting out of range */\r\n        if (Easting > maxEasting || Easting < minEasting) errorCode = errorCode or EASTING_ERROR\r\n        /* Northing out of range */\r\n        if (Northing > maxNorthing || Northing < minNorthing) errorCode = errorCode or NORTHING_ERROR\r\n        if (errorCode == NO_ERROR) {\r\n            dy = Northing - falseNorthing\r\n            dx = Easting - falseEasting\r\n            /* Radius of point with origin of false easting, false northing */\r\n            rho = sqrt(dx * dx + dy * dy)\r\n            val deltaRadius = sqrt(deltaEasting * deltaEasting + deltaNorthing * deltaNorthing)\r\n            /* Point is outside of projection area */\r\n            if (rho > deltaRadius) errorCode = errorCode or RADIUS_ERROR\r\n        }\r\n        /* no errors */\r\n        if (errorCode == NO_ERROR) {\r\n            if (dy == 0.0 && dx == 0.0) {\r\n                latitude = PI_OVER_2\r\n                longitude = originLong\r\n            } else {\r\n                if (southernHemisphere != 0.0) {\r\n                    dy *= -1.0\r\n                    dx *= -1.0\r\n                }\r\n                val t = if (abs(abs(originLat) - PI_OVER_2) > 1.0e-10) rho * tc / amc else rho * e4 / twoA\r\n                var phi = PI_OVER_2 - 2.0 * atan(t)\r\n                while (abs(phi - tempPhi) > 1.0e-10) {\r\n                    tempPhi = phi\r\n                    val sinPhi = sin(phi)\r\n                    val esSin = es * sinPhi\r\n                    val powEs = ((1.0 - esSin) / (1.0 + esSin)).pow(esOver2)\r\n                    phi = PI_OVER_2 - 2.0 * atan(t * powEs)\r\n                }\r\n                latitude = phi\r\n                longitude = originLong + atan2(dx, -dy)\r\n                if (longitude > PI) longitude -= TWO_PI\r\n                else if (longitude < -PI) longitude += TWO_PI\r\n                /* force distorted values to 90, -90 degrees */\r\n                if (latitude > PI_OVER_2) latitude = PI_OVER_2\r\n                else if (latitude < -PI_OVER_2) latitude = -PI_OVER_2\r\n                /* force distorted values to 180, -180 degrees */\r\n                if (longitude > PI) longitude = PI else if (longitude < -PI) longitude = -PI\r\n            }\r\n            if (southernHemisphere != 0.0) {\r\n                latitude *= -1.0\r\n                longitude *= -1.0\r\n            }\r\n        }\r\n        return errorCode\r\n    }\r\n}","package earth.worldwind.geom.coords\r\n\r\nimport earth.worldwind.geom.Angle\r\nimport earth.worldwind.geom.Angle.Companion.radians\r\nimport kotlin.jvm.JvmStatic\r\n\r\n/**\r\n * This class holds a set of Transverse Mercator coordinates along with the\r\n * corresponding latitude and longitude.\r\n */\r\nclass TMCoord private constructor(val latitude: Angle, val longitude: Angle, val easting: Double, val northing: Double) {\r\n    companion object {\r\n        /**\r\n         * Create a set of Transverse Mercator coordinates from a pair of latitude and longitude,\r\n         * for the given [Globe] and projection parameters.\r\n         *\r\n         * @param latitude the latitude.\r\n         * @param longitude the longitude.\r\n         * @param aOrNull semi-major ellipsoid radius. If this and argument f are non-null and globe is null, will use the specified a and f.\r\n         * @param fOrNull ellipsoid flattening. If this and argument a are non-null and globe is null, will use the specified a and f.\r\n         * @param originLatitude the origin latitude.\r\n         * @param centralMeridian the central meridian longitude.\r\n         * @param falseEasting easting value at the center of the projection in meters.\r\n         * @param falseNorthing northing value at the center of the projection in meters.\r\n         * @param scale scaling factor.\r\n         * @return the corresponding [TMCoord].\r\n         * or the conversion to TM coordinates fails. If the globe is null conversion will default\r\n         * to using WGS84.\r\n         */\r\n        @JvmStatic\r\n        fun fromLatLon(\r\n            latitude: Angle, longitude: Angle, aOrNull: Double?, fOrNull: Double?,\r\n            originLatitude: Angle, centralMeridian: Angle, falseEasting: Double, falseNorthing: Double, scale: Double\r\n        ): TMCoord {\r\n            var a = aOrNull\r\n            var f = fOrNull\r\n            val converter = TMCoordConverter()\r\n            if (a == null || f == null) {\r\n                a = converter.a\r\n                f = converter.f\r\n            }\r\n            var err = converter.setTransverseMercatorParameters(\r\n                a, f, originLatitude.inRadians, centralMeridian.inRadians, falseEasting, falseNorthing, scale\r\n            )\r\n            if (err == TMCoordConverter.NO_ERROR) err = converter.convertGeodeticToTransverseMercator(latitude.inRadians, longitude.inRadians)\r\n            require(err == TMCoordConverter.NO_ERROR || err == TMCoordConverter.LON_WARNING) { \"TM Conversion Error\" }\r\n            return TMCoord(latitude, longitude, converter.easting, converter.northing)\r\n        }\r\n\r\n        /**\r\n         * Create a set of Transverse Mercator coordinates for the given [Globe],\r\n         * easting, northing and projection parameters.\r\n         *\r\n         * @param easting the easting distance value in meters.\r\n         * @param northing the northing distance value in meters.\r\n         * @param originLatitude the origin latitude [Angle].\r\n         * @param centralMeridian the central meridian longitude [Angle].\r\n         * @param falseEasting easting value at the center of the projection in meters.\r\n         * @param falseNorthing northing value at the center of the projection in meters.\r\n         * @param scale scaling factor.\r\n         * @return the corresponding [TMCoord].\r\n         * @throws IllegalArgumentException if the conversion to geodetic coordinates fails.\r\n         * If the globe is null conversion will default to using WGS84.\r\n         */\r\n        @JvmStatic\r\n        fun fromTM(\r\n            easting: Double, northing: Double, originLatitude: Angle, centralMeridian: Angle,\r\n            falseEasting: Double, falseNorthing: Double, scale: Double\r\n        ): TMCoord {\r\n            val converter = TMCoordConverter()\r\n            val a = converter.a\r\n            val f = converter.f\r\n            var err = converter.setTransverseMercatorParameters(\r\n                a, f, originLatitude.inRadians, centralMeridian.inRadians, falseEasting, falseNorthing, scale\r\n            )\r\n            if (err == TMCoordConverter.NO_ERROR) err = converter.convertTransverseMercatorToGeodetic(easting, northing)\r\n            require(err == TMCoordConverter.NO_ERROR || err == TMCoordConverter.LON_WARNING) { \"TM Conversion Error\" }\r\n            return TMCoord(converter.latitude.radians, converter.longitude.radians, easting, northing)\r\n        }\r\n    }\r\n}","package earth.worldwind.geom.coords\r\n\r\nimport kotlin.math.*\r\n\r\n/*\r\n * Converter used to translate Transverse Mercator coordinates to and from geodetic latitude and longitude.\r\n * Ported to Kotlin from the NGA GeoTrans code tranmerc.c and tranmerc.h\r\n */\r\ninternal class TMCoordConverter {\r\n    companion object {\r\n        const val NO_ERROR = 0x0000\r\n        private const val LAT_ERROR = 0x0001\r\n        private const val LON_ERROR = 0x0002\r\n        const val EASTING_ERROR = 0x0004\r\n        const val NORTHING_ERROR = 0x0008\r\n        private const val ORIGIN_LAT_ERROR = 0x0010\r\n        private const val CENT_MER_ERROR = 0x0020\r\n        private const val A_ERROR = 0x0040\r\n        private const val INV_F_ERROR = 0x0080\r\n        private const val SCALE_FACTOR_ERROR = 0x0100\r\n        const val LON_WARNING = 0x0200\r\n        private const val MAX_LAT = PI * 89.99 / 180.0 /* 90 degrees in radians */\r\n        private const val MAX_DELTA_LONG = PI * 90 / 180.0 /* 90 degrees in radians */\r\n        private const val MIN_SCALE_FACTOR = 0.3\r\n        private const val MAX_SCALE_FACTOR = 3.0\r\n    }\r\n\r\n    /* Ellipsoid Parameters, default to WGS 84  */\r\n    var a = 6378137.0 /* Semi-major axis of ellipsoid i meters */\r\n        private set\r\n    var f = 1 / 298.257223563 /* Flattening of ellipsoid  */\r\n        private set\r\n    private var es = 0.0066943799901413800 /* Eccentricity (0.08181919084262188000) squared */\r\n    private var ebs = 0.0067394967565869 /* Second Eccentricity squared */\r\n\r\n    /* Transverse_Mercator projection Parameters */\r\n    private var originLat = 0.0 /* Latitude of origin in radians */\r\n    private var originLong = 0.0 /* Longitude of origin in radians */\r\n    private var falseNorthing = 0.0 /* False northing in meters */\r\n    private var falseEasting = 0.0 /* False easting in meters */\r\n    private var scaleFactor = 1.0 /* Scale factor  */\r\n\r\n    /* Isometric to geodetic latitude parameters, default to WGS 84 */\r\n    private var ap = 6367449.1458008\r\n    private var bp = 16038.508696861\r\n    private var cp = 16.832613334334\r\n    private var dp = 0.021984404273757\r\n    private var ep = 3.1148371319283e-005\r\n\r\n    /* Maximum variance for easting and northing values for WGS 84. */\r\n    private var deltaEasting = 40000000.0\r\n    private var deltaNorthing = 40000000.0\r\n\r\n    /** Easting/X at the center of the projection */\r\n    var easting = 0.0\r\n        private set\r\n    /** Northing/Y at the center of the projection */\r\n    var northing = 0.0\r\n        private set\r\n    /** Latitude in radians. */\r\n    var latitude = 0.0\r\n        private set\r\n    /** Longitude in radians. */\r\n    var longitude = 0.0\r\n        private set\r\n\r\n    /**\r\n     * The function receives the ellipsoid parameters and Transverse Mercator\r\n     * projection parameters as inputs, and sets the corresponding state variables. If any errors occur, the error\r\n     * code(s) are returned by the function, otherwise NO_ERROR is returned.\r\n     *\r\n     * @param a                Semi-major axis of ellipsoid, in meters\r\n     * @param f                Flattening of ellipsoid\r\n     * @param latitude  Latitude in radians at the origin of the projection\r\n     * @param centralMeridian Longitude in radians at the center of the projection\r\n     * @param easting    Easting/X at the center of the projection\r\n     * @param northing   Northing/Y at the center of the projection\r\n     * @param scaleFactor     Projection scale factor\r\n     *\r\n     * @return error code\r\n     */\r\n    fun setTransverseMercatorParameters(\r\n        a: Double, f: Double, latitude: Double, centralMeridian: Double, easting: Double, northing: Double, scaleFactor: Double\r\n    ): Int {\r\n        var cm = centralMeridian\r\n        val invF = 1 / f\r\n        var errorCode = NO_ERROR\r\n        /* Semi-major axis must be greater than zero */\r\n        if (a <= 0.0) errorCode = errorCode or A_ERROR\r\n        /* Inverse flattening must be between 250 and 350 */\r\n        if (invF < 250 || invF > 350) errorCode = errorCode or INV_F_ERROR\r\n        /* origin latitude out of range */\r\n        if (latitude < -MAX_LAT || latitude > MAX_LAT) errorCode = errorCode or ORIGIN_LAT_ERROR\r\n        /* origin longitude out of range */\r\n        if (cm < -PI || cm > 2 * PI) errorCode = errorCode or CENT_MER_ERROR\r\n        if (scaleFactor < MIN_SCALE_FACTOR || scaleFactor > MAX_SCALE_FACTOR) {\r\n            errorCode = errorCode or SCALE_FACTOR_ERROR\r\n        }\r\n        /* no errors */\r\n        if (errorCode == NO_ERROR) {\r\n            this.a = a\r\n            this.f = f\r\n            originLat = 0.0\r\n            originLong = 0.0\r\n            falseNorthing = 0.0\r\n            falseEasting = 0.0\r\n            this.scaleFactor = 1.0\r\n\r\n            /* Eccentricity Squared */\r\n            es = 2 * this.f - this.f * this.f\r\n            /* Second Eccentricity Squared */\r\n            ebs = 1 / (1 - es) - 1\r\n            val b = this.a * (1 - this.f)\r\n            /*True meridional constants  */\r\n            val tn = (this.a - b) / (this.a + b)\r\n            val tn2 = tn * tn\r\n            val tn3 = tn2 * tn\r\n            val tn4 = tn3 * tn\r\n            val tn5 = tn4 * tn\r\n            ap = this.a * (1e0 - tn + 5e0 * (tn2 - tn3) / 4e0 + 81e0 * (tn4 - tn5) / 64e0)\r\n            bp = 3e0 * this.a * (tn - tn2 + (7e0 * (tn3 - tn4) / 8e0) + 55e0 * tn5 / 64e0) / 2e0\r\n            cp = 15e0 * this.a * (tn2 - tn3 + 3e0 * (tn4 - tn5) / 4e0) / 16.0\r\n            dp = 35e0 * this.a * (tn3 - tn4 + 11e0 * tn5 / 16e0) / 48e0\r\n            ep = 315e0 * this.a * (tn4 - tn5) / 512e0\r\n            convertGeodeticToTransverseMercator(MAX_LAT, MAX_DELTA_LONG)\r\n            deltaEasting = this.easting\r\n            deltaNorthing = this.northing\r\n            convertGeodeticToTransverseMercator(0.0, MAX_DELTA_LONG)\r\n            deltaEasting = this.easting\r\n            originLat = latitude\r\n            if (cm > PI) cm -= 2 * PI\r\n            originLong = cm\r\n            falseNorthing = northing\r\n            falseEasting = easting\r\n            this.scaleFactor = scaleFactor\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Convert_Geodetic_To_Transverse_Mercator converts geodetic (latitude and longitude) coordinates to\r\n     * Transverse Mercator projection (easting and northing) coordinates, according to the current ellipsoid and\r\n     * Transverse Mercator projection coordinates.  If any errors occur, the error code(s) are returned by the function,\r\n     * otherwise NO_ERROR is returned.\r\n     *\r\n     * @param latitude  Latitude in radians\r\n     * @param longitude Longitude in radians\r\n     *\r\n     * @return error code\r\n     */\r\n    fun convertGeodeticToTransverseMercator(latitude: Double, longitude: Double): Int {\r\n        var lon = longitude\r\n        var errorCode = NO_ERROR\r\n        /* Latitude out of range */\r\n        if (latitude < -MAX_LAT || latitude > MAX_LAT) errorCode = errorCode or LAT_ERROR\r\n        if (lon > PI) lon -= 2 * PI\r\n        if (lon < originLong - MAX_DELTA_LONG || lon > originLong + MAX_DELTA_LONG) {\r\n            val tempLong = if (lon < 0) lon + 2 * PI else lon\r\n            val tempOrigin = if (originLong < 0) originLong + 2 * PI else originLong\r\n            if (tempLong < tempOrigin - MAX_DELTA_LONG || tempLong > tempOrigin + MAX_DELTA_LONG)\r\n                errorCode = errorCode or LON_ERROR\r\n        }\r\n        /* no errors */\r\n        if (errorCode == NO_ERROR) {\r\n            /*\r\n             *  Delta Longitude\r\n             */\r\n            var dLam = lon - originLong\r\n            /* Distortion will result if Longitude is more than 9 degrees from the Central Meridian */\r\n            if (abs(dLam) > 9.0 * PI / 180) errorCode = errorCode or LON_WARNING\r\n            if (dLam > PI) dLam -= 2 * PI\r\n            if (dLam < -PI) dLam += 2 * PI\r\n            if (abs(dLam) < 2e-10) dLam = 0.0\r\n            val s = sin(latitude)\r\n            val c = cos(latitude)\r\n            val c2 = c * c\r\n            val c3 = c2 * c\r\n            val c5 = c3 * c2\r\n            val c7 = c5 * c2\r\n            val t = tan(latitude)\r\n            val tan2 = t * t\r\n            val tan3 = tan2 * t\r\n            val tan4 = tan3 * t\r\n            val tan5 = tan4 * t\r\n            val tan6 = tan5 * t\r\n            val eta = ebs * c2\r\n            val eta2 = eta * eta\r\n            val eta3 = eta2 * eta\r\n            val eta4 = eta3 * eta\r\n\r\n            /* radius of curvature in prime vertical */\r\n            val sn = a / sqrt(1 - es * sin(latitude).pow(2))\r\n\r\n            /* True Meridional Distances */\r\n            val tmd = (ap * latitude\r\n                    - bp * sin(2.0 * latitude)\r\n                    + cp * sin(4.0 * latitude)\r\n                    - dp * sin(6.0 * latitude)\r\n                    + ep * sin(8.0 * latitude))\r\n\r\n            /*  Origin  */\r\n            val tmdO = (ap * originLat\r\n                    - bp * sin(2.0 * originLat)\r\n                    + cp * sin(4.0 * originLat)\r\n                    - dp * sin(6.0 * originLat)\r\n                    + ep * sin(8.0 * originLat))\r\n\r\n            /* northing */\r\n            val t1 = (tmd - tmdO) * scaleFactor\r\n            val t2 = sn * s * c * scaleFactor / 2e0\r\n            val t3 = sn * s * c3 * scaleFactor * (5e0 - tan2 + 9e0 * eta + 4e0 * eta2) / 24e0\r\n            val t4 = sn * s * c5 * scaleFactor * (61e0 - 58e0 * tan2 + tan4 + 270e0 * eta - 330e0 * tan2 * eta + 445e0 * eta2 + 324e0 * eta3 - 680e0 * tan2 * eta2 + 88e0 * eta4 - 600e0 * tan2 * eta3 - 192e0 * tan2 * eta4) / 720e0\r\n            val t5 = sn * s * c7 * scaleFactor * (1385e0 - 3111e0 * tan2 + 543e0 * tan4 - tan6) / 40320e0\r\n            northing = falseNorthing + t1 + dLam.pow(2e0) * t2 + dLam.pow(4e0) * t3 + dLam.pow(6e0) * t4 + dLam.pow(8e0) * t5\r\n\r\n            /* Easting */\r\n            val t6 = sn * c * scaleFactor\r\n            val t7 = sn * c3 * scaleFactor * (1e0 - tan2 + eta) / 6e0\r\n            val t8 = sn * c5 * scaleFactor * ((5e0 - 18e0 * tan2 + tan4 + 14e0 * eta) - 58e0 * tan2 * eta + 13e0 * eta2 + 4e0 * eta3 - 64e0 * tan2 * eta2 - 24e0 * tan2 * eta3) / 120e0\r\n            val t9 = sn * c7 * scaleFactor * (61e0 - 479e0 * tan2 + 179e0 * tan4 - tan6) / 5040e0\r\n            easting = falseEasting + dLam * t6 + dLam.pow(3e0) * t7 + dLam.pow(5e0) * t8 + dLam.pow(7e0) * t9\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Convert_Transverse_Mercator_To_Geodetic converts Transverse Mercator projection (easting and\r\n     * northing) coordinates to geodetic (latitude and longitude) coordinates, according to the current ellipsoid and\r\n     * Transverse Mercator projection parameters.  If any errors occur, the error code(s) are returned by the function,\r\n     * otherwise NO_ERROR is returned.\r\n     *\r\n     * @param easting  Easting/X in meters\r\n     * @param northing Northing/Y in meters\r\n     *\r\n     * @return error code\r\n     */\r\n    fun convertTransverseMercatorToGeodetic(easting: Double, northing: Double): Int {\r\n        var errorCode = NO_ERROR\r\n        /* Easting out of range  */\r\n        if (easting < falseEasting - deltaEasting || easting > falseEasting + deltaEasting)\r\n            errorCode = errorCode or EASTING_ERROR\r\n        /* Northing out of range */\r\n        if (northing < falseNorthing - deltaNorthing || northing > falseNorthing + deltaNorthing)\r\n            errorCode = errorCode or NORTHING_ERROR\r\n        if (errorCode == NO_ERROR) {\r\n            /* True Meridional Distances for latitude of origin */\r\n            val tmdO = (ap * originLat\r\n                    - bp * sin(2.0 * originLat)\r\n                    + cp * sin(4.0 * originLat)\r\n                    - dp * sin(6.0 * originLat)\r\n                    + ep * sin(8.0 * originLat))\r\n\r\n            /*  Origin  */\r\n            val tmd = tmdO + (northing - falseNorthing) / scaleFactor\r\n\r\n            /* First Estimate */\r\n            var sr = a * (1e0 - es) / sqrt(1e0 - es * sin(0e0).pow(2)).pow(3)\r\n            var ftphi = tmd / sr\r\n            for (i in 0..4) {\r\n                val t10 = (ap * ftphi\r\n                        - bp * sin(2.0 * ftphi)\r\n                        + cp * sin(4.0 * ftphi)\r\n                        - dp * sin(6.0 * ftphi)\r\n                        + ep * sin(8.0 * ftphi))\r\n                sr = a * (1e0 - es) / sqrt(1e0 - es * sin(ftphi).pow(2)).pow(3)\r\n                ftphi += (tmd - t10) / sr\r\n            }\r\n\r\n            /* Radius of Curvature in the meridian */\r\n            sr = a * (1e0 - es) / sqrt(1e0 - es * sin(ftphi).pow(2)).pow(3)\r\n\r\n            /* Radius of Curvature in the meridian */\r\n            val sn = a / sqrt(1e0 - es * sin(ftphi).pow(2))\r\n\r\n            /* Sine Cosine terms */\r\n            val c = cos(ftphi)\r\n\r\n            /* Tangent Value  */\r\n            val t = tan(ftphi)\r\n            val tan2 = t * t\r\n            val tan4 = tan2 * tan2\r\n            val eta = ebs * c.pow(2)\r\n            val eta2 = eta * eta\r\n            val eta3 = eta2 * eta\r\n            val eta4 = eta3 * eta\r\n            var de = easting - falseEasting\r\n            if (abs(de) < 0.0001) de = 0.0\r\n\r\n            /* Latitude */\r\n            val t10 = t / (2e0 * sr * sn * scaleFactor.pow(2))\r\n            val t11 = t * (5e0 + 3e0 * tan2 + eta - 4e0 * eta.pow(2) - 9e0 * tan2 * eta) / (24e0 * sr * sn.pow(3) * scaleFactor.pow(4))\r\n            val t12 = (t * ((61e0 + 90e0 * tan2 + 46e0 * eta + 45e0 * tan4 - 252e0 * tan2 * eta - 3e0 * eta2 + 100e0\r\n                        * eta3) - 66e0 * tan2 * eta2 - (90e0 * tan4\r\n                        * eta) + 88e0 * eta4 + 225e0 * tan4 * eta2 + 84e0 * tan2 * eta3 - 192e0 * tan2 * eta4)\r\n                        / (720e0 * sr * sn.pow(5) * scaleFactor.pow(6)))\r\n            val t13 = t * (1385e0 + 3633e0 * tan2 + 4095e0 * tan4 + (1575e0 * t.pow(6))) / (40320e0 * sr * sn.pow(7) * scaleFactor.pow(8))\r\n            latitude = (ftphi - de.pow(2) * t10 + de.pow(4) * t11 - de.pow(6) * t12 + de.pow(8) * t13)\r\n            val t14 = 1e0 / (sn * c * scaleFactor)\r\n            val t15 = (1e0 + 2e0 * tan2 + eta) / (6e0 * sn.pow(3) * c * scaleFactor.pow(3))\r\n            val t16 = ((5e0 + 6e0 * eta + 28e0 * tan2 - 3e0 * eta2 + 8e0 * tan2 * eta + 24e0 * tan4 - 4e0\r\n                        * eta3) + 4e0 * tan2 * eta2 + (24e0 * tan2 * eta3)) / (120e0 * sn.pow(5) * c * scaleFactor.pow(5))\r\n            val t17 = (61e0 + 662e0 * tan2 + 1320e0 * tan4 + (720e0 * t.pow(6))) / (5040e0 * sn.pow(7) * c * scaleFactor.pow(7))\r\n\r\n            /* Difference in Longitude */\r\n            val dLam = de * t14 - de.pow(3) * t15 + de.pow(5) * t16 - de.pow(7) * t17\r\n\r\n            /* Longitude */\r\n            longitude = originLong + dLam\r\n            if (abs(latitude) > 90.0 * PI / 180.0) errorCode = errorCode or NORTHING_ERROR\r\n            if (longitude > PI) {\r\n                longitude -= 2 * PI\r\n                if (abs(longitude) > PI) errorCode = errorCode or EASTING_ERROR\r\n            }\r\n            if (abs(dLam) > 9.0 * PI / 180 * cos(latitude)) {\r\n                /* Distortion will result if Longitude is more than 9 degrees from the Central Meridian at the equator */\r\n                /* and decreases to 0 degrees at the poles */\r\n                /* As you move towards the poles, distortion will become more significant */\r\n                errorCode = errorCode or LON_WARNING\r\n            }\r\n            if (latitude > 1.0e10) errorCode = errorCode or LON_WARNING\r\n        }\r\n        return errorCode\r\n    }\r\n}\r\n","package earth.worldwind.geom.coords\r\n\r\nimport earth.worldwind.geom.Angle\r\nimport earth.worldwind.geom.Angle.Companion.radians\r\nimport kotlin.jvm.JvmStatic\r\n\r\n/**\r\n * This immutable class holds a set of UPS coordinates along with it's corresponding latitude and longitude.\r\n */\r\nclass UPSCoord private constructor(\r\n    val latitude: Angle, val longitude: Angle, val hemisphere: Hemisphere, val easting: Double, val northing: Double\r\n) {\r\n    companion object {\r\n        /**\r\n         * Create a set of UPS coordinates from a pair of latitude and longitude for the given `Globe`.\r\n         *\r\n         * @param latitude  the latitude.\r\n         * @param longitude the longitude.\r\n         *\r\n         * @return the corresponding [UPSCoord].\r\n         *\r\n         * @throws IllegalArgumentException if the conversion to UPS coordinates fails.\r\n         */\r\n        @JvmStatic\r\n        fun fromLatLon(latitude: Angle, longitude: Angle): UPSCoord {\r\n            val converter = UPSCoordConverter()\r\n            val err = converter.convertGeodeticToUPS(latitude.inRadians, longitude.inRadians)\r\n            require(err == UPSCoordConverter.NO_ERROR) { \"UPS Conversion Error\" }\r\n            return UPSCoord(latitude, longitude, converter.hemisphere, converter.easting, converter.northing)\r\n        }\r\n\r\n        /**\r\n         * Create a set of UPS coordinates for the given [Globe].\r\n         *\r\n         * @param hemisphere the hemisphere, either [Hemisphere.N] of [Hemisphere.S].\r\n         * @param easting    the easting distance in meters\r\n         * @param northing   the northing distance in meters.\r\n         *\r\n         * @return the corresponding [UPSCoord].\r\n         *\r\n         * @throws IllegalArgumentException if the conversion to UPS coordinates fails.\r\n         */\r\n        @JvmStatic\r\n        fun fromUPS(hemisphere: Hemisphere, easting: Double, northing: Double): UPSCoord {\r\n            val converter = UPSCoordConverter()\r\n            val err = converter.convertUPSToGeodetic(hemisphere, easting, northing)\r\n            require(err == UTMCoordConverter.NO_ERROR) { \"UTM Conversion Error\" }\r\n            return UPSCoord(\r\n                converter.latitude.radians, converter.longitude.radians, hemisphere, easting, northing\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun toString() = hemisphere.toString() + \" \" + easting + \"E\" + \" \" + northing + \"N\"\r\n}","package earth.worldwind.geom.coords\r\n\r\nimport kotlin.math.PI\r\n\r\n/**\r\n * Ported to Kotlin from the NGA GeoTrans ups.c and ups.h code\r\n */\r\ninternal class UPSCoordConverter {\r\n    companion object {\r\n        const val NO_ERROR = 0x0000\r\n        private const val LAT_ERROR = 0x0001\r\n        private const val LON_ERROR = 0x0002\r\n        const val HEMISPHERE_ERROR = 0x0004\r\n        const val EASTING_ERROR = 0x0008\r\n        const val NORTHING_ERROR = 0x0010\r\n        private const val MAX_LAT = PI * 90 / 180.0 // 90 degrees in radians\r\n\r\n        // Min and max latitude values accepted\r\n        private const val MIN_NORTH_LAT = 72 * PI / 180.0 // 83.5\r\n        private const val MIN_SOUTH_LAT = -72 * PI / 180.0 // -79.5\r\n        private const val MAX_ORIGIN_LAT = 81.114528 * PI / 180.0\r\n        private const val MIN_EAST_NORTH = 0.0\r\n        private const val MAX_EAST_NORTH = 4000000.0\r\n    }\r\n\r\n    private var originLatitude = MAX_ORIGIN_LAT /*set default = North hemisphere */\r\n    private val originLongitude = 0.0\r\n\r\n    /* Ellipsoid Parameters, default to WGS 84  */\r\n    private val a = 6378137.0 /* Semi-major axis of ellipsoid in meters   */\r\n    private val f = 1 / 298.257223563 /* Flattening of ellipsoid  */\r\n    private val falseEasting = 2000000.0\r\n    private val falseNorthing = 2000000.0\r\n\r\n    var hemisphere = Hemisphere.N\r\n        private set\r\n    /** easting/X in meters */\r\n    var easting = 0.0\r\n        private set\r\n    /** northing/Y in meters */\r\n    var northing = 0.0\r\n        private set\r\n    /** latitude in radians.*/\r\n    var latitude = 0.0\r\n        private set\r\n    /** longitude in radians.*/\r\n    var longitude = 0.0\r\n        private set\r\n\r\n    private val polarConverter = PolarCoordConverter()\r\n\r\n    /**\r\n     * The function convertGeodeticToUPS converts geodetic (latitude and longitude) coordinates to UPS (hemisphere,\r\n     * easting, and northing) coordinates, according to the current ellipsoid parameters. If any errors occur, the error\r\n     * code(s) are returned by the function, otherwise UPS_NO_ERROR is returned.\r\n     *\r\n     * @param latitude  latitude in radians\r\n     * @param longitude longitude in radians\r\n     *\r\n     * @return error code\r\n     */\r\n    fun convertGeodeticToUPS(latitude: Double, longitude: Double): Int {\r\n        /* latitude out of range */\r\n        if (latitude < -MAX_LAT || latitude > MAX_LAT) return LAT_ERROR\r\n        if (latitude < 0 && latitude > MIN_SOUTH_LAT) return LAT_ERROR\r\n        if (latitude >= 0 && latitude < MIN_NORTH_LAT) return LAT_ERROR\r\n        /* slam out of range */\r\n        if (longitude < -PI || longitude > 2 * PI) return LON_ERROR\r\n        if (latitude < 0) {\r\n            originLatitude = -MAX_ORIGIN_LAT\r\n            hemisphere = Hemisphere.S\r\n        } else {\r\n            originLatitude = MAX_ORIGIN_LAT\r\n            hemisphere = Hemisphere.N\r\n        }\r\n        polarConverter.setPolarStereographicParameters(a, f, originLatitude, originLongitude, 0.0, 0.0)\r\n        polarConverter.convertGeodeticToPolarStereographic(latitude, longitude)\r\n        easting = falseEasting + polarConverter.easting\r\n        northing = falseNorthing + if (Hemisphere.S == hemisphere) - polarConverter.northing else polarConverter.northing\r\n        return NO_ERROR\r\n    }\r\n\r\n    /**\r\n     * The function Convert_UPS_To_Geodetic converts UPS (hemisphere, easting, and northing) coordinates to geodetic\r\n     * (latitude and longitude) coordinates according to the current ellipsoid parameters.  If any errors occur, the\r\n     * error code(s) are returned by the function, otherwise UPS_NO_ERROR is returned.\r\n     *\r\n     * @param hemisphere hemisphere, either [Hemisphere.N] of [Hemisphere.S].\r\n     * @param easting    easting/X in meters\r\n     * @param northing   northing/Y in meters\r\n     *\r\n     * @return error code\r\n     */\r\n    fun convertUPSToGeodetic(hemisphere: Hemisphere?, easting: Double, northing: Double): Int{\r\n        var errorCode = NO_ERROR\r\n        if (Hemisphere.N != hemisphere && Hemisphere.S != hemisphere) errorCode = errorCode or HEMISPHERE_ERROR\r\n        if (easting < MIN_EAST_NORTH || easting > MAX_EAST_NORTH) errorCode = errorCode or EASTING_ERROR\r\n        if (northing < MIN_EAST_NORTH || northing > MAX_EAST_NORTH) errorCode = errorCode or NORTHING_ERROR\r\n        if (Hemisphere.N == hemisphere) originLatitude = MAX_ORIGIN_LAT\r\n        if (Hemisphere.S == hemisphere) originLatitude = -MAX_ORIGIN_LAT\r\n        /*  no errors   */\r\n        if (errorCode == NO_ERROR) {\r\n            polarConverter.setPolarStereographicParameters(a, f, originLatitude, originLongitude, falseEasting, falseNorthing)\r\n            polarConverter.convertPolarStereographicToGeodetic(easting, northing)\r\n            latitude = polarConverter.latitude\r\n            longitude = polarConverter.longitude\r\n            if (latitude < 0 && latitude > MIN_SOUTH_LAT) errorCode = errorCode or LAT_ERROR\r\n            if (latitude >= 0 && latitude < MIN_NORTH_LAT) errorCode = errorCode or LAT_ERROR\r\n        }\r\n        return errorCode\r\n    }\r\n}","package earth.worldwind.geom.coords\r\n\r\nimport earth.worldwind.geom.Angle\r\nimport earth.worldwind.geom.Angle.Companion.radians\r\nimport kotlin.jvm.JvmStatic\r\nimport kotlin.math.roundToInt\r\n\r\n/**\r\n * This immutable class holds a set of UTM coordinates along with it's corresponding latitude and longitude.\r\n */\r\nclass UTMCoord private constructor(\r\n    val latitude: Angle, val longitude: Angle, val zone: Int, val hemisphere: Hemisphere, val easting: Double, val northing: Double\r\n) {\r\n    companion object {\r\n        /**\r\n         * Create a set of UTM coordinates from a pair of latitude and longitude for the given `Globe`.\r\n         *\r\n         * @param latitude  the latitude.\r\n         * @param longitude the longitude.\r\n         *\r\n         * @return the corresponding [UTMCoord].\r\n         *\r\n         * @throws IllegalArgumentException if the conversion to UTM coordinates fails.\r\n         */\r\n        @JvmStatic\r\n        fun fromLatLon(latitude: Angle, longitude: Angle): UTMCoord {\r\n            val converter = UTMCoordConverter()\r\n            val err = converter.convertGeodeticToUTM(latitude.inRadians, longitude.inRadians)\r\n            require(err == UTMCoordConverter.NO_ERROR) { \"UTM Conversion Error\" }\r\n            return UTMCoord(\r\n                latitude, longitude, converter.zone, converter.hemisphere, converter.easting, converter.northing\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Create a set of UTM coordinates for the given [Globe].\r\n         *\r\n         * @param zone       the UTM zone - 1 to 60.\r\n         * @param hemisphere the hemisphere, either [Hemisphere.N] of [Hemisphere.S].\r\n         * @param easting    the easting distance in meters\r\n         * @param northing   the northing distance in meters.\r\n         *\r\n         * @return the corresponding [UTMCoord].\r\n         *\r\n         * @throws IllegalArgumentException if the conversion to UTM coordinates fails.\r\n         */\r\n        @JvmStatic\r\n        fun fromUTM(\r\n            zone: Int, hemisphere: Hemisphere, easting: Double, northing: Double\r\n        ): UTMCoord {\r\n            val converter = UTMCoordConverter()\r\n            val err = converter.convertUTMToGeodetic(zone, hemisphere, easting, northing)\r\n            require(err == UTMCoordConverter.NO_ERROR) { \"UTM Conversion Error\" }\r\n            return UTMCoord(\r\n                converter.latitude.radians, converter.longitude.radians, zone, hemisphere, easting, northing\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun toString() = zone.toString() + \" \" + hemisphere + \" \" + easting.roundToInt() + \"E\" + \" \" + northing.roundToInt() + \"N\"\r\n}","package earth.worldwind.geom.coords\r\n\r\nimport earth.worldwind.geom.Angle.Companion.radians\r\nimport kotlin.math.PI\r\n\r\n/*\r\n * Converter used to translate UTM coordinates to and from geodetic latitude and longitude.\r\n * Ported to Kotlin from the NGA GeoTrans utm.c and utm.h\r\n */\r\ninternal class UTMCoordConverter {\r\n    companion object {\r\n        const val NO_ERROR = 0x0000\r\n        const val LAT_ERROR = 0x0001\r\n        const val LON_ERROR = 0x0002\r\n        const val EASTING_ERROR = 0x0004\r\n        const val NORTHING_ERROR = 0x0008\r\n        const val ZONE_ERROR = 0x0010\r\n        const val HEMISPHERE_ERROR = 0x0020\r\n        const val ZONE_OVERRIDE_ERROR = 0x0040\r\n        const val TM_ERROR = 0x0200\r\n        private const val MIN_LAT = -82 * PI / 180.0 /* -82 degrees in radians    */\r\n        private const val MAX_LAT = 86 * PI / 180.0 /* 86 degrees in radians     */\r\n        private const val MIN_EASTING = 100000\r\n        private const val MAX_EASTING = 900000\r\n        private const val MIN_NORTHING = 0\r\n        private const val MAX_NORTHING = 10000000\r\n    }\r\n\r\n    private val a = 6378137.0 /* Semi-major axis of ellipsoid in meters  */\r\n    private val f = 1 / 298.257223563 /* Flattening of ellipsoid                 */\r\n    private val override = 0 /* Zone override flag                      */\r\n    private var centralMeridian = 0.0\r\n\r\n    var hemisphere = Hemisphere.N\r\n        private set\r\n    /** Easting (X) in meters */\r\n    var easting = 0.0\r\n        private set\r\n    /** Northing (Y) in meters */\r\n    var northing = 0.0\r\n        private set\r\n    /** UTM zone */\r\n    var zone = 0\r\n        private set\r\n    /** Latitude in radians. */\r\n    var latitude = 0.0\r\n        private set\r\n    /** Longitude in radians.*/\r\n    var longitude = 0.0\r\n        private set\r\n\r\n    /**\r\n     * The function Convert_Geodetic_To_UTM converts geodetic (latitude and longitude) coordinates to UTM projection\r\n     * (zone, hemisphere, easting and northing) coordinates according to the current ellipsoid and UTM zone override\r\n     * parameters.  If any errors occur, the error code(s) are returned by the function, otherwise UTM_NO_ERROR is\r\n     * returned.\r\n     *\r\n     * @param latitude  Latitude in radians\r\n     * @param longitude Longitude in radians\r\n     *\r\n     * @return error code\r\n     */\r\n    fun convertGeodeticToUTM(latitude: Double, longitude: Double): Int {\r\n        var lon = longitude\r\n        var errorCode = NO_ERROR\r\n        val originLatitude = 0.0\r\n        val falseEasting = 500000.0\r\n        var falseNorthing = 0.0\r\n        val scale = 0.9996\r\n        /* Latitude out of range */\r\n        if (latitude < MIN_LAT || latitude > MAX_LAT) errorCode = errorCode or LAT_ERROR\r\n        /* Longitude out of range */\r\n        if (lon < -PI || lon > 2 * PI) errorCode = errorCode or LON_ERROR\r\n        /* no errors */\r\n        if (errorCode == NO_ERROR) {\r\n            if (lon < 0) lon += 2 * PI + 1.0e-10\r\n            val latDegrees = (latitude * 180.0 / PI).toInt()\r\n            val lonDegrees = (lon * 180.0 / PI).toInt()\r\n            var tempZone = (if (lon < PI) 31 + lon * 180.0 / PI / 6.0 else lon * 180.0 / PI / 6.0 - 29).toInt()\r\n            if (tempZone > 60) tempZone = 1\r\n            /* UTM special cases */\r\n            if (latDegrees in 56..63 && lonDegrees > -1 && lonDegrees < 3) tempZone = 31\r\n            if (latDegrees in 56..63 && lonDegrees > 2 && lonDegrees < 12) tempZone = 32\r\n            if (latDegrees > 71 && lonDegrees > -1 && lonDegrees < 9) tempZone = 31\r\n            if (latDegrees > 71 && lonDegrees > 8 && lonDegrees < 21) tempZone = 33\r\n            if (latDegrees > 71 && lonDegrees > 20 && lonDegrees < 33) tempZone = 35\r\n            if (latDegrees > 71 && lonDegrees > 32 && lonDegrees < 42) tempZone = 37\r\n            if (override != 0) {\r\n                if (tempZone == 1 && override == 60) tempZone = override\r\n                else if (tempZone == 60 && override == 1) tempZone = override\r\n                else if (tempZone - 1 <= override && override <= tempZone + 1) tempZone = override\r\n                else errorCode = ZONE_OVERRIDE_ERROR\r\n            }\r\n            if (errorCode == NO_ERROR) {\r\n                centralMeridian = if (tempZone >= 31) (6 * tempZone - 183) * PI / 180.0 else (6 * tempZone + 177) * PI / 180.0\r\n                zone = tempZone\r\n                if (latitude < 0) {\r\n                    falseNorthing = 10000000.0\r\n                    hemisphere = Hemisphere.S\r\n                } else hemisphere = Hemisphere.N\r\n                try {\r\n                    val tm = TMCoord.fromLatLon(\r\n                        latitude.radians, lon.radians, a, f, originLatitude.radians,\r\n                        centralMeridian.radians, falseEasting, falseNorthing, scale\r\n                    )\r\n                    easting = tm.easting\r\n                    northing = tm.northing\r\n                    if (easting < MIN_EASTING || easting > MAX_EASTING) errorCode = EASTING_ERROR\r\n                    if (northing < MIN_NORTHING || northing > MAX_NORTHING) errorCode = errorCode or NORTHING_ERROR\r\n                } catch (e: Exception) {\r\n                    errorCode = TM_ERROR\r\n                }\r\n            }\r\n        }\r\n        return errorCode\r\n    }\r\n\r\n    /**\r\n     * The function Convert_UTM_To_Geodetic converts UTM projection (zone, hemisphere, easting and northing) coordinates\r\n     * to geodetic(latitude and  longitude) coordinates, according to the current ellipsoid parameters.  If any errors\r\n     * occur, the error code(s) are returned by the function, otherwise UTM_NO_ERROR is returned.\r\n     *\r\n     * @param zone       UTM zone.\r\n     * @param hemisphere The coordinate hemisphere, either [Hemisphere.N] of [Hemisphere.S].\r\n     * @param easting    easting (X) in meters.\r\n     * @param northing   Northing (Y) in meters.\r\n     *\r\n     * @return error code.\r\n     */\r\n    fun convertUTMToGeodetic(zone: Int, hemisphere: Hemisphere, easting: Double, northing: Double): Int {\r\n        var errorCode = NO_ERROR\r\n        val originLatitude = 0.0\r\n        val falseEasting = 500000.0\r\n        var falseNorthing = 0.0\r\n        val scale = 0.9996\r\n        if (zone < 1 || zone > 60) errorCode = errorCode or ZONE_ERROR\r\n        if (hemisphere != Hemisphere.S && hemisphere != Hemisphere.N) errorCode = errorCode or HEMISPHERE_ERROR\r\n        if (northing < MIN_NORTHING || northing > MAX_NORTHING) errorCode = errorCode or NORTHING_ERROR\r\n        /* no errors */\r\n        if (errorCode == NO_ERROR) {\r\n            centralMeridian = if (zone >= 31) (6 * zone - 183) * PI / 180.0 else (6 * zone + 177) * PI / 180.0\r\n            if (hemisphere == Hemisphere.S) falseNorthing = 10000000.0\r\n            try {\r\n                val tm = TMCoord.fromTM(\r\n                    easting, northing,\r\n                    originLatitude.radians, centralMeridian.radians,\r\n                    falseEasting, falseNorthing, scale\r\n                )\r\n                latitude = tm.latitude.inRadians\r\n                longitude = tm.longitude.inRadians\r\n                /* Latitude out of range */\r\n                if (latitude < MIN_LAT || latitude > MAX_LAT) errorCode = errorCode or NORTHING_ERROR\r\n            } catch (e: Exception) {\r\n                errorCode = TM_ERROR\r\n            }\r\n        }\r\n        return errorCode\r\n    }\r\n}","package earth.worldwind.globe\n\nimport earth.worldwind.geom.*\nimport earth.worldwind.globe.elevation.ElevationModel\nimport earth.worldwind.globe.projection.GeographicProjection\nimport kotlin.math.sin\nimport kotlin.math.sqrt\n\n/**\n * Planet or celestial object approximated by a reference ellipsoid and elevation models. Globe expresses its\n * ellipsoidal parameters and elevation values in meters.\n */\nopen class Globe(\n    /**\n     * The globe's reference ellipsoid defining the globe's equatorial radius and polar radius.\n     */\n    var ellipsoid: Ellipsoid,\n    /**\n     * Indicates the geographic projection used by this globe. The projection specifies this globe's Cartesian\n     * coordinate system.\n     */\n    var projection: GeographicProjection\n) {\n    /**\n     * Represents the elevations for an area, often but not necessarily the whole globe.\n     */\n    var elevationModel = ElevationModel()\n    /**\n     * Indicates the radius in meters of the globe's ellipsoid at the equator.\n     */\n    val equatorialRadius get() = ellipsoid.semiMajorAxis\n    /**\n     * Indicates the radius in meters of the globe's ellipsoid at the poles.\n     */\n    val polarRadius get() = ellipsoid.semiMinorAxis\n    /**\n     * Indicates the eccentricity squared parameter of the globe's ellipsoid. This is equivalent to `2*f -\n     * f*f`, where `f` is the ellipsoid's flattening parameter.\n     */\n    val eccentricitySquared get() = ellipsoid.eccentricitySquared\n    /**\n     * Indicates whether this is a 2D globe.\n     */\n    val is2D get() = projection.is2D\n\n    /**\n     * Indicates the radius in meters of the globe's ellipsoid at a specified location.\n     *\n     * @param latitude  the location's latitude\n     * @param longitude the location's longitude\n     *\n     * @return the radius in meters of the globe's ellipsoid at the specified location\n     */\n    @Suppress(\"UNUSED_PARAMETER\")\n    fun getRadiusAt(latitude: Angle, longitude: Angle): Double {\n        // The radius for an ellipsoidal globe is a function of its latitude. The following solution was derived by\n        // observing that the length of the ellipsoidal point at the specified latitude and longitude indicates the\n        // radius at that location. The formula for the length of the ellipsoidal point was then converted into the\n        // simplified form below.\n        val sinLat = sin(latitude.inRadians)\n        val ec2 = ellipsoid.eccentricitySquared\n        val rpm = ellipsoid.semiMajorAxis / sqrt(1 - ec2 * sinLat * sinLat)\n        return rpm * sqrt(1 + (ec2 * ec2 - 2 * ec2) * sinLat * sinLat)\n    }\n\n    /**\n     * Converts a geographic position to Cartesian coordinates. This globe's projection specifies the Cartesian\n     * coordinate system.\n     *\n     * @param latitude  the position's latitude\n     * @param longitude the position's longitude\n     * @param altitude  the position's altitude in meters\n     * @param result    a pre-allocated [Vec3] in which to store the computed X, Y and Z Cartesian coordinates\n     *\n     * @return the result argument, set to the computed Cartesian coordinates\n     */\n    fun geographicToCartesian(latitude: Angle, longitude: Angle, altitude: Double, result: Vec3) =\n        projection.geographicToCartesian(this, latitude, longitude, altitude, result)\n\n    fun geographicToCartesianNormal(latitude: Angle, longitude: Angle, result: Vec3) =\n        projection.geographicToCartesianNormal(this, latitude, longitude, result)\n\n    fun geographicToCartesianTransform(latitude: Angle, longitude: Angle, altitude: Double, result: Matrix4) =\n        projection.geographicToCartesianTransform(this, latitude, longitude, altitude, result)\n\n    fun geographicToCartesianGrid(\n        sector: Sector, numLat: Int, numLon: Int, height: FloatArray?, verticalExaggeration: Float,\n        origin: Vec3?, result: FloatArray, offset: Int, rowStride: Int\n    ) = projection.geographicToCartesianGrid(\n        this, sector, numLat, numLon, height, verticalExaggeration,\n        origin, result, offset, rowStride\n    )\n\n    fun geographicToCartesianBorder(\n        sector: Sector, numLat: Int, numLon: Int, height: Float, origin: Vec3, result: FloatArray\n    ) = projection.geographicToCartesianBorder(this, sector, numLat, numLon, height, origin, result)\n\n    /**\n     * Converts a Cartesian point to a geographic position. This globe's projection specifies the Cartesian coordinate\n     * system.\n     *\n     * @param x      the Cartesian point's X component\n     * @param y      the Cartesian point's Y component\n     * @param z      the Cartesian point's Z component\n     * @param result a pre-allocated [Position] in which to store the computed geographic position\n     *\n     * @return the result argument, set to the computed geographic position\n     */\n    fun cartesianToGeographic(x: Double, y: Double, z: Double, result: Position) =\n        projection.cartesianToGeographic(this, x, y, z, result)\n\n    fun cartesianToLocalTransform(x: Double, y: Double, z: Double, result: Matrix4) =\n        projection.cartesianToLocalTransform(this, x, y, z, result)\n\n    /**\n     * Indicates the distance to the globe's horizon from a specified height above the globe's ellipsoid. The result of\n     * this method is undefined if the height is negative.\n     *\n     * @param height the viewer's height above the globe's ellipsoid in meters\n     *\n     * @return the horizon distance in meters\n     */\n    fun horizonDistance(height: Double) = if (height > 0.0) sqrt(height * (2 * ellipsoid.semiMajorAxis + height)) else 0.0\n\n    /**\n     * Computes the first intersection of this globe with a specified line. The line is interpreted as a ray;\n     * intersection points behind the line's origin are ignored.\n     *\n     * @param line   the line to intersect with this globe\n     * @param result a pre-allocated [Vec3] in which to return the computed point\n     *\n     * @return true if the ray intersects the globe, otherwise false\n     */\n    fun intersect(line: Line, result: Vec3) = projection.intersect(this, line, result)\n\n    /**\n     * Determine terrain altitude in specified geographic point from elevation model\n     *\n     * @param latitude  location latitude\n     * @param longitude location longitude\n     * @param retrieve  retrieve the most detailed elevation data instead of using first available cached value\n     *\n     * @return Elevation in meters in specified location\n     */\n    fun getElevation(latitude: Angle, longitude: Angle, retrieve: Boolean = false) =\n        elevationModel.getHeight(latitude, longitude, retrieve).toDouble()\n\n    /**\n     * Get absolute position with terrain elevation at specified coordinates\n     *\n     * @param latitude Specified latitude\n     * @param longitude Specified longitude\n     *\n     * @return Absolute position with terrain elevation\n     */\n    fun getAbsolutePosition(latitude: Angle, longitude: Angle) =\n        Position(latitude, longitude, getElevation(latitude, longitude, retrieve = true))\n\n    /**\n     * Get absolute position for specified position and specified altitude mode\n     *\n     * @param position Specified position\n     * @param altitudeMode Specified altitude mode\n     *\n     * @return Absolute position for specified altitude mode\n     */\n    fun getAbsolutePosition(position: Position, altitudeMode: AltitudeMode) = when (altitudeMode) {\n        AltitudeMode.CLAMP_TO_GROUND -> getAbsolutePosition(position.latitude, position.longitude)\n        AltitudeMode.RELATIVE_TO_GROUND -> getAbsolutePosition(position.latitude, position.longitude).apply {\n            altitude += position.altitude\n        }\n        else -> Position(position)\n    }\n\n}","package earth.worldwind.globe.elevation\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.globe.elevation.coverage.ElevationCoverage\nimport kotlinx.datetime.Instant\n\nopen class ElevationModel(): Iterable<ElevationCoverage> {\n    protected val coverages = mutableListOf<ElevationCoverage>()\n    val timestamp: Instant get() {\n        var maxTimestamp = Instant.DISTANT_PAST\n        for (coverage in coverages) {\n            val timestamp = coverage.timestamp\n            if (maxTimestamp < timestamp) maxTimestamp = timestamp\n        }\n        return maxTimestamp\n    }\n    val count get() = coverages.size\n\n    constructor(model: ElevationModel): this() { addAllCoverages(model) }\n\n    constructor(iterable: Iterable<ElevationCoverage>): this() { for (coverage in iterable) addCoverage(coverage) }\n\n    fun invalidate() = coverages.forEach { coverage -> coverage.invalidateTiles() }\n\n    fun getCoverageNamed(name: String) = coverages.firstOrNull { coverage -> coverage.displayName == name }\n\n    fun getCoverageWithProperty(key: Any, value: Any) = coverages.firstOrNull { coverage ->\n        coverage.hasUserProperty(key) && coverage.getUserProperty(key) == value\n    }\n\n    fun addCoverage(coverage: ElevationCoverage) = !coverages.contains(coverage) && coverages.add(coverage)\n\n    fun addAllCoverages(model: ElevationModel): Boolean {\n        val thatList = model.coverages\n        //coverages.ensureCapacity(thatList.size)\n        var changed = false\n        for (thatCoverage in thatList) changed = changed or addCoverage(thatCoverage)\n        return changed\n    }\n\n    fun removeCoverage(coverage: ElevationCoverage) = coverages.remove(coverage)\n\n    fun removeAllCoverages(model: ElevationModel) = coverages.removeAll(model.coverages)\n\n    fun clearCoverages() = coverages.clear()\n\n    override fun iterator() = coverages.iterator()\n\n    fun getHeight(latitude: Angle, longitude: Angle, retrieve: Boolean): Float {\n        // coverages composite from fine to coarse\n        return coverages.asReversed().firstNotNullOfOrNull { it.getHeight(latitude, longitude, retrieve) } ?: 0f\n    }\n\n    fun getHeightGrid(gridSector: Sector, gridWidth: Int, gridHeight: Int, result: FloatArray) {\n        // coverages composite from coarse to fine\n        for (coverage in coverages) coverage.getHeightGrid(gridSector, gridWidth, gridHeight, result)\n    }\n\n    fun getHeightLimits(sector: Sector, result: FloatArray) {\n        // coverage order is irrelevant\n        for (coverage in coverages) coverage.getHeightLimits(sector, result)\n    }\n}","package earth.worldwind.globe.elevation.coverage\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Sector\nimport kotlinx.datetime.Clock\n\nabstract class AbstractElevationCoverage: ElevationCoverage {\n    override var displayName: String? = null\n    override var isEnabled = true\n        set(value) {\n            field = value\n            updateTimestamp()\n        }\n    override var timestamp = Clock.System.now()\n        protected set\n    private var userProperties: MutableMap<Any, Any>? = null\n\n    protected fun updateTimestamp() { timestamp = Clock.System.now() }\n\n    override fun getUserProperty(key: Any) = userProperties?.get(key)\n\n    override fun putUserProperty(key: Any, value: Any): Any? {\n        val userProperties = userProperties ?: mutableMapOf<Any, Any>().also { userProperties = it }\n        return userProperties.put(key, value)\n    }\n\n    override fun removeUserProperty(key: Any) = userProperties?.remove(key)\n\n    override fun hasUserProperty(key: Any) = userProperties?.containsKey(key) == true\n\n    override fun getHeight(latitude: Angle, longitude: Angle, retrieve: Boolean): Float? {\n        return if (isEnabled) doGetHeight(latitude, longitude, retrieve) else null\n    }\n\n    override fun getHeightGrid(gridSector: Sector, gridWidth: Int, gridHeight: Int, result: FloatArray) {\n        if (isEnabled) doGetHeightGrid(gridSector, gridWidth, gridHeight, result)\n    }\n\n    override fun getHeightLimits(sector: Sector, result: FloatArray) {\n        if (isEnabled) doGetHeightLimits(sector, result)\n    }\n\n    protected abstract fun doGetHeight(latitude: Angle, longitude: Angle, retrieve: Boolean): Float?\n\n    protected abstract fun doGetHeightGrid(gridSector: Sector, gridWidth: Int, gridHeight: Int, result: FloatArray)\n\n    protected abstract fun doGetHeightLimits(sector: Sector, result: FloatArray)\n}","package earth.worldwind.globe.elevation.coverage\n\nimport earth.worldwind.WorldWind\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.TileMatrix\nimport earth.worldwind.geom.TileMatrixSet\nimport earth.worldwind.globe.elevation.ElevationTileFactory\nimport earth.worldwind.util.*\nimport earth.worldwind.util.Logger.INFO\nimport earth.worldwind.util.Logger.log\nimport earth.worldwind.util.format.format\nimport earth.worldwind.util.math.fract\nimport earth.worldwind.util.math.mod\nimport kotlin.math.ceil\nimport kotlin.math.floor\nimport kotlin.time.Duration.Companion.seconds\n\nabstract class AbstractTiledElevationCoverage(\n    tileMatrixSet: TileMatrixSet, tileFactory: ElevationTileFactory,\n): AbstractElevationCoverage() {\n    companion object {\n        protected const val GET_HEIGHT_LIMIT_SAMPLES = 8\n    }\n\n    var tileMatrixSet: TileMatrixSet = tileMatrixSet\n        set(value) {\n            field = value\n            invalidateTiles()\n        }\n    var tileFactory: ElevationTileFactory = tileFactory\n        set(value) {\n            field = value\n            invalidateTiles()\n        }\n    /**\n     * Controls how many concurrent tile requests are allowed for this coverage.\n     */\n    var retrievalQueueSize = 4\n    /**\n     * The list of elevation retrievals in progress.\n     */\n    protected val currentRetrievals = mutableSetOf<Long>()\n    protected val coverageCache = LruMemoryCache<Long, ShortArray>(1024 * 1024 * 8)\n    protected var isRetrievalEnabled = false\n    protected val absentResourceList = AbsentResourceList<Long>(3, 5.seconds)\n\n    init { log(INFO, \"Coverage cache initialized %.0f KB\".format(coverageCache.capacity / 1024.0)) }\n\n    override fun invalidateTiles() {\n        currentRetrievals.clear()\n        coverageCache.clear()\n        absentResourceList.clear()\n        updateTimestamp()\n    }\n\n    override fun doGetHeight(latitude: Angle, longitude: Angle, retrieve: Boolean): Float? {\n        if (!tileMatrixSet.sector.contains(latitude, longitude)) return null // no coverage in the specified location\n        val targetIdx = tileMatrixSet.entries.size - 1 // retrieve height from last available matrix\n        for (idx in targetIdx downTo 0) {\n            // enable retrieval of the last and the first matrix\n            isRetrievalEnabled = retrieve && (idx == targetIdx || idx == 0)\n            val tileMatrix = tileMatrixSet.entries[idx]\n            val deltaLat = tileMatrix.sector.deltaLatitude.inDegrees / tileMatrix.matrixHeight\n            val deltaLon = tileMatrix.sector.deltaLongitude.inDegrees / tileMatrix.matrixWidth\n            val row = floor((tileMatrix.sector.maxLatitude.inDegrees - latitude.inDegrees) / deltaLat).toInt()\n            val col = floor((longitude.inDegrees - tileMatrix.sector.minLongitude.inDegrees) / deltaLon).toInt()\n            fetchTileArray(tileMatrix, row, col)?.let {\n                val maxLat = tileMatrix.sector.maxLatitude.inDegrees - deltaLat * row\n                val minLon = tileMatrix.sector.minLongitude.inDegrees + deltaLon * col\n                val maxX = tileMatrix.tileWidth - 1\n                val maxY = tileMatrix.tileHeight - 1\n                val x = (maxX * (longitude.inDegrees - minLon) / deltaLon).toFloat()\n                val y = (maxY * (maxLat - latitude.inDegrees) / deltaLat).toFloat()\n                val x0 = floor(x).toInt().coerceIn(0, maxX)\n                val x1 = (x0 + 1).coerceIn(0, maxX)\n                val y0 = floor(y).toInt().coerceIn(0, maxY)\n                val y1 = (y0 + 1).coerceIn(0, maxY)\n                val x0y0 = it[x0 + y0 * tileMatrix.tileWidth]\n                val x1y0 = it[x1 + y0 * tileMatrix.tileWidth]\n                val x0y1 = it[x0 + y1 * tileMatrix.tileWidth]\n                val x1y1 = it[x1 + y1 * tileMatrix.tileWidth]\n                val xf = x - x0\n                val yf = y - y0\n                return (1 - xf) * (1 - yf) * x0y0 + xf * (1 - yf) * x1y0 + (1 - xf) * yf * x0y1 + xf * yf * x1y1\n            }\n        }\n        return null // did not find a tile\n    }\n\n    override fun doGetHeightGrid(gridSector: Sector, gridWidth: Int, gridHeight: Int, result: FloatArray) {\n        if (!tileMatrixSet.sector.intersects(gridSector)) return  // no coverage in the specified sector\n        val targetPixelSpan = gridSector.deltaLatitude.inDegrees / gridHeight\n        val targetIdx = tileMatrixSet.indexOfMatrixNearest(targetPixelSpan)\n        val tileBlock = TileBlock()\n        for (idx in targetIdx downTo 0) {\n            // enable retrieval of the target matrix and the first matrix\n            isRetrievalEnabled = idx == targetIdx || idx == 0\n            val tileMatrix = tileMatrixSet.entries[idx]\n            if (fetchTileBlock(gridSector, gridWidth, gridHeight, tileMatrix, tileBlock)) {\n                readHeightGrid(gridSector, gridWidth, gridHeight, tileBlock, result)\n                return\n            }\n        }\n    }\n\n    override fun doGetHeightLimits(sector: Sector, result: FloatArray) {\n        if (!tileMatrixSet.sector.intersects(sector)) return  // no coverage in the specified sector\n        val targetPixelSpan = sector.deltaLatitude.inDegrees / GET_HEIGHT_LIMIT_SAMPLES\n        val targetIdx = tileMatrixSet.indexOfMatrixNearest(targetPixelSpan)\n        val tileBlock = TileBlock()\n        for (idx in targetIdx downTo 0) {\n            // enable retrieval of the target matrix and the first matrix\n            isRetrievalEnabled = idx == targetIdx || idx == 0\n            val tileMatrix = tileMatrixSet.entries[idx]\n            if (fetchTileBlock(sector, tileMatrix, tileBlock)) {\n                scanHeightLimits(sector, tileBlock, result)\n                return\n            }\n        }\n    }\n\n    protected open fun fetchTileBlock(\n        gridSector: Sector, gridWidth: Int, gridHeight: Int, tileMatrix: TileMatrix, result: TileBlock\n    ): Boolean {\n        val tileWidth = tileMatrix.tileWidth\n        val tileHeight = tileMatrix.tileHeight\n        val rasterWidth = tileMatrix.matrixWidth * tileWidth\n        val rasterHeight = tileMatrix.matrixHeight * tileHeight\n        val matrixMinLat = tileMatrix.sector.minLatitude.inDegrees\n        val matrixMaxLat = tileMatrix.sector.maxLatitude.inDegrees\n        val matrixMinLon = tileMatrix.sector.minLongitude.inDegrees\n        val matrixMaxLon = tileMatrix.sector.maxLongitude.inDegrees\n        val matrixDeltaLat = tileMatrix.sector.deltaLatitude.inDegrees\n        val matrixDeltaLon = tileMatrix.sector.deltaLongitude.inDegrees\n        val sMin = 1.0 / (2.0 * rasterWidth)\n        val sMax = 1.0 - sMin\n        val tMin = 1.0 / (2.0 * rasterHeight)\n        val tMax = 1.0 - tMin\n        result.tileMatrix = tileMatrix\n        result.clear()\n        var lon = gridSector.minLongitude.inDegrees\n        val deltaLon = gridSector.deltaLongitude.inDegrees / (gridWidth - 1)\n        var uIdx = 0\n        while (uIdx < gridWidth) {\n            // explicitly set the last lon to the max longitude to ensure alignment\n            if (uIdx == gridWidth - 1) lon = gridSector.maxLongitude.inDegrees\n            if (lon in matrixMinLon..matrixMaxLon) {\n                val s = (lon - matrixMinLon) / matrixDeltaLon\n                var u: Double\n                var i0: Int\n                var i1: Int\n                if (tileMatrix.sector.isFullSphere) {\n                    u = rasterWidth * fract(s) // wrap the horizontal coordinate\n                    i0 = mod(floor(u - 0.5).toInt(), rasterWidth)\n                    i1 = mod(i0 + 1, rasterWidth)\n                } else {\n                    u = rasterWidth * s.coerceIn(sMin, sMax) // clamp the horizontal coordinate\n                    i0 = floor(u - 0.5).toInt().coerceIn(0, rasterWidth - 1)\n                    i1 = (i0 + 1).coerceIn(0, rasterWidth - 1)\n                }\n                val col0 = i0 / tileWidth\n                val col1 = i1 / tileWidth\n                result.cols[col0] = 0\n                result.cols[col1] = 0\n            }\n            uIdx++\n            lon += deltaLon\n        }\n        var lat = gridSector.minLatitude.inDegrees\n        val deltaLat = gridSector.deltaLatitude.inDegrees / (gridHeight - 1)\n        var vIdx = 0\n        while (vIdx < gridHeight) {\n            // explicitly set the last lat to the max latitude to ensure alignment\n            if (vIdx == gridHeight - 1) lat = gridSector.maxLatitude.inDegrees\n            if (lat in matrixMinLat..matrixMaxLat) {\n                val t = (matrixMaxLat - lat) / matrixDeltaLat\n                val v = rasterHeight * t.coerceIn(tMin, tMax) // clamp the vertical coordinate to the raster edge\n                val j0 = floor(v - 0.5).toInt().coerceIn(0, rasterHeight - 1)\n                val j1 = (j0 + 1).coerceIn(0, rasterHeight - 1)\n                val row0 = j0 / tileHeight\n                val row1 = j1 / tileHeight\n                result.rows[row0] = 0\n                result.rows[row1] = 0\n            }\n            vIdx++\n            lat += deltaLat\n        }\n        for (row in result.rows.keys) {\n            for (col in result.cols.keys) {\n                val tileArray = fetchTileArray(tileMatrix, row, col)\n                if (tileArray != null) result.putTileArray(row, col, tileArray) else return false\n            }\n        }\n        return true\n    }\n\n    protected open fun fetchTileBlock(sector: Sector, tileMatrix: TileMatrix, result: TileBlock): Boolean {\n        val tileWidth = tileMatrix.tileWidth\n        val tileHeight = tileMatrix.tileHeight\n        val rasterWidth = tileMatrix.matrixWidth * tileWidth\n        val rasterHeight = tileMatrix.matrixHeight * tileHeight\n        val matrixMaxLat = tileMatrix.sector.maxLatitude.inDegrees\n        val matrixMinLon = tileMatrix.sector.minLongitude.inDegrees\n        val matrixDeltaLat = tileMatrix.sector.deltaLatitude.inDegrees\n        val matrixDeltaLon = tileMatrix.sector.deltaLongitude.inDegrees\n        val intersection = Sector(tileMatrix.sector)\n        intersection.intersect(sector)\n        val sMin = (intersection.minLongitude.inDegrees - matrixMinLon) / matrixDeltaLon\n        val sMax = (intersection.maxLongitude.inDegrees - matrixMinLon) / matrixDeltaLon\n        val uMin = floor(rasterWidth * sMin).toInt()\n        val uMax = ceil(rasterWidth * sMax).toInt()\n        val iMin = uMin.coerceIn(0, rasterWidth - 1)\n        val iMax = uMax.coerceIn(0, rasterWidth - 1)\n        val colMin = iMin / tileWidth\n        val colMax = iMax / tileWidth\n        val tMin = (matrixMaxLat - intersection.maxLatitude.inDegrees) / matrixDeltaLat\n        val tMax = (matrixMaxLat - intersection.minLatitude.inDegrees) / matrixDeltaLat\n        val vMin = floor(rasterHeight * tMin).toInt()\n        val vMax = ceil(rasterHeight * tMax).toInt()\n        val jMin = vMin.coerceIn(0, rasterHeight - 1)\n        val jMax = vMax.coerceIn(0, rasterHeight - 1)\n        val rowMin = jMin / tileHeight\n        val rowMax = jMax / tileHeight\n        result.tileMatrix = tileMatrix\n        result.clear()\n        for (row in rowMin..rowMax) {\n            for (col in colMin..colMax) {\n                val tileArray = fetchTileArray(tileMatrix, row, col)\n                if (tileArray != null) {\n                    result.rows[row] = 0\n                    result.cols[col] = 0\n                    result.putTileArray(row, col, tileArray)\n                } else return false\n            }\n        }\n        return true\n    }\n\n    protected open fun fetchTileArray(tileMatrix: TileMatrix, row: Int, column: Int): ShortArray? {\n        val key = tileMatrix.tileKey(row, column)\n        return coverageCache[key] ?: run {\n            // Ignore retrieval of already requested or marked as absent tiles\n            if (isRetrievalEnabled && currentRetrievals.size < retrievalQueueSize && !currentRetrievals.contains(key)\n                && !absentResourceList.isResourceAbsent(key)) {\n                currentRetrievals += key\n                retrieveTileArray(key, tileMatrix, row, column)\n            }\n            null\n        }\n    }\n\n    protected abstract fun retrieveTileArray(key: Long, tileMatrix: TileMatrix, row: Int, column: Int)\n\n    protected fun retrievalSucceeded(key: Long, value: ShortArray) {\n        coverageCache.put(key, value, value.size * 2)\n        absentResourceList.unmarkResourceAbsent(key)\n        currentRetrievals -= key\n        updateTimestamp()\n        WorldWind.requestRedraw()\n    }\n\n    protected fun retrievalFailed(key: Long) {\n        absentResourceList.markResourceAbsent(key)\n        currentRetrievals -= key\n    }\n\n    protected open fun readHeightGrid(\n        gridSector: Sector, gridWidth: Int, gridHeight: Int, tileBlock: TileBlock, result: FloatArray\n    ) {\n        val tileWidth = tileBlock.tileMatrix.tileWidth\n        val tileHeight = tileBlock.tileMatrix.tileHeight\n        val rasterWidth = tileBlock.tileMatrix.matrixWidth * tileWidth\n        val rasterHeight = tileBlock.tileMatrix.matrixHeight * tileHeight\n        val matrixMinLat = tileBlock.tileMatrix.sector.minLatitude.inDegrees\n        val matrixMaxLat = tileBlock.tileMatrix.sector.maxLatitude.inDegrees\n        val matrixMinLon = tileBlock.tileMatrix.sector.minLongitude.inDegrees\n        val matrixMaxLon = tileBlock.tileMatrix.sector.maxLongitude.inDegrees\n        val matrixDeltaLat = tileBlock.tileMatrix.sector.deltaLatitude.inDegrees\n        val matrixDeltaLon = tileBlock.tileMatrix.sector.deltaLongitude.inDegrees\n        val sMin = 1.0 / (2.0 * rasterWidth)\n        val sMax = 1.0 - sMin\n        val tMin = 1.0 / (2.0 * rasterHeight)\n        val tMax = 1.0 - tMin\n        var rIdx = 0\n        var lat = gridSector.minLatitude.inDegrees\n        val deltaLat = gridSector.deltaLatitude.inDegrees / (gridHeight - 1)\n        var hIdx = 0\n        while (hIdx < gridHeight) {\n            // explicitly set the last lat to the max latitude to ensure alignment\n            if (hIdx == gridHeight - 1) lat = gridSector.maxLatitude.inDegrees\n            val t = (matrixMaxLat - lat) / matrixDeltaLat\n            val v = rasterHeight * t.coerceIn(tMin, tMax) // clamp the vertical coordinate to the raster edge\n            val b = fract(v - 0.5).toFloat()\n            val j0 = floor(v - 0.5).toInt().coerceIn(0, rasterHeight - 1)\n            val j1 = (j0 + 1).coerceIn(0, rasterHeight - 1)\n            val row0 = j0 / tileHeight\n            val row1 = j1 / tileHeight\n            var lon = gridSector.minLongitude.inDegrees\n            val deltaLon = gridSector.deltaLongitude.inDegrees / (gridWidth - 1)\n            var wIdx = 0\n            while (wIdx < gridWidth) {\n                // explicitly set the last lon to the max longitude to ensure alignment\n                if (wIdx == gridWidth - 1) lon = gridSector.maxLongitude.inDegrees\n                val s = (lon - matrixMinLon) / matrixDeltaLon\n                var u: Double\n                var i0: Int\n                var i1: Int\n                if (tileBlock.tileMatrix.sector.isFullSphere) {\n                    u = rasterWidth * fract(s) // wrap the horizontal coordinate\n                    i0 = mod(floor(u - 0.5).toInt(), rasterWidth)\n                    i1 = mod(i0 + 1, rasterWidth)\n                } else {\n                    u = rasterWidth * s.coerceIn(sMin, sMax) // clamp the horizontal coordinate\n                    i0 = floor(u - 0.5).toInt().coerceIn(0, rasterWidth - 1)\n                    i1 = (i0 + 1).coerceIn(0, rasterWidth - 1)\n                }\n                val a = fract(u - 0.5).toFloat()\n                val col0 = i0 / tileWidth\n                val col1 = i1 / tileWidth\n                if (lat in matrixMinLat..matrixMaxLat && lon in matrixMinLon..matrixMaxLon) {\n                    val i0j0 = tileBlock.readTexel(row0, col0, i0 % tileWidth, j0 % tileHeight)\n                    val i1j0 = tileBlock.readTexel(row0, col1, i1 % tileWidth, j0 % tileHeight)\n                    val i0j1 = tileBlock.readTexel(row1, col0, i0 % tileWidth, j1 % tileHeight)\n                    val i1j1 = tileBlock.readTexel(row1, col1, i1 % tileWidth, j1 % tileHeight)\n                    result[rIdx] = (1 - a) * (1 - b) * i0j0 + a * (1 - b) * i1j0 + (1 - a) * b * i0j1 + a * b * i1j1\n                }\n                rIdx++\n                wIdx++\n                lon += deltaLon\n            }\n            hIdx++\n            lat += deltaLat\n        }\n    }\n\n    protected open fun scanHeightLimits(sector: Sector, tileBlock: TileBlock, result: FloatArray) {\n        val tileWidth = tileBlock.tileMatrix.tileWidth\n        val tileHeight = tileBlock.tileMatrix.tileHeight\n        val rasterWidth = tileBlock.tileMatrix.matrixWidth * tileWidth\n        val rasterHeight = tileBlock.tileMatrix.matrixHeight * tileHeight\n        val matrixMaxLat = tileBlock.tileMatrix.sector.maxLatitude.inDegrees\n        val matrixMinLon = tileBlock.tileMatrix.sector.minLongitude.inDegrees\n        val matrixDeltaLat = tileBlock.tileMatrix.sector.deltaLatitude.inDegrees\n        val matrixDeltaLon = tileBlock.tileMatrix.sector.deltaLongitude.inDegrees\n        val intersection = Sector(tileBlock.tileMatrix.sector)\n        intersection.intersect(sector)\n        val sMin = (intersection.minLongitude.inDegrees - matrixMinLon) / matrixDeltaLon\n        val sMax = (intersection.maxLongitude.inDegrees - matrixMinLon) / matrixDeltaLon\n        val uMin = floor(rasterWidth * sMin).toInt()\n        val uMax = ceil(rasterWidth * sMax).toInt()\n        val iMin = uMin.coerceIn(0, rasterWidth - 1)\n        val iMax = uMax.coerceIn(0, rasterWidth - 1)\n        val tMin = (matrixMaxLat - intersection.maxLatitude.inDegrees) / matrixDeltaLat\n        val tMax = (matrixMaxLat - intersection.minLatitude.inDegrees) / matrixDeltaLat\n        val vMin = floor(rasterHeight * tMin).toInt()\n        val vMax = ceil(rasterHeight * tMax).toInt()\n        val jMin = vMin.coerceIn(0, rasterHeight - 1)\n        val jMax = vMax.coerceIn(0, rasterHeight - 1)\n        for (row in tileBlock.rows.keys) {\n            val rowJMin = row * tileHeight\n            val rowJMax = rowJMin + tileHeight - 1\n            val j0 = jMin.coerceIn(rowJMin, rowJMax) % tileHeight\n            val j1 = jMax.coerceIn(rowJMin, rowJMax) % tileHeight\n            for (col in tileBlock.cols.keys) {\n                val colIMin = col * tileWidth\n                val colIMax = colIMin + tileWidth - 1\n                val i0 = iMin.coerceIn(colIMin, colIMax) % tileWidth\n                val i1 = iMax.coerceIn(colIMin, colIMax) % tileWidth\n                tileBlock.getTileArray(row, col)?.let { tileArray ->\n                    // TODO how often do we read all of tileArray?\n                    for (j in j0..j1) for (i in i0..i1) {\n                        val pos = i + j * tileWidth\n                        val texel = tileArray[pos]\n                        if (result[0] > texel) result[0] = texel.toFloat()\n                        if (result[1] < texel) result[1] = texel.toFloat()\n                    }\n                }\n            }\n        }\n    }\n\n    protected open fun assembleTilesList(sector: Sector, resolution: Angle): List<Tile> {\n        val result = mutableListOf<Tile>()\n        val targetIdx = tileMatrixSet.indexOfMatrixNearest(resolution.inDegrees)\n        for (idx in 0..targetIdx) {\n            val tileMatrix = tileMatrixSet.entries[idx]\n            val deltaLat = tileMatrix.sector.deltaLatitude.inDegrees / tileMatrix.matrixHeight\n            val deltaLon = tileMatrix.sector.deltaLongitude.inDegrees / tileMatrix.matrixWidth\n            val minRow = floor((tileMatrix.sector.maxLatitude.inDegrees - sector.maxLatitude.inDegrees) / deltaLat).toInt()\n            val maxRow = floor((tileMatrix.sector.maxLatitude.inDegrees - sector.minLatitude.inDegrees) / deltaLat).toInt()\n            val minCol = floor((sector.minLongitude.inDegrees - tileMatrix.sector.minLongitude.inDegrees) / deltaLon).toInt()\n            val maxCol = floor((sector.maxLongitude.inDegrees - tileMatrix.sector.minLongitude.inDegrees) / deltaLon).toInt()\n            for (row in minRow..maxRow) for (col in minCol..maxCol) result.add(Tile(tileMatrix, row, col))\n        }\n        return result\n    }\n\n    protected data class Tile(val tileMatrix: TileMatrix, val row: Int, val col: Int)\n\n    protected open class TileBlock {\n        lateinit var tileMatrix: TileMatrix\n        val rows = mutableMapOf<Int, Int>()\n        val cols = mutableMapOf<Int, Int>()\n        val arrays = mutableMapOf<Long, ShortArray>()\n        private var texelRow = -1\n        private var texelCol = -1\n        private var texelArray: ShortArray? = null\n\n        open fun clear() {\n            rows.clear()\n            cols.clear()\n            arrays.clear()\n            texelRow = -1\n            texelCol = -1\n            texelArray = null\n        }\n\n        fun putTileArray(row: Int, column: Int, array: ShortArray) {\n            val key = tileMatrix.tileKey(row, column)\n            arrays[key] = array\n        }\n\n        fun getTileArray(row: Int, column: Int): ShortArray? {\n            if (texelRow != row || texelCol != column) {\n                texelRow = row\n                texelCol = column\n                texelArray = arrays[tileMatrix.tileKey(row, column)]\n            }\n            return texelArray\n        }\n\n        fun readTexel(row: Int, column: Int, i: Int, j: Int) =\n            getTileArray(row, column)?.get(i + j * tileMatrix.tileWidth) ?: 0\n    }\n}",null,"package earth.worldwind.globe.elevation.coverage\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.ogc.WmsElevationCoverage\n\n/**\n * Displays NASA's global elevation coverage at 90m (3 arc-second) resolution and 900m resolution on the ocean floor.\n * By default, BasicElevationCoverage is configured to retrieve elevation coverage from the WMS at\n * [&amp;https://wms.worldwind.earth/elev](https://wms.worldwind.earth/elev?SERVICE=WMS&amp;REQUEST=GetCapabilities).\n */\nclass BasicElevationCoverage : WmsElevationCoverage(\n    \"https://wms.worldwind.earth/elev\", \"GEBCO,SRTM-CGIAR\", \"application/bil16\",\n    Sector().setFullSphere(), Angle.fromSeconds(3.0)\n)","package earth.worldwind.globe.projection\n\nimport earth.worldwind.geom.*\nimport earth.worldwind.globe.Globe\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.math.*\n\n/*\n * GeographicProjection implementing coordinate transformations based on the WGS 84 reference system (aka WGS 1984,\n * EPSG:4326).\n *\n * The WGS 84 projection defines a Cartesian coordinate system whose origin is at the globe's center. It's Y axis points\n * to the North Pole, the Z axis points to the intersection of the prime meridian and the equator, and the X axis\n * completes a right-handed coordinate system, is in the equatorial plane and 90 degrees East of the Z axis.\n */\nopen class Wgs84Projection: GeographicProjection {\n    private val scratchPos = Position()\n\n    override val displayName = \"WGS84\"\n    override val is2D = false\n\n    override fun geographicToCartesian(globe: Globe, latitude: Angle, longitude: Angle, altitude: Double, result: Vec3): Vec3 {\n        val cosLat = cos(latitude.inRadians)\n        val sinLat = sin(latitude.inRadians)\n        val cosLon = cos(longitude.inRadians)\n        val sinLon = sin(longitude.inRadians)\n        val ec2 = globe.eccentricitySquared\n        val rpm = globe.equatorialRadius / sqrt(1.0 - ec2 * sinLat * sinLat)\n        return result.set(\n            (altitude + rpm) * cosLat * sinLon,\n            (altitude + rpm * (1.0 - ec2)) * sinLat,\n            (altitude + rpm) * cosLat * cosLon\n        )\n    }\n\n    override fun geographicToCartesianNormal(globe: Globe, latitude: Angle, longitude: Angle, result: Vec3): Vec3 {\n        val cosLat = cos(latitude.inRadians)\n        val sinLat = sin(latitude.inRadians)\n        val cosLon = cos(longitude.inRadians)\n        val sinLon = sin(longitude.inRadians)\n        val eqr2 = globe.equatorialRadius * globe.equatorialRadius\n        val pol2 = globe.polarRadius * globe.polarRadius\n        return result.set(\n            cosLat * sinLon / eqr2,\n            (1 - globe.eccentricitySquared) * sinLat / pol2,\n            cosLat * cosLon / eqr2\n        ).normalize()\n    }\n\n    override fun geographicToCartesianTransform(\n        globe: Globe, latitude: Angle, longitude: Angle, altitude: Double, result: Matrix4\n    ): Matrix4 {\n        val cosLat = cos(latitude.inRadians)\n        val sinLat = sin(latitude.inRadians)\n        val cosLon = cos(longitude.inRadians)\n        val sinLon = sin(longitude.inRadians)\n        val ec2 = globe.eccentricitySquared\n        val rpm = globe.equatorialRadius / sqrt(1.0 - ec2 * sinLat * sinLat)\n        val eqr2 = globe.equatorialRadius * globe.equatorialRadius\n        val pol2 = globe.polarRadius * globe.polarRadius\n\n        // Convert the geographic position to Cartesian coordinates. This is equivalent to calling geographicToCartesian\n        // but is much more efficient as an inline computation, as the results of cosLat/sinLat/etc. can be computed\n        // once and reused.\n        val px = (rpm + altitude) * cosLat * sinLon\n        val py = (rpm * (1.0 - ec2) + altitude) * sinLat\n        val pz = (rpm + altitude) * cosLat * cosLon\n\n        // Compute the surface normal at the geographic position. This is equivalent to calling\n        // geographicToCartesianNormal but is much more efficient as an inline computation.\n        var ux = cosLat * sinLon / eqr2\n        var uy = (1 - globe.eccentricitySquared) * sinLat / pol2\n        var uz = cosLat * cosLon / eqr2\n        var len = sqrt(ux * ux + uy * uy + uz * uz)\n        ux /= len\n        uy /= len\n        uz /= len\n\n        // Compute the north pointing tangent at the geographic position. This computation could be encoded in its own\n        // method, but is much more efficient as an inline computation. The north-pointing tangent is derived by\n        // rotating the vector (0, 1, 0) about the Y-axis by longitude degrees, then rotating it about the X-axis by\n        // -latitude degrees. The latitude angle must be inverted because latitude is a clockwise rotation about the\n        // X-axis, and standard rotation matrices assume counter-clockwise rotation. The combined rotation can be\n        // represented by a combining two rotation matrices Rlat, and Rlon, then transforming the vector (0, 1, 0) by\n        // the combined transform: NorthTangent = (Rlon * Rlat) * (0, 1, 0)\n        //\n        // Additionally, this computation can be simplified by making two observations:\n        // - The vector's X and Z coordinates are always 0, and its Y coordinate is always 1.\n        // - Inverting the latitude rotation angle is equivalent to inverting sinLat. We know this by the\n        //   trigonometric identities cos(-x) = cos(x), and sin(-x) = -sin(x).\n        var nx = -sinLat * sinLon\n        var ny = cosLat\n        var nz = -sinLat * cosLon\n        len = sqrt(nx * nx + ny * ny + nz * nz)\n        nx /= len\n        ny /= len\n        nz /= len\n\n        // Compute the east pointing tangent as the cross product of the north and up axes. This is much more efficient\n        // as an inline computation.\n        val ex = ny * uz - nz * uy\n        val ey = nz * ux - nx * uz\n        val ez = nx * uy - ny * ux\n\n        // Ensure the normal, north and east vectors represent an orthonormal basis by ensuring that the north vector is\n        // perpendicular to normal and east vectors. This should already be the case, but rounding errors can be\n        // introduced when working with Earth sized coordinates.\n        nx = uy * ez - uz * ey\n        ny = uz * ex - ux * ez\n        nz = ux * ey - uy * ex\n\n        // Set the result to an orthonormal basis with the East, North, and Up vectors forming the X, Y and Z axes,\n        // respectively, and the Cartesian point indicating the coordinate system's origin.\n        return result.set(\n            ex, nx, ux, px,\n            ey, ny, uy, py,\n            ez, nz, uz, pz,\n            0.0, 0.0, 0.0, 1.0\n        )\n    }\n\n    override fun geographicToCartesianGrid(\n        globe: Globe, sector: Sector, numLat: Int, numLon: Int, height: FloatArray?, verticalExaggeration: Float,\n        origin: Vec3?, result: FloatArray, offset: Int, rowStride: Int\n    ): FloatArray {\n        require(numLat >= 1 && numLon >= 1) {\n            logMessage(\n                ERROR, \"Wgs84Projection\", \"geographicToCartesianGrid\",\n                \"Number of latitude or longitude locations is less than one\"\n            )\n        }\n        require(height == null || height.size >= numLat * numLon) {\n            logMessage(ERROR, \"Wgs84Projection\", \"geographicToCartesianGrid\", \"missingArray\")\n        }\n        val minLat = sector.minLatitude.inRadians\n        val maxLat = sector.maxLatitude.inRadians\n        val minLon = sector.minLongitude.inRadians\n        val maxLon = sector.maxLongitude.inRadians\n        val deltaLat = (maxLat - minLat) / if (numLat > 1) numLat - 1 else 1\n        val deltaLon = (maxLon - minLon) / if (numLon > 1) numLon - 1 else 1\n        val eqr = globe.equatorialRadius\n        val ec2 = globe.eccentricitySquared\n        val cosLon = DoubleArray(numLon)\n        val sinLon = DoubleArray(numLon)\n        var elevIndex = 0\n        val xOffset = origin?.x ?: 0.0\n        val yOffset = origin?.y ?: 0.0\n        val zOffset = origin?.z ?: 0.0\n\n        // Compute and save values that are a function of each unique longitude value in the specified sector. This\n        // eliminates the need to re-compute these values for each column of constant longitude.\n        var lon = minLon\n        for (lonIndex in 0 until numLon) {\n            if (lonIndex == numLon - 1) lon = maxLon // explicitly set the last lon to the max longitude to ensure alignment\n            cosLon[lonIndex] = cos(lon)\n            sinLon[lonIndex] = sin(lon)\n            lon += deltaLon\n        }\n\n        // Iterate over the latitude and longitude coordinates in the specified sector, computing the Cartesian\n        // point corresponding to each latitude and longitude.\n        var rowIndex = offset\n        val stride = if (rowStride == 0) numLon * 3 else rowStride\n        var lat = minLat\n        for (latIndex in 0 until numLat) {\n            if (latIndex == numLat - 1) lat = maxLat // explicitly set the last lat to the max latitude to ensure alignment\n\n            // Latitude is constant for each row. Values that are a function of latitude can be computed once per row.\n            val cosLat = cos(lat)\n            val sinLat = sin(lat)\n            val rpm = eqr / sqrt(1.0 - ec2 * sinLat * sinLat)\n            var colIndex = rowIndex\n            for (lonIndex in 0 until numLon) {\n                val hgt = if (height != null) (height[elevIndex++] * verticalExaggeration).toDouble() else 0.0\n                result[colIndex++] = ((hgt + rpm) * cosLat * sinLon[lonIndex] - xOffset).toFloat()\n                result[colIndex++] = ((hgt + rpm * (1.0 - ec2)) * sinLat - yOffset).toFloat()\n                result[colIndex++] = ((hgt + rpm) * cosLat * cosLon[lonIndex] - zOffset).toFloat()\n            }\n            rowIndex += stride\n            lat += deltaLat\n        }\n        return result\n    }\n\n    override fun geographicToCartesianBorder(\n        globe: Globe, sector: Sector, numLat: Int, numLon: Int, height: Float, origin: Vec3?, result: FloatArray\n    ): FloatArray {\n        require(numLat >= 1 && numLon >= 1) {\n            logMessage(\n                ERROR, \"Wgs84Projection\", \"geographicToCartesianBorder\",\n                \"Number of latitude or longitude locations is less than one\"\n            )\n        }\n        val minLat = sector.minLatitude.inRadians\n        val maxLat = sector.maxLatitude.inRadians\n        val minLon = sector.minLongitude.inRadians\n        val maxLon = sector.maxLongitude.inRadians\n        val deltaLat = (maxLat - minLat) / if (numLat > 1) numLat - 3 else 1\n        val deltaLon = (maxLon - minLon) / if (numLon > 1) numLon - 3 else 1\n        var lat = minLat\n        var lon = minLon\n        val eqr = globe.equatorialRadius\n        val ec2 = globe.eccentricitySquared\n        val xOffset = origin?.x ?: 0.0\n        val yOffset = origin?.y ?: 0.0\n        val zOffset = origin?.z ?: 0.0\n        var resultIndex = 0\n\n        // Iterate over the edges of the specified sector, computing the Cartesian point at designated latitude and\n        // longitude around the border.\n        for (latIndex in 0 until numLat) {\n            when {\n                latIndex < 2 -> lat = minLat // explicitly set the first lat to the min latitude to ensure alignment\n                latIndex < numLat - 2 -> lat += deltaLat\n                else -> lat = maxLat // explicitly set the last lat to the max latitude to ensure alignment\n            }\n\n            // Latitude is constant for each row. Values that are a function of latitude can be computed once per row.\n            val cosLat = cos(lat)\n            val sinLat = sin(lat)\n            val rpm = eqr / sqrt(1.0 - ec2 * sinLat * sinLat)\n            var lonIndex = 0\n            while (lonIndex < numLon) {\n                when {\n                    lonIndex < 2 -> lon = minLon // explicitly set the first lon to the min longitude to ensure alignment\n                    lonIndex < numLon - 2 -> lon += deltaLon\n                    else -> lon = maxLon // explicitly set the last lon to the max longitude to ensure alignment\n                }\n                val cosLon = cos(lon)\n                val sinLon = sin(lon)\n                result[resultIndex++] = ((height + rpm) * cosLat * sinLon - xOffset).toFloat()\n                result[resultIndex++] = ((height + rpm * (1.0 - ec2)) * sinLat - yOffset).toFloat()\n                result[resultIndex++] = ((height + rpm) * cosLat * cosLon - zOffset).toFloat()\n                if (lonIndex == 0 && latIndex != 0 && latIndex != numLat - 1) {\n                    val skip = numLon - 2\n                    lonIndex += skip\n                    resultIndex += skip * 3\n                }\n                lonIndex++\n            }\n        }\n        return result\n    }\n\n    override fun cartesianToGeographic(globe: Globe, x: Double, y: Double, z: Double, result: Position): Position {\n        // According to H. Vermeille,\n        // \"An analytical method to transform geocentric into geodetic coordinates\"\n        // http://www.springerlink.com/content/3t6837t27t351227/fulltext.pdf\n        // Journal of Geodesy, accepted 10/2010, not yet published\n        val zpx = z * z + x * x\n        val zpxSqrt = sqrt(zpx)\n        val a = globe.equatorialRadius\n        val ra2 = 1 / (a * a)\n        val e2 = globe.eccentricitySquared\n        val e4 = e2 * e2\n\n        // Step 1\n        val p = zpx * ra2\n        val q = y * y * (1 - e2) * ra2\n        val r = (p + q - e4) / 6\n        val h: Double\n        val phi: Double\n        val evoluteBorderTest = 8 * r * r * r + e4 * p * q\n        if (evoluteBorderTest > 0 || q != 0.0) {\n            val u: Double\n            if (evoluteBorderTest > 0) {\n                // Step 2: general case\n                val rad1 = sqrt(evoluteBorderTest)\n                val rad2 = sqrt(e4 * p * q)\n\n                // 10*e2 is my arbitrary decision of what Vermeille means by \"near... the cusps of the evolute\".\n                val rad = ((rad1 + rad2) * (rad1 + rad2)).pow(1/3.0)\n                u = if (evoluteBorderTest > 10 * e2) r + 0.5 * rad + 2 * r * r / rad\n                else r + 0.5 * rad + 0.5 * ((rad1 - rad2) * (rad1 - rad2)).pow(1/3.0)\n            } else {\n                // Step 3: near evolute\n                val rad1 = sqrt(-evoluteBorderTest)\n                val rad2 = sqrt(-8 * r * r * r)\n                val rad3 = sqrt(e4 * p * q)\n                val aTan = 2 * atan2(rad3, rad1 + rad2) / 3\n                u = -4 * r * sin(aTan) * cos(PI / 6 + aTan)\n            }\n            val v = sqrt(u * u + e4 * q)\n            val w = e2 * (u + v - q) / (2 * v)\n            val k = (u + v) / (sqrt(w * w + u + v) + w)\n            val d = k * zpxSqrt / (k + e2)\n            val dpySqrt = sqrt(d * d + y * y)\n            h = (k + e2 - 1) * dpySqrt / k\n            phi = 2 * atan2(y, dpySqrt + d)\n        } else {\n            // Step 4: singular disk\n            val rad1 = sqrt(1 - e2)\n            val rad2 = sqrt(e2 - p)\n            val e = sqrt(e2)\n            h = -a * rad1 * rad2 / e\n            phi = rad2 / (e * rad2 + rad1 * sqrt(p))\n        }\n\n        // Compute lambda\n        val s2 = sqrt(2.0)\n        val lambda = when {\n            (s2 - 1) * x < zpxSqrt + z -> 2 * atan2(x, zpxSqrt + z) // case 1 - -135deg < lambda < 135deg\n            zpxSqrt + x < (s2 + 1) * z -> -PI * 0.5 + 2 * atan2(z, zpxSqrt - x) // case 2 - -225deg < lambda < 45deg\n            else -> PI * 0.5 - 2 * atan2(z, zpxSqrt + x) // case 3: - -45deg < lambda < 225deg\n        }\n        return result.setRadians(phi, lambda, h)\n    }\n\n    override fun cartesianToLocalTransform(globe: Globe, x: Double, y: Double, z: Double, result: Matrix4): Matrix4 {\n        val pos = cartesianToGeographic(globe, x, y, z, scratchPos)\n        val cosLat = cos(pos.latitude.inRadians)\n        val sinLat = sin(pos.latitude.inRadians)\n        val cosLon = cos(pos.longitude.inRadians)\n        val sinLon = sin(pos.longitude.inRadians)\n        val eqr2 = globe.equatorialRadius * globe.equatorialRadius\n        val pol2 = globe.polarRadius * globe.polarRadius\n\n        // Compute the surface normal at the geographic position. This is equivalent to calling\n        // geographicToCartesianNormal but is much more efficient as an inline computation.\n        var ux = cosLat * sinLon / eqr2\n        var uy = (1 - globe.eccentricitySquared) * sinLat / pol2\n        var uz = cosLat * cosLon / eqr2\n        var len = sqrt(ux * ux + uy * uy + uz * uz)\n        ux /= len\n        uy /= len\n        uz /= len\n\n        // Compute the north pointing tangent at the geographic position. This computation could be encoded in its own\n        // method, but is much more efficient as an inline computation. The north-pointing tangent is derived by\n        // rotating the vector (0, 1, 0) about the Y-axis by longitude degrees, then rotating it about the X-axis by\n        // -latitude degrees. The latitude angle must be inverted because latitude is a clockwise rotation about the\n        // X-axis, and standard rotation matrices assume counter-clockwise rotation. The combined rotation can be\n        // represented by a combining two rotation matrices Rlat, and Rlon, then transforming the vector (0, 1, 0) by\n        // the combined transform: NorthTangent = (Rlon * Rlat) * (0, 1, 0)\n        //\n        // Additionally, this computation can be simplified by making two observations:\n        // - The vector's X and Z coordinates are always 0, and its Y coordinate is always 1.\n        // - Inverting the latitude rotation angle is equivalent to inverting sinLat. We know this by the\n        //   trigonometric identities cos(-x) = cos(x), and sin(-x) = -sin(x).\n        var nx = -sinLat * sinLon\n        var ny = cosLat\n        var nz = -sinLat * cosLon\n        len = sqrt(nx * nx + ny * ny + nz * nz)\n        nx /= len\n        ny /= len\n        nz /= len\n\n        // Compute the east pointing tangent as the cross product of the north and up axes. This is much more efficient\n        // as an inline computation.\n        val ex = ny * uz - nz * uy\n        val ey = nz * ux - nx * uz\n        val ez = nx * uy - ny * ux\n\n        // Ensure the normal, north and east vectors represent an orthonormal basis by ensuring that the north vector is\n        // perpendicular to normal and east vectors. This should already be the case, but rounding errors can be\n        // introduced when working with Earth sized coordinates.\n        nx = uy * ez - uz * ey\n        ny = uz * ex - ux * ez\n        nz = ux * ey - uy * ex\n\n        // Set the result to an orthonormal basis with the East, North, and Up vectors forming the X, Y and Z axes,\n        // respectively, and the Cartesian point indicating the coordinate system's origin.\n        return result.set(\n            ex, nx, ux, x,\n            ey, ny, uy, y,\n            ez, nz, uz, z,\n            0.0, 0.0, 0.0, 1.0\n        )\n    }\n\n    override fun intersect(globe: Globe, line: Line, result: Vec3): Boolean {\n        // Taken from \"Mathematics for 3D Game Programming and Computer Graphics, Third Edition\", Section 6.2.3.\n        // Note that the parameter n from in equations 6.70 and 6.71 is omitted here. For an ellipsoidal globe this\n        // parameter is always 1, so its square and its product with any other value simplifies to the identity.\n        val vx = line.direction.x\n        val vy = line.direction.y\n        val vz = line.direction.z\n        val sx = line.origin.x\n        val sy = line.origin.y\n        val sz = line.origin.z\n        val eqr = globe.equatorialRadius\n        val eqr2 = eqr * eqr // nominal radius squared\n        val m = eqr / globe.polarRadius // ratio of the x semi-axis length to the y semi-axis length\n        val m2 = m * m\n        val a = vx * vx + m2 * vy * vy + vz * vz\n        val b = 2 * (sx * vx + m2 * sy * vy + sz * vz)\n        val c = sx * sx + m2 * sy * sy + sz * sz - eqr2\n        val d = b * b - 4 * a * c // discriminant\n        if (d < 0) return false\n        var t = (-b - sqrt(d)) / (2 * a)\n        // check if the nearest intersection point is in front of the origin of the ray\n        if (t > 0) {\n            result.set(sx + vx * t, sy + vy * t, sz + vz * t)\n            return true\n        }\n        t = (-b + sqrt(d)) / (2 * a)\n        // check if the second intersection point is in front of the origin of the ray\n        if (t > 0) {\n            result.set(sx + vx * t, sy + vy * t, sz + vz * t)\n            return true\n        }\n\n        // the intersection points were behind the origin of the provided line\n        return false\n    }\n}","package earth.worldwind.globe.terrain\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Line\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.util.math.fract\n\nopen class BasicTerrain: Terrain {\n    protected val tiles = mutableListOf<TerrainTile>()\n    override val sector = Sector()\n    var triStripElements: ShortArray? = null\n    private val intersectPoint = Vec3()\n\n    open fun addTile(tile: TerrainTile) {\n        tiles.add(tile)\n        sector.union(tile.sector)\n    }\n\n    open fun clear() {\n        triStripElements = null\n        tiles.clear()\n        sector.setEmpty()\n    }\n\n    open fun copy(terrain: BasicTerrain) {\n        tiles.clear()\n        tiles.addAll(terrain.tiles)\n        sector.copy(terrain.sector)\n        triStripElements = terrain.triStripElements\n    }\n\n    open fun sort() = tiles.sortBy { it.sortOrder }\n\n    override fun intersect(line: Line, result: Vec3): Boolean {\n        var found = false\n        val triStripElements = triStripElements ?: return found\n\n        // Tiles considered as sorted by L1 distance on cylinder from camera\n        for (tile in tiles) {\n            // Translate the line to the terrain tile's local coordinate system.\n            line.origin.subtract(tile.origin)\n\n            // Compute the first intersection of the terrain tile with the line. The line is interpreted as a ray;\n            // intersection points behind the line's origin are ignored. Store the nearest intersection found so far\n            // in the result argument.\n            if (line.triStripIntersection(tile.points, 3, triStripElements, triStripElements.size, intersectPoint)) {\n                result.copy(intersectPoint).add(tile.origin)\n                found = true\n            }\n\n            // Restore the line's origin to its previous coordinate system.\n            line.origin.add(tile.origin)\n\n            // Do not analyze other tiles as they are sorted by distance from camera\n            if (found) break\n        }\n        return found\n    }\n\n    override fun surfacePoint(latitude: Angle, longitude: Angle, result: Vec3): Boolean {\n        for (tile in tiles) {\n            val sector = tile.sector\n\n            // Find the first tile that contains the specified location.\n            if (sector.contains(latitude, longitude)) {\n                // Compute the location's parameterized coordinates (s, t) within the tile grid, along with the\n                // fractional component (sf, tf) and integral component (si, ti).\n                val tileWidth = tile.level.tileWidth\n                val tileHeight = tile.level.tileHeight\n                val s = (longitude.inDegrees - sector.minLongitude.inDegrees) / sector.deltaLongitude.inDegrees * (tileWidth - 1)\n                val t = (latitude.inDegrees - sector.minLatitude.inDegrees) / sector.deltaLatitude.inDegrees * (tileHeight - 1)\n                val sf = if (s < tileWidth - 1) fract(s) else 1.0\n                val tf = if (t < tileHeight - 1) fract(t) else 1.0\n                val si = if (s < tileWidth - 1) (s + 1).toInt() else tileWidth - 1\n                val ti = if (t < tileHeight - 1) (t + 1).toInt() else tileHeight - 1\n\n                // Compute the location in the tile's local coordinate system. Perform a bilinear interpolation of\n                // the cell's four points based on the fractional portion of the location's parameterized coordinates.\n                // Tile coordinates are organized in the points array in row major order, starting at the tile's\n                // Southwest corner. Account for the tile's border vertices, which are embedded in the points array but\n                // must be ignored for this computation.\n                val tileRowStride = tileWidth + 2\n                val i00 = (si + ti * tileRowStride) * 3 // lower left coordinate\n                val i10 = i00 + 3 // lower right coordinate\n                val i01 = (si + (ti + 1) * tileRowStride) * 3 // upper left coordinate\n                val i11 = i01 + 3 // upper right coordinate\n                val f00 = (1 - sf) * (1 - tf)\n                val f10 = sf * (1 - tf)\n                val f01 = (1 - sf) * tf\n                val f11 = sf * tf\n                val points = tile.points\n                result.x = points[i00] * f00 + points[i10] * f10 + points[i01] * f01 + points[i11] * f11\n                result.y = points[i00 + 1] * f00 + points[i10 + 1] * f10 + points[i01 + 1] * f01 + points[i11 + 1] * f11\n                result.z = points[i00 + 2] * f00 + points[i10 + 2] * f10 + points[i01 + 2] * f01 + points[i11 + 2] * f11\n\n                // Translate the surface point from the tile's local coordinate system to Cartesian coordinates.\n                result.x += tile.origin.x\n                result.y += tile.origin.y\n                result.z += tile.origin.z\n                return true\n            }\n        }\n\n        // No tile was found that contains the location.\n        return false\n    }\n}",null,"package earth.worldwind.globe.terrain\n\nimport earth.worldwind.draw.BasicDrawableTerrain\nimport earth.worldwind.geom.Angle.Companion.NEG180\nimport earth.worldwind.geom.Angle.Companion.NEG90\nimport earth.worldwind.geom.Angle.Companion.POS90\nimport earth.worldwind.geom.Location\nimport earth.worldwind.geom.Range\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.buffer.ShortBufferObject\nimport earth.worldwind.util.*\nimport earth.worldwind.util.kgl.GL_ARRAY_BUFFER\nimport earth.worldwind.util.kgl.GL_ELEMENT_ARRAY_BUFFER\n\nopen class BasicTessellator: Tessellator, TileFactory {\n    override val lastTerrain = BasicTerrain()\n    /**\n     * Default level set is configured to ~10 meter resolution\n     */\n    var levelSet = LevelSet(Sector().setFullSphere(), Location(NEG90, NEG180), Location(POS90, POS90), 16, 32, 32)\n        set(value) {\n            field = value\n            invalidateTiles()\n        }\n    /**\n     * Detail control determines how much times terrain texel is greater than screen pixel.\n     */\n    var detailControl = 20.0\n    /**\n     * Memory cache for this tessellator's subdivision tiles. Each entry contains an array of four terrain tiles\n     * corresponding to the subdivision of the group's common parent tile. The cache is configured to hold 320 groups, a\n     * number tuned to store the tiles needed to navigate a small region, given the tessellator's first level tile delta\n     * of 90 degrees, tile dimensions of 32x32 and detail control of 20.\n     */\n    protected var tileCache = LruMemoryCache<String, Array<Tile>>(400, 320)\n    protected val topLevelTiles = mutableListOf<Tile>()\n    protected val currentTerrain = BasicTerrain()\n    protected var levelSetVertexTexCoords: FloatArray? = null\n    protected var levelSetLineElements: ShortArray? = null\n    protected var levelSetTriStripElements: ShortArray? = null\n    protected val levelSetLineElementRange = Range()\n    protected val levelSetTriStripElementRange = Range()\n    protected var levelSetVertexTexCoordBuffer: FloatBufferObject? = null\n    protected var levelSetElementBuffer: ShortBufferObject? = null\n    protected var levelSetVertexTexCoordKey = this::class.simpleName + \".vertexTexCoordKey\"\n    protected var levelSetElementKey = this::class.simpleName + \".elementKey\"\n\n    /**\n     * Cache size should be adjusted in case of levelSet or detailControl changed.\n     */\n    fun setupTileCache(capacity: Long, lowWater: Long = (capacity * 0.8).toLong()) {\n        tileCache = LruMemoryCache(capacity, lowWater)\n    }\n\n    override fun tessellate(rc: RenderContext) {\n        assembleTiles(rc)\n        rc.terrain = currentTerrain\n        if (!rc.isPickMode) lastTerrain.copy(currentTerrain)\n    }\n\n    override fun createTile(sector: Sector, level: Level, row: Int, column: Int) = TerrainTile(sector, level, row, column)\n\n    protected open fun assembleTiles(rc: RenderContext) {\n        // Clear previous terrain tiles\n        currentTerrain.clear()\n\n        // Assemble the terrain buffers and OpenGL buffer objects associated with the level set.\n        assembleLevelSetBuffers(rc)\n        currentTerrain.triStripElements = levelSetTriStripElements\n\n        // Assemble the tessellator's top level terrain tiles, which we keep permanent references to.\n        if (topLevelTiles.isEmpty()) createTopLevelTiles()\n\n        // Subdivide the top level tiles until the desired resolution is achieved in each part of the scene.\n        for (tile in topLevelTiles) addTileOrDescendants(rc, tile as TerrainTile)\n\n        // Sort terrain tiles by L1 distance on cylinder from camera\n        currentTerrain.sort()\n\n        // Release references to render resources acquired while assembling tiles.\n        levelSetVertexTexCoordBuffer = null\n        levelSetElementBuffer = null\n    }\n\n    protected open fun createTopLevelTiles() {\n        levelSet.firstLevel?.let{ Tile.assembleTilesForLevel(it, this, topLevelTiles) }\n    }\n\n    protected open fun addTileOrDescendants(rc: RenderContext, tile: TerrainTile) {\n        // ignore the tile and its descendants if it's not needed or not visible\n        if (!tile.intersectsSector(levelSet.sector) || !tile.intersectsFrustum(rc, rc.frustum)) return\n        if (tile.level.isLastLevel || !tile.mustSubdivide(rc, detailControl)) {\n            addTile(rc, tile)\n            return  // use the tile if it does not need to be subdivided\n        }\n        for (child in tile.subdivideToCache(this, tileCache, 4)) // each tile has a cached size of 1\n            addTileOrDescendants(rc, child as TerrainTile) // recursively process the tile's children\n    }\n\n    protected open fun addTile(rc: RenderContext, tile: TerrainTile) {\n        // Prepare the terrain tile and add it.\n        tile.prepare(rc)\n        currentTerrain.addTile(tile)\n\n        // Prepare a drawable for the terrain tile for processing on the OpenGL thread.\n        val pool = rc.getDrawablePool<BasicDrawableTerrain>()\n        val drawable = BasicDrawableTerrain.obtain(pool)\n        prepareDrawableTerrain(rc, tile, drawable)\n        rc.offerDrawableTerrain(drawable, tile.sortOrder)\n    }\n\n    protected open fun invalidateTiles() {\n        topLevelTiles.clear()\n        currentTerrain.clear()\n        lastTerrain.clear()\n        tileCache.clear()\n        levelSetVertexTexCoords = null\n        levelSetLineElements = null\n        levelSetTriStripElements = null\n    }\n\n    protected open fun prepareDrawableTerrain(rc: RenderContext, tile: TerrainTile, drawable: BasicDrawableTerrain) {\n        // Assemble the drawable's geographic sector and Cartesian vertex origin.\n        drawable.sector.copy(tile.sector)\n        drawable.vertexOrigin.copy(tile.origin)\n\n        // Assemble the drawable's element buffer ranges.\n        drawable.lineElementRange.copy(levelSetLineElementRange)\n        drawable.triStripElementRange.copy(levelSetTriStripElementRange)\n\n        // Assemble the drawable's OpenGL buffer objects.\n        drawable.vertexPoints = tile.getPointBuffer(rc)\n        drawable.vertexTexCoords = levelSetVertexTexCoordBuffer\n        drawable.elements = levelSetElementBuffer\n    }\n\n    protected open fun assembleLevelSetBuffers(rc: RenderContext) {\n        val numLat = levelSet.tileHeight + 2\n        val numLon = levelSet.tileWidth + 2\n\n        // Assemble the level set's vertex tex coords.\n        val vertexTexCoords = levelSetVertexTexCoords ?: FloatArray(numLat * numLon * 2).also {\n            levelSetVertexTexCoords = it\n            assembleVertexTexCoords(numLat, numLon, it)\n        }\n\n        // Assemble the level set's line elements.\n        val lineElements = levelSetLineElements ?: assembleLineElements(numLat, numLon).also { levelSetLineElements = it }\n\n        // Assemble the level set's triangle strip elements.\n        val triStripElements = levelSetTriStripElements ?: assembleTriStripElements(numLat, numLon).also { levelSetTriStripElements = it }\n\n        // Retrieve or create the level set's OpenGL vertex tex coord buffer object.\n        levelSetVertexTexCoordBuffer = rc.getBufferObject(levelSetVertexTexCoordKey) {\n            FloatBufferObject(GL_ARRAY_BUFFER, vertexTexCoords)\n        }\n\n        // Retrieve or create the level set's OpenGL element buffer object.\n        levelSetElementBuffer = rc.getBufferObject(levelSetElementKey) {\n            ShortBufferObject(GL_ELEMENT_ARRAY_BUFFER, lineElements + triStripElements).also {\n                levelSetLineElementRange.upper = lineElements.size\n                levelSetTriStripElementRange.lower = lineElements.size\n                levelSetTriStripElementRange.upper = lineElements.size + triStripElements.size\n            }\n        }\n    }\n\n    protected open fun assembleVertexTexCoords(numLat: Int, numLon: Int, result: FloatArray): FloatArray {\n        val ds = 1f / if (numLon > 1) numLon - 3 else 1\n        val dt = 1f / if (numLat > 1) numLat - 3 else 1\n        var s = 0f\n        var t = 0f\n        var rIdx = 0\n\n        // Iterate over the number of latitude and longitude vertices, computing the parameterized S and T coordinates\n        // corresponding to each vertex.\n        for (tIdx in 0 until numLat) {\n            when {\n                tIdx < 2 -> t = 0f // explicitly set the first T coordinate to 0 to ensure alignment\n                tIdx < numLat - 2 -> t += dt\n                else -> t = 1f // explicitly set the last T coordinate to 1 to ensure alignment\n            }\n            for (sIdx in 0 until numLon) {\n                when {\n                    sIdx < 2 -> s = 0f // explicitly set the first S coordinate to 0 to ensure alignment\n                    sIdx < numLon - 2 -> s += ds\n                    else -> s = 1f // explicitly set the last S coordinate to 1 to ensure alignment\n                }\n                result[rIdx++] = s\n                result[rIdx++] = t\n            }\n        }\n        return result\n    }\n\n    protected open fun assembleLineElements(numLat: Int, numLon: Int): ShortArray {\n        // Allocate a buffer to hold the indices.\n        val count = (numLat * (numLon - 1) + numLon * (numLat - 1)) * 2\n        val result = ShortArray(count)\n        var pos = 0\n\n        // Add a line between each row to define the horizontal cell outlines.\n        for (latIndex in 0 until numLat) {\n            for (lonIndex in 0 until numLon - 1) {\n                val vertex = lonIndex + latIndex * numLon\n                result[pos++] = vertex.toShort()\n                result[pos++] = (vertex + 1).toShort()\n            }\n        }\n\n        // Add a line between each column to define the vertical cell outlines.\n        for (lonIndex in 0 until numLon) {\n            for (latIndex in 0 until numLat - 1) {\n                val vertex = lonIndex + latIndex * numLon\n                result[pos++] = vertex.toShort()\n                result[pos++] = (vertex + numLon).toShort()\n            }\n        }\n        return result\n    }\n\n    protected open fun assembleTriStripElements(numLat: Int, numLon: Int): ShortArray {\n        // Allocate a buffer to hold the indices.\n        val count = ((numLat - 1) * numLon + (numLat - 2)) * 2\n        val result = ShortArray(count)\n        var pos = 0\n        var vertex = 0\n        for (latIndex in 0 until numLat - 1) {\n            // Create a triangle strip joining each adjacent column of vertices, starting in the bottom left corner and\n            // proceeding to the right. The first vertex starts with the left row of vertices and moves right to create\n            // a counterclockwise winding order.\n            for (lonIndex in 0 until numLon) {\n                vertex = lonIndex + latIndex * numLon\n                result[pos++] = (vertex + numLon).toShort()\n                result[pos++] = vertex.toShort()\n            }\n\n            // Insert indices to create 2 degenerate triangles:\n            // - one for the end of the current row, and\n            // - one for the beginning of the next row\n            if (latIndex < numLat - 2) {\n                result[pos++] = vertex.toShort()\n                result[pos++] = ((latIndex + 2) * numLon).toShort()\n            }\n        }\n        return result\n    }\n}","package earth.worldwind.globe.terrain\n\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.util.Level\nimport earth.worldwind.util.Tile\nimport earth.worldwind.util.kgl.GL_ARRAY_BUFFER\nimport kotlinx.datetime.Instant\n\n/**\n * Represents a portion of a globe's terrain. Applications typically do not interact directly with this class.\n */\nopen class TerrainTile(sector: Sector, level: Level, row: Int, column: Int): Tile(sector, level, row, column) {\n    /**\n     * Minimum elevation value used by the BasicTessellator to determine the terrain mesh edge extension depth (skirt).\n     * This value is scaled by the vertical exaggeration when the terrain is generated.\n     */\n    val heights by lazy { FloatArray( level.tileWidth * level.tileHeight) }\n    val points by lazy { FloatArray((level.tileWidth + 2) * (level.tileHeight + 2) * 3) }\n    val origin = Vec3()\n    internal val minTerrainElevation = -Short.MAX_VALUE.toFloat()\n    internal var heightTimestamp = Instant.DISTANT_PAST\n    internal var verticalExaggeration = 0.0f\n    var sortOrder = 0.0\n        protected set\n    private lateinit var pointBufferKey: String\n\n    open fun prepare(rc: RenderContext) {\n        val globe = rc.globe!!\n        val tileWidth = level.tileWidth\n        val tileHeight = level.tileHeight\n        val timestamp = globe.elevationModel.timestamp\n        if (timestamp !== heightTimestamp) {\n            val heights = heights\n            heights.fill(0f)\n            globe.elevationModel.getHeightGrid(sector, tileWidth, tileHeight, heights)\n        }\n        val ve = rc.verticalExaggeration.toFloat()\n        if (ve != verticalExaggeration || timestamp !== heightTimestamp) {\n            val origin = origin\n            val heights = heights\n            val points = points\n            val borderHeight = minTerrainElevation * ve\n            val rowStride = (tileWidth + 2) * 3\n            globe.geographicToCartesian(sector.centroidLatitude, sector.centroidLongitude, 0.0, origin)\n            globe.geographicToCartesianGrid(\n                sector, tileWidth, tileHeight, heights, ve, origin, points, rowStride + 3, rowStride\n            )\n            globe.geographicToCartesianBorder(\n                sector, tileWidth + 2, tileHeight + 2, borderHeight, origin, points\n            )\n            updatePointBufferKey()\n        }\n        heightTimestamp = timestamp\n        verticalExaggeration = ve\n        sortOrder = drawSortOrder(rc)\n    }\n\n    fun getPointBuffer(rc: RenderContext) = rc.getBufferObject(pointBufferKey) {\n        FloatBufferObject(GL_ARRAY_BUFFER, points)\n    }\n\n    protected fun updatePointBufferKey() { pointBufferKey = \"TerrainTile.points.$tileKey.${pointBufferSequence++}\" }\n\n    companion object {\n        private var pointBufferSequence = 0L // must be static to avoid cache collisions when a tile instances is destroyed and re-created\n    }\n}","package earth.worldwind.layer\n\nimport earth.worldwind.render.RenderContext\nimport kotlin.jvm.JvmOverloads\n\nabstract class AbstractLayer @JvmOverloads constructor(override var displayName: String? = null): Layer {\n    override var isEnabled = true\n    override var isPickEnabled = true\n    override var opacity = 1f\n    override var minActiveAltitude = Double.NEGATIVE_INFINITY\n    override var maxActiveAltitude = Double.POSITIVE_INFINITY\n    private var userProperties: MutableMap<Any, Any>? = null\n\n    override fun getUserProperty(key: Any) = userProperties?.get(key)\n\n    override fun putUserProperty(key: Any, value: Any): Any? {\n        val userProperties = userProperties ?: mutableMapOf<Any, Any>().also { userProperties = it }\n        return userProperties.put(key, value)\n    }\n\n    override fun removeUserProperty(key: Any) = userProperties?.remove(key)\n\n    override fun hasUserProperty(key: Any) = userProperties?.containsKey(key) == true\n\n    override fun render(rc: RenderContext) {\n        if (isEnabled && (isPickEnabled || !rc.isPickMode) && isWithinActiveAltitudes(rc)) doRender(rc)\n    }\n\n    override fun isWithinActiveAltitudes(rc: RenderContext) = rc.camera!!.position.altitude in minActiveAltitude..maxActiveAltitude\n\n    protected abstract fun doRender(rc: RenderContext)\n}","package earth.worldwind.layer\n\nimport earth.worldwind.MR\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.image.ImageConfig\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.shape.SurfaceImage\nimport kotlin.jvm.JvmOverloads\n\n/**\n * Displays a single image spanning the globe. By default, BackgroundLayer is configured to display NASA's Blue Marble\n * next generation image at 40km resolution from the built-in WorldWind library resource\n * res/drawable/worldwind_worldtopobathy2004053.\n */\nclass BackgroundLayer @JvmOverloads constructor(\n    imageSource: ImageSource = ImageSource.fromResource(MR.images.worldwind_worldtopobathy2004053),\n    imageOptions: ImageOptions = ImageOptions(ImageConfig.RGB_565)\n) : RenderableLayer(\"Background\") {\n    // Disable picking for the layer because it covers the full sphere and will override a terrain pick.\n    override var isPickEnabled = false\n\n    init {\n        // Delegate display to the SurfaceImage shape.\n        val surfaceImage = SurfaceImage(Sector().setFullSphere(), imageSource)\n        surfaceImage.imageOptions = imageOptions\n        addRenderable(surfaceImage)\n    }\n}","package earth.worldwind.layer\n\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\n\nopen class LayerList() : Iterable<Layer> {\n    protected val layers = mutableListOf<Layer>()\n\n    constructor(layerList: LayerList): this() { addAllLayers(layerList) }\n\n    constructor(layers: Iterable<Layer>): this() { addAllLayers(layers) }\n\n    fun getLayer(index: Int): Layer {\n        require(index in layers.indices) {\n            logMessage(ERROR, \"LayerList\", \"getLayer\", \"invalidIndex\")\n        }\n        return layers[index]\n    }\n\n    fun setLayer(index: Int, layer: Layer): Layer {\n        require(index in layers.indices) {\n            logMessage(ERROR, \"LayerList\", \"setLayer\", \"invalidIndex\")\n        }\n        return layers.set(index, layer)\n    }\n\n    fun indexOfLayer(layer: Layer) = layers.indexOf(layer)\n\n    fun indexOfLayerNamed(name: String): Int {\n        for (idx in layers.indices) if ( name == layers[idx].displayName) return idx\n        return -1\n    }\n\n    fun indexOfLayerWithProperty(key: Any, value: Any): Int {\n        for (idx in layers.indices) {\n            val layer = layers[idx]\n            if (layer.hasUserProperty(key) && value == layer.getUserProperty(key)) return idx\n        }\n        return -1\n    }\n\n    fun addLayer(layer: Layer) { layers.add(layer) }\n\n    fun addLayer(index: Int, layer: Layer) {\n        require(index in layers.indices) {\n            logMessage(ERROR, \"LayerList\", \"addLayer\", \"invalidIndex\")\n        }\n        layers.add(index, layer)\n    }\n\n    fun addAllLayers(list: LayerList) {\n        //layers.ensureCapacity(list.layers.size)\n        for (layer in list.layers) layers.add(layer) // we know the contents of layerList.layers is valid\n    }\n\n    fun addAllLayers(iterable: Iterable<Layer>) { for (layer in iterable) layers.add(layer) }\n\n    fun removeLayer(layer: Layer): Boolean { return layers.remove(layer) }\n\n    fun removeLayer(index: Int): Layer {\n        require(index in layers.indices) {\n            logMessage(ERROR, \"LayerList\", \"removeLayer\", \"invalidIndex\")\n        }\n        return layers.removeAt(index)\n    }\n\n    fun removeAllLayers(layers: Iterable<Layer>): Boolean {\n        var removed = false\n        for (layer in layers) removed = removed or this.layers.remove(layer)\n        return removed\n    }\n\n    fun clearLayers() { layers.clear() }\n\n    override fun iterator() = layers.iterator()\n\n    fun render(rc: RenderContext) {\n        for (layer in layers) {\n            rc.currentLayer = layer\n            try {\n                layer.render(rc)\n            } catch (e: Exception) {\n                logMessage(\n                    ERROR, \"LayerList\", \"render\",\n                    \"Exception while rendering layer '${layer.displayName}'\", e\n                )\n                // Keep going. Draw the remaining layers.\n            }\n        }\n        rc.currentLayer = null\n    }\n}","package earth.worldwind.layer\n\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.Renderable\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.jvm.JvmOverloads\n\nopen class RenderableLayer @JvmOverloads constructor(displayName: String? = null): AbstractLayer(displayName), Iterable<Renderable> {\n    protected val renderables = mutableListOf<Renderable>()\n    val count get() = renderables.size\n\n    constructor(layer: RenderableLayer): this(layer.displayName) { addAllRenderables(layer) }\n\n    constructor(renderables: Iterable<Renderable>): this() { addAllRenderables(renderables) }\n\n    fun isEmpty() = renderables.isEmpty()\n\n    fun getRenderable(index: Int): Renderable {\n        require(index in renderables.indices) {\n            logMessage(ERROR, \"RenderableLayer\", \"getRenderable\", \"invalidIndex\")\n        }\n        return renderables[index]\n    }\n\n    fun setRenderable(index: Int, renderable: Renderable): Renderable {\n        require(index in renderables.indices) {\n            logMessage(ERROR, \"RenderableLayer\", \"setRenderable\", \"invalidIndex\")\n        }\n        return renderables.set(index, renderable)\n    }\n\n    fun indexOfRenderable(renderable: Renderable) = renderables.indexOf(renderable)\n\n    fun indexOfRenderableNamed(name: String): Int {\n        for (idx in renderables.indices) if (name == renderables[idx].displayName) return idx\n        return -1\n    }\n\n    fun indexOfRenderableWithProperty(key: Any, value: Any): Int {\n        for (idx in renderables.indices) {\n            val renderable = renderables[idx]\n            if (renderable.hasUserProperty(key) && value == renderable.getUserProperty(key)) return idx\n        }\n        return -1\n    }\n\n    fun addRenderable(renderable: Renderable) { renderables.add(renderable) }\n\n    fun addRenderable(index: Int, renderable: Renderable) {\n        require(index in renderables.indices) {\n            logMessage(ERROR, \"RenderableLayer\", \"addRenderable\", \"invalidIndex\")\n        }\n        renderables.add(index, renderable)\n    }\n\n    fun addAllRenderables(layer: RenderableLayer) {\n        //renderables.ensureCapacity(layer.renderables.size)\n        for (renderable in layer.renderables) renderables.add(renderable) // we know the contents of layer.renderables is valid\n    }\n\n    fun addAllRenderables(iterable: Iterable<Renderable>) { for (renderable in iterable) renderables.add(renderable) }\n\n    fun removeRenderable(renderable: Renderable) = renderables.remove(renderable)\n\n    fun removeRenderable(index: Int): Renderable {\n        require(index in renderables.indices) {\n            logMessage(ERROR, \"RenderableLayer\", \"removeRenderable\", \"invalidIndex\")\n        }\n        return renderables.removeAt(index)\n    }\n\n    fun removeAllRenderables(renderables: Iterable<Renderable>): Boolean {\n        var removed = false\n        for (renderable in renderables) removed = removed or this.renderables.remove(renderable)\n        return removed\n    }\n\n    fun clearRenderables() { renderables.clear() }\n\n    override fun iterator() = renderables.iterator()\n\n    override fun doRender(rc: RenderContext) {\n        for (renderable in renderables) {\n            try {\n                renderable.render(rc)\n            } catch (e: Exception) {\n                logMessage(\n                    ERROR, \"RenderableLayer\", \"doRender\",\n                    \"Exception while rendering shape '${renderable.displayName}'\", e\n                )\n                // Keep going. Draw the remaining renderables.\n            }\n        }\n    }\n}","package earth.worldwind.layer\n\nimport earth.worldwind.draw.DrawableTessellation\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.program.BasicShaderProgram\n\nclass ShowTessellationLayer: AbstractLayer(\"Terrain Tessellation\") {\n    override var isPickEnabled = false\n    var color = Color()\n        set(value) {\n            field.copy(value)\n        }\n\n    override fun doRender(rc: RenderContext) {\n        if (rc.terrain!!.sector.isEmpty) return  // no terrain to render\n\n        // Use WorldWind's basic GLSL program.\n        val program = rc.getShaderProgram { BasicShaderProgram() }\n        val pool = rc.getDrawablePool<DrawableTessellation>()\n        val drawable = DrawableTessellation.obtain(pool).set(program, color)\n        rc.offerSurfaceDrawable(drawable, 1.0 /*z-order after surface textures*/)\n    }\n}","package earth.worldwind.layer.atmosphere\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.render.program.AbstractShaderProgram\nimport earth.worldwind.util.kgl.KglUniformLocation\nimport kotlin.math.PI\nimport kotlin.math.pow\n\n// TODO Correctly compute the atmosphere color for eye positions beneath the atmosphere\n// TODO Test the effect of working in local coordinates (reference point) on the GLSL atmosphere programs\nabstract class AbstractAtmosphereProgram: AbstractShaderProgram() {\n    var altitude = 160000.0\n        protected set\n    protected var fragModeId = KglUniformLocation.NONE\n    protected var mvpMatrixId = KglUniformLocation.NONE\n    protected var texCoordMatrixId = KglUniformLocation.NONE\n    protected var texSamplerId = KglUniformLocation.NONE\n    protected var vertexOriginId = KglUniformLocation.NONE\n    protected var eyePointId = KglUniformLocation.NONE\n    protected var eyeMagnitudeId = KglUniformLocation.NONE\n    protected var eyeMagnitude2Id = KglUniformLocation.NONE\n    protected var lightDirectionId = KglUniformLocation.NONE\n    protected var invWavelengthId = KglUniformLocation.NONE\n    protected var atmosphereRadiusId = KglUniformLocation.NONE\n    protected var atmosphereRadius2Id = KglUniformLocation.NONE\n    protected var globeRadiusId = KglUniformLocation.NONE\n    protected var krESunId = KglUniformLocation.NONE\n    protected var kmESunId = KglUniformLocation.NONE\n    protected var kr4PIId = KglUniformLocation.NONE\n    protected var km4PIId = KglUniformLocation.NONE\n    protected var scaleId = KglUniformLocation.NONE\n    protected var scaleDepthId = KglUniformLocation.NONE\n    protected var scaleOverScaleDepthId = KglUniformLocation.NONE\n    protected var gId = KglUniformLocation.NONE\n    protected var g2Id = KglUniformLocation.NONE\n    protected var exposureId = KglUniformLocation.NONE\n    private val array = FloatArray(16)\n\n    /**\n     * Frag color indicates the atmospheric scattering color components written to the fragment color. Accepted values\n     * are [FRAGMODE_PRIMARY], [FRAGMODE_SECONDARY] and [FRAGMODE_PRIMARY_TEX_BLEND].\n     */\n    enum class FragMode(val asInt : Int) {\n        PRIMARY(1),\n        SECONDARY(2),\n        PRIMARY_TEX_BLEND(3)\n    }\n\n    override fun initProgram(dc: DrawContext) {\n        super.initProgram(dc)\n        val invWavelength = Vec3(\n            1 / 0.650.pow(4.0),  // 650 nm for red\n            1 / 0.570.pow(4.0),  // 570 nm for green\n            1 / 0.475.pow(4.0)   // 475 nm for blue\n        )\n        val rayleighScaleDepth = 0.25\n        val kr = 0.0025 // Rayleigh scattering constant\n        val km = 0.0010 // Mie scattering constant\n        val eSun = 20.0 // Sun brightness constant\n        val g = -0.990 // The Mie phase asymmetry factor\n        val exposure = 2.0\n        fragModeId = gl.getUniformLocation(program, \"fragMode\")\n        gl.uniform1i(fragModeId, FragMode.PRIMARY.asInt)\n        mvpMatrixId = gl.getUniformLocation(program, \"mvpMatrix\")\n        Matrix4().transposeToArray(array, 0) // 4 x 4 identity matrix\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, array, 0)\n        texCoordMatrixId = gl.getUniformLocation(program, \"texCoordMatrix\")\n        Matrix3().transposeToArray(array, 0) // 3 x 3 identity matrix\n        gl.uniformMatrix3fv(texCoordMatrixId, 1, false, array, 0)\n        texSamplerId = gl.getUniformLocation(program, \"texSampler\")\n        gl.uniform1i(texSamplerId, 0) // GL_TEXTURE0\n        vertexOriginId = gl.getUniformLocation(program, \"vertexOrigin\")\n        array.fill(0f)\n        gl.uniform3fv(vertexOriginId, 1, array, 0)\n        eyePointId = gl.getUniformLocation(program, \"eyePoint\")\n        array.fill(0f)\n        gl.uniform3fv(eyePointId, 1, array, 0)\n        eyeMagnitudeId = gl.getUniformLocation(program, \"eyeMagnitude\")\n        gl.uniform1f(eyeMagnitudeId, 0f)\n        eyeMagnitude2Id = gl.getUniformLocation(program, \"eyeMagnitude2\")\n        gl.uniform1f(eyeMagnitude2Id, 0f)\n        lightDirectionId = gl.getUniformLocation(program, \"lightDirection\")\n        array.fill(0f)\n        gl.uniform3fv(lightDirectionId, 1, array, 0)\n        invWavelengthId = gl.getUniformLocation(program, \"invWavelength\")\n        invWavelength.toArray(array, 0)\n        gl.uniform3fv(invWavelengthId, 1, array, 0)\n        atmosphereRadiusId = gl.getUniformLocation(program, \"atmosphereRadius\")\n        gl.uniform1f(atmosphereRadiusId, 0f)\n        atmosphereRadius2Id = gl.getUniformLocation(program, \"atmosphereRadius2\")\n        gl.uniform1f(atmosphereRadius2Id, 0f)\n        globeRadiusId = gl.getUniformLocation(program, \"globeRadius\")\n        gl.uniform1f(globeRadiusId, 0f)\n        krESunId = gl.getUniformLocation(program, \"KrESun\")\n        gl.uniform1f(krESunId, (kr * eSun).toFloat())\n        kmESunId = gl.getUniformLocation(program, \"KmESun\")\n        gl.uniform1f(kmESunId, (km * eSun).toFloat())\n        kr4PIId = gl.getUniformLocation(program, \"Kr4PI\")\n        gl.uniform1f(kr4PIId, (kr * 4 * PI).toFloat())\n        km4PIId = gl.getUniformLocation(program, \"Km4PI\")\n        gl.uniform1f(km4PIId, (km * 4 * PI).toFloat())\n        scaleId = gl.getUniformLocation(program, \"scale\")\n        gl.uniform1f(scaleId, (1 / altitude).toFloat())\n        scaleDepthId = gl.getUniformLocation(program, \"scaleDepth\")\n        gl.uniform1f(scaleDepthId, rayleighScaleDepth.toFloat())\n        scaleOverScaleDepthId = gl.getUniformLocation(program, \"scaleOverScaleDepth\")\n        gl.uniform1f(scaleOverScaleDepthId, (1 / altitude / rayleighScaleDepth).toFloat())\n        gId = gl.getUniformLocation(program, \"g\")\n        gl.uniform1f(gId, g.toFloat())\n        g2Id = gl.getUniformLocation(program, \"g2\")\n        gl.uniform1f(g2Id, (g * g).toFloat())\n        exposureId = gl.getUniformLocation(program, \"exposure\")\n        gl.uniform1f(exposureId, exposure.toFloat())\n    }\n\n    fun loadFragMode(fragMode: FragMode) { gl.uniform1i(fragModeId, fragMode.asInt) }\n\n    fun loadModelviewProjection(matrix: Matrix4) {\n        matrix.transposeToArray(array, 0)\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, array, 0)\n    }\n\n    fun loadTexCoordMatrix(matrix: Matrix3) {\n        matrix.transposeToArray(array, 0)\n        gl.uniformMatrix3fv(texCoordMatrixId, 1, false, array, 0)\n    }\n\n    fun loadVertexOrigin(origin: Vec3) {\n        origin.toArray(array, 0)\n        gl.uniform3fv(vertexOriginId, 1, array, 0)\n    }\n\n    fun loadVertexOrigin(x: Double, y: Double, z: Double) {\n        gl.uniform3f(vertexOriginId, x.toFloat(), y.toFloat(), z.toFloat())\n    }\n\n    fun loadLightDirection(direction: Vec3) {\n        direction.toArray(array, 0)\n        gl.uniform3fv(lightDirectionId, 1, array, 0)\n    }\n\n    fun loadEyePoint(eyePoint: Vec3) {\n        eyePoint.toArray(array, 0)\n        gl.uniform3fv(eyePointId, 1, array, 0)\n        gl.uniform1f(eyeMagnitudeId, eyePoint.magnitude.toFloat())\n        gl.uniform1f(eyeMagnitude2Id, eyePoint.magnitudeSquared.toFloat())\n    }\n\n    fun loadGlobeRadius(equatorialRadius: Double) {\n        val ar = equatorialRadius + altitude\n        gl.uniform1f(globeRadiusId, equatorialRadius.toFloat())\n        gl.uniform1f(atmosphereRadiusId, ar.toFloat())\n        gl.uniform1f(atmosphereRadius2Id, (ar * ar).toFloat())\n    }\n}","package earth.worldwind.layer.atmosphere\n\nimport earth.worldwind.MR\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.layer.AbstractLayer\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.buffer.ShortBufferObject\nimport earth.worldwind.render.image.ImageConfig\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ImageSource.Companion.fromResource\nimport earth.worldwind.util.SunPosition\nimport earth.worldwind.util.kgl.GL_ARRAY_BUFFER\nimport earth.worldwind.util.kgl.GL_ELEMENT_ARRAY_BUFFER\nimport kotlinx.datetime.Instant\n\nopen class AtmosphereLayer: AbstractLayer(\"Atmosphere\") {\n    override var isPickEnabled = false\n    var nightImageSource = fromResource(MR.images.dnb_land_ocean_ice_2012)\n    var nightImageOptions = ImageOptions(ImageConfig.RGB_565)\n    /**\n     * Display light location on a specified time point. If null, then light is located at camera position.\n     */\n    var time : Instant? = null\n    protected val activeLightDirection = Vec3()\n    private val fullSphereSector = Sector().setFullSphere()\n\n    companion object {\n        private val VERTEX_POINTS_KEY = AtmosphereLayer::class.simpleName + \".points\"\n        private val TRI_STRIP_ELEMENTS_KEY = AtmosphereLayer::class.simpleName + \".triStripElements\"\n    }\n\n    override fun doRender(rc: RenderContext) {\n        // Compute the currently active light direction.\n        determineLightDirection(rc)\n\n        // Render the sky portion of the atmosphere.\n        renderSky(rc)\n\n        // Render the ground portion of the atmosphere.\n        renderGround(rc)\n    }\n\n    protected open fun determineLightDirection(rc: RenderContext) {\n        // TODO Make light/sun direction an optional property of the WorldWindow and attach it to the RenderContext each frame\n        // TODO RenderContext property defaults to the eye lat/lon like we have below\n        time?.let {\n            val lightLocation = SunPosition.getAsGeographicLocation(it)\n            rc.globe!!.geographicToCartesianNormal(\n                lightLocation.latitude, lightLocation.longitude, activeLightDirection\n            )\n        } ?: rc.globe!!.geographicToCartesianNormal(\n            rc.camera!!.position.latitude, rc.camera!!.position.longitude, activeLightDirection\n        )\n    }\n\n    protected open fun renderSky(rc: RenderContext) {\n        val pool = rc.getDrawablePool<DrawableSkyAtmosphere>()\n        val drawable = DrawableSkyAtmosphere.obtain(pool)\n        val size = 128\n        drawable.program = rc.getShaderProgram { SkyProgram() }\n        drawable.vertexPoints = rc.getBufferObject(VERTEX_POINTS_KEY) {\n            assembleVertexPoints(rc, size, size, drawable.program!!.altitude.toFloat())\n        }\n        drawable.triStripElements = rc.getBufferObject(TRI_STRIP_ELEMENTS_KEY) { assembleTriStripElements(size, size) }\n        drawable.lightDirection.copy(activeLightDirection)\n        drawable.globeRadius = rc.globe!!.equatorialRadius\n        rc.offerSurfaceDrawable(drawable, Double.POSITIVE_INFINITY)\n    }\n\n    protected open fun renderGround(rc: RenderContext) {\n        if (rc.terrain!!.sector.isEmpty) return  // no terrain surface to render on\n        val pool = rc.getDrawablePool<DrawableGroundAtmosphere>()\n        val drawable = DrawableGroundAtmosphere.obtain(pool)\n        drawable.program = rc.getShaderProgram { GroundProgram() }\n        drawable.lightDirection.copy(activeLightDirection)\n        drawable.globeRadius = rc.globe!!.equatorialRadius\n\n        // Use this layer's night image when the light location is different from the eye location.\n        drawable.nightTexture = time?.run{ rc.getTexture(nightImageSource, nightImageOptions) }\n        rc.offerSurfaceDrawable(drawable, Double.POSITIVE_INFINITY)\n    }\n\n    protected open fun assembleVertexPoints(rc: RenderContext, numLat: Int, numLon: Int, altitude: Float): FloatBufferObject {\n        val count = numLat * numLon\n        val altitudes = FloatArray(count)\n        altitudes.fill(altitude)\n        val points = FloatArray(count * 3)\n        rc.globe!!.geographicToCartesianGrid(\n            fullSphereSector, numLat, numLon, altitudes, 1.0f, null, points, 0, 0\n        )\n        return FloatBufferObject(GL_ARRAY_BUFFER, points)\n    }\n\n    // TODO move this into a basic tessellator implementation in WorldWind\n    // TODO tessellator and atmosphere needs the TriStripIndices - could we add these to BasicGlobe (needs to be on a static context)\n    // TODO may need to switch the tessellation method anyway - geographic grid may produce artifacts at the poles\n    protected open fun assembleTriStripElements(numLat: Int, numLon: Int): ShortBufferObject {\n        // Allocate a buffer to hold the indices.\n        val count = ((numLat - 1) * numLon + (numLat - 2)) * 2\n        val elements = ShortArray(count)\n        var pos = 0\n        var vertex = 0\n        for (latIndex in 0 until numLat - 1) {\n            // Create a triangle strip joining each adjacent column of vertices, starting in the bottom left corner and\n            // proceeding to the right. The first vertex starts with the left row of vertices and moves right to create\n            // a counterclockwise winding order.\n            for (lonIndex in 0 until numLon) {\n                vertex = lonIndex + latIndex * numLon\n                elements[pos++] = (vertex + numLon).toShort()\n                elements[pos++] = vertex.toShort()\n            }\n\n            // Insert indices to create 2 degenerate triangles:\n            // - one for the end of the current row, and\n            // - one for the beginning of the next row\n            if (latIndex < numLat - 2) {\n                elements[pos++] = vertex.toShort()\n                elements[pos++] = ((latIndex + 2) * numLon).toShort()\n            }\n        }\n        return ShortBufferObject(GL_ELEMENT_ARRAY_BUFFER, elements)\n    }\n}","package earth.worldwind.layer.atmosphere\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.draw.Drawable\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.layer.atmosphere.AbstractAtmosphereProgram.FragMode.*\nimport earth.worldwind.render.Texture\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.*\nimport kotlin.jvm.JvmStatic\n\nopen class DrawableGroundAtmosphere : Drawable {\n    val lightDirection = Vec3()\n    var globeRadius = 0.0\n    var program: GroundProgram? = null\n    var nightTexture: Texture? = null\n    protected val mvpMatrix = Matrix4()\n    protected val texCoordMatrix = Matrix3()\n    protected val fullSphereSector = Sector().setFullSphere()\n    private var pool: Pool<DrawableGroundAtmosphere>? = null\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableGroundAtmosphere>): DrawableGroundAtmosphere {\n            val instance = pool.acquire() ?: DrawableGroundAtmosphere()  // get an instance from the pool\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        program = null\n        nightTexture = null\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        val program = program ?: return  // program unspecified\n        if (!program.useProgram(dc)) return  // program failed to build\n\n        // Use the draw context's globe.\n        program.loadGlobeRadius(globeRadius)\n\n        // Use the draw context's eye point.\n        program.loadEyePoint(dc.eyePoint)\n\n        // Use this layer's light direction.\n        program.loadLightDirection(lightDirection)\n\n        // Set up to use the shared tile tex coord attributes.\n        dc.gl.enableVertexAttribArray(1)\n\n        // Attempt to bind the night side texture to multi-texture unit 0.\n        dc.activeTextureUnit(GL_TEXTURE0)\n        val nightTexture = nightTexture\n        val textureBound = nightTexture?.bindTexture(dc) == true\n        for (idx in 0 until dc.drawableTerrainCount) {\n            // Get the drawable terrain associated with the draw context.\n            val terrain = dc.getDrawableTerrain(idx)\n\n            // Use the terrain's vertex point attribute and vertex tex coord attribute.\n            if (!terrain.useVertexPointAttrib(dc, 0 /*vertexPoint*/) ||\n                !terrain.useVertexTexCoordAttrib(dc, 1 /*vertexTexCoord*/)\n            ) continue  // vertex buffer failed to bind\n\n            // Use the vertex origin for the terrain.\n            val terrainOrigin = terrain.vertexOrigin\n            program.loadVertexOrigin(terrainOrigin)\n\n            // Use the draw context's modelview projection matrix, transformed to terrain local coordinates.\n            mvpMatrix.copy(dc.modelviewProjection)\n            mvpMatrix.multiplyByTranslation(terrainOrigin.x, terrainOrigin.y, terrainOrigin.z)\n            program.loadModelviewProjection(mvpMatrix)\n\n            // Use a tex coord matrix that registers the night texture correctly on each terrain.\n            if (textureBound && nightTexture != null) {\n                texCoordMatrix.copy(nightTexture.coordTransform)\n                texCoordMatrix.multiplyByTileTransform(terrain.sector, fullSphereSector)\n                program.loadTexCoordMatrix(texCoordMatrix)\n            }\n\n            // Draw the terrain as triangles, multiplying the current fragment color by the program's secondary color.\n            program.loadFragMode(SECONDARY)\n            dc.gl.blendFunc(GL_DST_COLOR, GL_ZERO)\n            terrain.drawTriangles(dc)\n\n            // Draw the terrain as triangles, adding the current fragment color to the program's primary color.\n            program.loadFragMode(if (textureBound) PRIMARY_TEX_BLEND else PRIMARY)\n            dc.gl.blendFunc(GL_ONE, GL_ONE)\n            terrain.drawTriangles(dc)\n        }\n\n        // Restore the default WorldWind OpenGL state.\n        dc.gl.blendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA)\n        dc.gl.disableVertexAttribArray(1)\n    }\n}","package earth.worldwind.layer.atmosphere\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.draw.Drawable\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.buffer.ShortBufferObject\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.kgl.*\nimport kotlin.jvm.JvmStatic\n\nclass DrawableSkyAtmosphere : Drawable {\n    var vertexPoints: FloatBufferObject? = null\n    var triStripElements: ShortBufferObject? = null\n    val lightDirection = Vec3()\n    var globeRadius = 0.0\n    var program: SkyProgram? = null\n    private var pool: Pool<DrawableSkyAtmosphere>? = null\n\n    companion object {\n        @JvmStatic\n        fun obtain(pool: Pool<DrawableSkyAtmosphere>): DrawableSkyAtmosphere {\n            val instance = pool.acquire() ?: DrawableSkyAtmosphere() // get an instance from the pool\n            instance.pool = pool\n            return instance\n        }\n    }\n\n    override fun recycle() {\n        program = null\n        vertexPoints = null\n        triStripElements = null\n        pool?.release(this)\n        pool = null\n    }\n\n    override fun draw(dc: DrawContext) {\n        val program = program ?: return  // program unspecified\n        if (!program.useProgram(dc)) return  // program failed to build\n        if (vertexPoints?.bindBuffer(dc) != true) return  // vertex buffer unspecified or failed to bind\n        val triStripElements = triStripElements ?: return // element buffer unspecified\n        if (!triStripElements.bindBuffer(dc)) return  // element buffer failed to bind\n\n        // Use the draw context's globe.\n        program.loadGlobeRadius(globeRadius)\n\n        // Use the draw context's eye point.\n        program.loadEyePoint(dc.eyePoint)\n\n        // Use this layer's light direction.\n        program.loadLightDirection(lightDirection)\n\n        // Use the vertex origin for the sky ellipsoid.\n        program.loadVertexOrigin(0.0, 0.0, 0.0)\n\n        // Use the draw context's modelview projection matrix.\n        program.loadModelviewProjection(dc.modelviewProjection)\n\n        // Use the sky's vertex point attribute.\n        dc.gl.vertexAttribPointer(0 /*vertexPoint*/, 3, GL_FLOAT, false, 0, 0)\n\n        // Draw the inside of the sky without writing to the depth buffer.\n        dc.gl.depthMask(false)\n        dc.gl.frontFace(GL_CW)\n        dc.gl.drawElements(GL_TRIANGLE_STRIP, triStripElements.byteCount / 2, GL_UNSIGNED_SHORT, 0)\n\n        // Restore the default WorldWind OpenGL state.\n        dc.gl.depthMask(true)\n        dc.gl.frontFace(GL_CCW)\n    }\n}","package earth.worldwind.layer.atmosphere\n\nopen class GroundProgram: AbstractAtmosphereProgram() {\n    override var programSources = arrayOf(\n        \"\"\"\n            precision mediump int; /* fragMode is used in both shaders, so we must use a common precision */\n\n            const int FRAGMODE_PRIMARY = 1;\n            const int FRAGMODE_SECONDARY = 2;\n            const int FRAGMODE_PRIMARY_TEX_BLEND = 3;\n\n            const int SAMPLE_COUNT = 2;\n            const float SAMPLES = 2.0;\n\n            uniform int fragMode;\n            uniform mat4 mvpMatrix;\n            uniform mat3 texCoordMatrix;\n            uniform vec3 vertexOrigin;\n            uniform vec3 eyePoint;\n            uniform float eyeMagnitude;\t        /* The eye point's magnitude */\n            uniform float eyeMagnitude2;\t    /* eyeMagnitude^2 */\n            uniform vec3 lightDirection;\t    /* The direction vector to the light source */\n            uniform vec3 invWavelength;\t        /* 1 / pow(wavelength, 4) for the red, green, and blue channels */\n            uniform float atmosphereRadius;     /* The outer (atmosphere) radius */\n            uniform float atmosphereRadius2;    /* atmosphereRadius^2 */\n            uniform float globeRadius;\t\t    /* The inner (planetary) radius */\n            uniform float KrESun;\t\t\t    /* Kr * ESun */\n            uniform float KmESun;\t\t\t    /* Km * ESun */\n            uniform float Kr4PI;\t\t\t    /* Kr * 4 * PI */\n            uniform float Km4PI;\t\t\t    /* Km * 4 * PI */\n            uniform float scale;\t\t\t    /* 1 / (atmosphereRadius - globeRadius) */\n            uniform float scaleDepth;\t\t    /* The scale depth (i.e. the altitude at which the atmosphere's average density is found) */\n            uniform float scaleOverScaleDepth;\t/* fScale / fScaleDepth */\n\n            attribute vec4 vertexPoint;\n            attribute vec2 vertexTexCoord;\n\n            varying vec3 primaryColor;\n            varying vec3 secondaryColor;\n            varying vec3 direction;\n            varying vec2 texCoord;\n\n            float scaleFunc(float cos) {\n                float x = 1.0 - cos;\n                return scaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n            }\n\n            void main() {\n                /* Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the\n                atmosphere) */\n                vec3 point = vertexPoint.xyz + vertexOrigin;\n                vec3 ray = point - eyePoint;\n                float far = length(ray);\n                ray /= far;\n\n                vec3 start;\n                if (eyeMagnitude < atmosphereRadius) {\n                    start = eyePoint;\n                } else {\n                    /* Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray\n                    passing through the atmosphere) */\n                    float B = 2.0 * dot(eyePoint, ray);\n                    float C = eyeMagnitude2 - atmosphereRadius2;\n                    float det = max(0.0, B*B - 4.0 * C);\n                    float near = 0.5 * (-B - sqrt(det));\n\n                    /* Calculate the ray's starting point, then calculate its scattering offset */\n                    start = eyePoint + ray * near;\n                    far -= near;\n                }\n\n                float depth = exp((globeRadius - atmosphereRadius) / scaleDepth);\n                float eyeAngle = dot(-ray, point) / length(point);\n                float lightAngle = dot(lightDirection, point) / length(point);\n                float eyeScale = scaleFunc(eyeAngle);\n                float lightScale = scaleFunc(lightAngle);\n                float eyeOffset = depth*eyeScale;\n                float temp = (lightScale + eyeScale);\n\n                /* Initialize the scattering loop variables */\n                float sampleLength = far / SAMPLES;\n                float scaledLength = sampleLength * scale;\n                vec3 sampleRay = ray * sampleLength;\n                vec3 samplePoint = start + sampleRay * 0.5;\n\n                /* Now loop through the sample rays */\n                vec3 frontColor = vec3(0.0, 0.0, 0.0);\n                vec3 attenuate = vec3(0.0, 0.0, 0.0);\n                for(int i=0; i<SAMPLE_COUNT; i++)\n                {\n                    float height = length(samplePoint);\n                    float depth = exp(scaleOverScaleDepth * (globeRadius - height));\n                    float scatter = depth*temp - eyeOffset;\n                    attenuate = exp(-scatter * (invWavelength * Kr4PI + Km4PI));\n                    frontColor += attenuate * (depth * scaledLength);\n                    samplePoint += sampleRay;\n                }\n\n                primaryColor = frontColor * (invWavelength * KrESun + KmESun);\n                secondaryColor = attenuate; /* Calculate the attenuation factor for the ground */\n\n                /* Transform the vertex point by the modelview-projection matrix */\n                gl_Position = mvpMatrix * vertexPoint;\n\n                if (fragMode == FRAGMODE_PRIMARY_TEX_BLEND) {\n                    /* Transform the vertex texture coordinate by the tex coord matrix */\n                    texCoord = (texCoordMatrix * vec3(vertexTexCoord, 1.0)).st;\n                }\n            }\n        \"\"\".trimIndent(),\n        \"\"\"\n            precision mediump float;\n            precision mediump int;\n\n            const int FRAGMODE_PRIMARY = 1;\n            const int FRAGMODE_SECONDARY = 2;\n            const int FRAGMODE_PRIMARY_TEX_BLEND = 3;\n\n            uniform int fragMode;\n            uniform sampler2D texSampler;\n\n            varying vec3 primaryColor;\n            varying vec3 secondaryColor;\n            varying vec2 texCoord;\n\n            void main () {\n                if (fragMode == FRAGMODE_PRIMARY) {\n                    gl_FragColor = vec4(primaryColor, 1.0);\n                } else if (fragMode == FRAGMODE_SECONDARY) {\n                    gl_FragColor = vec4(secondaryColor, 1.0);\n                } else if (fragMode == FRAGMODE_PRIMARY_TEX_BLEND) {\n                    vec4 texColor = texture2D(texSampler, texCoord);\n                    gl_FragColor = vec4(primaryColor + texColor.rgb * (1.0 - secondaryColor), 1.0);\n                } else {\n                    gl_FragColor = vec4(1.0); /* return opaque white fragments if fragMode is unrecognized */\n                }\n            }\n        \"\"\".trimIndent()\n    )\n    override val attribBindings = arrayOf(\"vertexPoint\")\n}","package earth.worldwind.layer.atmosphere\n\nopen class SkyProgram : AbstractAtmosphereProgram() {\n    override var programSources = arrayOf(\n        \"\"\"\n            const int SAMPLE_COUNT = 2;\n            const float SAMPLES = 2.0;\n\n            uniform int fragMode;\n            uniform mat4 mvpMatrix;\n            uniform mat3 texCoordMatrix;\n            uniform vec3 vertexOrigin;\n            uniform vec3 eyePoint;\n            uniform float eyeMagnitude;\t        /* The eye point's magnitude */\n            uniform float eyeMagnitude2;\t    /* eyeMagnitude^2 */\n            uniform mediump vec3 lightDirection;/* The light direction vector is used in both shaders, so we must use a common precision. */\n            uniform vec3 invWavelength;\t        /* 1 / pow(wavelength, 4) for the red, green, and blue channels */\n            uniform float atmosphereRadius;     /* The outer (atmosphere) radius */\n            uniform float atmosphereRadius2;    /* atmosphereRadius^2 */\n            uniform float globeRadius;\t\t    /* The inner (planetary) radius */\n            uniform float KrESun;\t\t\t    /* Kr * ESun */\n            uniform float KmESun;\t\t\t    /* Km * ESun */\n            uniform float Kr4PI;\t\t\t    /* Kr * 4 * PI */\n            uniform float Km4PI;\t\t\t    /* Km * 4 * PI */\n            uniform float scale;\t\t\t    /* 1 / (atmosphereRadius - globeRadius) */\n            uniform float scaleDepth;\t\t    /* The scale depth (i.e. the altitude at which the atmosphere's average density is found) */\n            uniform float scaleOverScaleDepth;\t/* fScale / fScaleDepth */\n\n            attribute vec4 vertexPoint;\n            attribute vec2 vertexTexCoord;\n\n            varying vec3 primaryColor;\n            varying vec3 secondaryColor;\n            varying vec3 direction;\n            varying vec2 texCoord;\n\n            float scaleFunc(float cos) {\n                float x = 1.0 - cos;\n                return scaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n            }\n\n            void main() {\n                /* Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the\n                atmosphere) */\n                vec3 point = vertexPoint.xyz + vertexOrigin;\n                vec3 ray = point - eyePoint;\n                float far = length(ray);\n                ray /= far;\n\n                vec3 start;\n                float startOffset;\n\n                if (eyeMagnitude < atmosphereRadius) {\n                    /* Calculate the ray's starting point, then calculate its scattering offset */\n                    start = eyePoint;\n                    float height = length(start);\n                    float depth = exp(scaleOverScaleDepth * (globeRadius - eyeMagnitude));\n                    float startAngle = dot(ray, start) / height;\n                    startOffset = depth*scaleFunc(startAngle);\n                } else {\n                    /* Calculate the closest intersection of the ray with the outer atmosphere (which is the near point of the ray\n                    passing through the atmosphere) */\n                    float B = 2.0 * dot(eyePoint, ray);\n                    float C = eyeMagnitude2 - atmosphereRadius2;\n                    float det = max(0.0, B*B - 4.0 * C);\n                    float near = 0.5 * (-B - sqrt(det));\n\n                    /* Calculate the ray's starting point, then calculate its scattering offset */\n                    start = eyePoint + ray * near;\n                    far -= near;\n                    float startAngle = dot(ray, start) / atmosphereRadius;\n                    float startDepth = exp(-1.0 / scaleDepth);\n                    startOffset = startDepth*scaleFunc(startAngle);\n                }\n\n                /* Initialize the scattering loop variables */\n                float sampleLength = far / SAMPLES;\n                float scaledLength = sampleLength * scale;\n                vec3 sampleRay = ray * sampleLength;\n                vec3 samplePoint = start + sampleRay * 0.5;\n\n                /* Now loop through the sample rays */\n                vec3 frontColor = vec3(0.0, 0.0, 0.0);\n                for(int i=0; i<SAMPLE_COUNT; i++)\n                {\n                    float height = length(samplePoint);\n                    float depth = exp(scaleOverScaleDepth * (globeRadius - height));\n                    float lightAngle = dot(lightDirection, samplePoint) / height;\n                    float cameraAngle = dot(ray, samplePoint) / height;\n                    float scatter = (startOffset + depth*(scaleFunc(lightAngle) - scaleFunc(cameraAngle)));\n                    vec3 attenuate = exp(-scatter * (invWavelength * Kr4PI + Km4PI));\n                    frontColor += attenuate * (depth * scaledLength);\n                    samplePoint += sampleRay;\n                }\n\n                /* Finally, scale the Mie and Rayleigh colors and set up the varying variables for the fragment shader */\n                primaryColor = frontColor * (invWavelength * KrESun);\n                secondaryColor = frontColor * KmESun;\n                direction = eyePoint - point;\n\n                /* Transform the vertex point by the modelview-projection matrix */\n                gl_Position = mvpMatrix * vertexPoint;\n            }\n        \"\"\".trimIndent(),\n        \"\"\"\n            #ifdef GL_FRAGMENT_PRECISION_HIGH\n            precision highp float;\n            #else\n            precision mediump float;\n            #endif\n\n            uniform mediump vec3 lightDirection;/* The light direction vector is used in both shaders, so we must use a common precision. */\n            uniform float g;\n            uniform float g2;\n\n            varying vec3 primaryColor;\n            varying vec3 secondaryColor;\n            varying vec3 direction;\n\n            void main () {\n                float cos = dot(lightDirection, direction) / length(direction);\n                float miePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + cos*cos) / pow(1.0 + g2 - 2.0*g*cos, 1.5);\n                vec3 color = primaryColor + secondaryColor * miePhase;\n                gl_FragColor = vec4(color * color.b, color.b);\n            }\n        \"\"\".trimIndent()\n    )\n    override val attribBindings = arrayOf(\"vertexPoint\")\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.*\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Angle.Companion.normalizeLatitude\nimport earth.worldwind.geom.Angle.Companion.normalizeLongitude\nimport earth.worldwind.geom.Angle.Companion.toDegrees\nimport earth.worldwind.layer.AbstractLayer\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Font\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.Renderable\nimport earth.worldwind.shape.Label\nimport earth.worldwind.shape.Path\nimport earth.worldwind.shape.PathType\nimport kotlin.math.abs\nimport kotlin.math.sign\n\n/**\n * Displays a graticule.\n */\nabstract class AbstractGraticuleLayer(name: String): AbstractLayer(name) {\n    override var isPickEnabled = false\n\n    // Helper variables to avoid memory leaks\n    private val surfacePoint = Vec3()\n    private val forwardRay = Line()\n    private val lookAtPoint = Vec3()\n    private val lookAtPos = Position()\n    private val graticuleSupport = GraticuleSupport()\n\n    // Update reference states\n    private val lastCameraPoint = Vec3()\n    private var lastCameraHeading = 0.0\n    private var lastCameraTilt = 0.0\n    private var lastFOV = 0.0\n    private var lastVerticalExaggeration = 0.0\n\n//    private var lastGlobe: Globe? = null\n//    private var lastProjection: GeographicProjection? = null\n//    private var frameTimeStamp = Instant.DISTANT_PAST // used only for 2D continuous globes to determine whether render is in same frame\n//    private var terrainConformance = 50.0\n\n    companion object {\n//        /**\n//         * Solid line rendering style. This style specifies that a line will be drawn without any breaks. <br></br>\n//         * <pre>`_________`</pre>\n//         * <br></br> is an example of a solid line.\n//         */\n//        val LINE_STYLE_SOLID = GraticuleRenderingParams.VALUE_LINE_STYLE_SOLID\n//        /**\n//         * Dashed line rendering style. This style specifies that a line will be drawn as a series of long strokes, with\n//         * space in between. <br></br>\n//         * <pre>`- - - - -`</pre>\n//         * <br></br> is an example of a dashed line.\n//         */\n//        val LINE_STYLE_DASHED = GraticuleRenderingParams.VALUE_LINE_STYLE_DASHED\n//        /**\n//         * Dotted line rendering style. This style specifies that a line will be drawn as a series of evenly spaced \"square\"\n//         * dots. <br></br>\n//         * <pre>`. . . . .`</pre>\n//         * is an example of a dotted line.\n//         */\n//        val LINE_STYLE_DOTTED = GraticuleRenderingParams.VALUE_LINE_STYLE_DOTTED\n        private const val LOOK_AT_LATITUDE_PROPERTY = \"look_at_latitude\"\n        private const val LOOK_AT_LONGITUDE_PROPERTY = \"look_at_longitude\"\n        private const val GRATICULE_PIXEL_SIZE_PROPERTY = \"graticule_pixel_size\"\n        private const val GRATICULE_LABEL_OFFSET_PROPERTY = \"graticule_label_offset\"\n    }\n\n    init {\n        this.initRenderingParams()\n    }\n\n    protected abstract fun initRenderingParams()\n\n    /**\n     * Returns whether or not graticule lines will be rendered.\n     *\n     * @param key the rendering parameters key.\n     *\n     * @return true if graticule lines will be rendered; false otherwise.\n     */\n    fun isDrawGraticule(key: String) = getRenderingParams(key).isDrawLines\n\n    /**\n     * Sets whether or not graticule lines will be rendered.\n     *\n     * @param drawGraticule true to render graticule lines; false to disable rendering.\n     * @param key           the rendering parameters key.\n     */\n    fun setDrawGraticule(drawGraticule: Boolean, key: String) { getRenderingParams(key).isDrawLines = drawGraticule }\n\n    /**\n     * Returns the graticule line Color.\n     *\n     * @param key the rendering parameters key.\n     *\n     * @return Color used to render graticule lines.\n     */\n    fun getGraticuleLineColor(key: String) = getRenderingParams(key).lineColor\n\n    /**\n     * Sets the graticule line Color.\n     *\n     * @param color Color that will be used to render graticule lines.\n     * @param key   the rendering parameters key.\n     */\n    fun setGraticuleLineColor(color: Color, key: String) { getRenderingParams(key).lineColor = color }\n\n    /**\n     * Returns the graticule line width.\n     *\n     * @param key the rendering parameters key.\n     *\n     * @return width of the graticule lines.\n     */\n    fun getGraticuleLineWidth(key: String) = getRenderingParams(key).lineWidth\n\n    /**\n     * Sets the graticule line width.\n     *\n     * @param lineWidth width of the graticule lines.\n     * @param key       the rendering parameters key.\n     */\n    fun setGraticuleLineWidth(lineWidth: Double, key: String) { getRenderingParams(key).lineWidth = lineWidth }\n\n//    /**\n//     * Returns the graticule line rendering style.\n//     *\n//     * @param key the rendering parameters key.\n//     *\n//     * @return rendering style of the graticule lines.\n//     */\n//    fun getGraticuleLineStyle(key: String) = getRenderingParams(key).lineStyle\n//\n//    /**\n//     * Sets the graticule line rendering style.\n//     *\n//     * @param lineStyle rendering style of the graticule lines. One of LINE_STYLE_SOLID, LINE_STYLE_DASHED, or\n//     * LINE_STYLE_DOTTED.\n//     * @param key       the rendering parameters key.\n//     */\n//    fun setGraticuleLineStyle(lineStyle: String, key: String) { getRenderingParams(key).lineStyle = lineStyle }\n\n    /**\n     * Returns whether or not graticule labels will be rendered.\n     *\n     * @param key the rendering parameters key.\n     *\n     * @return true if graticule labels will be rendered; false otherwise.\n     */\n    fun isDrawLabels(key: String) = getRenderingParams(key).isDrawLabels\n\n    /**\n     * Sets whether or not graticule labels will be rendered.\n     *\n     * @param drawLabels true to render graticule labels; false to disable rendering.\n     * @param key        the rendering parameters key.\n     */\n    fun setDrawLabels(drawLabels: Boolean, key: String) { getRenderingParams(key).isDrawLabels = drawLabels }\n\n    /**\n     * Returns the graticule label Color.\n     *\n     * @param key the rendering parameters key.\n     *\n     * @return Color used to render graticule labels.\n     */\n    fun getLabelColor(key: String) = getRenderingParams(key).labelColor\n\n    /**\n     * Sets the graticule label Color.\n     *\n     * @param color Color that will be used to render graticule labels.\n     * @param key   the rendering parameters key.\n     */\n    fun setLabelColor(color: Color, key: String) { getRenderingParams(key).labelColor = color }\n\n    /**\n     * Returns the Font used for graticule labels.\n     *\n     * @param key the rendering parameters key.\n     *\n     * @return Font used to render graticule labels.\n     */\n    fun getLabelFont(key: String) = getRenderingParams(key).labelFont\n\n    /**\n     * Sets the Font used for graticule labels.\n     *\n     * @param font Font that will be used to render graticule labels.\n     * @param key  the rendering parameters key.\n     */\n    fun setLabelFont(font: Font, key: String) { getRenderingParams(key).labelFont = font }\n\n    fun getRenderingParams(key: String) = graticuleSupport.getRenderingParams(key)\n\n    fun setRenderingParams(key: String, renderingParams: GraticuleRenderingParams) {\n        graticuleSupport.setRenderingParams(key, renderingParams)\n    }\n\n    fun addRenderable(renderable: Renderable, paramsKey: String) { graticuleSupport.addRenderable(renderable, paramsKey) }\n\n    private fun removeAllRenderables() { graticuleSupport.removeAllRenderables() }\n\n    public override fun doRender(rc: RenderContext) {\n//        if (rc.isContinuous2DGlobe) {\n//            if (needsToUpdate(rc)) {\n//                clear(rc)\n//                selectRenderables(rc)\n//            }\n//\n//            // If the frame time stamp is the same, then this is the second or third pass of the same frame. We continue\n//            // selecting renderables in these passes.\n//            if (rc.frameTimeStamp === frameTimeStamp) selectRenderables(rc)\n//\n//            frameTimeStamp = rc.frameTimeStamp\n//        } else {\n        if (needsToUpdate(rc)) {\n            clear(rc)\n            selectRenderables(rc)\n        }\n//        }\n\n        // Render\n        graticuleSupport.render(rc, opacity)\n    }\n\n    /**\n     * Select the visible grid elements\n     *\n     * @param rc the current `RenderContext`.\n     */\n    protected abstract fun selectRenderables(rc: RenderContext)\n    protected abstract val orderedTypes: List<String>\n    abstract fun getTypeFor(resolution: Double): String\n\n    /**\n     * Determines whether the grid should be updated. It returns true if:   * the eye has moved more than 1% of its\n     * altitude above ground  * the view FOV, heading or pitch have changed more than 1 degree  * vertical\n     * exaggeration has changed  `RenderContext`.\n     *\n     * @return true if the graticule should be updated.\n     */\n    private fun needsToUpdate(rc: RenderContext): Boolean {\n        if (lastVerticalExaggeration != rc.verticalExaggeration) return true\n        if (abs(lastCameraHeading - rc.camera!!.heading.inDegrees) > 1) return true\n        if (abs(lastCameraTilt - rc.camera!!.tilt.inDegrees) > 1) return true\n        if (abs(lastFOV - rc.camera!!.fieldOfView.inDegrees) > 1) return true\n        return rc.cameraPoint.distanceTo(lastCameraPoint) > computeAltitudeAboveGround(rc) / 100\n\n        // We must test the globe and its projection to see if either changed. We can't simply use the globe state\n        // key for this because we don't want a 2D globe offset change to cause an update. Offset changes don't\n        // invalidate the current set of renderables.\n//        if (rc.globe != lastGlobe) return true\n//        if (rc.is2DGlobe) if ((rc.globe as Globe2D).projection != lastProjection) return true\n    }\n\n    protected open fun clear(rc: RenderContext) {\n        removeAllRenderables()\n        lastCameraPoint.copy(rc.cameraPoint)\n        lastFOV = rc.camera!!.fieldOfView.inDegrees\n        lastCameraHeading = rc.camera!!.heading.inDegrees\n        lastCameraTilt = rc.camera!!.tilt.inDegrees\n        lastVerticalExaggeration = rc.verticalExaggeration\n//        lastGlobe = rc.globe\n//        if (rc.is2DGlobe) lastProjection = (rc.globe as Globe2D).projection\n//        terrainConformance = computeTerrainConformance(rc)\n//        applyTerrainConformance()\n    }\n\n//    private fun computeTerrainConformance(rc: RenderContext): Double {\n//        var value = 100\n//        val alt = rc.camera!!.position.altitude\n//        when {\n//            alt < 10e3 -> value = 20\n//            alt < 50e3 -> value = 30\n//            alt < 100e3 -> value = 40\n//            alt < 1000e3 -> value = 60\n//        }\n//        return value.toDouble()\n//    }\n//\n//    private fun applyTerrainConformance() {\n//        val graticuleType = getOrderedTypes()\n//        for (type in graticuleType) {\n//            getRenderingParams(type)[GraticuleRenderingParams.KEY_LINE_CONFORMANCE] = terrainConformance\n//        }\n//    }\n\n    fun computeLabelOffset(rc: RenderContext): Location {\n        return if (hasLookAtPos(rc)) {\n            val labelOffsetDegrees = getLabelOffset(rc)\n            val labelPos = Location(\n                getLookAtLatitude(rc).minusDegrees(labelOffsetDegrees),\n                getLookAtLongitude(rc).minusDegrees(labelOffsetDegrees)\n            )\n            labelPos.setDegrees(\n                normalizeLatitude(labelPos.latitude.inDegrees).coerceIn(-70.0, 70.0),\n                normalizeLongitude(labelPos.longitude.inDegrees)\n            )\n            labelPos\n        } else rc.camera!!.position\n    }\n\n    fun createLineRenderable(positions: List<Position>, pathType: PathType) =\n        Path(positions).apply {\n            this.pathType = pathType\n            isFollowTerrain = true\n            // terrainConformance = 1.0 // TODO Why not terrainConformance?\n            altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n        }\n\n    fun createTextRenderable(position: Position, label: String, resolution: Double) =\n        Label(position, label).apply {\n            altitudeMode = AltitudeMode.CLAMP_TO_GROUND\n            // priority = resolution * 1e6 // TODO Implement priority\n        }\n\n    fun hasLookAtPos(rc: RenderContext): Boolean {\n        calculateLookAtProperties(rc)\n        return rc.getUserProperty(LOOK_AT_LATITUDE_PROPERTY) != null && rc.getUserProperty(LOOK_AT_LONGITUDE_PROPERTY) != null\n    }\n\n    fun getLookAtLatitude(rc: RenderContext): Angle {\n        calculateLookAtProperties(rc)\n        return rc.getUserProperty(LOOK_AT_LATITUDE_PROPERTY) as Angle\n    }\n\n    fun getLookAtLongitude(rc: RenderContext): Angle {\n        calculateLookAtProperties(rc)\n        return rc.getUserProperty(LOOK_AT_LONGITUDE_PROPERTY) as Angle\n    }\n\n    fun getPixelSize(rc: RenderContext): Double {\n        calculateLookAtProperties(rc)\n        return rc.getUserProperty(GRATICULE_PIXEL_SIZE_PROPERTY) as Double\n    }\n\n    private fun getLabelOffset(rc: RenderContext): Double {\n        calculateLookAtProperties(rc)\n        return rc.getUserProperty(GRATICULE_LABEL_OFFSET_PROPERTY) as Double\n    }\n\n    fun getSurfacePoint(rc: RenderContext, latitude: Angle, longitude: Angle): Vec3 {\n        if (!rc.terrain!!.surfacePoint(latitude, longitude, surfacePoint))\n            rc.globe!!.geographicToCartesian(\n                latitude, longitude, rc.globe!!.getElevation(latitude, longitude)\n                        * rc.verticalExaggeration, surfacePoint\n            )\n        return surfacePoint\n    }\n\n    fun computeAltitudeAboveGround(rc: RenderContext): Double {\n        val surfacePoint = getSurfacePoint(rc, rc.camera!!.position.latitude, rc.camera!!.position.longitude)\n        return rc.cameraPoint.distanceTo(surfacePoint)\n    }\n\n    fun computeTruncatedSegment(p1: Position, p2: Position, sector: Sector, positions: MutableList<Position>) {\n        val p1In = sector.contains(p1.latitude, p1.longitude)\n        val p2In = sector.contains(p2.latitude, p2.longitude)\n        if (!p1In && !p2In) return  // whole segment is (likely) outside\n        if (p1In && p2In) {\n            // whole segment is (likely) inside\n            positions.add(p1)\n            positions.add(p2)\n        } else {\n            // segment does cross the boundary\n            var outPoint = if (!p1In) p1 else p2\n            val inPoint = if (p1In) p1 else p2\n            for (i in 1..2) {\n                // there may be two intersections\n                var intersection: Location? = null\n                if (outPoint.longitude.inDegrees > sector.maxLongitude.inDegrees\n                    || sector.maxLongitude.inDegrees == 180.0 && outPoint.longitude.inDegrees < 0.0) {\n                    // intersect with east meridian\n                    intersection = greatCircleIntersectionAtLongitude(\n                        inPoint, outPoint, sector.maxLongitude\n                    )\n                } else if (outPoint.longitude.inDegrees < sector.minLongitude.inDegrees\n                    || sector.minLongitude.inDegrees == -180.0 && outPoint.longitude.inDegrees > 0.0) {\n                    // intersect with west meridian\n                    intersection = greatCircleIntersectionAtLongitude(\n                        inPoint, outPoint, sector.minLongitude\n                    )\n                } else if (outPoint.latitude.inDegrees > sector.maxLatitude.inDegrees) {\n                    // intersect with top parallel\n                    intersection = greatCircleIntersectionAtLatitude(\n                        inPoint, outPoint, sector.maxLatitude\n                    )\n                } else if (outPoint.latitude.inDegrees < sector.minLatitude.inDegrees) {\n                    // intersect with bottom parallel\n                    intersection = greatCircleIntersectionAtLatitude(\n                        inPoint, outPoint, sector.minLatitude\n                    )\n                }\n                outPoint = if (intersection != null) Position(\n                    intersection.latitude,\n                    intersection.longitude,\n                    outPoint.altitude\n                ) else break\n            }\n            positions.add(inPoint)\n            positions.add(outPoint)\n        }\n    }\n\n    /**\n     * Computes the intersection point position between a great circle segment and a meridian.\n     *\n     * @param p1        the great circle segment start position.\n     * @param p2        the great circle segment end position.\n     * @param longitude the meridian longitude `Angle`\n     *\n     * @return the intersection `Position` or null if there was no intersection found.\n     */\n    private fun greatCircleIntersectionAtLongitude(p1: Location, p2: Location, longitude: Angle): Location? {\n        if (p1.longitude == longitude) return p1\n        if (p2.longitude == longitude) return p2\n        var pos: Location? = null\n        val deltaLon = getDeltaLongitude(p1, p2.longitude)\n        if (getDeltaLongitude(p1, longitude) < deltaLon && getDeltaLongitude(p2, longitude) < deltaLon) {\n            var count = 0\n            val precision = 1.0 / 6378137.0 // 1m angle in radians\n            var a = p1\n            var b = p2\n            var midPoint = greatCircleMidPoint(a, b)\n            while (getDeltaLongitude(midPoint, longitude).inRadians > precision && count <= 20) {\n                count++\n                if (getDeltaLongitude(a, longitude) < getDeltaLongitude(b, longitude)) b = midPoint else a = midPoint\n                midPoint = greatCircleMidPoint(a, b)\n            }\n            pos = midPoint\n        }\n        // Adjust final longitude for an exact match\n        if (pos != null) pos = Location(pos.latitude, longitude)\n        return pos\n    }\n\n    /**\n     * Computes the intersection point position between a great circle segment and a parallel.\n     *\n     * @param p1       the great circle segment start position.\n     * @param p2       the great circle segment end position.\n     * @param latitude the parallel latitude `Angle`\n     *\n     * @return the intersection `Position` or null if there was no intersection found.\n     */\n    private fun greatCircleIntersectionAtLatitude(p1: Location, p2: Location, latitude: Angle): Location? {\n        var pos: Location? = null\n        if (sign(p1.latitude.inDegrees - latitude.inDegrees) != sign(p2.latitude.inDegrees - latitude.inDegrees)) {\n            var count = 0\n            val precision = 1.0 / 6378137.0 // 1m angle in radians\n            var a = p1\n            var b = p2\n            var midPoint = greatCircleMidPoint(a, b)\n            while (abs(midPoint.latitude.inRadians - latitude.inRadians) > precision && count <= 20) {\n                count++\n                if (sign(a.latitude.inDegrees - latitude.inDegrees) != sign(midPoint.latitude.inDegrees - latitude.inDegrees))\n                    b = midPoint else a = midPoint\n                midPoint = greatCircleMidPoint(a, b)\n            }\n            pos = midPoint\n        }\n        // Adjust final latitude for an exact match\n        if (pos != null) pos = Location(latitude, pos.longitude)\n        return pos\n    }\n\n    private fun greatCircleMidPoint(p1: Location, p2: Location): Location {\n        val azimuth = p1.greatCircleAzimuth(p2)\n        val distance = p1.greatCircleDistance(p2)\n        return p1.greatCircleLocation(azimuth, distance / 2, Location())\n    }\n\n    private fun getDeltaLongitude(p1: Location, longitude: Angle): Angle {\n        val deltaLon = abs(p1.longitude.inDegrees - longitude.inDegrees)\n        return (if (deltaLon < 180) deltaLon else 360 - deltaLon).degrees\n    }\n\n    private fun calculateLookAtProperties(rc: RenderContext) {\n        if (!rc.hasUserProperty(LOOK_AT_LATITUDE_PROPERTY) || !rc.hasUserProperty(LOOK_AT_LONGITUDE_PROPERTY)) {\n            //rc.modelview.extractEyePoint(forwardRay.origin)\n            forwardRay.origin.copy(rc.cameraPoint)\n            rc.modelview.extractForwardVector(forwardRay.direction)\n            val range = if (rc.terrain!!.intersect(forwardRay, lookAtPoint)) {\n                rc.globe!!.cartesianToGeographic(lookAtPoint.x, lookAtPoint.y, lookAtPoint.z, lookAtPos)\n                rc.putUserProperty(LOOK_AT_LATITUDE_PROPERTY, lookAtPos.latitude)\n                rc.putUserProperty(LOOK_AT_LONGITUDE_PROPERTY, lookAtPos.longitude)\n                lookAtPoint.distanceTo(rc.cameraPoint)\n            } else {\n                rc.removeUserProperty(LOOK_AT_LATITUDE_PROPERTY)\n                rc.removeUserProperty(LOOK_AT_LONGITUDE_PROPERTY)\n                rc.horizonDistance\n            }\n            val pixelSizeMeters = rc.pixelSizeAtDistance(range)\n            rc.putUserProperty(GRATICULE_PIXEL_SIZE_PROPERTY, pixelSizeMeters)\n            val pixelSizeDegrees = toDegrees(pixelSizeMeters / rc.globe!!.equatorialRadius)\n            rc.putUserProperty(\n                GRATICULE_LABEL_OFFSET_PROPERTY, pixelSizeDegrees * rc.viewport.width / 4\n            )\n        }\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.BoundingBox\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.Sector.Companion.fromDegrees\nimport earth.worldwind.render.RenderContext\nimport kotlinx.datetime.Instant\n\nabstract class AbstractGraticuleTile(open val layer: AbstractGraticuleLayer, val sector: Sector) {\n    var gridElements: MutableList<GridElement>? = null\n        private set\n    private var extent: BoundingBox? = null\n    private var heightLimits: FloatArray? = null\n    private var heightLimitsTimestamp = Instant.DISTANT_PAST\n    private var extentExaggeration = 0.0f\n\n    open fun isInView(rc: RenderContext) = getExtent(rc).intersectsFrustum(rc.frustum)\n\n    open fun getSizeInPixels(rc: RenderContext): Double {\n        val centerPoint = layer.getSurfacePoint(rc, sector.centroidLatitude, sector.centroidLongitude)\n        val distance = rc.cameraPoint.distanceTo(centerPoint)\n        val tileSizeMeter = sector.deltaLatitude.inRadians * rc.globe!!.equatorialRadius\n        return tileSizeMeter / rc.pixelSizeAtDistance(distance) / rc.densityFactor\n    }\n\n    open fun selectRenderables(rc: RenderContext) {\n        gridElements ?: createRenderables()\n    }\n\n    open fun clearRenderables() {\n        gridElements?.clear()\n        gridElements = null\n    }\n\n    open fun createRenderables() {\n        gridElements = mutableListOf()\n    }\n\n    fun subdivide(div: Int): List<Sector> {\n        val dLat = sector.deltaLatitude.inDegrees / div\n        val dLon = sector.deltaLongitude.inDegrees / div\n        val sectors = mutableListOf<Sector>()\n        for (row in 0 until div) {\n            for (col in 0 until div) {\n                sectors += fromDegrees(\n                    sector.minLatitude.inDegrees + dLat * row,\n                    sector.minLongitude.inDegrees + dLon * col, dLat, dLon\n                )\n            }\n        }\n        return sectors\n    }\n\n    private fun getExtent(rc: RenderContext): BoundingBox {\n        val heightLimits = heightLimits ?: FloatArray(2).also { heightLimits = it }\n        val extent = extent ?: BoundingBox().also { extent = it }\n        val elevationTimestamp = rc.globe!!.elevationModel.timestamp\n        if (elevationTimestamp !== heightLimitsTimestamp) {\n            // initialize the heights for elevation model scan\n            heightLimits[0] = Float.MAX_VALUE\n            heightLimits[1] = -Float.MAX_VALUE\n            rc.globe!!.elevationModel.getHeightLimits(sector, heightLimits)\n            // check for valid height limits\n            if (heightLimits[0] > heightLimits[1]) heightLimits.fill(0f)\n        }\n        val verticalExaggeration = rc.verticalExaggeration.toFloat()\n        if (verticalExaggeration != extentExaggeration || elevationTimestamp !== heightLimitsTimestamp) {\n            val minHeight = heightLimits[0] * verticalExaggeration\n            val maxHeight = heightLimits[1] * verticalExaggeration\n            extent.setToSector(sector, rc.globe!!, minHeight, maxHeight)\n        }\n        heightLimitsTimestamp = elevationTimestamp\n        extentExaggeration = verticalExaggeration\n        return extent\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.coords.Hemisphere\nimport earth.worldwind.geom.coords.UPSCoord.Companion.fromUPS\nimport earth.worldwind.geom.coords.UTMCoord.Companion.fromUTM\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LABEL_COLOR\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LABEL_FONT\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LINE_COLOR\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Font\nimport earth.worldwind.render.FontWeight\nimport earth.worldwind.render.RenderContext\nimport kotlin.math.ceil\nimport kotlin.math.floor\n\n/**\n * Displays the UTM graticule metric scale.\n */\nabstract class AbstractUTMGraticuleLayer(name: String, scaleModulo: Int, maxResolution: Double): AbstractGraticuleLayer(name) {\n    private val metricScaleSupport = UTMMetricScaleSupport(this).apply {\n        this.scaleModulo = scaleModulo\n        this.maxResolution = maxResolution\n    }\n\n    override val orderedTypes = listOf(\n        GRATICULE_UTM_100000M,\n        GRATICULE_UTM_10000M,\n        GRATICULE_UTM_1000M,\n        GRATICULE_UTM_100M,\n        GRATICULE_UTM_10M,\n        GRATICULE_UTM_1M\n    )\n\n    override fun initRenderingParams() {\n        // 100,000 meter graticule\n        var params = GraticuleRenderingParams()\n        params[KEY_LINE_COLOR] = Color(0, 255, 0) // Green\n        params[KEY_LABEL_COLOR] = Color(0, 255, 0) // Green\n        params[KEY_LABEL_FONT] = Font(\"arial\", FontWeight.BOLD, 14)\n        setRenderingParams(GRATICULE_UTM_100000M, params)\n        // 10,000 meter graticule\n        params = GraticuleRenderingParams()\n        params[KEY_LINE_COLOR] = Color(0, 102, 255)\n        params[KEY_LABEL_COLOR] = Color(0, 102, 255)\n        setRenderingParams(GRATICULE_UTM_10000M, params)\n        // 1,000 meter graticule\n        params = GraticuleRenderingParams()\n        params[KEY_LINE_COLOR] = Color(0, 255, 255) // Cyan\n        params[KEY_LABEL_COLOR] = Color(0, 255, 255) // Cyan\n        setRenderingParams(GRATICULE_UTM_1000M, params)\n        // 100 meter graticule\n        params = GraticuleRenderingParams()\n        params[KEY_LINE_COLOR] = Color(0, 153, 153)\n        params[KEY_LABEL_COLOR] = Color(0, 153, 153)\n        setRenderingParams(GRATICULE_UTM_100M, params)\n        // 10 meter graticule\n        params = GraticuleRenderingParams()\n        params[KEY_LINE_COLOR] = Color(102, 255, 204)\n        params[KEY_LABEL_COLOR] = Color(102, 255, 204)\n        setRenderingParams(GRATICULE_UTM_10M, params)\n        // 1 meter graticule\n        params = GraticuleRenderingParams()\n        params[KEY_LINE_COLOR] = Color(153, 153, 255)\n        params[KEY_LABEL_COLOR] = Color(153, 153, 255)\n        setRenderingParams(GRATICULE_UTM_1M, params)\n    }\n\n    override fun getTypeFor(resolution: Double) =\n        when {\n            resolution >= 100000 -> GRATICULE_UTM_100000M\n            resolution >= 10000 -> GRATICULE_UTM_10000M\n            resolution >= 1000 -> GRATICULE_UTM_1000M\n            resolution >= 100 -> GRATICULE_UTM_100M\n            resolution >= 10 -> GRATICULE_UTM_10M\n            resolution >= 1 -> GRATICULE_UTM_1M\n            else -> GRATICULE_UTM_1M\n        }\n\n    override fun clear(rc: RenderContext) {\n        super.clear(rc)\n        metricScaleSupport.clear()\n        metricScaleSupport.computeZone(rc)\n    }\n\n    override fun selectRenderables(rc: RenderContext) { metricScaleSupport.selectRenderables(rc) }\n\n    fun computeMetricScaleExtremes(UTMZone: Int, hemisphere: Hemisphere, ge: GridElement, size: Double) {\n        metricScaleSupport.computeMetricScaleExtremes(UTMZone, hemisphere, ge, size)\n    }\n\n    fun computePosition(zone: Int, hemisphere: Hemisphere, easting: Double, northing: Double): Position {\n        return if (zone > 0) computePositionFromUTM(zone, hemisphere, easting, northing)\n        else computePositionFromUPS(hemisphere, easting, northing)\n    }\n\n    private fun computePositionFromUTM(zone: Int, hemisphere: Hemisphere, easting: Double, northing: Double): Position {\n        val utm = fromUTM(zone, hemisphere, easting, northing)\n        return Position(utm.latitude.clampLatitude(), utm.longitude.clampLongitude(), 10e3)\n    }\n\n    private fun computePositionFromUPS(hemisphere: Hemisphere, easting: Double, northing: Double): Position {\n        val ups = fromUPS(hemisphere, easting, northing)\n        return Position(ups.latitude.clampLatitude(), ups.longitude.clampLongitude(), 10e3)\n    }\n\n    fun createSquaresGrid(\n        utmZone: Int, hemisphere: Hemisphere, utmZoneSector: Sector,\n        minEasting: Double, maxEasting: Double, minNorthing: Double, maxNorthing: Double\n    ): MutableList<UTMSquareZone> {\n        val squares = mutableListOf<UTMSquareZone>()\n        val startEasting = floor(minEasting / ONEHT) * ONEHT\n        val startNorthing = floor(minNorthing / ONEHT) * ONEHT\n        val cols = ceil((maxEasting - startEasting) / ONEHT).toInt()\n        val rows = ceil((maxNorthing - startNorthing) / ONEHT).toInt()\n        val squaresArray = Array(rows) { arrayOfNulls<UTMSquareZone>(cols) }\n        var col = 0\n        var easting = startEasting\n        while (easting < maxEasting) {\n            var row = 0\n            var northing = startNorthing\n            while (northing < maxNorthing) {\n                val sz = UTMSquareZone(this, utmZone, hemisphere, utmZoneSector, easting, northing, ONEHT)\n                if (!sz.isOutsideGridZone) {\n                    squares.add(sz)\n                    squaresArray[row][col] = sz\n                }\n                row++\n                northing += ONEHT\n            }\n            col++\n            easting += ONEHT\n        }\n\n        // Keep track of neighbors\n        for (c in 0 until cols) {\n            for (r in 0 until rows) {\n                val sz = squaresArray[r][c]\n                if (sz != null) {\n                    sz.northNeighbor = if (r + 1 < rows) squaresArray[r + 1][c] else null\n                    sz.eastNeighbor = if (c + 1 < cols) squaresArray[r][c + 1] else null\n                }\n            }\n        }\n        return squares\n    }\n\n    companion object {\n        const val UTM_MIN_LATITUDE = -80.0\n        const val UTM_MAX_LATITUDE = 84.0\n\n        /** Graticule for the 100,000 meter grid.  */\n        private const val GRATICULE_UTM_100000M = \"Graticule.UTM.100000m\"\n\n        /** Graticule for the 10,000 meter grid.  */\n        private const val GRATICULE_UTM_10000M = \"Graticule.UTM.10000m\"\n\n        /** Graticule for the 1,000 meter grid.  */\n        private const val GRATICULE_UTM_1000M = \"Graticule.UTM.1000m\"\n\n        /** Graticule for the 100 meter grid.  */\n        private const val GRATICULE_UTM_100M = \"Graticule.UTM.100m\"\n\n        /** Graticule for the 10 meter grid.  */\n        private const val GRATICULE_UTM_10M = \"Graticule.UTM.10m\"\n\n        /** Graticule for the 1 meter grid.  */\n        private const val GRATICULE_UTM_1M = \"Graticule.UTM.1m\"\n        private const val ONEHT = 100e3\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Font\n\nclass GraticuleRenderingParams: MutableMap<String, Any?> by HashMap() {\n    var isDrawLines: Boolean\n        get() = get(KEY_DRAW_LINES) as? Boolean ?: false\n        set(drawLines) { put(KEY_DRAW_LINES, drawLines) }\n    var lineColor: Color?\n        get() = get(KEY_LINE_COLOR) as? Color\n        set(color) { put(KEY_LINE_COLOR, color) }\n    var lineWidth: Double\n        get() = get(KEY_LINE_WIDTH) as? Double ?: 0.0\n        set(lineWidth) { put(KEY_LINE_WIDTH, lineWidth) }\n//    var lineStyle: String?\n//        get() = get(KEY_LINE_STYLE) as? String\n//        set(lineStyle) { put(KEY_LINE_STYLE, lineStyle) }\n    var isDrawLabels: Boolean\n        get() = get(KEY_DRAW_LABELS) as? Boolean ?: false\n        set(drawLabels) { put(KEY_DRAW_LABELS, drawLabels) }\n    var labelColor: Color?\n        get() = get(KEY_LABEL_COLOR) as? Color\n        set(color) { put(KEY_LABEL_COLOR, color) }\n    var labelFont: Font?\n        get() = get(KEY_LABEL_FONT) as? Font\n        set(font) { put(KEY_LABEL_FONT, font) }\n\n    fun getStringValue(key: String) = this[key]?.toString()\n\n    fun getFloatValue(key: String): Float? {\n        val o = get(key) ?: return null\n        if (o is Float) return o\n        val v = getStringValue(key)\n        return v?.toFloat()\n    }\n\n    companion object {\n        const val KEY_DRAW_LINES = \"DrawGraticule\"\n        const val KEY_LINE_COLOR = \"GraticuleLineColor\"\n        const val KEY_LINE_WIDTH = \"GraticuleLineWidth\"\n//        const val KEY_LINE_STYLE = \"GraticuleLineStyle\";\n//        const val KEY_LINE_CONFORMANCE = \"GraticuleLineConformance\";\n        const val KEY_DRAW_LABELS = \"DrawLabels\"\n        const val KEY_LABEL_COLOR = \"LabelColor\"\n        const val KEY_LABEL_FONT = \"LabelFont\"\n//        const val VALUE_LINE_STYLE_SOLID = \"LineStyleSolid\";\n//        const val VALUE_LINE_STYLE_DASHED = \"LineStyleDashed\";\n//        const val VALUE_LINE_STYLE_DOTTED = \"LineStyleDotted\";\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_DRAW_LABELS\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_DRAW_LINES\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LABEL_COLOR\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LABEL_FONT\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LINE_COLOR\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LINE_WIDTH\nimport earth.worldwind.render.*\nimport earth.worldwind.shape.Label\nimport earth.worldwind.shape.Path\nimport earth.worldwind.shape.ShapeAttributes\nimport kotlin.jvm.JvmOverloads\n\ninternal class GraticuleSupport {\n    private val renderables = mutableMapOf<Renderable, String>()\n    private val namedParams = mutableMapOf<String, GraticuleRenderingParams>()\n    private val namedShapeAttributes = mutableMapOf<String, ShapeAttributes>()\n    var defaultParams: GraticuleRenderingParams? = null\n\n    fun addRenderable(renderable: Renderable, paramsKey: String) { renderables[renderable] = paramsKey }\n\n    fun removeAllRenderables() { renderables.clear() }\n\n    @JvmOverloads\n    fun render(rc: RenderContext, opacity: Float = 1f) {\n        namedShapeAttributes.clear()\n\n        // Render lines and collect text labels\n        for ((renderable, paramsKey) in renderables) {\n            val renderingParams = namedParams[paramsKey]\n            if (renderable is Path) {\n                if (renderingParams?.isDrawLines != false) {\n                    applyRenderingParams(paramsKey, renderingParams, renderable, opacity)\n                    renderable.render(rc)\n                }\n            } else if (renderable is Label) {\n                if (renderingParams?.isDrawLabels != false) {\n                    applyRenderingParams(renderingParams, renderable, opacity)\n                    renderable.render(rc)\n                }\n            }\n        }\n    }\n\n    fun getRenderingParams(key: String): GraticuleRenderingParams {\n        return namedParams[key] ?: GraticuleRenderingParams().also { params ->\n            initRenderingParams(params)\n            defaultParams?.let{ params.putAll(it) }\n            namedParams[key] = params\n        }\n    }\n\n    fun setRenderingParams(key: String, renderingParams: GraticuleRenderingParams) {\n        initRenderingParams(renderingParams)\n        namedParams[key] = renderingParams\n    }\n\n    private fun initRenderingParams(params: GraticuleRenderingParams) {\n        if (params[KEY_DRAW_LINES] == null) params[KEY_DRAW_LINES] = true\n        if (params[KEY_LINE_COLOR] == null) params[KEY_LINE_COLOR] = Color(255, 255, 255) // White\n        if (params[KEY_LINE_WIDTH] == null) params[KEY_LINE_WIDTH] = .5f\n//        if (params[KEY_LINE_STYLE] == null) params[KEY_LINE_STYLE] = GraticuleRenderingParams.VALUE_LINE_STYLE_SOLID\n        if (params[KEY_DRAW_LABELS] == null) params[KEY_DRAW_LABELS] = true\n        if (params[KEY_LABEL_COLOR] == null) params[KEY_LABEL_COLOR] = Color(255, 255, 255) // White\n        if (params[KEY_LABEL_FONT] == null) params[KEY_LABEL_FONT] = Font(\"arial\", FontWeight.BOLD, 12)\n    }\n\n    private fun applyRenderingParams(params: GraticuleRenderingParams?, text: Label, opacity: Float) {\n        if (params != null) {\n            // Apply \"label\" properties to the Label.\n            var o = params[KEY_LABEL_COLOR]\n            if (o is Color) {\n                val color = applyOpacity(o, opacity)\n                val compArray = FloatArray(3)\n                color.toHSV(compArray)\n                val colorValue = if (compArray[2] < .5f) 1f else 0f\n                text.attributes.textColor = color\n                text.attributes.outlineColor = Color(colorValue, colorValue, colorValue, color.alpha)\n            }\n            o = params[KEY_LABEL_FONT]\n            if (o is Font) text.attributes.font = o\n        }\n    }\n\n    private fun applyRenderingParams(key: String, params: GraticuleRenderingParams?, path: Path, opacity: Float) {\n        if (params != null) {\n            path.attributes = getLineShapeAttributes(key, params, opacity)\n        }\n    }\n\n    private fun getLineShapeAttributes(key: String, params: GraticuleRenderingParams, opacity: Float) =\n        namedShapeAttributes[key] ?: createLineShapeAttributes(params, opacity).also { namedShapeAttributes[key] = it }\n\n    private fun createLineShapeAttributes(params: GraticuleRenderingParams, opacity: Float): ShapeAttributes {\n        val attrs = ShapeAttributes()\n        attrs.isDrawInterior = false\n        attrs.isDrawOutline = true\n\n        // Apply \"line\" properties.\n        val o = params[KEY_LINE_COLOR]\n        if (o is Color) attrs.outlineColor = applyOpacity(o, opacity)\n        val lineWidth = params.getFloatValue(KEY_LINE_WIDTH)\n        if (lineWidth != null) attrs.outlineWidth = lineWidth\n//        val s = params.getStringValue(KEY_LINE_STYLE)\n//        when {\n//            VALUE_LINE_STYLE_SOLID.equals(s, true) -> {\n//                attrs.outlineStipplePattern = 0xAAAA.toShort()\n//                attrs.outlineStippleFactor = 0\n//            }\n//            VALUE_LINE_STYLE_DASHED.equals(s, true) -> {\n//                val baseFactor = lineWidth?.roundToInt() ?: 1\n//                attrs.outlineStipplePattern = 0xAAAA.toShort()\n//                attrs.outlineStippleFactor = 3 * baseFactor\n//            }\n//            VALUE_LINE_STYLE_DOTTED.equals(s, true) -> {\n//                val baseFactor = lineWidth?.roundToInt() ?: 1\n//                attrs.outlineStipplePattern =0xAAAA.toShort()\n//                attrs.outlineStippleFactor = baseFactor\n//            }\n//        }\n        return attrs\n    }\n\n    private fun applyOpacity(color: Color, opacity: Float) =\n        if (opacity >= 1) color else Color(color.red, color.green, color.blue, color.alpha * opacity)\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.Renderable\n\nclass GridElement(val sector: Sector, val renderable: Renderable, val type: String, val value: Angle) {\n    constructor(sector: Sector, renderable: Renderable, type: String): this(sector, renderable, type, ZERO)\n\n    fun isInView(rc: RenderContext) = sector.intersectsOrNextTo(rc.terrain!!.sector)\n\n    companion object {\n        const val TYPE_LINE = \"GridElement_Line\"\n        const val TYPE_LINE_NORTH = \"GridElement_LineNorth\"\n        const val TYPE_LINE_SOUTH = \"GridElement_LineSouth\"\n        const val TYPE_LINE_WEST = \"GridElement_LineWest\"\n        const val TYPE_LINE_EAST = \"GridElement_LineEast\"\n        const val TYPE_LINE_NORTHING = \"GridElement_LineNorthing\"\n        const val TYPE_LINE_EASTING = \"GridElement_LineEasting\"\n        const val TYPE_GRIDZONE_LABEL = \"GridElement_GridZoneLabel\"\n        const val TYPE_LONGITUDE_LABEL = \"GridElement_LongitudeLabel\"\n        const val TYPE_LATITUDE_LABEL = \"GridElement_LatitudeLabel\"\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.Sector.Companion.fromDegrees\nimport earth.worldwind.geom.Viewport\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_DRAW_LABELS\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LABEL_COLOR\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LABEL_FONT\nimport earth.worldwind.layer.graticule.GraticuleRenderingParams.Companion.KEY_LINE_COLOR\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Font\nimport earth.worldwind.render.FontWeight\nimport earth.worldwind.render.RenderContext\nimport kotlin.math.floor\n\nopen class MGRSGraticuleLayer: AbstractUTMGraticuleLayer(\"MGRS graticule\", 100000, 1e5) {\n    private val gridZones = Array(20) { arrayOfNulls<MGRSGridZone>(60) } // row/col\n    private val poleZones = arrayOfNulls<MGRSGridZone>(4) // North x2 + South x2\n    private val overview = MGRSOverview(this)\n\n    /**\n     * The maximum resolution graticule that will be rendered, or null if no graticules will be rendered. By\n     * default, all graticules are rendered, and this will return GRATICULE_1M.\n     */\n    var maximumGraticuleResolution: String?\n        get() {\n            var maxTypeDrawn: String? = null\n            for (type in orderedTypes) {\n                val params = getRenderingParams(type)\n                if (params.isDrawLines) maxTypeDrawn = type\n            }\n            return maxTypeDrawn\n        }\n        set(graticuleType) {\n            var pastTarget = false\n            for (type in orderedTypes) {\n                // Enable all graticulte BEFORE and INCLUDING the target.\n                // Disable all graticules AFTER the target.\n                val params = getRenderingParams(type)\n                params.isDrawLines = !pastTarget\n                params.isDrawLabels = !pastTarget\n                if (!pastTarget && type == graticuleType) pastTarget = true\n            }\n        }\n\n    override val orderedTypes = mutableListOf(GRATICULE_MGRS_OVERVIEW, GRATICULE_MGRS_GRID_ZONE).apply { addAll(super.orderedTypes) }\n\n    override fun initRenderingParams() {\n        super.initRenderingParams()\n        // MGRS Overview graticule\n        var params = GraticuleRenderingParams()\n        params[KEY_LINE_COLOR] = Color(.8f, .8f, .8f, .5f)\n        params[KEY_LABEL_COLOR] = Color(1f, 1f, 1f, .8f)\n        params[KEY_LABEL_FONT] = Font(\"arial\", FontWeight.BOLD, 14)\n        params[KEY_DRAW_LABELS] = true\n        setRenderingParams(GRATICULE_MGRS_OVERVIEW, params)\n        // MGRS GridZone graticule\n        params = GraticuleRenderingParams()\n        params[KEY_LINE_COLOR] = Color(255, 255, 0) // Yellow\n        params[KEY_LABEL_COLOR] = Color(255, 255, 0) // Yellow\n        params[KEY_LABEL_FONT] = Font(\"arial\", FontWeight.BOLD, 16)\n        setRenderingParams(GRATICULE_MGRS_GRID_ZONE, params)\n    }\n\n    override fun getTypeFor(resolution: Double) =\n        when (resolution) {\n            MGRS_OVERVIEW_RESOLUTION -> GRATICULE_MGRS_OVERVIEW\n            MGRS_GRID_ZONE_RESOLUTION -> GRATICULE_MGRS_GRID_ZONE\n            else -> super.getTypeFor(resolution)\n        }\n\n    override fun selectRenderables(rc: RenderContext) {\n        if (rc.camera!!.position.altitude <= GRID_ZONE_MAX_ALTITUDE) {\n            selectMGRSRenderables(rc)\n            super.selectRenderables(rc)\n        } else {\n            overview.selectRenderables(rc)\n        }\n    }\n\n    private fun selectMGRSRenderables(rc: RenderContext) {\n        val zoneList = getVisibleZones(rc)\n        for (gz in zoneList) gz.selectRenderables(rc)\n    }\n\n    private fun getVisibleZones(rc: RenderContext): List<MGRSGridZone> {\n        val zoneList = mutableListOf<MGRSGridZone>()\n        val vs = rc.terrain!!.sector\n        // UTM Grid\n        val gridRectangle = getGridRectangleForSector(vs)\n        if (gridRectangle != null) {\n            for (row in gridRectangle.y..gridRectangle.height) {\n                for (col in gridRectangle.x..gridRectangle.width) {\n                    if (row != 19 || col != 31 && col != 33 && col != 35) {\n                        // ignore X32, 34 and 36\n                        val zone = gridZones[row][col] ?: MGRSGridZone(this, getGridSector(row, col)).also { gridZones[row][col] = it }\n                        if (zone.isInView(rc)) zoneList.add(zone) else zone.clearRenderables()\n                    }\n                }\n            }\n        }\n        // Poles\n        if (vs.maxLatitude.inDegrees > 84) {\n            // North pole\n            if (poleZones[2] == null) poleZones[2] = MGRSGridZone(this, fromDegrees(84.0, -180.0, 6.0, 180.0)) // Y\n            if (poleZones[3] == null) poleZones[3] = MGRSGridZone(this, fromDegrees(84.0, 0.0, 6.0, 180.0)) // Z\n            zoneList.add(poleZones[2]!!)\n            zoneList.add(poleZones[3]!!)\n        }\n        if (vs.minLatitude.inDegrees < -80) {\n            // South pole\n            if (poleZones[0] == null) poleZones[0] = MGRSGridZone(this, fromDegrees(-90.0, -180.0, 10.0, 180.0)) // B\n            if (poleZones[1] == null) poleZones[1] = MGRSGridZone(this, fromDegrees(-90.0, 0.0, 10.0, 180.0)) // A\n            zoneList.add(poleZones[0]!!)\n            zoneList.add(poleZones[1]!!)\n        }\n        return zoneList\n    }\n\n    private fun getGridRectangleForSector(sector: Sector): Viewport? {\n        var rectangle: Viewport? = null\n        if (sector.minLatitude.inDegrees < 84 && sector.maxLatitude.inDegrees > -80) {\n            val minLat = sector.minLatitude.inDegrees.coerceAtLeast(-80.0)\n            val maxLat = sector.maxLatitude.inDegrees.coerceAtMost(84.0)\n            val gridSector = fromDegrees(\n                minLat, sector.minLongitude.inDegrees, maxLat - minLat, sector.deltaLongitude.inDegrees\n            )\n            var x1 = getGridColumn(gridSector.minLongitude)\n            var x2 = getGridColumn(gridSector.maxLongitude)\n            val y1 = getGridRow(gridSector.minLatitude)\n            val y2 = getGridRow(gridSector.maxLatitude)\n            // Adjust rectangle to include special zones\n            if (y1 <= 17 && y2 >= 17 && x2 == 30) x2 = 31 // 32V Norway\n            if (y1 <= 19 && y2 >= 19) { // X band\n                if (x1 == 31) x1 = 30 // 31X\n                if (x2 == 31) x2 = 32 // 33X\n                if (x1 == 33) x1 = 32 // 33X\n                if (x2 == 33) x2 = 34 // 35X\n                if (x1 == 35) x1 = 34 // 35X\n                if (x2 == 35) x2 = 36 // 37X\n            }\n            rectangle = Viewport(x1, y1, x2, y2) // Viewport is used as simple integer rectangle\n        }\n        return rectangle\n    }\n\n    private fun getGridColumn(longitude: Angle) = floor((longitude.inDegrees + 180) / 6.0).toInt().coerceAtMost(59)\n\n    private fun getGridRow(latitude: Angle) = floor((latitude.inDegrees + 80) / 8.0).toInt().coerceAtMost(19)\n\n    private fun getGridSector(row: Int, col: Int): Sector {\n        val minLat = -80 + row * 8\n        val maxLat = minLat + if (minLat != 72) 8 else 12\n        var minLon = -180 + col * 6\n        var maxLon = minLon + 6\n        // Special sectors\n        if (row == 17 && col == 30) // 31V\n            maxLon -= 3 else if (row == 17 && col == 31) // 32V\n            minLon -= 3 else if (row == 19 && col == 30) // 31X\n            maxLon += 3 else if (row == 19 && col == 31) { // 32X does not exist\n            minLon += 3\n            maxLon -= 3\n        } else if (row == 19 && col == 32) { // 33X\n            minLon -= 3\n            maxLon += 3\n        } else if (row == 19 && col == 33) { // 34X does not exist\n            minLon += 3\n            maxLon -= 3\n        } else if (row == 19 && col == 34) { // 35X\n            minLon -= 3\n            maxLon += 3\n        } else if (row == 19 && col == 35) { // 36X does not exist\n            minLon += 3\n            maxLon -= 3\n        } else if (row == 19 && col == 36) // 37X\n            minLon -= 3\n        return fromDegrees(minLat.toDouble(), minLon.toDouble(), (maxLat - minLat).toDouble(), (maxLon - minLon).toDouble())\n    }\n\n    fun isNorthNeighborInView(gz: MGRSGridZone, rc: RenderContext): Boolean {\n        if (gz.isUPS) return true\n        val row = getGridRow(gz.sector.centroidLatitude)\n        val col = getGridColumn(gz.sector.centroidLongitude)\n        val neighbor = if (row + 1 <= 19) gridZones[row + 1][col] else null\n        return neighbor?.isInView(rc) == true\n    }\n\n    fun isEastNeighborInView(gz: MGRSGridZone, rc: RenderContext): Boolean {\n        if (gz.isUPS) return true\n        val row = getGridRow(gz.sector.centroidLatitude)\n        val col = getGridColumn(gz.sector.centroidLongitude)\n        val neighbor = if (col + 1 <= 59) gridZones[row][col + 1] else null\n        return neighbor?.isInView(rc) == true\n    }\n\n    companion object {\n        const val MGRS_OVERVIEW_RESOLUTION = 1e6\n        const val MGRS_GRID_ZONE_RESOLUTION = 5e5\n\n        /** Graticule for the MGRS overview.  */\n        private const val GRATICULE_MGRS_OVERVIEW = \"Graticule.MGRS.Overview\"\n\n        /** Graticule for the MGRS grid zone.  */\n        private const val GRATICULE_MGRS_GRID_ZONE = \"Graticule.MGRS.GridZone\"\n        private const val GRID_ZONE_MAX_ALTITUDE = 5e6\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Angle.Companion.toDegrees\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.coords.Hemisphere\nimport earth.worldwind.geom.coords.MGRSCoord\nimport earth.worldwind.geom.coords.UTMCoord\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_EAST\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_NORTH\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_SOUTH\nimport earth.worldwind.layer.graticule.MGRSGraticuleLayer.Companion.MGRS_GRID_ZONE_RESOLUTION\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.shape.PathType\n\n/**\n * Represent a UTM zone / latitude band intersection\n */\nclass MGRSGridZone(layer: MGRSGraticuleLayer, sector: Sector) : AbstractGraticuleTile(layer, sector) {\n    val isUPS = sector.maxLatitude.inDegrees > AbstractUTMGraticuleLayer.UTM_MAX_LATITUDE\n            || sector.minLatitude.inDegrees < AbstractUTMGraticuleLayer.UTM_MIN_LATITUDE\n    private var name: String\n    private var hemisphere: Hemisphere\n    private var zone: Int\n    private var squares: MutableList<UTMSquareZone>? = null\n    override val layer get() = super.layer as MGRSGraticuleLayer\n\n    init {\n        val mgrs = MGRSCoord.fromLatLon(sector.centroidLatitude, sector.centroidLongitude)\n        if (isUPS) {\n            name = mgrs.toString().substring(2, 3)\n            hemisphere = if (sector.minLatitude.inDegrees > 0) Hemisphere.N else Hemisphere.S\n            zone = 0\n        } else {\n            name = mgrs.toString().substring(0, 3)\n            val utm = UTMCoord.fromLatLon(sector.centroidLatitude, sector.centroidLongitude)\n            hemisphere = utm.hemisphere\n            zone = utm.zone\n        }\n    }\n\n    override fun selectRenderables(rc: RenderContext) {\n        super.selectRenderables(rc)\n        val graticuleType = layer.getTypeFor(MGRS_GRID_ZONE_RESOLUTION)\n        for (ge in gridElements!!) if (ge.isInView(rc)) {\n            if (ge.type == TYPE_LINE_NORTH && layer.isNorthNeighborInView(this, rc)) continue\n            if (ge.type == TYPE_LINE_EAST && layer.isEastNeighborInView(this, rc)) continue\n            layer.addRenderable(ge.renderable, graticuleType)\n        }\n        if (rc.camera!!.position.altitude > SQUARE_MAX_ALTITUDE) return\n\n        // Select 100km squares elements\n        squares ?: if (isUPS) createSquaresUPS() else createSquaresUTM()\n        for (sz in squares!!) if (sz.isInView(rc)) sz.selectRenderables(rc) else sz.clearRenderables()\n    }\n\n    override fun clearRenderables() {\n        super.clearRenderables()\n        squares?.run {\n            for (sz in this) sz.clearRenderables()\n            clear()\n        }.also { squares = null }\n    }\n\n    override fun createRenderables() {\n        super.createRenderables()\n        val positions = mutableListOf(\n            Position(sector.minLatitude, sector.minLongitude, 10e3),\n            Position(sector.maxLatitude, sector.minLongitude, 10e3)\n        )\n        var polyline = layer.createLineRenderable(ArrayList(positions), PathType.LINEAR)\n        var lineSector = Sector(\n            sector.minLatitude, sector.maxLatitude, sector.minLongitude, sector.minLongitude\n        )\n        gridElements!!.add(GridElement(lineSector, polyline, GridElement.TYPE_LINE_WEST))\n        if (!isUPS) {\n            // right meridian segment\n            positions.clear()\n            positions.add(Position(sector.minLatitude, sector.maxLongitude, 10e3))\n            positions.add(Position(sector.maxLatitude, sector.maxLongitude, 10e3))\n            polyline = layer.createLineRenderable(ArrayList(positions), PathType.LINEAR)\n            lineSector = Sector(\n                sector.minLatitude, sector.maxLatitude, sector.maxLongitude, sector.maxLongitude\n            )\n            gridElements!!.add(GridElement(lineSector, polyline, TYPE_LINE_EAST))\n\n            // bottom parallel segment\n            positions.clear()\n            positions.add(Position(sector.minLatitude, sector.minLongitude, 10e3))\n            positions.add(Position(sector.minLatitude, sector.maxLongitude, 10e3))\n            polyline = layer.createLineRenderable(ArrayList(positions), PathType.LINEAR)\n            lineSector = Sector(\n                sector.minLatitude, sector.minLatitude, sector.minLongitude, sector.maxLongitude\n            )\n            gridElements!!.add(GridElement(lineSector, polyline, TYPE_LINE_SOUTH))\n\n            // top parallel segment\n            positions.clear()\n            positions.add(Position(sector.maxLatitude, sector.minLongitude, 10e3))\n            positions.add(Position(sector.maxLatitude, sector.maxLongitude, 10e3))\n            polyline = layer.createLineRenderable(ArrayList(positions), PathType.LINEAR)\n            lineSector = Sector(\n                sector.maxLatitude, sector.maxLatitude, sector.minLongitude, sector.maxLongitude\n            )\n            gridElements!!.add(GridElement(lineSector, polyline, TYPE_LINE_NORTH))\n        }\n\n        // Label\n        val text = layer.createTextRenderable(\n            Position(sector.centroidLatitude, sector.centroidLongitude, 0.0), name, 10e6\n        )\n        gridElements!!.add(GridElement(sector, text, GridElement.TYPE_GRIDZONE_LABEL))\n    }\n\n    private fun createSquaresUTM() {\n        // Find grid zone easting and northing boundaries\n        var utm = UTMCoord.fromLatLon(sector.minLatitude, sector.centroidLongitude)\n        val minNorthing = utm.northing\n        utm = UTMCoord.fromLatLon(sector.maxLatitude, sector.centroidLongitude)\n        var maxNorthing = utm.northing\n        maxNorthing = if (maxNorthing == 0.0) 10e6 else maxNorthing\n        utm = UTMCoord.fromLatLon(sector.minLatitude, sector.minLongitude)\n        var minEasting = utm.easting\n        utm = UTMCoord.fromLatLon(sector.maxLatitude, sector.minLongitude)\n        minEasting = utm.easting.coerceAtMost(minEasting)\n        var maxEasting = 1e6 - minEasting\n\n        // Compensate for some distorted zones\n        if (name == \"32V\") maxNorthing += 20e3 // catch KS and LS in 32V\n        if (name == \"31X\") maxEasting += ONEHT // catch GA and GV in 31X\n\n        // Create squares\n        squares = layer.createSquaresGrid(zone, hemisphere, sector, minEasting, maxEasting, minNorthing, maxNorthing)\n        setSquareNames()\n    }\n\n    private fun createSquaresUPS() {\n        squares = mutableListOf()\n        val minEasting: Double\n        val maxEasting: Double\n        val minNorthing: Double\n        val maxNorthing: Double\n        if (Hemisphere.N == hemisphere) {\n            minNorthing = TWOMIL - ONEHT * 7\n            maxNorthing = TWOMIL + ONEHT * 7\n            minEasting = if (name == \"Y\") TWOMIL - ONEHT * 7 else TWOMIL\n            maxEasting = if (name == \"Y\") TWOMIL else TWOMIL + ONEHT * 7\n        } else {\n            minNorthing = TWOMIL - ONEHT * 12\n            maxNorthing = TWOMIL + ONEHT * 12\n            minEasting = if (name == \"A\") TWOMIL - ONEHT * 12 else TWOMIL\n            maxEasting = if (name == \"A\") TWOMIL else TWOMIL + ONEHT * 12\n        }\n\n        // Create squares\n        squares = layer.createSquaresGrid(zone, hemisphere, sector, minEasting, maxEasting, minNorthing, maxNorthing)\n        setSquareNames()\n    }\n\n    private fun setSquareNames() {\n        for (sz in squares!!) setSquareName(sz)\n    }\n\n    private fun setSquareName(sz: UTMSquareZone) {\n        // Find out MGRS 100Km square name\n        val tenMeterDegree = toDegrees(10.0 / 6378137.0)\n        var mgrs: MGRSCoord? = null\n        when {\n            sz.isPositionInside(Position(sz.centroid.latitude, sz.centroid.longitude, 0.0)) ->\n                mgrs = MGRSCoord.fromLatLon(sz.centroid.latitude, sz.centroid.longitude)\n            sz.isPositionInside(sz.sw) -> mgrs = MGRSCoord.fromLatLon(\n                sz.sw.latitude.plusDegrees(tenMeterDegree).clampLatitude(),\n                sz.sw.longitude.plusDegrees(tenMeterDegree).clampLongitude()\n            )\n            sz.isPositionInside(sz.se) -> mgrs = MGRSCoord.fromLatLon(\n                sz.se.latitude.plusDegrees(tenMeterDegree).clampLatitude(),\n                sz.se.longitude.minusDegrees(tenMeterDegree).clampLongitude()\n            )\n            sz.isPositionInside(sz.nw) -> mgrs = MGRSCoord.fromLatLon(\n                sz.nw.latitude.minusDegrees(tenMeterDegree).clampLatitude(),\n                sz.nw.longitude.plusDegrees(tenMeterDegree).clampLongitude())\n            sz.isPositionInside(sz.ne) -> mgrs = MGRSCoord.fromLatLon(\n                sz.ne.latitude.minusDegrees(tenMeterDegree).clampLatitude(),\n                sz.ne.longitude.minusDegrees(tenMeterDegree).clampLongitude()\n            )\n        }\n        // Set square zone name\n        if (mgrs != null) sz.name = mgrs.toString().substring(3, 5)\n    }\n\n    companion object {\n        private const val ONEHT = 100e3\n        private const val TWOMIL = 2e6\n        private const val SQUARE_MAX_ALTITUDE = 3000e3\n    }\n}",null,"package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Position.Companion.fromDegrees\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.Sector.Companion.fromDegrees\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LATITUDE_LABEL\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LONGITUDE_LABEL\nimport earth.worldwind.layer.graticule.MGRSGraticuleLayer.Companion.MGRS_OVERVIEW_RESOLUTION\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.shape.Label\nimport earth.worldwind.shape.PathType\n\ninternal class MGRSOverview(layer: MGRSGraticuleLayer): AbstractGraticuleTile(layer, Sector()) {\n    override fun selectRenderables(rc: RenderContext) {\n        super.selectRenderables(rc)\n        val labelPos = layer.computeLabelOffset(rc)\n        for (ge in gridElements!!) {\n            if (ge.isInView(rc)) {\n                if (ge.renderable is Label) {\n                    val gt = ge.renderable\n                    if (labelPos.latitude.inDegrees < 72 || !\"*32*34*36*\".contains(\"*\" + gt.text + \"*\")) {\n                        // Adjust label position according to eye position\n                        var pos = gt.position\n                        if (ge.type == TYPE_LATITUDE_LABEL) pos = Position(pos.latitude, labelPos.longitude, pos.altitude)\n                        else if (ge.type == TYPE_LONGITUDE_LABEL) pos = Position(labelPos.latitude, pos.longitude, pos.altitude)\n                        gt.position = pos\n                    }\n                }\n                layer.addRenderable(ge.renderable, layer.getTypeFor(MGRS_OVERVIEW_RESOLUTION))\n            }\n        }\n    }\n\n    override fun createRenderables() {\n        super.createRenderables()\n        val positions = mutableListOf<Position>()\n\n        // Generate meridians and zone labels\n        var lon = -180\n        var zoneNumber = 1\n        var maxLat: Int\n        for (i in 0..59) {\n            val longitude = lon.toDouble()\n            // Meridian\n            positions.clear()\n            positions.add(fromDegrees(-80.0, longitude, 10e3))\n            positions.add(fromDegrees(-60.0, longitude, 10e3))\n            positions.add(fromDegrees(-30.0, longitude, 10e3))\n            positions.add(fromDegrees(0.0, longitude, 10e3))\n            positions.add(fromDegrees(30.0, longitude, 10e3))\n            if (lon < 6 || lon > 36) {\n                // 'regular' UTM meridians\n                maxLat = 84\n                positions.add(fromDegrees(60.0, longitude, 10e3))\n            } else {\n                // Exceptions: shorter meridians around and north-east of Norway\n                if (lon == 6) {\n                    maxLat = 56\n                } else {\n                    maxLat = 72\n                    positions.add(fromDegrees(60.0, longitude, 10e3))\n                }\n            }\n            positions.add(fromDegrees(maxLat.toDouble(), longitude, 10e3))\n            val polyline = layer.createLineRenderable(positions.toList(), PathType.GREAT_CIRCLE)\n            var sector = fromDegrees(-80.0, longitude, maxLat + 80.0, 1E-15)\n            gridElements!!.add(GridElement(sector, polyline, TYPE_LINE))\n\n            // Zone label\n            val text = layer.createTextRenderable(\n                fromDegrees(0.0, longitude + 3.0, 0.0),\n                zoneNumber.toString(), 10e6\n            )\n            sector = fromDegrees(-90.0, longitude + 3.0, 180.0, 1E-15)\n            gridElements!!.add(GridElement(sector, text, TYPE_LONGITUDE_LABEL))\n\n            // Increase longitude and zone number\n            lon += 6\n            zoneNumber++\n        }\n\n        // Generate special meridian segments for exceptions around and north-east of Norway\n        for (i in 0..4) {\n            positions.clear()\n            val longitude = SPECIAL_MERIDIANS[i][0].toDouble()\n            val latitude1 = SPECIAL_MERIDIANS[i][1].toDouble()\n            val latitude2 = SPECIAL_MERIDIANS[i][2].toDouble()\n            positions.add(fromDegrees(latitude1, longitude, 10e3))\n            positions.add(fromDegrees(latitude2, longitude, 10e3))\n            val polyline = layer.createLineRenderable(ArrayList(positions), PathType.GREAT_CIRCLE)\n            val sector = fromDegrees(latitude1, longitude, latitude2 - latitude1, 1E-15)\n            gridElements!!.add(GridElement(sector, polyline, TYPE_LINE))\n        }\n\n        // Generate parallels - no exceptions\n        var lat = -80\n        for (i in 0..20) {\n            val latitude = lat.toDouble()\n            for (j in 0..3) {\n                // Each parallel is divided into four 90 degrees segments\n                positions.clear()\n                lon = -180 + j * 90\n                val longitude = lon.toDouble()\n                positions.add(fromDegrees(latitude, longitude, 10e3))\n                positions.add(fromDegrees(latitude, longitude + 30, 10e3))\n                positions.add(fromDegrees(latitude, longitude + 60, 10e3))\n                positions.add(fromDegrees(latitude, longitude + 90, 10e3))\n                val polyline = layer.createLineRenderable(ArrayList(positions), PathType.LINEAR)\n                val sector = fromDegrees(latitude, longitude, 1E-15, 90.0)\n                gridElements!!.add(GridElement(sector, polyline, TYPE_LINE))\n            }\n            // Latitude band label\n            if (i < 20) {\n                val text = layer.createTextRenderable(\n                    fromDegrees(latitude + 4, 0.0, 0.0),\n                    LAT_BANDS[i].toString(), 10e6\n                )\n                val sector = fromDegrees(latitude + 4, -180.0, 1E-15, 360.0)\n                gridElements!!.add(GridElement(sector, text, TYPE_LATITUDE_LABEL))\n            }\n\n            // Increase latitude\n            lat += if (lat < 72) 8 else 12\n        }\n    }\n\n    companion object {\n        // Exceptions for some meridians. Values: longitude, min latitude, max latitude\n        private val SPECIAL_MERIDIANS = arrayOf(\n            intArrayOf(3, 56, 64), intArrayOf(6, 64, 72), intArrayOf(9, 72, 84), intArrayOf(21, 72, 84), intArrayOf(33, 72, 84)\n        )\n\n        // Latitude bands letters - from south to north\n        private const val LAT_BANDS = \"CDEFGHJKLMNPQRSTUVWX\"\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.geom.coords.Hemisphere\nimport earth.worldwind.geom.coords.UPSCoord\nimport earth.worldwind.geom.coords.UTMCoord\nimport earth.worldwind.layer.graticule.AbstractUTMGraticuleLayer.Companion.UTM_MAX_LATITUDE\nimport earth.worldwind.layer.graticule.AbstractUTMGraticuleLayer.Companion.UTM_MIN_LATITUDE\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_EAST\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_EASTING\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_NORTH\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_NORTHING\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_SOUTH\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_WEST\nimport earth.worldwind.render.RenderContext\nimport kotlin.math.log10\nimport kotlin.math.pow\n\ninternal class UTMMetricScaleSupport(private val layer: AbstractUTMGraticuleLayer) {\n    private class UTMExtremes {\n        var minX = 1e6\n        var maxX = 0.0\n        var minY = 10e6\n        var maxY = 0.0\n        var minYHemisphere = Hemisphere.N\n        var maxYHemisphere = Hemisphere.S\n    }\n\n    var scaleModulo = 10000000\n    var maxResolution = 1e5\n        set(value) {\n            field = value\n            clear()\n        }\n    var zone = 0\n        private set\n\n    // 5 levels 100km to 10m\n    private var extremes: Array<UTMExtremes>? = null\n\n    fun computeZone(rc: RenderContext) {\n        try {\n            if (layer.hasLookAtPos(rc)) {\n                val latitude = layer.getLookAtLatitude(rc)\n                val longitude = layer.getLookAtLongitude(rc)\n                zone = if (latitude.inDegrees in UTM_MIN_LATITUDE..UTM_MAX_LATITUDE) {\n                    val utm = UTMCoord.fromLatLon(latitude, longitude)\n                    utm.zone\n                } else 0\n            }\n        } catch (ex: Exception) {\n            zone = 0\n        }\n    }\n\n    fun clear() {\n        val numLevels = log10(maxResolution).toInt()\n        extremes = Array(numLevels) { UTMExtremes() }\n    }\n\n    fun computeMetricScaleExtremes(UTMZone: Int, hemisphere: Hemisphere, ge: GridElement, size: Double) {\n        if (UTMZone != zone) return\n        if (size < 1 || size > maxResolution) return\n        val levelExtremes = extremes!![log10(size).toInt() - 1]\n        if (ge.type == TYPE_LINE_EASTING || ge.type == TYPE_LINE_EAST || ge.type == TYPE_LINE_WEST) {\n            levelExtremes.minX = ge.value.inDegrees.coerceAtMost(levelExtremes.minX)\n            levelExtremes.maxX = ge.value.inDegrees.coerceAtLeast(levelExtremes.maxX)\n        } else if (ge.type == TYPE_LINE_NORTHING || ge.type == TYPE_LINE_SOUTH || ge.type == TYPE_LINE_NORTH) {\n            if (hemisphere == levelExtremes.minYHemisphere) {\n                levelExtremes.minY = ge.value.inDegrees.coerceAtMost(levelExtremes.minY)\n            } else if (hemisphere == Hemisphere.S) {\n                levelExtremes.minY = ge.value.inDegrees\n                levelExtremes.minYHemisphere = hemisphere\n            }\n            if (hemisphere == levelExtremes.maxYHemisphere) {\n                levelExtremes.maxY = ge.value.inDegrees.coerceAtLeast(levelExtremes.maxY)\n            } else if (hemisphere == Hemisphere.N) {\n                levelExtremes.maxY = ge.value.inDegrees\n                levelExtremes.maxYHemisphere = hemisphere\n            }\n        }\n    }\n\n    fun selectRenderables(rc: RenderContext) {\n        val extremes = extremes ?: return\n        if (!layer.hasLookAtPos(rc)) return\n\n        // Compute easting and northing label offsets\n        val pixelSize = layer.getPixelSize(rc)\n        val eastingOffset = rc.viewport.width * pixelSize * OFFSET_FACTOR_X / 2\n        val northingOffset = rc.viewport.height * pixelSize * OFFSET_FACTOR_Y / 2\n        // Derive labels center pos from the view center\n        val labelEasting: Double\n        var labelNorthing: Double\n        var labelHemisphere: Hemisphere\n        if (zone > 0) {\n            val utm = UTMCoord.fromLatLon(layer.getLookAtLatitude(rc), layer.getLookAtLongitude(rc))\n            labelEasting = utm.easting + eastingOffset\n            labelNorthing = utm.northing + northingOffset\n            labelHemisphere = utm.hemisphere\n            if (labelNorthing < 0) {\n                labelNorthing += 10e6\n                labelHemisphere = Hemisphere.S\n            }\n        } else {\n            val ups = UPSCoord.fromLatLon(layer.getLookAtLatitude(rc), layer.getLookAtLongitude(rc))\n            labelEasting = ups.easting + eastingOffset\n            labelNorthing = ups.northing + northingOffset\n            labelHemisphere = ups.hemisphere\n        }\n        val viewFrustum = rc.frustum\n        var labelPos: Position?\n        for (i in extremes.indices) {\n            val levelExtremes = extremes[i]\n            val gridStep = 10.0.pow(i.toDouble())\n            val gridStepTimesTen = gridStep * 10\n            val graticuleType = layer.getTypeFor(gridStep)\n            if (levelExtremes.minX <= levelExtremes.maxX) {\n                // Process easting scale labels for this level\n                var easting = levelExtremes.minX\n                while (easting <= levelExtremes.maxX) {\n                    // Skip multiples of ten grid steps except for last (higher) level\n                    if (i == extremes.size - 1 || easting % gridStepTimesTen != 0.0) {\n                        labelPos = layer.computePosition(zone, labelHemisphere, easting, labelNorthing)\n                        val lat = labelPos.latitude\n                        val lon = labelPos.longitude\n                        val surfacePoint = layer.getSurfacePoint(rc, lat, lon)\n                        if (viewFrustum.containsPoint(surfacePoint) && isPointInRange(rc, surfacePoint)) {\n                            val text = (easting % scaleModulo).toInt().toString()\n                            val gt = layer.createTextRenderable(\n                                Position(lat, lon, 0.0), text, gridStepTimesTen\n                            )\n                            layer.addRenderable(gt, graticuleType)\n                        }\n                    }\n                    easting += gridStep\n                }\n            }\n            if (!(levelExtremes.maxYHemisphere == Hemisphere.S && levelExtremes.maxY == 0.0)) {\n                // Process northing scale labels for this level\n                var currentHemisphere = levelExtremes.minYHemisphere\n                var northing = levelExtremes.minY\n                while (northing <= levelExtremes.maxY || currentHemisphere != levelExtremes.maxYHemisphere) {\n                    // Skip multiples of ten grid steps except for last (higher) level\n                    if (i == extremes.size - 1 || northing % gridStepTimesTen != 0.0) {\n                        labelPos = layer.computePosition(zone, currentHemisphere, labelEasting, northing)\n                        val lat = labelPos.latitude\n                        val lon = labelPos.longitude\n                        val surfacePoint = layer.getSurfacePoint(rc, lat, lon)\n                        if (viewFrustum.containsPoint(surfacePoint) && isPointInRange(rc, surfacePoint)) {\n                            val text: String = (northing % scaleModulo).toInt().toString()\n                            val gt = layer.createTextRenderable(\n                                Position(lat, lon, 0.0), text, gridStepTimesTen\n                            )\n                            layer.addRenderable(gt, graticuleType)\n                        }\n                        if (currentHemisphere != levelExtremes.maxYHemisphere && northing >= 10e6 - gridStep) {\n                            // Switch hemisphere\n                            currentHemisphere = levelExtremes.maxYHemisphere\n                            northing = -gridStep\n                        }\n                    }\n                    northing += gridStep\n                }\n            }\n        }\n    }\n\n    private fun isPointInRange(rc: RenderContext, point: Vec3): Boolean {\n        val altitudeAboveGround = layer.computeAltitudeAboveGround(rc)\n        return rc.cameraPoint.distanceTo(point) < altitudeAboveGround * VISIBLE_DISTANCE_FACTOR\n    }\n\n    override fun toString(): String {\n        val sb = StringBuilder()\n        for (i in 0..4) {\n            sb.append(\"level \")\n            sb.append(i)\n            sb.append(\" : \")\n            val levelExtremes = extremes!![i]\n            if (levelExtremes.minX < levelExtremes.maxX ||\n                !(levelExtremes.maxYHemisphere == Hemisphere.S && levelExtremes.maxY == 0.0)\n            ) {\n                sb.append(levelExtremes.minX)\n                sb.append(\", \")\n                sb.append(levelExtremes.maxX)\n                sb.append(\" - \")\n                sb.append(levelExtremes.minY)\n                sb.append(levelExtremes.minYHemisphere)\n                sb.append(\", \")\n                sb.append(levelExtremes.maxY)\n                sb.append(levelExtremes.maxYHemisphere)\n            } else {\n                sb.append(\"empty\")\n            }\n            sb.append(\"\\n\")\n        }\n        return sb.toString()\n    }\n\n    companion object {\n        private const val OFFSET_FACTOR_X = -.5\n        private const val OFFSET_FACTOR_Y = -.5\n        private const val VISIBLE_DISTANCE_FACTOR = 10.0\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.coords.Hemisphere\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_EASTING\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_NORTHING\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.shape.PathType\n\n/**\n * Represent a square 10x10 grid and recursive tree in easting/northing coordinates\n */\ninternal class UTMSquareGrid(\n    layer: AbstractUTMGraticuleLayer, UTMZone: Int, hemisphere: Hemisphere, UTMZoneSector: Sector,\n    SWEasting: Double, SWNorthing: Double, size: Double\n): UTMSquareSector(layer, UTMZone, hemisphere, UTMZoneSector, SWEasting, SWNorthing, size) {\n    private var subGrids: MutableList<UTMSquareGrid>? = null\n\n    override fun isInView(rc: RenderContext): Boolean {\n        return super.isInView(rc) && getSizeInPixels(rc) > MIN_CELL_SIZE_PIXELS * 4\n    }\n\n    override fun selectRenderables(rc: RenderContext) {\n        super.selectRenderables(rc)\n        val drawMetricLabels = getSizeInPixels(rc) > MIN_CELL_SIZE_PIXELS * 4 * 1.7\n        val graticuleType = layer.getTypeFor(size / 10)\n        for (ge in gridElements!!) {\n            if (ge.isInView(rc)) {\n                if (drawMetricLabels) layer.computeMetricScaleExtremes(UTMZone, hemisphere, ge, size)\n                layer.addRenderable(ge.renderable, graticuleType)\n            }\n        }\n        if (getSizeInPixels(rc) <= MIN_CELL_SIZE_PIXELS * 4 * 2) return\n\n        // Select sub grids renderables\n        subGrids ?: createSubGrids()\n        for (sg in subGrids!!) if (sg.isInView(rc)) sg.selectRenderables(rc) else sg.clearRenderables()\n    }\n\n    override fun clearRenderables() {\n        super.clearRenderables()\n        subGrids?.run {\n            for (sg in this) sg.clearRenderables()\n            clear()\n        }.also { subGrids = null }\n    }\n\n    private fun createSubGrids() {\n        subGrids = mutableListOf()\n        val gridStep = size / 10\n        for (i in 0..9) {\n            val easting = SWEasting + gridStep * i\n            for (j in 0..9) {\n                val northing = SWNorthing + gridStep * j\n                val sg = UTMSquareGrid(layer, UTMZone, hemisphere, UTMZoneSector, easting, northing, gridStep)\n                if (!sg.isOutsideGridZone) subGrids!!.add(sg)\n            }\n        }\n    }\n\n    override fun createRenderables() {\n        super.createRenderables()\n        val gridStep = size / 10\n        val positions = mutableListOf<Position>()\n\n        // South-North lines\n        for (i in 1..9) {\n            val easting = SWEasting + gridStep * i\n            positions.clear()\n            var p1 = layer.computePosition(UTMZone, hemisphere, easting, SWNorthing)\n            var p2 = layer.computePosition(UTMZone, hemisphere, easting, SWNorthing + size)\n            if (isTruncated) {\n                layer.computeTruncatedSegment(p1, p2, UTMZoneSector, positions)\n            } else {\n                positions.add(p1)\n                positions.add(p2)\n            }\n            if (positions.size > 0) {\n                p1 = positions[0]\n                p2 = positions[1]\n                val polyline = layer.createLineRenderable(ArrayList(positions), PathType.GREAT_CIRCLE)\n                val lineSector = boundingSector(p1, p2)\n                gridElements!!.add(\n                    GridElement(lineSector, polyline, TYPE_LINE_EASTING, easting.degrees)\n                )\n            }\n        }\n        // West-East lines\n        for (i in 1..9) {\n            val northing = SWNorthing + gridStep * i\n            positions.clear()\n            var p1 = layer.computePosition(UTMZone, hemisphere, SWEasting, northing)\n            var p2 = layer.computePosition(UTMZone, hemisphere, SWEasting + size, northing)\n            if (isTruncated) {\n                layer.computeTruncatedSegment(p1, p2, UTMZoneSector, positions)\n            } else {\n                positions.add(p1)\n                positions.add(p2)\n            }\n            if (positions.size > 0) {\n                p1 = positions[0]\n                p2 = positions[1]\n                val polyline = layer.createLineRenderable(ArrayList(positions), PathType.GREAT_CIRCLE)\n                val lineSector = boundingSector(p1, p2)\n                gridElements!!.add(GridElement(lineSector, polyline, TYPE_LINE_NORTHING, northing.degrees))\n            }\n        }\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Angle.Companion.NEG180\nimport earth.worldwind.geom.Angle.Companion.NEG90\nimport earth.worldwind.geom.Angle.Companion.POS180\nimport earth.worldwind.geom.Angle.Companion.POS90\nimport earth.worldwind.geom.Location\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.coords.Hemisphere\nimport earth.worldwind.render.RenderContext\nimport kotlin.math.abs\nimport kotlin.math.sign\n\n/**\n * Represent a generic UTM/UPS square area\n */\nabstract class UTMSquareSector(\n    layer: AbstractUTMGraticuleLayer, val UTMZone: Int, val hemisphere: Hemisphere,\n    val UTMZoneSector: Sector, val SWEasting: Double, val SWNorthing: Double, val size: Double\n): AbstractGraticuleTile(layer, Sector()) {\n    val squareCenter = layer.computePosition(UTMZone, hemisphere, SWEasting + size / 2, SWNorthing + size / 2)\n    // Four corners position\n    var sw = layer.computePosition(UTMZone, hemisphere, SWEasting, SWNorthing)\n    var se = layer.computePosition(UTMZone, hemisphere, SWEasting + size, SWNorthing)\n    var nw = layer.computePosition(UTMZone, hemisphere, SWEasting, SWNorthing + size)\n    var ne = layer.computePosition(UTMZone, hemisphere, SWEasting + size, SWNorthing + size)\n    var boundingSector = boundingSector(adjustDateLineCrossingPoints()).apply { if (!isInsideGridZone) intersect(UTMZoneSector) }.also { sector.copy(it) }\n    var centroid = boundingSector.centroid(Location())\n    val isTruncated = !isInsideGridZone\n    override val layer get() = super.layer as AbstractUTMGraticuleLayer\n    /**\n     * Determines whether this square is fully inside its parent grid zone.\n     */\n    private val isInsideGridZone get() = isPositionInside(nw) && isPositionInside(ne) && isPositionInside(sw) && isPositionInside(se)\n    /**\n     * Determines whether this square is fully outside its parent grid zone.\n     */\n    val isOutsideGridZone = !isPositionInside(nw) && !isPositionInside(ne) && !isPositionInside(sw) && !isPositionInside(se)\n\n    private fun adjustDateLineCrossingPoints(): Iterable<Location> {\n        val corners = listOf(sw, se, nw, ne)\n        if (!locationsCrossDateLine(corners)) return corners\n\n        var lonSign = 0.0\n        for (corner in corners) if (abs(corner.longitude.inDegrees) != 180.0) lonSign = sign(corner.longitude.inDegrees)\n        if (lonSign == 0.0) return corners\n\n        if (abs(sw.longitude.inDegrees) == 180.0 && sign(sw.longitude.inDegrees) != lonSign)\n            sw = Position(sw.latitude, -sw.longitude, sw.altitude)\n        if (abs(se.longitude.inDegrees) == 180.0 && sign(se.longitude.inDegrees) != lonSign)\n            se = Position(se.latitude, -se.longitude, se.altitude)\n        if (abs(nw.longitude.inDegrees) == 180.0 && sign(nw.longitude.inDegrees) != lonSign)\n            nw = Position(nw.latitude, -nw.longitude, nw.altitude)\n        if (abs(ne.longitude.inDegrees) == 180.0 && sign(ne.longitude.inDegrees) != lonSign)\n            ne = Position(ne.latitude, -ne.longitude, ne.altitude)\n\n        return listOf(sw, se, nw, ne)\n    }\n\n    private fun locationsCrossDateLine(locations: Iterable<Location>): Boolean {\n        var pos: Location? = null\n        for (posNext in locations) {\n            if (pos != null) {\n                // A segment cross the line if end pos have different longitude signs\n                // and are more than 180 degrees longitude apart\n                if (sign(pos.longitude.inDegrees) != sign(posNext.longitude.inDegrees)) {\n                    val delta = abs(pos.longitude.inDegrees - posNext.longitude.inDegrees)\n                    if (delta > 180 && delta < 360) return true\n                }\n            }\n            pos = posNext\n        }\n        return false\n    }\n\n    private fun boundingSector(locations: Iterable<Location>): Sector {\n        var minLat = POS90\n        var minLon = POS180\n        var maxLat = NEG90\n        var maxLon = NEG180\n        for (p in locations) {\n            val lat = p.latitude\n            if (lat < minLat) minLat = lat\n            if (lat > maxLat) maxLat = lat\n            val lon = p.longitude\n            if (lon < minLon) minLon = lon\n            if (lon > maxLon) maxLon = lon\n        }\n        return Sector(minLat, maxLat, minLon, maxLon)\n    }\n\n    fun boundingSector(pA: Location, pB: Location): Sector {\n        var minLat = pA.latitude\n        var minLon = pA.longitude\n        var maxLat = pA.latitude\n        var maxLon = pA.longitude\n        if (pB.latitude < minLat) minLat = pB.latitude else if (pB.latitude > maxLat) maxLat = pB.latitude\n        if (pB.longitude < minLon) minLon = pB.longitude else if (pB.longitude > maxLon) maxLon = pB.longitude\n        return Sector(minLat, maxLat, minLon, maxLon)\n    }\n\n    fun isPositionInside(position: Location) = UTMZoneSector.contains(position)\n\n    override fun getSizeInPixels(rc: RenderContext): Double {\n        val centerPoint = layer.getSurfacePoint(rc, centroid.latitude, centroid.longitude)\n        val distance = rc.cameraPoint.distanceTo(centerPoint)\n        return size / rc.pixelSizeAtDistance(distance) / rc.densityFactor\n    }\n\n    companion object {\n        const val MIN_CELL_SIZE_PIXELS = 50\n    }\n}","package earth.worldwind.layer.graticule\n\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.coords.Hemisphere\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_GRIDZONE_LABEL\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_EAST\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_NORTH\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_SOUTH\nimport earth.worldwind.layer.graticule.GridElement.Companion.TYPE_LINE_WEST\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.shape.PathType\nimport kotlin.math.cos\n\n/**\n * Represent a 100km square zone inside an UTM zone.\n */\nclass UTMSquareZone(\n    layer: AbstractUTMGraticuleLayer, UTMZone: Int, hemisphere: Hemisphere, UTMZoneSector: Sector,\n    SWEasting: Double, SWNorthing: Double, size: Double\n): UTMSquareSector(layer, UTMZone, hemisphere, UTMZoneSector, SWEasting, SWNorthing, size) {\n    var name: String? = null\n    var northNeighbor: UTMSquareZone? = null\n    var eastNeighbor: UTMSquareZone? = null\n    private var squareGrid: UTMSquareGrid? = null\n\n    override fun isInView(rc: RenderContext) = super.isInView(rc) && getSizeInPixels(rc) > MIN_CELL_SIZE_PIXELS\n\n    override fun selectRenderables(rc: RenderContext) {\n        super.selectRenderables(rc)\n        val drawMetricLabels = getSizeInPixels(rc) > MIN_CELL_SIZE_PIXELS * 2\n        val graticuleType = layer.getTypeFor(size)\n        for (ge in gridElements!!) {\n            if (ge.isInView(rc)) {\n                if (ge.type == TYPE_LINE_NORTH && isNorthNeighborInView(rc)) continue\n                if (ge.type == TYPE_LINE_EAST && isEastNeighborInView(rc)) continue\n                if (drawMetricLabels) layer.computeMetricScaleExtremes(\n                    UTMZone, hemisphere, ge, size * 10\n                )\n                layer.addRenderable(ge.renderable, graticuleType)\n            }\n        }\n        if (getSizeInPixels(rc) <= MIN_CELL_SIZE_PIXELS * 2) return\n\n        // Select grid renderables\n        val squareGrid = squareGrid ?: UTMSquareGrid(layer, UTMZone, hemisphere, UTMZoneSector, SWEasting, SWNorthing, size).also { squareGrid = it }\n        if (squareGrid.isInView(rc)) squareGrid.selectRenderables(rc) else squareGrid.clearRenderables()\n    }\n\n    private fun isNorthNeighborInView(rc: RenderContext) = northNeighbor?.isInView(rc) == true\n\n    private fun isEastNeighborInView(rc: RenderContext) = eastNeighbor?.isInView(rc) == true\n\n    override fun clearRenderables() {\n        super.clearRenderables()\n        squareGrid?.clearRenderables()\n        squareGrid = null\n    }\n\n    override fun createRenderables() {\n        super.createRenderables()\n        val positions = mutableListOf<Position>()\n\n        // left segment\n        if (isTruncated) {\n            layer.computeTruncatedSegment(sw, nw, UTMZoneSector, positions)\n        } else {\n            positions.add(sw)\n            positions.add(nw)\n        }\n        if (positions.size > 0) {\n            val p1 = positions[0]\n            val p2 = positions[1]\n            val polyline = layer.createLineRenderable(ArrayList(positions), PathType.GREAT_CIRCLE)\n            val lineSector = boundingSector(p1, p2)\n            gridElements!!.add(\n                GridElement(lineSector, polyline, TYPE_LINE_WEST, SWEasting.degrees)\n            )\n        }\n\n        // right segment\n        positions.clear()\n        if (isTruncated) {\n            layer.computeTruncatedSegment(se, ne, UTMZoneSector, positions)\n        } else {\n            positions.add(se)\n            positions.add(ne)\n        }\n        if (positions.size > 0) {\n            val p1 = positions[0]\n            val p2 = positions[1]\n            val polyline = layer.createLineRenderable(ArrayList(positions), PathType.GREAT_CIRCLE)\n            val lineSector = boundingSector(p1, p2)\n            gridElements!!.add(GridElement(lineSector, polyline, TYPE_LINE_EAST, (SWEasting + size).degrees))\n        }\n\n        // bottom segment\n        positions.clear()\n        if (isTruncated) {\n            layer.computeTruncatedSegment(sw, se, UTMZoneSector, positions)\n        } else {\n            positions.add(sw)\n            positions.add(se)\n        }\n        if (positions.size > 0) {\n            val p1 = positions[0]\n            val p2 = positions[1]\n            val polyline = layer.createLineRenderable(ArrayList(positions), PathType.GREAT_CIRCLE)\n            val lineSector = boundingSector(p1, p2)\n            gridElements!!.add(GridElement(lineSector, polyline, TYPE_LINE_SOUTH, SWNorthing.degrees))\n        }\n\n        // top segment\n        positions.clear()\n        if (isTruncated) {\n            layer.computeTruncatedSegment(nw, ne, UTMZoneSector, positions)\n        } else {\n            positions.add(nw)\n            positions.add(ne)\n        }\n        if (positions.size > 0) {\n            val p1 = positions[0]\n            val p2 = positions[1]\n            val polyline = layer.createLineRenderable(ArrayList(positions), PathType.GREAT_CIRCLE)\n            val lineSector = boundingSector(p1, p2)\n            gridElements!!.add(GridElement(lineSector, polyline, TYPE_LINE_NORTH, (SWNorthing + size).degrees))\n        }\n\n        // Label\n        if (name != null) {\n            // Only add a label to squares above some dimension\n            if (boundingSector.deltaLongitude.inDegrees * cos(centroid.latitude.inRadians) > .2\n                && boundingSector.deltaLatitude.inDegrees > .2\n            ) {\n                val labelPos = if (UTMZone != 0) centroid // Not at poles\n                else if (isPositionInside(Position(squareCenter.latitude, squareCenter.longitude, 0.0))) squareCenter\n                else if (squareCenter.latitude <= UTMZoneSector.maxLatitude && squareCenter.latitude >= UTMZoneSector.minLatitude) centroid\n                else null\n                if (labelPos != null) {\n                    val text = layer.createTextRenderable(\n                        Position(labelPos.latitude, labelPos.longitude, 0.0), name!!, size * 10\n                    )\n                    gridElements!!.add(GridElement(boundingSector, text, TYPE_GRIDZONE_LABEL))\n                }\n            }\n        }\n    }\n}","package earth.worldwind.layer.mercator\n\nimport earth.worldwind.geom.Angle.Companion.average\nimport earth.worldwind.layer.mercator.MercatorSector.Companion.fromSector\nimport earth.worldwind.layer.mercator.MercatorSector.Companion.gudermannianInverse\nimport earth.worldwind.render.image.ImageTile\nimport earth.worldwind.util.Level\nimport earth.worldwind.util.Tile\nimport earth.worldwind.util.TileFactory\nimport kotlin.jvm.JvmStatic\n\n/**\n * Constructs a tile with a specified sector, level, row and column.\n *\n * @param sector the sector spanned by the tile\n * @param level  the tile's level in a LevelSet\n * @param row    the tile's row within the specified level\n * @param column the tile's column within the specified level\n */\nabstract class AbstractMercatorImageTile(\n    sector: MercatorSector, level: Level, row: Int, column: Int\n): ImageTile(sector, level, row, column) {\n    companion object {\n        /**\n         * Creates all Mercator tiles for a specified level within a LevelSet.\n         *\n         * @param level       the level to create the tiles for\n         * @param tileFactory the tile factory to use for creating tiles.\n         * @param result      a pre-allocated Collection in which to store the results\n         */\n        @JvmStatic\n        fun assembleMercatorTilesForLevel(level: Level, tileFactory: TileFactory, result: MutableList<Tile>) {\n            val sector = fromSector(level.parent.sector)\n            val tileOrigin = level.parent.tileOrigin\n            val dLat = level.tileDelta.latitude\n            val dLon = level.tileDelta.longitude\n            val firstRow = computeRow(dLat, sector.minLatitude, tileOrigin.latitude)\n            val lastRow = computeLastRow(dLat, sector.maxLatitude, tileOrigin.latitude)\n            val firstCol = computeColumn(dLon, sector.minLongitude, tileOrigin.longitude)\n            val lastCol = computeLastColumn(dLon, sector.maxLongitude, tileOrigin.longitude)\n            val dLatPercent = dLat.inDegrees / sector.deltaLatitude.inDegrees * (sector.maxLatPercent - sector.minLatPercent)\n            val firstRowPercent = gudermannianInverse(tileOrigin.latitude) + firstRow * dLatPercent\n            val firstColLon = tileOrigin.longitude.plusDegrees(firstCol * dLon.inDegrees)\n            var d1 = firstRowPercent\n            for (row in firstRow..lastRow) {\n                val d2 = d1 + dLatPercent\n                var t1 = firstColLon\n                for (col in firstCol..lastCol) {\n                    val t2 = t1 + dLon\n                    result.add(tileFactory.createTile(MercatorSector(d1, d2, t1, t2), level, row, col))\n                    t1 = t2\n                }\n                d1 = d2\n            }\n        }\n    }\n\n    /**\n     * Returns the four children formed by subdividing this tile. This tile's sector is subdivided into four quadrants\n     * as follows: Southwest; Southeast; Northwest; Northeast. A new tile is then constructed for each quadrant and\n     * configured with the next level within this tile's LevelSet and its corresponding row and column within that\n     * level. This returns null if this tile's level is the last level within its LevelSet.\n     *\n     * @param tileFactory the tile factory to use to create the children\n     *\n     * @return an array containing the four child tiles, or null if this tile's level is the last level\n     */\n    override fun subdivide(tileFactory: TileFactory): Array<Tile> {\n        val childLevel = level.nextLevel ?: return emptyArray()\n        val sector = sector as MercatorSector\n        val d0 = sector.minLatPercent\n        val d2 = sector.maxLatPercent\n        val d1 = d0 + (d2 - d0) / 2.0\n        val t0 = sector.minLongitude\n        val t2 = sector.maxLongitude\n        val t1 = average(t0, t2)\n        val northRow = 2 * row\n        val southRow = northRow + 1\n        val westCol = 2 * column\n        val eastCol = westCol + 1\n        val child0 = tileFactory.createTile(MercatorSector(d0, d1, t0, t1), childLevel, northRow, westCol)\n        val child1 = tileFactory.createTile(MercatorSector(d0, d1, t1, t2), childLevel, northRow, eastCol)\n        val child2 = tileFactory.createTile(MercatorSector(d1, d2, t0, t1), childLevel, southRow, westCol)\n        val child3 = tileFactory.createTile(MercatorSector(d1, d2, t1, t2), childLevel, southRow, eastCol)\n        return arrayOf(child0, child1, child2, child3)\n    }\n}","package earth.worldwind.layer.mercator\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.fromDegrees\nimport earth.worldwind.geom.Angle.Companion.fromRadians\nimport earth.worldwind.geom.Sector\nimport kotlin.jvm.JvmStatic\nimport kotlin.math.*\n\nopen class MercatorSector(\n    val minLatPercent: Double, val maxLatPercent: Double, minLongitude: Angle, maxLongitude: Angle\n): Sector(gudermannian(minLatPercent), gudermannian(maxLatPercent), minLongitude, maxLongitude) {\n    companion object {\n        @JvmStatic\n        fun fromDegrees(\n            minLatPercent: Double, maxLatPercent: Double, minLonDegrees: Double, maxLonDegrees: Double\n        ) = MercatorSector(\n            minLatPercent, maxLatPercent, fromDegrees(minLonDegrees), fromDegrees(maxLonDegrees)\n        )\n\n        @JvmStatic\n        fun fromRadians(\n            minLatPercent: Double, maxLatPercent: Double, minLonRadians: Double, maxLonRadians: Double\n        ) = MercatorSector(\n            minLatPercent, maxLatPercent, fromRadians(minLonRadians), fromRadians(maxLonRadians)\n        )\n\n        @JvmStatic\n        fun fromSector(sector: Sector) = MercatorSector(\n            gudermannianInverse(sector.minLatitude), gudermannianInverse(sector.maxLatitude),\n            sector.minLongitude, sector.maxLongitude\n        )\n\n        @JvmStatic\n        fun gudermannianInverse(latitude: Angle) = ln(tan(PI / 4.0 + latitude.inRadians / 2.0)) / PI\n\n        @JvmStatic\n        fun gudermannian(percent: Double) = fromRadians(atan(sinh(percent * PI)))\n    }\n}","package earth.worldwind.layer.mercator\n\nimport earth.worldwind.geom.Angle.Companion.NEG180\nimport earth.worldwind.geom.Angle.Companion.POS180\nimport earth.worldwind.geom.Location\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.layer.TiledImageLayer\nimport earth.worldwind.render.image.ImageConfig\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.util.Level\nimport earth.worldwind.util.LevelSet\nimport earth.worldwind.util.ResourcePostprocessor\nimport earth.worldwind.util.TileFactory\n\nabstract class MercatorTiledImageLayer(\n    name: String, numLevels: Int, tileSize: Int, transparent: Boolean\n): TiledImageLayer(name) {\n    private val tileFactory = object : TileFactory {\n        override fun createTile(sector: Sector, level: Level, row: Int, column: Int) =\n            MercatorImageTile(sector as MercatorSector, level, row, column).apply {\n                imageSource = getImageSource(column, (1 shl level.levelNumber) - 1 - row, level.levelNumber)?.also {\n                    it.postprocessor = this as ResourcePostprocessor<*>\n                }\n            }\n    }\n\n    init {\n        val sector = MercatorSector(-1.0, 1.0, NEG180, POS180)\n        val tileOrigin = Location(sector.minLatitude, sector.minLongitude)\n        val firstLevelDelta = Location(sector.deltaLatitude, sector.deltaLongitude)\n        val levelSet = LevelSet(sector, tileOrigin, firstLevelDelta, numLevels, tileSize, tileSize)\n        tiledSurfaceImage = MercatorTiledSurfaceImage(tileFactory, levelSet).apply {\n            // Reduce memory usage by using a 16-bit configuration with no alpha\n            if (!transparent) imageOptions = ImageOptions(ImageConfig.RGB_565)\n            levelOffset = 1 // Skip topmost level with bad resolution from processing\n        }\n    }\n\n    protected abstract fun getImageSource(x: Int, y: Int, z: Int): ImageSource?\n}","package earth.worldwind.layer.mercator\n\nimport earth.worldwind.shape.TiledSurfaceImage\nimport earth.worldwind.util.LevelSet\nimport earth.worldwind.util.TileFactory\n\nopen class MercatorTiledSurfaceImage(tileFactory: TileFactory, levelSet: LevelSet) : TiledSurfaceImage(tileFactory, levelSet) {\n    override fun createTopLevelTiles() {\n        levelSet.firstLevel?.let { AbstractMercatorImageTile.assembleMercatorTilesForLevel(it, tileFactory, topLevelTiles) }\n    }\n}","package earth.worldwind.layer.mercator.google\n\nimport earth.worldwind.layer.mercator.MercatorTiledImageLayer\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.util.locale.language\n\nclass GoogleLayer(type: Type): MercatorTiledImageLayer(type.layerName, 22, 256, type.overlay) {\n    private val lyrs = type.lyrs\n\n    enum class Type(val layerName: String, val lyrs: String, val overlay: Boolean) {\n        ROADMAP(\"Google road map\", \"m\", false),\n        ROADMAP2(\"Google road map 2\", \"r\", false),\n        TERRAIN(\"Google map w/ terrain\", \"p\", false),\n        TERRAIN_ONLY(\"Google terrain only\", \"t\", false),\n        HYBRID(\"Google hybrid\", \"y\", false),\n        SATELLITE(\"Google satellite\", \"s\", false),\n        ROADS(\"Google roads\", \"h\", true),\n        TRAFFIC(\"Google traffic\", \"h,traffic&style=15\", true);\n    }\n\n    override fun getImageSource(x: Int, y: Int, z: Int) =\n        ImageSource.fromUrlString(\"https://mt.google.com/vt/lyrs=$lyrs&x=$x&y=$y&z=$z&hl=$language\")\n}","package earth.worldwind.layer.starfield\n\nimport dev.icerock.moko.resources.FileResource\nimport earth.worldwind.MR\nimport earth.worldwind.WorldWind\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.draw.DrawableGroup\nimport earth.worldwind.draw.DrawableLambda\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.layer.AbstractLayer\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.Texture\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.WARN\nimport earth.worldwind.util.Logger.log\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.SunPosition\nimport earth.worldwind.util.kgl.GL_ALIASED_POINT_SIZE_RANGE\nimport earth.worldwind.util.kgl.GL_ARRAY_BUFFER\nimport earth.worldwind.util.kgl.GL_FLOAT\nimport earth.worldwind.util.kgl.GL_POINTS\nimport kotlinx.datetime.Clock\nimport kotlinx.datetime.Instant\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.decodeFromString\nimport kotlinx.serialization.json.Json\n\n/**\n * Constructs a layer showing stars and the Sun around the Earth.\n * If used together with the AtmosphereLayer, the StarFieldLayer must be inserted before the AtmosphereLayer.\n *\n * If you want to use your own star data, the file provided must be .json\n * and the fields \"ra\", \"dec\" and \"vmag\" must be present in the metadata.\n * ra and dec must be expressed in degrees.\n *\n * This layer uses J2000.0 as the ref epoch.\n *\n * If the star data .json file is too big, consider enabling gzip compression on your web server.\n * For more info about enabling gzip compression consult the configuration for your web server.\n */\nopen class StarFieldLayer(starDataSource: FileResource = MR.files.stars): AbstractLayer(\"StarField\") {\n    override var isPickEnabled = false // The StarField Layer is not pickable.\n    /**\n     * Resource for the stars data\n     */\n    var starDataSource = starDataSource\n        set(value) {\n            field = value\n            invalidateStarData()\n        }\n    /**\n     * Resource for the sun texture image.\n     */\n    var sunImageSource = ImageSource.fromResource(MR.images.sun_texture)\n    /**\n     * The size of the Sun in pixels.\n     * This can not exceed the maximum allowed pointSize of the GPU.\n     * A warning will be given if the size is too big and the allowed max size will be used.\n     */\n    var sunSize = 128f\n    /**\n     * Indicates weather to show or hide the Sun\n     */\n    var isShowSun = true\n    /**\n     * Display star field on a specified time point. If null, then current time will be used each frame.\n     */\n    var time : Instant? = null\n    protected val matrix = Matrix4() //The MVP matrix of this layer.\n    protected var starsPositionsVboCacheKey = nextCacheKey() //gpu cache key for the stars vbo.\n    protected var numStars = 0\n    protected var starData: StarData? = null\n    protected var minMagnitude = Float.MAX_VALUE\n    protected var maxMagnitude = Float.MIN_VALUE\n    protected var sunBufferViewHashCode = 0\n    /**\n     * A flag to indicate the star data is currently being retrieved.\n     */\n    protected var loadStarted = false\n    protected val minScale = 10e6\n    protected var sunPositionsCacheKey = nextCacheKey()\n    protected val sunBufferView = FloatArray(4)\n    protected var MAX_GL_POINT_SIZE = 0f\n\n    protected fun nextCacheKey() = Any()\n\n    protected open fun invalidateStarData() {\n        starData = null\n        starsPositionsVboCacheKey = nextCacheKey()\n    }\n\n    override fun doRender(rc: RenderContext) {\n        if (rc.globe!!.is2D) return // Star Field layer is not applicable for 2D globe\n\n        loadStarData(rc)\n\n        val sunTexture = rc.getTexture(sunImageSource, null) ?: return // Sun texture is not loaded yet\n        val starData = starData ?: return // Star data is not loaded yet\n        val starsPositionsBuffer = rc.getBufferObject(starsPositionsVboCacheKey) {\n            FloatBufferObject(GL_ARRAY_BUFFER, createStarsGeometry(starData, rc))\n        }\n        val time = time ?: Clock.System.now()\n        // Number of days since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        val julianDate = SunPosition.computeJulianDate(time)\n        val sunCelestialLocation = SunPosition.getAsCelestialLocation(time)\n\n        //.x = declination\n        //.y = right ascension\n        //.z = point size\n        //.w = magnitude\n        sunBufferView[0] = sunCelestialLocation.declination.inDegrees.toFloat()\n        sunBufferView[1] = sunCelestialLocation.rightAscension.inDegrees.toFloat()\n        sunBufferView[2] = sunSize.coerceAtMost(MAX_GL_POINT_SIZE)\n        sunBufferView[3] = 1f\n\n        val hashCode = sunBufferView.contentHashCode()\n        if (sunBufferViewHashCode != hashCode) {\n            sunBufferViewHashCode = hashCode\n            sunPositionsCacheKey = nextCacheKey()\n        }\n        val sunPositionsBuffer = rc.getBufferObject(sunPositionsCacheKey) {\n            FloatBufferObject(GL_ARRAY_BUFFER, sunBufferView)\n        }\n\n        val scale = (rc.camera!!.position.altitude * 1.5).coerceAtLeast(minScale)\n        matrix.copy(rc.modelviewProjection)\n        matrix.multiplyByScale(scale, scale, scale)\n\n        val program = rc.getShaderProgram { StarFieldProgram() }\n        rc.offerDrawable(DrawableLambda { dc ->\n            program.useProgram(dc)\n            dc.gl.depthMask(false)\n            try {\n                program.loadModelviewProjection(matrix)\n                // This subtraction does not work properly on the GPU due to precision loss. It must be done on the CPU.\n                program.loadNumDays((julianDate - 2451545.0).toFloat())\n                renderStars(dc, program, starsPositionsBuffer)\n                if (isShowSun) renderSun(dc, program, sunPositionsBuffer, sunTexture)\n            } finally {\n                dc.gl.depthMask(true)\n            }\n        }, DrawableGroup.BACKGROUND, 0.0)\n    }\n\n    protected open fun loadStarData(rc: RenderContext) {\n        if (starData == null && !loadStarted) {\n            loadStarted = true\n            rc.renderResourceCache?.retrieveTextFile(starDataSource) {\n                starData = Json.decodeFromString(it)\n                loadStarted = false\n                WorldWind.requestRedraw()\n            }\n        }\n    }\n\n    protected open fun renderStars(dc: DrawContext, program: StarFieldProgram, buffer: FloatBufferObject) {\n        buffer.bindBuffer(dc)\n        dc.gl.vertexAttribPointer(0, 4, GL_FLOAT, false, 0, 0)\n        program.loadMagnitudeRange(minMagnitude, maxMagnitude)\n        program.loadTextureEnabled(false)\n        dc.gl.drawArrays(GL_POINTS, 0, numStars)\n    }\n\n    protected open fun renderSun(\n        dc: DrawContext, program: StarFieldProgram, sunBuffer: FloatBufferObject, sunTexture: Texture\n    ) {\n        if (MAX_GL_POINT_SIZE == 0f) MAX_GL_POINT_SIZE = dc.gl.getParameterfv(GL_ALIASED_POINT_SIZE_RANGE)[1]\n\n        if (sunSize > MAX_GL_POINT_SIZE)\n            log(WARN, \"StarFieldLayer - sunSize is to big, max size allowed is: $MAX_GL_POINT_SIZE\")\n\n        sunBuffer.bindBuffer(dc)\n        dc.gl.vertexAttribPointer(0, 4, GL_FLOAT, false, 0, 0)\n        program.loadTextureEnabled(true)\n        sunTexture.bindTexture(dc)\n        dc.gl.drawArrays(GL_POINTS, 0, 1)\n    }\n\n    protected open fun createStarsGeometry(starData: StarData, rc: RenderContext): FloatArray {\n        val indexes = parseStarsMetadata(starData.metadata)\n        require(indexes[0] != -1) {\n            logMessage(ERROR, \"StarFieldLayer\", \"createStarsGeometry\", \"Missing ra field in star data.\")\n        }\n        require(indexes[1] != -1) {\n            logMessage(ERROR, \"StarFieldLayer\", \"createStarsGeometry\", \"Missing dec field in star data.\")\n        }\n        require(indexes[2] != -1) {\n            logMessage(ERROR, \"StarFieldLayer\", \"createStarsGeometry\", \"Missing vmag field in star data.\")\n        }\n\n        numStars = starData.data.size\n        minMagnitude = Float.MAX_VALUE\n        maxMagnitude = Float.MIN_VALUE\n\n        val positions = FloatArray(numStars * 4)\n        var positionIndex = 0\n        for (starInfo in starData.data) {\n            val rightAscension = starInfo[indexes[0]] //for longitude\n            val declination = starInfo[indexes[1]] //for latitude\n            val magnitude = starInfo[indexes[2]]\n            val pointSize = if (magnitude < 2) 2f else 1f\n\n            positions[positionIndex++] = declination\n            positions[positionIndex++] = rightAscension\n            positions[positionIndex++] = pointSize * rc.densityFactor\n            positions[positionIndex++] = magnitude\n\n            minMagnitude = minMagnitude.coerceAtMost(magnitude)\n            maxMagnitude = maxMagnitude.coerceAtLeast(magnitude)\n        }\n\n        return positions\n    }\n\n    protected open fun parseStarsMetadata(metadata: List<StarMetadata>): Array<Int> {\n        var raIndex = -1\n        var decIndex = -1\n        var magIndex = -1\n        for (i in metadata.indices) {\n            val starMetaInfo = metadata[i]\n            if (starMetaInfo.name == \"ra\") raIndex = i\n            if (starMetaInfo.name == \"dec\") decIndex = i\n            if (starMetaInfo.name == \"vmag\") magIndex = i\n        }\n        return arrayOf(raIndex, decIndex, magIndex)\n    }\n\n    @Serializable\n    data class  StarMetadata(\n        val name: String, val description: String, val datatype: String,\n        val arraysize: Int, val unit: String, val ucd: String\n    )\n\n    @Serializable\n    data class StarData(val metadata: List<StarMetadata>, val data: List<List<Float>>)\n}\n","package earth.worldwind.layer.starfield\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.program.AbstractShaderProgram\nimport earth.worldwind.util.kgl.GL_TEXTURE0\nimport earth.worldwind.util.kgl.KglUniformLocation\n\n/**\n * StarFieldProgram is a GLSL program that draws points representing stars.\n */\nopen class StarFieldProgram : AbstractShaderProgram() {\n    override var programSources = arrayOf(\n        \"\"\"\n            //.x = declination\n            //.y = right ascension\n            //.z = point size\n            //.w = magnitude\n            attribute vec4 vertexPoint;\n\n            uniform mat4 mvpMatrix;\n            /* number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0) */\n            uniform float numDays;\n            uniform vec2 magnitudeRange;\n\n            varying float magnitudeWeight;\n\n            /* normalizes an angle between 0.0 and 359.0 */\n            float normalizeAngle(float angle) {\n               float angleDivisions = angle / 360.0;\n               return 360.0 * (angleDivisions - floor(angleDivisions));\n            }\n\n            /* transforms declination and right ascension in cartesian coordinates */\n            vec3 computePosition(float dec, float ra) {\n               float GMST = normalizeAngle(280.46061837 + 360.98564736629 * numDays);\n               float GHA = normalizeAngle(GMST - ra);\n               float lon = -GHA + 360.0 * step(180.0, GHA);\n               float latRad = radians(dec);\n               float lonRad = radians(lon);\n               float radCosLat = cos(latRad);\n               return vec3(radCosLat * sin(lonRad), sin(latRad), radCosLat * cos(lonRad));\n            }\n\n            /* normalizes a value between 0.0 and 1.0 */\n            float normalizeScalar(float value, float minValue, float maxValue){\n               return (value - minValue) / (maxValue - minValue);\n            }\n\n            void main() {\n               vec3 vertexPosition = computePosition(vertexPoint.x, vertexPoint.y);\n               gl_Position = mvpMatrix * vec4(vertexPosition.xyz, 1.0);\n               gl_Position.z = gl_Position.w - 0.00001;\n               gl_PointSize = vertexPoint.z;\n               magnitudeWeight = normalizeScalar(vertexPoint.w, magnitudeRange.x, magnitudeRange.y);\n            }\n        \"\"\".trimIndent(),\n        \"\"\"\n            precision mediump float;\n\n            uniform sampler2D textureSampler;\n            uniform int textureEnabled;\n\n            varying float magnitudeWeight;\n\n            const vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n            const vec4 grey = vec4(0.5, 0.5, 0.5, 1.0);\n\n            void main() {\n               if (textureEnabled == 1) {\n                   gl_FragColor = texture2D(textureSampler, gl_PointCoord);\n               }\n               else {\n            /* paint the starts in shades of grey, where the brightest star is white and the dimmest star is grey */\n                   gl_FragColor = mix(white, grey, magnitudeWeight);\n               }\n            }\n        \"\"\".trimIndent()\n    )\n    override val attribBindings = arrayOf(\"vertexPoint\")\n    protected var mvpMatrixId = KglUniformLocation.NONE\n    protected var numDaysId = KglUniformLocation.NONE\n    protected var magnitudeRangeId = KglUniformLocation.NONE\n    protected var textureUnitId = KglUniformLocation.NONE\n    protected var textureEnabledId = KglUniformLocation.NONE\n    private val array = FloatArray(16)\n\n    override fun initProgram(dc: DrawContext) {\n        super.initProgram(dc)\n        mvpMatrixId = gl.getUniformLocation(program, \"mvpMatrix\");\n        numDaysId = gl.getUniformLocation(program, \"numDays\");\n        magnitudeRangeId = gl.getUniformLocation(program, \"magnitudeRange\");\n        textureUnitId = gl.getUniformLocation(program, \"textureSampler\");\n        textureEnabledId = gl.getUniformLocation(program, \"textureEnabled\");\n    }\n\n    /**\n     * Loads the specified matrix as the value of this program's 'mvpMatrix' uniform variable.\n     *\n     * @param matrix The matrix to load.\n     */\n    fun loadModelviewProjection(matrix: Matrix4) {\n        // Don't bother testing whether mvpMatrix has changed, the common case is to load a different matrix.\n        matrix.transposeToArray(array, 0)\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, array, 0)\n    }\n\n    /**\n     * Loads the specified number as the value of this program's 'numDays' uniform variable.\n     *\n     * @param numDays The number of days (positive or negative) since Greenwich noon, Terrestrial Time,\n     * on 1 January 2000 (J2000.0)\n     */\n    fun loadNumDays(numDays: Float) = gl.uniform1f(numDaysId, numDays)\n\n    /**\n     * Loads the specified numbers as the value of this program's 'magnitudeRange' uniform variable.\n     *\n     * @param minMag Minimal magnitude\n     * @param maxMag Maximal magnitude\n     */\n    fun loadMagnitudeRange(minMag: Float, maxMag: Float) = gl.uniform2f(magnitudeRangeId, minMag, maxMag)\n\n    /**\n     * Loads the specified number as the value of this program's 'textureSampler' uniform variable.\n     *\n     * @param unit The texture unit.\n     */\n    fun loadTextureUnit(unit: Int) = gl.uniform1i(textureUnitId, unit - GL_TEXTURE0);\n\n    /**\n     * Loads the specified boolean as the value of this program's 'textureEnabledLocation' uniform variable.\n     *\n     * @param value Texture enabled\n     */\n    fun loadTextureEnabled(value: Boolean) = gl.uniform1i(textureEnabledId, if (value) 1 else 0)\n}","package earth.worldwind.ogc\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.geom.TileMatrix\nimport earth.worldwind.geom.TileMatrixSet\nimport earth.worldwind.globe.elevation.ElevationSource\nimport earth.worldwind.globe.elevation.ElevationTileFactory\nimport earth.worldwind.globe.elevation.coverage.TiledElevationCoverage\n\n/**\n * Generates elevations from OGC Web Map Service (WMS) version 1.3.0.\n *\n * @param serviceAddress OGC Web Map Service (WMS) server address\n * @param coverage comma-separated coverage names\n * @param imageFormat required image format\n * @param sector bounding sector\n * @param resolution the target resolution in angular value of latitude per texel\n */\nopen class WmsElevationCoverage(\n    serviceAddress: String, coverage: String, imageFormat: String, sector: Sector, resolution: Angle\n): TiledElevationCoverage(\n    buildTileMatrixSet(sector, resolution), buildTileFactory(serviceAddress, coverage, imageFormat)\n) {\n    companion object {\n        /**\n         * 4x2 top level matrix equivalent to 90 degree top level tiles\n         *\n         * @param sector bounding sector\n         * @param resolution the target resolution in angular value of latitude per texel\n         */\n        private fun buildTileMatrixSet(sector: Sector, resolution: Angle) = TileMatrixSet.fromTilePyramid(\n            sector, 4, 2, 256, 256, resolution\n        )\n\n        private fun buildTileFactory(serviceAddress: String, coverage: String, imageFormat: String): ElevationTileFactory {\n            val layerConfig = WmsLayerConfig(serviceAddress, coverage).apply { this.imageFormat = imageFormat }\n            val wmsTileFactory = WmsTileFactory(layerConfig)\n            return object : ElevationTileFactory {\n                override fun createElevationSource(tileMatrix: TileMatrix, row: Int, column: Int): ElevationSource {\n                    val tileSector = tileMatrix.tileSector(row, column)\n                    val urlString = wmsTileFactory.urlForTile(tileSector, tileMatrix.tileWidth, tileMatrix.tileHeight)\n                    return ElevationSource.fromUrlString(urlString)\n                }\n            }\n        }\n    }\n}","package earth.worldwind.ogc\n\n/**\n * Configuration values for a WMS layer.\n */\nclass WmsLayerConfig(\n    /**\n     * The WMS service address used to build Get Map URLs.\n     */\n    var serviceAddress: String,\n    /**\n     * The comma-separated list of WMS layer names.\n     */\n    var layerNames: String\n) {\n    /**\n     * The WMS protocol version. Defaults to 1.3.0.\n     */\n    var wmsVersion = \"1.3.0\"\n    /**\n     * The comma-separated list of WMS style names.\n     */\n    var styleNames: String? = null\n    /**\n     * The coordinate reference system to use when requesting layers. Defaults to EPSG:4326.\n     */\n    var coordinateSystem = \"EPSG:4326\"\n    /**\n     * The image content type to use in Get Map requests.\n     */\n    var imageFormat: String? = null\n    /**\n     * Indicates whether Get Map requests should include transparency.\n     */\n    var isTransparent = true\n    /**\n     * The time parameter to include in Get Map requests.\n     */\n    var timeString: String? = null\n}","package earth.worldwind.ogc\n\nimport com.eygraber.uri.Uri\nimport earth.worldwind.geom.Ellipsoid\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.layer.TiledImageLayer\nimport earth.worldwind.ogc.wms.WmsCapabilities\nimport earth.worldwind.ogc.wms.WmsLayer\nimport earth.worldwind.shape.TiledSurfaceImage\nimport earth.worldwind.util.LevelSet\nimport earth.worldwind.util.LevelSetConfig\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.Logger.makeMessage\nimport earth.worldwind.util.http.DefaultHttpClient\nimport io.ktor.client.plugins.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.utils.io.core.*\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport kotlinx.serialization.decodeFromString\nimport nl.adaptivity.xmlutil.ExperimentalXmlUtilApi\nimport nl.adaptivity.xmlutil.serialization.UnknownChildHandler\nimport nl.adaptivity.xmlutil.serialization.XML\n\nobject WmsLayerFactory {\n\n    private const val DEFAULT_WMS_NUM_LEVELS = 20\n    private val compatibleImageFormats = listOf(\"image/png\", \"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/bmp\")\n    @OptIn(ExperimentalXmlUtilApi::class)\n    private val xml = XML {\n        unknownChildHandler = UnknownChildHandler { _, _, _, _, _ -> emptyList() } // Ignore unknown properties\n    }\n\n    suspend fun createLayer(serviceAddress: String, layerNames: List<String>): TiledImageLayer {\n        require(serviceAddress.isNotEmpty()) {\n            logMessage(ERROR, \"WmsLayerFactory\", \"createLayer\", \"missingServiceAddress\")\n        }\n        require(layerNames.isNotEmpty()) {\n            logMessage(ERROR, \"WmsLayerFactory\", \"createLayer\", \"missingLayerNames\")\n        }\n        val wmsCapabilities = retrieveWmsCapabilities(serviceAddress)\n        val wmsLayers = layerNames.mapNotNull { layerName -> wmsCapabilities.getNamedLayer(layerName) }\n        require(wmsLayers.isNotEmpty()) {\n            makeMessage(\"WmsLayerFactory\", \"createLayer\", \"Provided layers did not match available layers\")\n        }\n        // Collect WMS Layer Titles to set the Layer Display Name\n        return object : TiledImageLayer(wmsLayers.joinToString(\",\") { lc -> lc.title }) {\n            init { tiledSurfaceImage = createWmsSurfaceImage(wmsLayers) }\n        }\n    }\n\n    private suspend fun retrieveWmsCapabilities(serviceAddress: String) = DefaultHttpClient().use { httpClient ->\n        val serviceUri = Uri.parse(serviceAddress).buildUpon()\n            .appendQueryParameter(\"VERSION\", \"1.3.0\")\n            .appendQueryParameter(\"SERVICE\", \"WMS\")\n            .appendQueryParameter(\"REQUEST\", \"GetCapabilities\")\n            .build()\n        httpClient.get(serviceUri.toString()) { expectSuccess = true }.bodyAsText()\n    }.let { xmlText ->\n        withContext(Dispatchers.Default) { xml.decodeFromString<WmsCapabilities>(xmlText) }\n    }\n\n    private fun createWmsSurfaceImage(wmsLayers: List<WmsLayer>): TiledSurfaceImage {\n        // Check if the server supports multiple layer request\n        val layerLimit = wmsLayers[0].capability?.capabilities?.service?.layerLimit\n        require (layerLimit != null && layerLimit >= wmsLayers.size) {\n            makeMessage(\n                \"WmsLayerFactory\", \"createFromWmsAsync\",\n                \"The number of layers specified exceeds the services limit\"\n            )\n        }\n        val wmsLayerConfig = getLayerConfigFromWmsCapabilities(wmsLayers)\n        val levelSetConfig = getLevelSetConfigFromWmsCapabilities(wmsLayers)\n        return TiledSurfaceImage(WmsTileFactory(wmsLayerConfig), LevelSet(levelSetConfig))\n    }\n\n    internal fun getLayerConfigFromWmsCapabilities(wmsLayers: List<WmsLayer>): WmsLayerConfig {\n        // Construct the WmsTiledImage renderable from the WMS Capabilities properties\n        val wmsCapabilities = wmsLayers[0].capability?.capabilities\n        val serviceAddress = wmsCapabilities?.capability?.request?.getMap?.getUrl ?: error(\n            makeMessage(\"WmsLayerFactory\", \"getLayerConfigFromWmsCapabilities\", \"Unable to resolve GetMap URL\")\n        )\n        var matchingCoordinateSystems: MutableSet<String>? = null\n        for (wmsLayer in wmsLayers) {\n            val wmsLayerCoordinateSystems = wmsLayer.referenceSystems\n            if (matchingCoordinateSystems == null) matchingCoordinateSystems = wmsLayerCoordinateSystems.toMutableSet()\n            else matchingCoordinateSystems.retainAll(wmsLayerCoordinateSystems.toSet())\n        }\n        val wmsLayerConfig = WmsLayerConfig(serviceAddress, wmsLayers.joinToString(\",\") { l -> l.name ?: \"\" })\n        when (val wmsVersion = wmsCapabilities.version) {\n            \"1.3.0\" -> wmsLayerConfig.wmsVersion = wmsVersion\n            else -> error(\n                makeMessage(\"WmsLayerFactory\", \"getLayerConfigFromWmsCapabilities\", \"Version not compatible\")\n            )\n        }\n        if (matchingCoordinateSystems?.contains(\"EPSG:4326\") == true) {\n            wmsLayerConfig.coordinateSystem = \"EPSG:4326\"\n        } else if (matchingCoordinateSystems?.contains(\"CRS:84\") == true) {\n            wmsLayerConfig.coordinateSystem = \"CRS:84\"\n        } else error(\n            makeMessage(\"WmsLayerFactory\", \"getLayerConfigFromWmsCapabilities\", \"Coordinate systems not compatible\")\n        )\n\n        // Negotiate Image Formats\n        val imageFormats = wmsCapabilities.capability.request.getMap.formats\n        wmsLayerConfig.imageFormat = compatibleImageFormats.firstOrNull { format -> imageFormats.contains(format) } ?: error(\n            makeMessage(\"WmsLayerFactory\", \"getLayerConfigFromWmsCapabilities\", \"Image Formats Not Compatible\")\n        )\n\n        // Setup transparency. If at least one layer is opaque then transparency is disabled\n        wmsLayerConfig.isTransparent = !wmsLayers.any { layer -> layer.isOpaque }\n\n        return wmsLayerConfig\n    }\n\n    internal fun getLevelSetConfigFromWmsCapabilities(layerCapabilities: List<WmsLayer>): LevelSetConfig {\n        val levelSetConfig = LevelSetConfig()\n        var minScaleDenominator = Double.MAX_VALUE\n        val sector = Sector()\n        for (layerCapability in layerCapabilities) {\n            layerCapability.minScaleDenominator?.let { minScaleDenominator = minScaleDenominator.coerceAtMost(it) }\n            layerCapability.geographicBoundingBox?.let { sector.union(it) }\n        }\n        if (!sector.isEmpty) levelSetConfig.sector.copy(sector) else error(\n            makeMessage(\n                \"WmsLayerFactory\", \"getLevelSetConfigFromWmsCapabilities\", \"Geographic Bounding Box Not Defined\"\n            )\n        )\n        levelSetConfig.numLevels = when {\n            minScaleDenominator != Double.MAX_VALUE -> {\n                // WMS 1.3.0 scale configuration. Based on the WMS 1.3.0 spec page 28. The hard coded value 0.00028 is\n                // detailed in the spec as the common pixel size of 0.28mm x 0.28mm. Configures the maximum level not to\n                // exceed the specified min scale denominator.\n                val minMetersPerPixel = minScaleDenominator * 0.00028\n                val minRadiansPerPixel = minMetersPerPixel / Ellipsoid.WGS84.semiMajorAxis\n                levelSetConfig.numLevelsForMinResolution(minRadiansPerPixel)\n            }\n            else -> DEFAULT_WMS_NUM_LEVELS // Default scale configuration when no minimum scale denominator or scale hint is provided.\n        }\n        return levelSetConfig\n    }\n\n}","package earth.worldwind.util\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Location\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.math.ln\nimport kotlin.math.roundToInt\n\n/**\n * Multi-resolution, hierarchical collection of tiles organized into levels of increasing resolution. Applications\n * typically do not interact with this class.\n */\nopen class LevelSet {\n    /**\n     * The sector spanned by this level set.\n     */\n    val sector: Sector\n    /**\n     * Tile origin for this level set\n     */\n    val tileOrigin: Location\n    /**\n     * The geographic width and height of tiles in the first level (the lowest resolution) of this level set.\n     */\n    val firstLevelDelta: Location\n    /**\n     * The width in pixels of images associated with tiles in this level set, or the number of sample points in the\n     * longitudinal direction of elevation tiles associated with this level set.\n     */\n    val tileWidth: Int\n    /**\n     * The height in pixels of images associated with tiles in this level set, or the number of sample points in the\n     * latitudinal direction of elevation tiles associated with this level set.\n     */\n    val tileHeight: Int\n    /**\n     * The hierarchical levels, sorted from lowest to highest resolution.\n     */\n    protected val levels: Array<Level>\n    /**\n     * Returns the number of levels in this level set.\n     */\n    val numLevels get() = levels.size\n    /**\n     * Returns the first level (the lowest resolution) of this level set.\n     */\n    val firstLevel get() = if (levels.isNotEmpty()) levels[0] else null\n    /**\n     * Returns the last level (the highest resolution) of this level set.\n     */\n    val lastLevel get() = if (levels.isNotEmpty()) levels[levels.size - 1] else null\n\n    /**\n     * Constructs an empty level set with no levels. The methods `level`, `levelForResolution`,\n     * `firstLevel` and `lastLevel` always return null.\n     */\n    constructor() {\n        sector = Sector()\n        tileOrigin = Location()\n        firstLevelDelta = Location()\n        tileWidth = 0\n        tileHeight = 0\n        levels = emptyArray()\n    }\n\n    /**\n     * Constructs a level set with specified parameters.\n     *\n     * @param sector          the sector spanned by this level set\n     * @param tileOrigin      the origin for this level set\n     * @param firstLevelDelta the geographic width and height of tiles in the first level (the lowest resolution)\n     * of the level set\n     * @param numLevels       the number of levels in the level set\n     * @param tileWidth       the height in pixels of images associated with tiles in this level set, or the number of\n     * sample points in the longitudinal direction of elevation tiles associate with this leve set\n     * @param tileHeight      the height in pixels of images associated with tiles in this level set, or the number of\n     * sample points in the latitudinal direction of elevation tiles associate with this level set\n     *\n     * @throws IllegalArgumentException If any dimension is zero\n     */\n    constructor(\n        sector: Sector, tileOrigin: Location, firstLevelDelta: Location, numLevels: Int, tileWidth: Int, tileHeight: Int\n    ) {\n        require(firstLevelDelta.latitude > Angle.ZERO && firstLevelDelta.longitude > Angle.ZERO) {\n            logMessage(ERROR, \"LevelSet\", \"constructor\", \"invalidTileDelta\")\n        }\n        require(numLevels >= 0) {\n            logMessage(ERROR, \"LevelSet\", \"constructor\", \"invalidNumLevels\")\n        }\n        require(tileWidth >= 1 && tileHeight >= 1) {\n            logMessage(ERROR, \"LevelSet\", \"constructor\", \"invalidWidthOrHeight\")\n        }\n        this.sector = sector\n        this.tileOrigin = tileOrigin\n        this.firstLevelDelta = firstLevelDelta\n        this.tileWidth = tileWidth\n        this.tileHeight = tileHeight\n        this.levels = Array(numLevels) {\n            val divisor = (1 shl it).toDouble()\n            Level(this, it, Location(firstLevelDelta.latitude / divisor, firstLevelDelta.longitude / divisor))\n        }\n    }\n\n    /**\n     * Constructs a level set with parameters from a specified configuration. The configuration's sector must be\n     * non-null, its first level delta must be positive, its number of levels must be 1 or more, and its tile width and\n     * tile height must be 1 or greater.\n     *\n     * @param config the configuration for this level set\n     */\n    constructor(config: LevelSetConfig): this(\n        config.sector,\n        config.tileOrigin,\n        config.firstLevelDelta,\n        config.numLevels,\n        config.tileWidth,\n        config.tileHeight\n    )\n\n    /**\n     * Returns the [Level] for a specified level number.\n     *\n     * @param levelNumber the number of the desired level\n     *\n     * @return the requested level, or null if the level does not exist\n     */\n    fun level(levelNumber: Int) = if (levelNumber in levels.indices) levels[levelNumber] else null\n\n    /**\n     * Returns the level that most closely approximates the specified resolution.\n     *\n     * @param resolution the desired resolution in angular value of latitude per pixel.\n     *\n     * @return the level for the specified resolution, or null if this level set is empty\n     *\n     * @throws IllegalArgumentException If the resolution is not positive\n     * @throws IllegalStateException If this level set is empty\n     */\n    fun levelForResolution(resolution: Angle): Level {\n        require(resolution > Angle.ZERO) {\n            logMessage(ERROR, \"LevelSetConfig\", \"levelForResolution\", \"invalidResolution\")\n        }\n        if (levels.isEmpty()) error(\"This level set is empty\")\n        val firstLevelDegreesPerPixel = firstLevelDelta.latitude.inDegrees / tileHeight\n        val level = ln(firstLevelDegreesPerPixel / resolution.inDegrees) / ln(2.0) // fractional level address\n        val levelNumber = level.roundToInt() // nearest neighbor level\n        return when {\n            levelNumber < 0 -> levels[0] // unable to match the resolution; return the first level\n            levelNumber < levels.size -> levels[levelNumber] // nearest neighbor level is in this level set\n            else -> levels[levels.size - 1] // unable to match the resolution; return the last level\n        }\n    }\n}","package earth.worldwind.ogc\n\nimport com.eygraber.uri.Uri\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.image.ImageSource.Companion.fromUrlString\nimport earth.worldwind.render.image.ImageTile\nimport earth.worldwind.util.Level\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.ResourcePostprocessor\nimport earth.worldwind.util.TileFactory\n\n/**\n * Factory for constructing URLs associated with WMS Get Map requests.\n */\nopen class WmsTileFactory(\n    /**\n     * The WMS service address used to build Get Map URLs.\n     */\n    var serviceAddress: String,\n\n    /**\n     * The WMS protocol version.\n     */\n    var wmsVersion: String,\n\n    /**\n     * The comma-separated list of WMS layer names.\n     */\n    var layerNames: String,\n    /**\n     * The comma-separated list of WMS style names. May be null in which case the default style is assumed.\n     */\n    var styleNames: String?\n): TileFactory {\n    /**\n     * The coordinate reference system to use in Get Map URLs. Defaults to EPSG:4326.\n     */\n    var coordinateSystem = \"EPSG:4326\"\n    /**\n     * The image content type to use in Get Map URLs. May be null in which case a default format is assumed.\n     */\n    var imageFormat: String? = null\n    /**\n     * Indicates whether Get Map URLs should include transparency.\n     */\n    var isTransparent = true\n    /**\n     * The time parameter to include in Get Map URLs. May be null in which case no time parameter is included.\n     */\n    var timeString: String? = null\n\n    /**\n     * Constructs a level set with a specified configuration. The configuration's service address, WMS protocol version,\n     * layer names and coordinate reference system must be non-null. The style names may be null, in which case the\n     * default style is assumed. The time string may be null, in which case no time parameter is included.\n     *\n     * @param config the configuration for this URL builder\n     */\n    constructor(config: WmsLayerConfig): this(config.serviceAddress, config.wmsVersion, config.layerNames, config.styleNames) {\n        coordinateSystem = config.coordinateSystem\n        imageFormat = config.imageFormat\n        isTransparent = config.isTransparent\n        timeString = config.timeString\n    }\n\n    override fun createTile(sector: Sector, level: Level, row: Int, column: Int) = ImageTile(sector, level, row, column).apply {\n        urlForTile(sector, level.tileWidth, level.tileHeight).let { urlString ->\n            // Assign resource post-processor to transform received resource and save it in cache if necessary\n            imageSource = fromUrlString(urlString).also { it.postprocessor = this as ResourcePostprocessor<*> }\n        }\n    }\n\n    fun urlForTile(sector: Sector, width: Int, height: Int) = Uri.parse(serviceAddress).buildUpon().apply {\n        require(width >= 1 && height >= 1) {\n            logMessage(ERROR, \"WmsTileFactory\", \"urlForTile\", \"invalidWidthOrHeight\")\n        }\n        appendQueryParameter(\"VERSION\", wmsVersion)\n        appendQueryParameter(\"SERVICE\", \"WMS\")\n        appendQueryParameter(\"REQUEST\", \"GetMap\")\n        appendQueryParameter(\"LAYERS\", layerNames)\n        appendQueryParameter(\"STYLES\", styleNames ?: \"\")\n        appendQueryParameter(\"WIDTH\", width.toString())\n        appendQueryParameter(\"HEIGHT\", height.toString())\n        appendQueryParameter(\"FORMAT\", imageFormat ?: \"image/png\")\n        appendQueryParameter(\"TRANSPARENT\", if (isTransparent) \"TRUE\" else \"FALSE\")\n        if (wmsVersion == \"1.3.0\") {\n            appendQueryParameter(\"CRS\", coordinateSystem)\n            appendQueryParameter(\"BBOX\", sector.run {\n                if (coordinateSystem == \"CRS:84\") {\n                    \"${minLongitude.inDegrees},${minLatitude.inDegrees},${maxLongitude.inDegrees},${maxLatitude.inDegrees}\"\n                } else {\n                    \"${minLatitude.inDegrees},${minLongitude.inDegrees},${maxLatitude.inDegrees},${maxLongitude.inDegrees}\"\n                }\n            })\n        } else {\n            appendQueryParameter(\"SRS\", coordinateSystem)\n            appendQueryParameter(\"BBOX\", sector.run {\n                \"${minLongitude.inDegrees},${minLatitude.inDegrees},${maxLongitude.inDegrees},${maxLatitude.inDegrees}\"\n            })\n        }\n        timeString?.let{ appendQueryParameter(\"TIME\", it) }\n    }.build().toString()\n}","package earth.worldwind.ogc\n\nimport com.eygraber.uri.Uri\nimport earth.worldwind.geom.Angle.Companion.NEG180\nimport earth.worldwind.geom.Angle.Companion.NEG90\nimport earth.worldwind.geom.Angle.Companion.POS90\nimport earth.worldwind.geom.Location\nimport earth.worldwind.layer.TiledImageLayer\nimport earth.worldwind.ogc.wmts.WmtsCapabilities\nimport earth.worldwind.ogc.wmts.WmtsLayer\nimport earth.worldwind.shape.TiledSurfaceImage\nimport earth.worldwind.util.LevelSet\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.WARN\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.Logger.makeMessage\nimport earth.worldwind.util.TileFactory\nimport earth.worldwind.util.http.DefaultHttpClient\nimport io.ktor.client.plugins.*\nimport io.ktor.client.request.*\nimport io.ktor.client.statement.*\nimport io.ktor.utils.io.core.*\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport kotlinx.serialization.decodeFromString\nimport nl.adaptivity.xmlutil.ExperimentalXmlUtilApi\nimport nl.adaptivity.xmlutil.serialization.UnknownChildHandler\nimport nl.adaptivity.xmlutil.serialization.XML\nimport kotlin.math.abs\n\nobject WmtsLayerFactory {\n\n    private val compatibleImageFormats = listOf(\"image/png\", \"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/bmp\")\n    private val compatibleCoordinateSystems = listOf(\n        \"urn:ogc:def:crs:OGC:1.3:CRS84\",\n        \"urn:ogc:def:crs:EPSG::4326\",\n        \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n    )\n    @OptIn(ExperimentalXmlUtilApi::class)\n    private val xml = XML {\n        unknownChildHandler = UnknownChildHandler { _, _, _, _, _ -> emptyList() } // Ignore unknown properties\n    }\n\n    suspend fun createLayer(serviceAddress: String, layerIdentifier: String): TiledImageLayer {\n        require(serviceAddress.isNotEmpty()) {\n            logMessage(ERROR, \"WmtsLayerFactory\", \"createLayer\", \"missingServiceAddress\")\n        }\n        require(layerIdentifier.isNotEmpty()) {\n            logMessage(ERROR, \"WmtsLayerFactory\", \"createLayer\", \"missingLayerNames\")\n        }\n        val wmtsLayer = retrieveWmtsCapabilities(serviceAddress).getLayer(layerIdentifier)\n        requireNotNull(wmtsLayer) {\n            makeMessage(\"WmtsLayerFactory\", \"createLayer\", \"The layer identifier specified was not found\")\n        }\n        return object : TiledImageLayer(wmtsLayer.title ?: layerIdentifier) {\n            init { tiledSurfaceImage = createWmtsSurfaceImage(wmtsLayer) }\n        }\n    }\n\n    private suspend fun retrieveWmtsCapabilities(serviceAddress: String) = DefaultHttpClient().use { httpClient ->\n        val serviceUri = Uri.parse(serviceAddress).buildUpon()\n            .appendQueryParameter(\"VERSION\", \"1.0.0\")\n            .appendQueryParameter(\"SERVICE\", \"WMTS\")\n            .appendQueryParameter(\"REQUEST\", \"GetCapabilities\")\n            .build()\n        httpClient.get(serviceUri.toString()) { expectSuccess = true }.bodyAsText()\n    }.let { xmlText ->\n        withContext(Dispatchers.Default) { xml.decodeFromString<WmtsCapabilities>(xmlText) }\n    }\n\n    private fun createWmtsSurfaceImage(wmtsLayer: WmtsLayer): TiledSurfaceImage {\n        // Determine if there is a TileMatrixSet which matches our Coordinate System compatibility and tiling scheme\n        val compatibleTileMatrixSets = determineCoordSysCompatibleTileMatrixSets(wmtsLayer)\n        require(compatibleTileMatrixSets.isNotEmpty()) {\n            makeMessage(\"WmtsLayerFactory\", \"createWmtsLayer\", \"Coordinate Systems Not Compatible\")\n        }\n\n        // Search the list of coordinate system compatible tile matrix sets for compatible tiling schemes\n        val compatibleTileMatrixSet = determineCompatibleTileMatrixSet(wmtsLayer.capabilities, compatibleTileMatrixSets) ?: error(\n            makeMessage(\"WmtsLayerFactory\", \"createWmtsLayer\", \"Tile Schemes Not Compatible\")\n        )\n        val tileFactory = createWmtsTileFactory(wmtsLayer, compatibleTileMatrixSet)\n        val levelSet = createWmtsLevelSet(wmtsLayer, compatibleTileMatrixSet)\n        return TiledSurfaceImage(tileFactory, levelSet)\n    }\n\n    private fun createWmtsTileFactory(wmtsLayer: WmtsLayer, compatibleTileMatrixSet: CompatibleTileMatrixSet): TileFactory {\n        // First choice is a ResourceURL\n        for (resourceUrl in wmtsLayer.resourceUrls) if (compatibleImageFormats.contains(resourceUrl.format)) {\n            val template = resourceUrl.template\n                .replace(\"{style}\", wmtsLayer.styles[0].identifier)\n                .replace(\"{TileMatrixSet}\", compatibleTileMatrixSet.tileMatrixSetId)\n            return WmtsTileFactory(template, compatibleTileMatrixSet.tileMatrices)\n        }\n\n        // Second choice is if the server supports KVP\n        val baseUrl = determineKvpUrl(wmtsLayer)\n        return if (baseUrl != null) {\n            val imageFormat = compatibleImageFormats.firstOrNull { format -> wmtsLayer.formats.contains(format) } ?: error(\n                makeMessage(\"WmtsLayerFactory\", \"getWmtsTileFactory\", \"Image Formats Not Compatible\")\n            )\n            val styleIdentifier = wmtsLayer.styles[0].identifier\n            val template = buildWmtsKvpTemplate(\n                baseUrl, wmtsLayer.identifier, imageFormat, styleIdentifier, compatibleTileMatrixSet.tileMatrixSetId\n            )\n            WmtsTileFactory(template, compatibleTileMatrixSet.tileMatrices)\n        } else error(makeMessage(\"WmtsLayerFactory\", \"getWmtsTileFactory\", \"No KVP Get Support\"))\n    }\n\n    private fun createWmtsLevelSet(wmtsLayer: WmtsLayer, compatibleTileMatrixSet: CompatibleTileMatrixSet): LevelSet {\n        val boundingBox = wmtsLayer.wgs84BoundingBox?.sector ?: error(\n            makeMessage(\n                \"WmtsLayerFactory\", \"createWmtsLevelSet\",\n                \"WGS84BoundingBox not defined for layer: \" + wmtsLayer.identifier\n            )\n        )\n        val tileMatrixSet = wmtsLayer.capabilities.getTileMatrixSet(compatibleTileMatrixSet.tileMatrixSetId) ?: error(\n            makeMessage(\n                \"WmtsLayerFactory\", \"createWmtsLevelSet\",\n                \"Compatible TileMatrixSet not found for: $compatibleTileMatrixSet\"\n            )\n        )\n        val imageSize = tileMatrixSet.tileMatrices[0].tileHeight\n        return LevelSet(\n            boundingBox, Location(NEG90, NEG180), Location(POS90, POS90),\n            compatibleTileMatrixSet.tileMatrices.size, imageSize, imageSize\n        )\n    }\n\n    private fun buildWmtsKvpTemplate(\n        kvpServiceAddress: String, layer: String, format: String, styleIdentifier: String, tileMatrixSet: String\n    ) = Uri.parse(kvpServiceAddress).buildUpon()\n        .appendQueryParameter(\"VERSION\", \"1.0.0\")\n        .appendQueryParameter(\"SERVICE\", \"WMTS\")\n        .appendQueryParameter(\"REQUEST\", \"GetTile\")\n        .appendQueryParameter(\"LAYER\", layer)\n        .appendQueryParameter(\"STYLE\", styleIdentifier)\n        .appendQueryParameter(\"FORMAT\", format)\n        .appendQueryParameter(\"TILEMATRIXSET\", tileMatrixSet)\n        .appendQueryParameter(\"TILEMATRIX\", WmtsTileFactory.TILEMATRIX_TEMPLATE)\n        .appendQueryParameter(\"TILEROW\", WmtsTileFactory.TILEROW_TEMPLATE)\n        .appendQueryParameter(\"TILECOL\", WmtsTileFactory.TILECOL_TEMPLATE)\n        .build().toString()\n\n    private fun determineCoordSysCompatibleTileMatrixSets(layer: WmtsLayer) = layer.layerSupportedTileMatrixSets\n        .filter { tileMatrixSet -> compatibleCoordinateSystems.contains(tileMatrixSet.supportedCrs) }\n        .map { tileMatrixSet -> tileMatrixSet.identifier }\n\n    private fun determineCompatibleTileMatrixSet(\n        capabilities: WmtsCapabilities, tileMatrixSetIds: List<String>\n    ): CompatibleTileMatrixSet? {\n        val compatibleSet = CompatibleTileMatrixSet()\n\n        // Iterate through each provided tile matrix set\n        for (tileMatrixSetId in tileMatrixSetIds) {\n            compatibleSet.tileMatrixSetId = tileMatrixSetId\n            compatibleSet.tileMatrices.clear()\n            val tileMatrixSet = capabilities.getTileMatrixSet(tileMatrixSetId)!!\n            var previousHeight = 0\n            // Walk through the associated tile matrices and check for compatibility with WWA tiling scheme\n            for (tileMatrix in tileMatrixSet.tileMatrices) {\n                // Aspect and symmetry check of current matrix\n                if (2 * tileMatrix.matrixHeight != tileMatrix.matrixWidth) continue\n                // Quad division check\n                else if (tileMatrix.matrixWidth % 2 != 0 || tileMatrix.matrixHeight % 2 != 0) continue\n                // Square image check\n                else if (tileMatrix.tileHeight != tileMatrix.tileWidth) continue\n                // Minimum row check\n                else if (tileMatrix.matrixHeight < 2) continue\n\n                // Parse top left corner values\n                val topLeftCornerValue = tileMatrix.topLeftCorner.split(\"\\\\s+\".toRegex())\n                if (topLeftCornerValue.size != 2) continue\n\n                // Convert Values\n                val topLeftCorner = try {\n                    doubleArrayOf(topLeftCornerValue[0].toDouble(), topLeftCornerValue[1].toDouble())\n                } catch (e: Exception) {\n                    logMessage(\n                        WARN, \"WmtsLayerFactory\", \"determineTileSchemeCompatibleTileMatrixSet\",\n                        \"Unable to parse TopLeftCorner values\"\n                    )\n                    continue\n                }\n\n                // Check top left corner values\n                if (tileMatrixSet.supportedCrs == \"urn:ogc:def:crs:OGC:1.3:CRS84\"\n                    || tileMatrixSet.supportedCrs == \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n                ) {\n                    if (abs(topLeftCorner[0] + 180) > 1e-9) continue\n                    else if (abs(topLeftCorner[1] - 90) > 1e-9) continue\n                } else if (tileMatrixSet.supportedCrs == \"urn:ogc:def:crs:EPSG::4326\") {\n                    if (abs(topLeftCorner[1] + 180) > 1e-9) continue\n                    else if (abs(topLeftCorner[0] - 90) > 1e-9) continue\n                } else {\n                    // The provided list of tile matrix set ids should adhere to either EPGS:4326 or CRS84\n                    continue\n                }\n\n                // Ensure quad division behavior from previous tile matrix and add compatible tile matrix\n                if (previousHeight == 0) {\n                    previousHeight = tileMatrix.matrixHeight\n                    compatibleSet.tileMatrices.add(tileMatrix.identifier)\n                } else if (2 * previousHeight == tileMatrix.matrixHeight) {\n                    previousHeight = tileMatrix.matrixHeight\n                    compatibleSet.tileMatrices.add(tileMatrix.identifier)\n                }\n            }\n\n            // Return the first compatible tile matrix set\n            if (compatibleSet.tileMatrices.size > 2) return compatibleSet\n        }\n        return null\n    }\n\n    /**\n     * Conducts a simple search through the [WmtsLayer]s distributed computing platform resources for a URL which\n     * supports KVP queries to the WMTS. This method only looks at the first entry of every array of the layers 'GET'\n     * retrieval methods.\n     *\n     * @param layer the [WmtsLayer] to search for KVP support\n     *\n     * @return the URL for the supported KVP or null if KVP or 'GET' method isn't provided by the layer\n     */\n    private fun determineKvpUrl(layer: WmtsLayer): String? {\n        val capabilities = layer.capabilities\n        val operationsMetadata = capabilities.operationsMetadata ?: return null\n        val getTileOperation = operationsMetadata.getTile ?: return null\n        val dcp = getTileOperation.dcps\n        if (dcp.isEmpty()) return null\n        val getMethods = dcp[0].getMethods\n        if (getMethods.isEmpty()) return null\n        val constraints = getMethods[0].constraints\n        if (constraints.isEmpty()) return null\n        val allowedValues = constraints[0].allowedValues\n        return if (allowedValues.contains(\"KVP\")) getMethods[0].url else null\n    }\n\n    private class CompatibleTileMatrixSet {\n        lateinit var tileMatrixSetId: String\n        val tileMatrices = mutableListOf<String>()\n    }\n}",null,null,"package earth.worldwind.ogc\n\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.image.ImageSource.Companion.fromUrlString\nimport earth.worldwind.render.image.ImageTile\nimport earth.worldwind.util.Level\nimport earth.worldwind.util.Logger\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.ResourcePostprocessor\nimport earth.worldwind.util.TileFactory\n\nopen class WmtsTileFactory(var template: String, var tileMatrixIdentifiers: List<String>): TileFactory {\n    companion object {\n        const val TILEMATRIX_TEMPLATE = \"{TileMatrix}\"\n        const val TILEROW_TEMPLATE = \"{TileRow}\"\n        const val TILECOL_TEMPLATE = \"{TileCol}\"\n    }\n\n    override fun createTile(sector: Sector, level: Level, row: Int, column: Int) = ImageTile(sector, level, row, column).apply {\n        urlForTile(level.levelNumber, row, column)?.let { urlString ->\n            // Assign resource post-processor to transform received resource and save it in cache if necessary\n            imageSource = fromUrlString(urlString).also { it.postprocessor = this as ResourcePostprocessor<*> }\n        }\n    }\n\n    fun urlForTile(level: Int, row: Int, column: Int): String? {\n        if (level >= tileMatrixIdentifiers.size) {\n            logMessage(\n                Logger.WARN, \"WmtsTileFactory\", \"urlForTile\",\n                \"invalid level for tileMatrixIdentifiers: $level\"\n            )\n            return null\n        }\n\n        // flip the row index\n        val rowHeight = 2 shl level\n        val flipRow = rowHeight - row - 1\n        return template.replace(TILEMATRIX_TEMPLATE, tileMatrixIdentifiers[level])\n            .replace(TILEROW_TEMPLATE, flipRow.toString()).replace(TILECOL_TEMPLATE, column.toString())\n    }\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Attribution\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsAttribution(\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", WMS_NAMESPACE, WMS_PREFIX)\n    val title: String? = null,\n    val onlineResource: WmsOnlineResource? = null,\n    val logoURL: WmsLogoUrl? = null\n) {\n    val url get() = onlineResource?.url\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"AuthorityURL\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsAuthorityUrl(\n    val name: String,\n    val onlineResource: WmsOnlineResource\n) {\n    val url get() = onlineResource.url\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"BoundingBox\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsBoundingBox(\n    val CRS: String,\n    val minx: Double,\n    val maxx: Double,\n    val miny: Double,\n    val maxy: Double,\n    val resx: Double? = null,\n    val resy: Double? = null,\n)","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"WMS_Capabilities\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsCapabilities(\n    /**\n     * Returns the document's version number.\n     */\n    val version: String = \"1.3.0\",\n    /**\n     * Returns the document's update sequence.\n     */\n    val updateSequence: String? = null,\n    /**\n     * Returns the document's service information.\n     */\n    val service: WmsService,\n    val capability: WmsCapability\n) {\n    /**\n     * Returns all named layers in the capabilities document.\n     */\n    val namedLayers get() = capability.layers.flatMap { layer -> layer.namedLayers }\n\n    init {\n        capability.capabilities = this\n    }\n\n    fun getNamedLayer(name: String) = namedLayers.firstOrNull { layer -> layer.name == name }\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Capability\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsCapability(\n    val request: WmsRequest,\n    val layers: List<WmsLayer> = emptyList(),\n    /**\n     * Object representation of an Exception element. Pre-allocated to prevent NPE in the event the server does not\n     * include an Exception block.\n     */\n    val exception: WmsException = WmsException()\n) {\n    @Transient\n    lateinit var capabilities: WmsCapabilities\n\n    init {\n        layers.forEach { layer -> layer.capability = this }\n    }\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Exception\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsException(\n    @XmlSerialName(\"Format\", WMS_NAMESPACE, WMS_PREFIX)\n    val formats: List<String> = emptyList()\n)","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"ContactAddress\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsContactAddress(\n    @XmlElement(true)\n    @XmlSerialName(\"AddressType\", WMS_NAMESPACE, WMS_PREFIX)\n    val addressType: String,\n    @XmlElement(true)\n    @XmlSerialName(\"Address\", WMS_NAMESPACE, WMS_PREFIX)\n    val address: String,\n    @XmlElement(true)\n    @XmlSerialName(\"City\", WMS_NAMESPACE, WMS_PREFIX)\n    val city: String,\n    @XmlElement(true)\n    @XmlSerialName(\"StateOrProvince\", WMS_NAMESPACE, WMS_PREFIX)\n    val stateOrProvince: String,\n    @XmlElement(true)\n    @XmlSerialName(\"PostCode\", WMS_NAMESPACE, WMS_PREFIX)\n    val postCode: String,\n    @XmlElement(true)\n    @XmlSerialName(\"Country\", WMS_NAMESPACE, WMS_PREFIX)\n    val country: String\n)","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"ContactInformation\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsContactInformation(\n    @XmlElement(true)\n    @XmlSerialName(\"ContactPosition\", WMS_NAMESPACE, WMS_PREFIX)\n    val position: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"ContactVoiceTelephone\", WMS_NAMESPACE, WMS_PREFIX)\n    val voiceTelephone: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"ContactFacsimileNumber\", WMS_NAMESPACE, WMS_PREFIX)\n    val facsimileTelephone: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"ContactElectronicMailAddress\", WMS_NAMESPACE, WMS_PREFIX)\n    val electronicMailAddress: String? = null,\n    val contactAddress: WmsContactAddress? = null,\n    val contactPersonPrimary: WmsContactPersonPrimary? = null\n)","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"ContactPersonPrimary\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsContactPersonPrimary(\n    @XmlElement(true)\n    @XmlSerialName(\"ContactPerson\", WMS_NAMESPACE, WMS_PREFIX)\n    val contactPerson: String,\n    @XmlElement(true)\n    @XmlSerialName(\"ContactOrganization\", WMS_NAMESPACE, WMS_PREFIX)\n    val contactOrganization: String\n)","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"DCPType\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsDcpType(\n    val http: WmsHttp\n) {\n    val getHref get() = http.get.onlineResource.url\n    val postHref get() = http.post?.onlineResource?.url\n\n    @Serializable\n    @XmlSerialName(\"HTTP\", WMS_NAMESPACE, WMS_PREFIX)\n    data class WmsHttp(\n        @XmlSerialName(\"Get\", WMS_NAMESPACE, WMS_PREFIX)\n        val get: WmsHttpProtocol,\n        @XmlSerialName(\"Post\", WMS_NAMESPACE, WMS_PREFIX)\n        val post: WmsHttpProtocol? = null,\n    )\n\n    @Serializable\n    data class WmsHttpProtocol(\n        val onlineResource: WmsOnlineResource\n    )\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\nimport nl.adaptivity.xmlutil.serialization.XmlValue\n\n@Serializable\n@XmlSerialName(\"Dimension\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsDimension(\n    val name: String,\n    val units: String,\n    val unitSymbol: String? = null,\n    val default: String? = null,\n    val multipleValues: Boolean? = null,\n    val nearestValue: Boolean? = null,\n    val current: Boolean? = null,\n    @XmlValue(true)\n    val value: String? = null\n)","package earth.worldwind.ogc.wms\n\nimport earth.worldwind.geom.Sector.Companion.fromDegrees\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"EX_GeographicBoundingBox\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsGeographicBoundingBox(\n    @XmlElement(true)\n    @XmlSerialName(\"northBoundLatitude\", WMS_NAMESPACE, WMS_PREFIX)\n    private val north: Double,\n    @XmlElement(true)\n    @XmlSerialName(\"eastBoundLongitude\", WMS_NAMESPACE, WMS_PREFIX)\n    private val east: Double,\n    @XmlElement(true)\n    @XmlSerialName(\"southBoundLatitude\", WMS_NAMESPACE, WMS_PREFIX)\n    private val south: Double,\n    @XmlElement(true)\n    @XmlSerialName(\"westBoundLongitude\", WMS_NAMESPACE, WMS_PREFIX)\n    private val west: Double\n) {\n    val geographicBoundingBox get() = fromDegrees(south, west, north - south, east - west)\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\nimport nl.adaptivity.xmlutil.serialization.XmlValue\n\n@Serializable\n@XmlSerialName(\"Identifier\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsIdentifier(\n    val authority: String,\n    @XmlValue(true)\n    val identifier: String,\n)","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\ndata class WmsInfoUrl(\n    @XmlSerialName(\"Format\", WMS_NAMESPACE, WMS_PREFIX)\n    val formats: List<String> = emptyList(),\n    val onlineResource: WmsOnlineResource\n) {\n    val url get() = onlineResource.url\n}","package earth.worldwind.ogc.wms\n\nimport earth.worldwind.geom.Sector\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Layer\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsLayer(\n    // Properties of the Layer element\n    val layers: List<WmsLayer> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Name\", WMS_NAMESPACE, WMS_PREFIX)\n    val name: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", WMS_NAMESPACE, WMS_PREFIX)\n    val title: String,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", WMS_NAMESPACE, WMS_PREFIX)\n    val abstract: String? = null,\n    @XmlSerialName(\"KeywordList\", WMS_NAMESPACE, WMS_PREFIX)\n    @XmlChildrenName(\"Keyword\", WMS_NAMESPACE, WMS_PREFIX)\n    val keywordList: List<String> = emptyList(),\n    private val _styles: List<WmsStyle> = emptyList(),\n    @XmlSerialName(\"CRS\", WMS_NAMESPACE, WMS_PREFIX)\n    private val _referenceSystems: List<String> = emptyList(),\n    private val _geographicBoundingBox: WmsGeographicBoundingBox? = null,\n    private val _boundingBoxes: List<WmsBoundingBox> = emptyList(),\n    private val _dimensions: List<WmsDimension> = emptyList(),\n    private val _attribution: WmsAttribution? = null,\n    private val _authorityUrls: List<WmsAuthorityUrl> = emptyList(),\n    val identifiers: List<WmsIdentifier> = emptyList(),\n    val metadataUrls: List<WmsMetadataUrl> = emptyList(),\n    @XmlSerialName(\"DataURL\", WMS_NAMESPACE, WMS_PREFIX)\n    val dataUrls: List<WmsInfoUrl> = emptyList(),\n    @XmlSerialName(\"FeatureListURL\", WMS_NAMESPACE, WMS_PREFIX)\n    val featureListUrls: List<WmsInfoUrl> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"MaxScaleDenominator\", WMS_NAMESPACE, WMS_PREFIX)\n    private val _maxScaleDenominator: Double? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"MinScaleDenominator\", WMS_NAMESPACE, WMS_PREFIX)\n    private val _minScaleDenominator: Double? = null,\n    // Properties of the Layer attributes\n    @XmlSerialName(\"queryable\", WMS_NAMESPACE, WMS_PREFIX)\n    val isQueryable: Boolean = false,\n    @XmlSerialName(\"cascaded\", WMS_NAMESPACE, WMS_PREFIX)\n    private val _cascaded: Int? = null,\n    @XmlSerialName(\"opaque\", WMS_NAMESPACE, WMS_PREFIX)\n    val isOpaque: Boolean = false,\n    @XmlSerialName(\"noSubsets\", WMS_NAMESPACE, WMS_PREFIX)\n    val isNoSubsets: Boolean = false,\n    @XmlSerialName(\"fixedWidth\", WMS_NAMESPACE, WMS_PREFIX)\n    private val _fixedWidth: Int? = null,\n    @XmlSerialName(\"fixedHeight\", WMS_NAMESPACE, WMS_PREFIX)\n    private val _fixedHeight: Int? = null,\n) {\n    val namedLayers: List<WmsLayer> get() = (name?.let { listOf(this) } ?: emptyList()) + layers.flatMap { layer -> layer.namedLayers }\n    val styles: List<WmsStyle> get() = _styles + (parent?.styles ?: emptyList())\n    val referenceSystems: List<String> get() = _referenceSystems + (parent?.referenceSystems ?: emptyList())\n    val geographicBoundingBox: Sector? get() = _geographicBoundingBox?.geographicBoundingBox ?: parent?.geographicBoundingBox\n    val boundingBoxes get(): List<WmsBoundingBox> {\n        val result = mutableMapOf<String, WmsBoundingBox>()\n        var parent = parent\n        while (parent != null) {\n            parent._boundingBoxes.forEach { bBox -> if (!result.containsKey(bBox.CRS)) result[bBox.CRS] = bBox }\n            parent = parent.parent\n        }\n        return result.values.toList()\n    }\n    val dimensions get(): List<WmsDimension> {\n        val result = mutableMapOf<String?, WmsDimension>()\n        var parent = parent\n        while (parent != null) {\n            parent._dimensions.forEach { dimen -> if (!result.containsKey(dimen.name)) result[dimen.name] = dimen }\n            parent = parent.parent\n        }\n        return result.values.toList()\n    }\n    val attribution: WmsAttribution? get() = _attribution ?: parent?.attribution\n    val authorityUrls: List<WmsAuthorityUrl> get() = _authorityUrls + (parent?.authorityUrls ?: emptyList())\n    val maxScaleDenominator: Double? get() = _maxScaleDenominator ?: parent?.maxScaleDenominator\n    val minScaleDenominator: Double? get() = _minScaleDenominator ?: parent?.minScaleDenominator\n    val cascaded: Int? get() = _cascaded ?: parent?.cascaded\n    val fixedWidth: Int? get() = _fixedWidth ?: parent?.fixedWidth\n    val fixedHeight: Int? get() = _fixedHeight ?: parent?.fixedHeight\n    @Transient\n    var capability: WmsCapability? = null\n        get() = field ?: parent?.capability\n    @Transient\n    var parent: WmsLayer? = null\n\n    init {\n        layers.forEach { layer -> layer.parent = this }\n    }\n\n    fun getStyle(name: String) = styles.firstOrNull { style -> style.name == name }\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"LogoURL\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsLogoUrl(\n    @XmlSerialName(\"Format\", WMS_NAMESPACE, WMS_PREFIX)\n    val formats: Set<String> = setOf(),\n    val onlineResource: WmsOnlineResource,\n    val width: Int? = null,\n    val height: Int? = null\n) {\n    val url get() = onlineResource.url\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"MetadataURL\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsMetadataUrl(\n    val type: String,\n    @XmlSerialName(\"Format\", WMS_NAMESPACE, WMS_PREFIX)\n    val formats: List<String> = emptyList(),\n    val onlineResource: WmsOnlineResource\n) {\n    val url get() = onlineResource.url\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"OnlineResource\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsOnlineResource(\n    @XmlSerialName(\"type\", XLINK_NAMESPACE, XLINK_PREFIX)\n    val type: String = \"simple\",\n    @XmlSerialName(\"href\", XLINK_NAMESPACE, XLINK_PREFIX)\n    val url: String\n)","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Request\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsRequest(\n    @XmlSerialName(\"GetCapabilities\", WMS_NAMESPACE, WMS_PREFIX)\n    val getCapabilities: WmsRequestOperation,\n    @XmlSerialName(\"GetMap\", WMS_NAMESPACE, WMS_PREFIX)\n    val getMap: WmsRequestOperation,\n    @XmlSerialName(\"GetFeatureInfo\", WMS_NAMESPACE, WMS_PREFIX)\n    val getFeatureInfo: WmsRequestOperation? = null\n)","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\ndata class WmsRequestOperation(\n    @XmlSerialName(\"Format\", WMS_NAMESPACE, WMS_PREFIX)\n    val formats: List<String> = emptyList(),\n    val dcpType: WmsDcpType\n) {\n    val getUrl get() = dcpType.getHref\n    val postUrl get() = dcpType.postHref\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Service\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsService(\n    @XmlElement(true)\n    @XmlSerialName(\"Name\", WMS_NAMESPACE, WMS_PREFIX)\n    val name: String,\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", WMS_NAMESPACE, WMS_PREFIX)\n    val title: String,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", WMS_NAMESPACE, WMS_PREFIX)\n    val abstract: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Fees\", WMS_NAMESPACE, WMS_PREFIX)\n    val fees: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"AccessConstraints\", WMS_NAMESPACE, WMS_PREFIX)\n    val accessConstraints: String? = null,\n    @XmlSerialName(\"KeywordList\", WMS_NAMESPACE, WMS_PREFIX)\n    @XmlChildrenName(\"Keyword\", WMS_NAMESPACE, WMS_PREFIX)\n    val keywordList: List<String> = listOf(),\n    val onlineResource: WmsOnlineResource,\n    val contactInformation: WmsContactInformation? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"MaxWidth\", WMS_NAMESPACE, WMS_PREFIX)\n    val maxWidth: Int? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"MaxHeight\", WMS_NAMESPACE, WMS_PREFIX)\n    val maxHeight: Int? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"LayerLimit\", WMS_NAMESPACE, WMS_PREFIX)\n    val layerLimit: Int? = null\n) {\n    val url get() = onlineResource.url\n}","package earth.worldwind.ogc.wms\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Style\", WMS_NAMESPACE, WMS_PREFIX)\ndata class WmsStyle(\n    @XmlElement(true)\n    @XmlSerialName(\"Name\", WMS_NAMESPACE, WMS_PREFIX)\n    val name: String,\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", WMS_NAMESPACE, WMS_PREFIX)\n    val title: String,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", WMS_NAMESPACE, WMS_PREFIX)\n    val abstract: String? = null,\n    @XmlSerialName(\"LegendURL\", WMS_NAMESPACE, WMS_PREFIX)\n    val legendUrls: List<WmsLogoUrl> = emptyList(),\n    @XmlSerialName(\"StyleSheetURL\", WMS_NAMESPACE, WMS_PREFIX)\n    val styleSheetUrl: WmsInfoUrl? = null,\n    @XmlSerialName(\"StyleURL\", WMS_NAMESPACE, WMS_PREFIX)\n    val styleUrl: WmsInfoUrl? = null\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Address\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsAddress(\n    @XmlSerialName(\"DeliveryPoint\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val deliveryPoints: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"City\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val city: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"AdministrativeArea\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val administrativeArea: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"PostalCode\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val postalCode: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Country\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val country: String? = null,\n    @XmlSerialName(\"ElectronicMailAddress\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val electronicMailAddresses: List<String> = emptyList()\n)","package earth.worldwind.ogc.wmts\n\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.util.Logger\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"BoundingBox\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsBoundingBox(\n    val crs: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"LowerCorner\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val lowerCorner: String,\n    @XmlElement(true)\n    @XmlSerialName(\"UpperCorner\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val upperCorner: String\n) {\n    val sector get() = try {\n        val regex = \"\\\\s+\".toRegex()\n        val lowerValues = lowerCorner.split(regex)\n        val upperValues = upperCorner.split(regex)\n        val minLon = lowerValues[0].toDouble()\n        val minLat = lowerValues[1].toDouble()\n        val maxLon = upperValues[0].toDouble()\n        val maxLat = upperValues[1].toDouble()\n        Sector.fromDegrees(minLat, minLon, maxLat - minLat, maxLon - minLon)\n    } catch (ex: Exception) {\n        Logger.logMessage(\n            Logger.ERROR, \"OwsBoundingBox\", \"sector\",\n            \"Error parsing bounding box corners, LowerCorner=$lowerCorner UpperCorner=$upperCorner\", ex\n        )\n        null\n    }\n}","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlDefault\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Constraint\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsConstraint(\n    val name: String,\n    @XmlSerialName(\"AllowedValues\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlChildrenName(\"Value\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlDefault(\"AnyValue\")\n    val allowedValues: List<String> = emptyList()\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"ContactInfo\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsContactInfo(\n    val phone: OwsPhone? = null,\n    val address: OwsAddress? = null,\n    val onlineResource: OwsOnlineResource? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"HoursOfService\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val hoursOfService: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"ContactInstructions\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val contactInstructions: String? = null\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"DCP\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsDcp(\n    val http: OwsHttp\n) {\n    val getMethods get() = http.getMethods\n    val postMethods get() = http.postMethods\n}","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"HTTP\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsHttp(\n    @XmlSerialName(\"Get\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val getMethods: List<OwsHttpMethod> = emptyList(),\n    @XmlSerialName(\"Post\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val postMethods: List<OwsHttpMethod> = emptyList()\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\ndata class OwsHttpMethod(\n    @XmlSerialName(\"href\", XLINK_NAMESPACE, XLINK_PREFIX)\n    val url: String,\n    val constraints: List<OwsConstraint> = emptyList()\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"OnlineResource\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsOnlineResource(\n    @XmlSerialName(\"href\", XLINK_NAMESPACE, XLINK_PREFIX)\n    val url: String\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Operation\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsOperation(\n    val name: String,\n    val dcps: List<OwsDcp> = emptyList()\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"OperationsMetadata\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsOperationsMetadata(\n    val operations: List<OwsOperation> = emptyList()\n) {\n    val getCapabilities get() = operations.firstOrNull { operation -> operation.name == \"GetCapabilities\" }\n    val getTile get() = operations.firstOrNull { operation -> operation.name == \"GetTile\" }\n}","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Phone\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsPhone(\n    @XmlElement(true)\n    @XmlSerialName(\"Voice\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val voice: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Facsimile\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val fax: List<String> = emptyList()\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"ServiceContact\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsServiceContact(\n    @XmlElement(true)\n    @XmlSerialName(\"IndividualName\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val individualName: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"PositionName\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val positionName: String? = null,\n    val contactInfo: OwsContactInfo? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Role\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val role: String? = null,\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"ServiceIdentification\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsServiceIdentification(\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val title: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val abstract: String? = null,\n    @XmlSerialName(\"Keywords\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlChildrenName(\"Keyword\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val keywords: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"ServiceType\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val serviceType: String,\n    @XmlSerialName(\"ServiceTypeVersion\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val serviceTypeVersions: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Fees\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val fees: String? = null,\n    @XmlSerialName(\"AccessConstraints\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val accessConstraints: List<String> = emptyList(),\n): OwsDescription()","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"ServiceProvider\", OWS11_NAMESPACE, OWS11_PREFIX)\ndata class OwsServiceProvider(\n    @XmlElement(true)\n    @XmlSerialName(\"ProviderName\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val providerName: String,\n    @XmlSerialName(\"ProviderSite\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val onlineResource: OwsOnlineResource? = null,\n    val serviceContact: OwsServiceContact\n) {\n    val providerSiteUrl get() = onlineResource?.url\n}","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Capabilities\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsCapabilities(\n    val version: String,\n    val updateSequence: String? = null,\n    val serviceIdentification: OwsServiceIdentification? = null,\n    val serviceProvider: OwsServiceProvider? = null,\n    val operationsMetadata: OwsOperationsMetadata? = null,\n    val contents: WmtsContents,\n    @XmlSerialName(\"Themes\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    @XmlChildrenName(\"Theme\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val themes: List<WmtsTheme> = emptyList(),\n    @XmlSerialName(\"ServiceMetadataURL\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val serviceMetadataUrls: List<OwsOnlineResource> = emptyList()\n) {\n    val layers get() = contents.layers\n    val tileMatrixSets get() = contents.tileMatrixSets\n\n    init {\n        layers.forEach { layer -> layer.capabilities = this }\n    }\n\n    fun getLayer(identifier: String) = contents.layers.firstOrNull { layer -> layer.identifier == identifier }\n\n    fun getTileMatrixSet(identifier: String) = contents.tileMatrixSets.firstOrNull { tms -> tms.identifier == identifier }\n}","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Contents\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsContents(\n    val layers: List<WmtsLayer> = emptyList(),\n    val tileMatrixSets: List<WmtsTileMatrixSet> = emptyList()\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Dimension\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsDimension(\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val title: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val abstract: String? = null,\n    @XmlSerialName(\"Keywords\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlChildrenName(\"Keyword\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val keywords: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Identifier\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val identifier: String,\n    @XmlElement(true)\n    @XmlSerialName(\"UOM\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val unitOfMeasure: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"UnitSymbol\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val unitSymbol: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Default\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val valueDefault: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Current\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val current: Boolean? = null,\n    @XmlSerialName(\"Value\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val values: List<String> = emptyList()\n): OwsDescription()","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Layer\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsLayer(\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val title: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val abstract: String? = null,\n    @XmlSerialName(\"Keywords\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlChildrenName(\"Keyword\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val keywords: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Identifier\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val identifier: String,\n    val boundingBoxes: List<OwsBoundingBox> = emptyList(),\n    @XmlSerialName(\"WGS84BoundingBox\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val wgs84BoundingBox: OwsBoundingBox? = null,\n    @XmlSerialName(\"Metadata\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val metadata: List<OwsOnlineResource> = emptyList(),\n    val styles: List<WmtsStyle> = emptyList(),\n    @XmlSerialName(\"Format\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val formats: List<String> = emptyList(),\n    @XmlSerialName(\"InfoFormat\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val infoFormats: List<String> = emptyList(),\n    val tileMatrixSetLinks: List<WmtsTileMatrixSetLink> = emptyList(),\n    val resourceUrls: List<WmtsResourceUrl> = emptyList(),\n    val dimensions: List<WmtsDimension> = emptyList(),\n): OwsDescription() {\n    val layerSupportedTileMatrixSets get() = tileMatrixSetLinks.flatMap { link ->\n        capabilities.tileMatrixSets.filter { set -> set.identifier == link.identifier }\n    }\n    @Transient\n    lateinit var capabilities: WmtsCapabilities\n}","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"LegendURL\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsLegendURL(\n    @XmlSerialName(\"href\", XLINK_NAMESPACE, XLINK_PREFIX)\n    val url: String,\n    val format: String\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"ResourceURL\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsResourceUrl(\n    val format: String,\n    val resourceType: String,\n    val template: String\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Style\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsStyle(\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val title: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val abstract: String? = null,\n    @XmlSerialName(\"Keywords\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlChildrenName(\"Keyword\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val keywords: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Identifier\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val identifier: String,\n    val isDefault: Boolean = false,\n    val legendUrls: List<WmtsLegendURL> = emptyList()\n): OwsDescription()","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"Theme\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsTheme(\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val title: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val abstract: String? = null,\n    @XmlSerialName(\"Keywords\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlChildrenName(\"Keyword\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val keywords: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Identifier\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val identifier: String,\n    val themes: List<WmtsTheme> = emptyList(),\n    @XmlSerialName(\"LayerRef\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val layerRefs: List<String> = emptyList()\n): OwsDescription()","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"TileMatrix\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsTileMatrix(\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val title: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val abstract: String? = null,\n    @XmlSerialName(\"Keywords\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlChildrenName(\"Keyword\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val keywords: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Identifier\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val identifier: String,\n    @XmlElement(true)\n    @XmlSerialName(\"ScaleDenominator\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val scaleDenominator: Double,\n    @XmlElement(true)\n    @XmlSerialName(\"TopLeftCorner\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val topLeftCorner: String,\n    @XmlElement(true)\n    @XmlSerialName(\"TileWidth\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val tileWidth: Int,\n    @XmlElement(true)\n    @XmlSerialName(\"TileHeight\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val tileHeight: Int,\n    @XmlElement(true)\n    @XmlSerialName(\"MatrixWidth\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val matrixWidth: Int,\n    @XmlElement(true)\n    @XmlSerialName(\"MatrixHeight\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val matrixHeight: Int\n): OwsDescription()","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"TileMatrixLimits\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsTileMatrixLimits(\n    @XmlElement(true)\n    @XmlSerialName(\"TileMatrix\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val tileMatrixIdentifier: String,\n    @XmlElement(true)\n    @XmlSerialName(\"MinTileRow\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val minTileRow: Int,\n    @XmlElement(true)\n    @XmlSerialName(\"MaxTileRow\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val maxTileRow: Int,\n    @XmlElement(true)\n    @XmlSerialName(\"MinTileCol\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val minTileCol: Int,\n    @XmlElement(true)\n    @XmlSerialName(\"MaxTileCol\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val maxTileCol: Int\n)","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"TileMatrixSet\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsTileMatrixSet(\n    @XmlElement(true)\n    @XmlSerialName(\"Title\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val title: String? = null,\n    @XmlElement(true)\n    @XmlSerialName(\"Abstract\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val abstract: String? = null,\n    @XmlSerialName(\"Keywords\", OWS11_NAMESPACE, OWS11_PREFIX)\n    @XmlChildrenName(\"Keyword\", OWS11_NAMESPACE, OWS11_PREFIX)\n    override val keywords: List<String> = emptyList(),\n    @XmlElement(true)\n    @XmlSerialName(\"Identifier\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val identifier: String,\n    @XmlElement(true)\n    @XmlSerialName(\"SupportedCRS\", OWS11_NAMESPACE, OWS11_PREFIX)\n    val supportedCrs: String,\n    @XmlElement(true)\n    @XmlSerialName(\"WellKnownScaleSet\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val wellKnownScaleSet: String? = null,\n    val boundingBox: OwsBoundingBox? = null,\n    val tileMatrices: List<WmtsTileMatrix> = emptyList()\n): OwsDescription()","package earth.worldwind.ogc.wmts\n\nimport kotlinx.serialization.Serializable\nimport nl.adaptivity.xmlutil.serialization.XmlChildrenName\nimport nl.adaptivity.xmlutil.serialization.XmlElement\nimport nl.adaptivity.xmlutil.serialization.XmlSerialName\n\n@Serializable\n@XmlSerialName(\"TileMatrixSetLink\", WMTS10_NAMESPACE, WMTS10_PREFIX)\ndata class WmtsTileMatrixSetLink(\n    @XmlElement(true)\n    @XmlSerialName(\"TileMatrixSet\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val identifier: String,\n    @XmlSerialName(\"TileMatrixSetLimits\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    @XmlChildrenName(\"TileMatrixLimits\", WMTS10_NAMESPACE, WMTS10_PREFIX)\n    val tileMatrixSetLimits: List<WmtsTileMatrixLimits> = emptyList()\n)","package earth.worldwind.render\n\nimport kotlin.jvm.JvmOverloads\n\nabstract class AbstractRenderable @JvmOverloads constructor(override var displayName: String? = null): Renderable {\n    override var isEnabled = true\n    override var pickDelegate: Any? = null\n    private var userProperties: MutableMap<Any, Any>? = null\n\n    override fun getUserProperty(key: Any) = userProperties?.get(key)\n\n    override fun putUserProperty(key: Any, value: Any): Any? {\n        val userProperties = userProperties ?: mutableMapOf<Any, Any>().also { userProperties = it }\n        return userProperties.put(key, value)\n    }\n\n    override fun removeUserProperty(key: Any) = userProperties?.remove(key)\n\n    override fun hasUserProperty(key: Any) = userProperties?.containsKey(key) == true\n\n    override fun render(rc: RenderContext) { if (isEnabled) doRender(rc) }\n\n    protected abstract fun doRender(rc: RenderContext)\n}","package earth.worldwind.render\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.jvm.JvmOverloads\nimport kotlin.math.ceil\nimport kotlin.math.roundToInt\n\n/**\n * Color with red, green, blue and alpha components. Each RGB component is a number between 0.0 and 1.0 indicating the\n * component's intensity. The alpha component is a number between 0.0 (fully transparent) and 1.0 (fully opaque)\n * indicating the color's opacity.\n */\nopen class Color @JvmOverloads constructor(\n    /**\n     * The color's red component.\n     */\n    var red: Float,\n    /**\n     * The color's green component.\n     */\n    var green: Float,\n    /**\n     * The color's blue component.\n     */\n    var blue: Float,\n    /**\n     * The color's alpha component.\n     */\n    var alpha: Float = 1f\n) {\n    /**\n     * Constructs a color with red, green, blue and alpha all 1.0.\n     */\n    constructor(): this(red = 1f, green = 1f, blue = 1f, alpha = 1f)\n\n    /**\n     * Constructs a color from integer components\n     *\n     * @param red   the new red component\n     * @param green the new green component\n     * @param blue  the new blue component\n     * @param alpha the new alpha component\n     *\n     * @return this color with its components set to the specified values\n     */\n    @JvmOverloads\n    constructor(red: Int, green: Int, blue: Int, alpha: Int = 255): this(\n        red = red / 255f,\n        green = green / 255f,\n        blue = blue / 255f,\n        alpha = alpha / 255f\n    )\n\n    /**\n     * Constructs a color with components stored in a color int. Color ints are stored as packed ints as follows:\n     * `(alpha << 24) | (red << 16) | (green << 8) | (blue)`. Each component is an 8 bit number between 0 and\n     * 255 with 0 indicating the component's intensity.\n     *\n     * @param colorInt the color int specifying the components\n     */\n    constructor(colorInt: Int): this(\n        red = red(colorInt) / 0xFF.toFloat(),\n        green = green(colorInt) / 0xFF.toFloat(),\n        blue = blue(colorInt) / 0xFF.toFloat(),\n        alpha = alpha(colorInt) / 0xFF.toFloat()\n    )\n\n    /**\n     * Constructs a color with the components of a specified color.\n     *\n     * @param color the color specifying the components\n     */\n    constructor(color: Color): this(color.red, color.green, color.blue, color.alpha)\n\n    /**\n     * Sets this color to the specified components.\n     *\n     * @param red   the new red component\n     * @param green the new green component\n     * @param blue  the new blue component\n     * @param alpha the new alpha component\n     *\n     * @return this color with its components set to the specified values\n     */\n    fun set(red: Float, green: Float, blue: Float, alpha: Float) = apply {\n        this.red = red\n        this.green = green\n        this.blue = blue\n        this.alpha = alpha\n    }\n\n    /**\n     * Sets this color to the components stored in a color int. Color ints are stored as packed ints as follows:\n     * `(alpha << 24) | (red << 16) | (green << 8) | (blue)`. Each component is an 8 bit number between 0 and\n     * 255 with 0 indicating the component's intensity.\n     *\n     * @param colorInt the color int specifying the new components\n     *\n     * @return this color with its components set to those of the specified color int\n     */\n    fun set(colorInt: Int) = set(\n        red = red(colorInt) / 0xFF.toFloat(),\n        green = green(colorInt) / 0xFF.toFloat(),\n        blue= blue(colorInt) / 0xFF.toFloat(),\n        alpha = alpha(colorInt) / 0xFF.toFloat()\n    )\n\n    /**\n     * Sets this color to the components of a specified color.\n     *\n     * @param color the color specifying the new components\n     *\n     * @return this color with its components set to that of the specified color\n     */\n    fun copy(color: Color) = set(color.red, color.green, color.blue, color.alpha)\n\n    /**\n     * Copies this color's components to the specified array. The result is compatible with GLSL uniform vectors, and\n     * can be passed to the function glUniform4fv.\n     *\n     * @param result a pre-allocated array of length 4 in which to return the components\n     * @param offset a starting index in the result array\n     *\n     * @return the result argument set to this color's components\n     */\n    fun toArray(result: FloatArray, offset: Int): FloatArray {\n        var o = offset\n        require(result.size - o >= 4) {\n            logMessage(ERROR, \"Color\", \"toArray\", \"missingArray\")\n        }\n        result[o++] = red\n        result[o++] = green\n        result[o++] = blue\n        result[o] = alpha\n        return result\n    }\n\n    /**\n     * Returns this color's components as a color int. Color ints are stored as packed ints as follows: `(alpha <<\n     * 24) | (red << 16) | (green << 8) | (blue)`. Each component is an 8 bit number between 0 and 255 with 0\n     * indicating the component's intensity.\n     *\n     * @return this color converted to a color int\n     */\n    fun toColorInt(): Int {\n        val r8 = (red * 0xFF).roundToInt()\n        val g8 = (green * 0xFF).roundToInt()\n        val b8 = (blue * 0xFF).roundToInt()\n        val a8 = (alpha * 0xFF).roundToInt()\n        return argb(a8, r8, g8, b8)\n    }\n\n    /**\n     * Convert the argb color to its HSV components.\n     *     hsv[0] is Hue [0 .. 360)\n     *     hsv[1] is Saturation [0...1]\n     *     hsv[2] is Value [0...1]\n     * @param hsv  3 element array which holds the resulting HSV components.\n     */\n    fun toHSV(hsv: FloatArray) {\n        val v = red.coerceAtLeast(green).coerceAtLeast(blue)\n        val diff = v - red.coerceAtMost(green).coerceAtMost(blue)\n        var h: Float\n        val s: Float\n        if (diff == 0f) {\n            h = 0f\n            s = 0f\n        } else {\n            s = diff / v\n            val rr = (v - red) / 6f / diff + 1f / 2f\n            val gg = (v - green) / 6f / diff + 1f / 2f\n            val bb = (v - blue) / 6f / diff + 1f / 2f\n\n            h = if (red == v) bb - gg\n            else if (green == v) (1f / 3f) + rr - bb\n            else if (blue == v) (2f / 3f) + gg - rr\n            else 0f\n            if (h < 0f) h += 1f else if (h > 1f) h -= 1f\n        }\n        hsv[0] = h * 360f\n        hsv[1] = s\n        hsv[2] = v\n    }\n\n    /**\n     * Premultiplies this color in place. The RGB components are multiplied by the alpha component.\n     *\n     * @return this color with its RGB components multiplied by its alpha component\n     */\n    fun premultiply() = apply {\n        red *= alpha\n        green *= alpha\n        blue *= alpha\n    }\n\n    /**\n     * Premultiplies the specified color and stores the result in this color. This color's RGB components are set to the\n     * product of the specified color's RGB components and its alpha component. This color's alpha component is set to\n     * the specified color's alpha.\n     *\n     * @param color the color with components to premultiply and store in this color\n     *\n     * @return this color set to the premultiplied components of the specified color\n     */\n    fun premultiplyColor(color: Color) = apply {\n        red = color.red * color.alpha\n        green = color.green * color.alpha\n        blue = color.blue * color.alpha\n        alpha = color.alpha\n    }\n\n    /**\n     * Copies this color's premultiplied components to the specified array. The result is compatible with GLSL uniform\n     * vectors, and can be passed to the function glUniform4fv.\n     *\n     * @param result a pre-allocated array of length 4 in which to return the components\n     * @param offset a starting index in the result array\n     *\n     * @return the result argument set to this color's premultiplied components\n     */\n    fun premultiplyToArray(result: FloatArray, offset: Int): FloatArray {\n        var o = offset\n        require(result.size - o >= 4) {\n            logMessage(ERROR, \"Color\", \"premultiplyToArray\", \"missingArray\")\n        }\n        result[o++] = red * alpha\n        result[o++] = green * alpha\n        result[o++] = blue * alpha\n        result[o] = alpha\n        return result\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Color) return false\n        return red == other.red && green == other.green && blue == other.blue && alpha == other.alpha\n    }\n\n    override fun hashCode(): Int {\n        var result = red.hashCode()\n        result = 31 * result + green.hashCode()\n        result = 31 * result + blue.hashCode()\n        result = 31 * result + alpha.hashCode()\n        return result\n    }\n\n    override fun toString() = \"Color(red=$red, green=$green, blue=$blue, alpha=$alpha)\"\n\n    /**\n     * Returns a string representation of this color, indicating the byte values corresponding to this color's\n     * floating-point component values.\n     *\n     * @returns Byte string\n     */\n    fun toByteString(): String {\n        val rb = (red * 255).roundToInt()\n        val gb = (green * 255).roundToInt()\n        val bb = (blue * 255).roundToInt()\n        val ab = (alpha * 255).roundToInt()\n        return \"($rb,$gb,$bb,$ab)\"\n    }\n\n    /**\n     * Create a hex color string that CSS can use. Optionally, inhibit capturing alpha,\n     * because some uses reject a four-component color specification.\n     *\n     * @param isUsingAlpha Enable the use of an alpha component.\n     * @returns A color string suitable for CSS.\n     */\n    fun toHexString(isUsingAlpha: Boolean = false): String {\n        // Use Math.ceil() to get 0.75 to map to 0xc0. This is important if the display is dithering.\n        val redHex = ceil(red * 255).toInt().toString(16)\n        val greenHex = ceil(green * 255).toInt().toString(16)\n        val blueHex = ceil(blue * 255).toInt().toString(16)\n        val alphaHex = ceil(alpha * 255).toInt().toString(16)\n\n        var result = \"#\"\n        result += if (redHex.length < 2) (\"0$redHex\") else redHex\n        result += if (greenHex.length < 2) (\"0$greenHex\") else greenHex\n        result += if (blueHex.length < 2) (\"0$blueHex\") else blueHex\n        if (isUsingAlpha) result += if (alphaHex.length < 2) (\"0$alphaHex\") else alphaHex\n        return result\n    }\n\n    /**\n     * Create a rgba color string that conforms to CSS Color Module Level 3 specification.\n     * @returns A color string suitable for CSS.\n     */\n    fun toCssColorString(): String {\n        val red = (red * 255).roundToInt()\n        val green = (green * 255).roundToInt()\n        val blue = (blue * 255).roundToInt()\n\n        // Per the CSS Color Module Level 3 specification, alpha is expressed as floating point value between 0 - 1\n        return \"rgba($red, $green, $blue, $alpha)\"\n    }\n\n    companion object {\n        /**\n         * Return the alpha component of a color int. This is the same as saying\n         * color >>> 24\n         */\n        private fun alpha(color: Int) = color ushr 24\n\n        /**\n         * Return the red component of a color int. This is the same as saying\n         * (color >> 16) & 0xFF\n         */\n        private fun red(color: Int) = color shr 16 and 0xFF\n\n        /**\n         * Return the green component of a color int. This is the same as saying\n         * (color >> 8) & 0xFF\n         */\n        private fun green(color: Int) = color shr 8 and 0xFF\n\n        /**\n         * Return the blue component of a color int. This is the same as saying\n         * color & 0xFF\n         */\n        private fun blue(color: Int) = color and 0xFF\n\n        /**\n         * Return a color-int from alpha, red, green, blue components.\n         * These component values should be \\([0..255]\\), but there is no\n         * range check performed, so if they are out of range, the\n         * returned color is undefined.\n         * @param alpha Alpha component \\([0..255]\\) of the color\n         * @param red Red component \\([0..255]\\) of the color\n         * @param green Green component \\([0..255]\\) of the color\n         * @param blue Blue component \\([0..255]\\) of the color\n         */\n        private fun argb(alpha: Int, red: Int, green: Int, blue: Int) = alpha shl 24 or (red shl 16) or (green shl 8) or blue\n    }\n}","package earth.worldwind.render\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.util.kgl.*\n\nopen class Framebuffer : RenderResource {\n    protected var framebufferName = KglFramebuffer.NONE\n    protected val attachedTextures = mutableMapOf<Int,Texture>()\n\n    override fun release(dc: DrawContext) {\n        if (framebufferName.isValid()) {\n            deleteFramebuffer(dc)\n            attachedTextures.clear()\n        }\n    }\n\n    fun bindFramebuffer(dc: DrawContext): Boolean {\n        if (!framebufferName.isValid()) createFramebuffer(dc)\n        if (framebufferName.isValid()) dc.bindFramebuffer(framebufferName)\n        return framebufferName.isValid()\n    }\n\n    fun attachTexture(dc: DrawContext, texture: Texture, attachment: Int): Boolean {\n        if (!framebufferName.isValid()) createFramebuffer(dc)\n        if (framebufferName.isValid()) {\n            framebufferTexture(dc, texture, attachment)\n            attachedTextures[attachment] = texture\n        }\n        return framebufferName.isValid()\n    }\n\n    fun getAttachedTexture(attachment: Int) = attachedTextures[attachment] ?: error(\"Invalid attachment type\")\n\n    fun isFramebufferComplete(dc: DrawContext) = framebufferStatus(dc) == GL_FRAMEBUFFER_COMPLETE\n\n    protected open fun createFramebuffer(dc: DrawContext) {\n        val currentFramebuffer = dc.currentFramebuffer\n        try {\n            // Create the OpenGL framebuffer object.\n            framebufferName = dc.gl.createFramebuffer()\n            dc.gl.bindFramebuffer(GL_FRAMEBUFFER, framebufferName)\n        } finally {\n            // Restore the current OpenGL framebuffer object binding.\n            dc.gl.bindFramebuffer(GL_FRAMEBUFFER, currentFramebuffer)\n        }\n    }\n\n    protected open fun deleteFramebuffer(dc: DrawContext) {\n        dc.gl.deleteFramebuffer(framebufferName)\n        framebufferName = KglFramebuffer.NONE\n    }\n\n    protected open fun framebufferTexture(dc: DrawContext, texture: Texture?, attachment: Int) {\n        val currentFramebuffer = dc.currentFramebuffer\n        try {\n            // Make the OpenGL framebuffer object the currently active framebuffer.\n            dc.bindFramebuffer(framebufferName)\n            // Attach the texture to the framebuffer object, or remove the attachment if the texture is null.\n            val textureName = texture?.getTextureName(dc) ?: KglTexture.NONE\n            dc.gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, GL_TEXTURE_2D, textureName, 0 /*level*/)\n        } finally {\n            // Restore the current OpenGL framebuffer object binding.\n            dc.bindFramebuffer(currentFramebuffer)\n        }\n    }\n\n    protected open fun framebufferStatus(dc: DrawContext): Int {\n        val currentFramebuffer = dc.currentFramebuffer\n        return try {\n            // Make the OpenGL framebuffer object the currently active framebuffer.\n            dc.bindFramebuffer(framebufferName)\n            // Get the OpenGL framebuffer object status code.\n            dc.gl.checkFramebufferStatus(GL_FRAMEBUFFER)\n        } finally {\n            // Restore the current OpenGL framebuffer object binding.\n            dc.bindFramebuffer(currentFramebuffer)\n        }\n    }\n}","package earth.worldwind.render\n\nimport earth.worldwind.PickedObject\nimport earth.worldwind.PickedObjectList\nimport earth.worldwind.draw.Drawable\nimport earth.worldwind.draw.DrawableGroup\nimport earth.worldwind.draw.DrawableQueue\nimport earth.worldwind.draw.DrawableTerrain\nimport earth.worldwind.geom.*\nimport earth.worldwind.geom.AltitudeMode.*\nimport earth.worldwind.globe.Globe\nimport earth.worldwind.globe.terrain.Terrain\nimport earth.worldwind.globe.terrain.Tessellator\nimport earth.worldwind.layer.Layer\nimport earth.worldwind.layer.LayerList\nimport earth.worldwind.render.buffer.AbstractBufferObject\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.render.program.AbstractShaderProgram\nimport earth.worldwind.shape.TextAttributes\nimport earth.worldwind.util.Pool\nimport earth.worldwind.util.SynchronizedPool\nimport earth.worldwind.util.glu.GLU\nimport earth.worldwind.util.glu.GLUtessellator\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlin.math.tan\n\nopen class RenderContext {\n    companion object {\n        private const val MAX_PICKED_OBJECT_ID = 0xFFFFFF\n    }\n\n    var globe: Globe? = null\n    var terrainTessellator: Tessellator? = null\n    var terrain: Terrain? = null\n    var layers: LayerList? = null\n    var currentLayer: Layer? = null\n    var verticalExaggeration = 1.0\n    var horizonDistance = 0.0\n    var camera: Camera? = null\n    var cameraPoint = Vec3()\n    val viewport = Viewport()\n    val projection = Matrix4()\n    val modelview = Matrix4()\n    val modelviewProjection = Matrix4()\n    val frustum = Frustum()\n    var renderResourceCache: RenderResourceCache? = null\n    var densityFactor = 1f\n    var drawableQueue: DrawableQueue? = null\n    var drawableTerrain: DrawableQueue? = null\n    var pickedObjects: PickedObjectList? = null\n    var pickDeferred: CompletableDeferred<PickedObjectList>? = null\n    var pickViewport: Viewport? = null\n    var pickPoint: Vec2? = null\n    var pickRay: Line? = null\n    var isPickMode = false\n    var isRedrawRequested = false\n        protected set\n    private var pickedObjectId = 0\n    private var pixelSizeFactor = 0.0\n    private val userProperties = mutableMapOf<Any, Any>()\n    val drawablePools = mutableMapOf<Any, Pool<*>>()\n    private val textRenderer = TextRenderer(this)\n    private val scratchTextCacheKey = TextCacheKey()\n    private val scratchVector = Vec3()\n\n    val tessellator: GLUtessellator by lazy { GLU.gluNewTess() }\n\n    open fun reset() {\n        globe = null\n        terrainTessellator = null\n        terrain = null\n        layers = null\n        currentLayer = null\n        verticalExaggeration = 1.0\n        horizonDistance = 0.0\n        camera = null\n        cameraPoint.set(0.0, 0.0, 0.0)\n        viewport.setEmpty()\n        projection.setToIdentity()\n        modelview.setToIdentity()\n        modelviewProjection.setToIdentity()\n        frustum.setToUnitFrustum()\n        renderResourceCache = null\n        densityFactor = 1f\n        drawableQueue = null\n        drawableTerrain = null\n        pickedObjects = null\n        pickDeferred = null\n        pickViewport = null\n        pickPoint = null\n        pickRay = null\n        isPickMode = false\n        pickedObjectId = 0\n        isRedrawRequested = false\n        pixelSizeFactor = 0.0\n        userProperties.clear()\n    }\n\n    fun requestRedraw() { isRedrawRequested = true }\n\n    /**\n     * Returns the height of a pixel at a given distance from the eye point. This method assumes the model of a screen\n     * composed of rectangular pixels, where pixel coordinates denote infinitely thin space between pixels. The units of\n     * the returned size are in meters per pixel.\n     * <br>\n     * The result of this method is undefined if the distance is negative.\n     *\n     * @param distance the distance from the eye point in meters\n     *\n     * @return the pixel height in meters per pixel\n     */\n    fun pixelSizeAtDistance(distance: Double): Double {\n        if (pixelSizeFactor == 0.0) { // cache the scaling factor used to convert distances to pixel sizes\n            val fov = camera!!.fieldOfView\n            val tanFov2 = tan(fov.inRadians * 0.5)\n            pixelSizeFactor = 2 * tanFov2 / viewport.height\n        }\n        return distance * pixelSizeFactor\n    }\n\n    /**\n     * Projects a Cartesian point to screen coordinates. The resultant screen point is in OpenGL screen coordinates,\n     * with the origin in the bottom-left corner and axes that extend up and to the right from the origin.\n     * <br>\n     * This stores the projected point in the result argument, and returns a boolean value indicating whether or not the\n     * projection is successful. This returns false if the Cartesian point is clipped by the near clipping plane or the\n     * far clipping plane.\n     *\n     * @param modelPoint the Cartesian point to project\n     * @param result     a pre-allocated [Vec3] in which to return the projected point\n     *\n     * @return true if the transformation is successful, otherwise false\n     */\n    fun project(modelPoint: Vec3, result: Vec3): Boolean {\n        // TODO consider consolidating this with Matrix4.project and moving projectWithDepth to Matrix4\n        // Transform the model point from model coordinates to eye coordinates then to clip coordinates. This\n        // inverts the Z axis and stores the negative of the eye coordinate Z value in the W coordinate.\n        val mx = modelPoint.x\n        val my = modelPoint.y\n        val mz = modelPoint.z\n        val m = modelviewProjection.m\n        var x = m[0] * mx + m[1] * my + m[2] * mz + m[3]\n        var y = m[4] * mx + m[5] * my + m[6] * mz + m[7]\n        var z = m[8] * mx + m[9] * my + m[10] * mz + m[11]\n        val w = m[12] * mx + m[13] * my + m[14] * mz + m[15]\n        if (w == 0.0) return false\n\n        // Complete the conversion from model coordinates to clip coordinates by dividing by W. The resultant X, Y\n        // and Z coordinates are in the range [-1,1].\n        x /= w\n        y /= w\n        z /= w\n\n        // Clip the point against the near and far clip planes.\n        if (z < -1 || z > 1) return false\n\n        // Convert the point from clip coordinate to the range [0,1]. This enables the X and Y coordinates to be\n        // converted to screen coordinates, and the Z coordinate to represent a depth value in the range[0,1].\n        x = x * 0.5 + 0.5\n        y = y * 0.5 + 0.5\n        z = z * 0.5 + 0.5\n\n        // Convert the X and Y coordinates from the range [0,1] to screen coordinates.\n        x = x * viewport.width + viewport.x\n        y = y * viewport.height + viewport.y\n        result.x = x\n        result.y = y\n        result.z = z\n        return true\n    }\n\n    /**\n     * Projects a Cartesian point to screen coordinates, applying an offset to the point's projected depth value. The\n     * resultant screen point is in OpenGL screen coordinates, with the origin in the bottom-left corner and axes that\n     * extend up and to the right from the origin.\n     * <br>\n     * This stores the projected point in the result argument, and returns a boolean value indicating whether or not the\n     * projection is successful. This returns false if the Cartesian point is clipped by the near clipping plane or the\n     * far clipping plane.\n     * <br>\n     * The depth offset may be any real number and is typically used to move the screenPoint slightly closer to the\n     * user's eye in order to give it visual priority over nearby objects or terrain. An offset of zero has no effect.\n     * An offset less than zero brings the screenPoint closer to the eye, while an offset greater than zero pushes the\n     * projected screen point away from the eye.\n     * <br>\n     * Applying a non-zero depth offset has no effect on whether the model point is clipped by this method or by WebGL.\n     * Clipping is performed on the original model point, ignoring the depth offset. The final depth value after\n     * applying the offset is clamped to the range [0,1].\n     *\n     * @param modelPoint  the Cartesian point to project\n     * @param depthOffset the amount of depth offset to apply\n     * @param result      a pre-allocated [Vec3] in which to return the projected point\n     *\n     * @return true if the transformation is successful, otherwise false\n     */\n    fun projectWithDepth(modelPoint: Vec3, depthOffset: Double, result: Vec3): Boolean {\n        // Transform the model point from model coordinates to eye coordinates. The eye coordinate and the clip\n        // coordinate are transformed separately in order to reuse the eye coordinate below.\n        val mx = modelPoint.x\n        val my = modelPoint.y\n        val mz = modelPoint.z\n        val m = modelview.m\n        val ex = m[0] * mx + m[1] * my + m[2] * mz + m[3]\n        val ey = m[4] * mx + m[5] * my + m[6] * mz + m[7]\n        val ez = m[8] * mx + m[9] * my + m[10] * mz + m[11]\n        val ew = m[12] * mx + m[13] * my + m[14] * mz + m[15]\n\n        // Transform the point from eye coordinates to clip coordinates.\n        val p = projection.m\n        var x = p[0] * ex + p[1] * ey + p[2] * ez + p[3] * ew\n        var y = p[4] * ex + p[5] * ey + p[6] * ez + p[7] * ew\n        var z = p[8] * ex + p[9] * ey + p[10] * ez + p[11] * ew\n        val w = p[12] * ex + p[13] * ey + p[14] * ez + p[15] * ew\n        if (w == 0.0) return false\n\n        // Complete the conversion from model coordinates to clip coordinates by dividing by W. The resultant X, Y\n        // and Z coordinates are in the range [-1,1].\n        x /= w\n        y /= w\n        z /= w\n\n        // Clip the point against the near and far clip planes.\n        if (z < -1 || z > 1) return false\n\n        // Transform the Z eye coordinate to clip coordinates again, this time applying a depth offset. The depth\n        // offset is applied only to the matrix element affecting the projected Z coordinate, so we inline the\n        // computation here instead of re-computing X, Y, Z and W in order to improve performance. See\n        // Matrix4.offsetProjectionDepth for more information on the effect of this offset.\n        z = p[8] * ex + p[9] * ey + p[10] * ez * (1 + depthOffset) + p[11] * ew\n        z /= w\n\n        // Clamp the point to the near and far clip planes. We know the point's original Z value is contained within\n        // the clip planes, so we limit its offset z value to the range [-1, 1] in order to ensure it is not clipped\n        // by WebGL. In clip coordinates the near and far clip planes are perpendicular to the Z axis and are\n        // located at -1 and 1, respectively.\n        z = z.coerceIn(-1.0, 1.0)\n\n        // Convert the point from clip coordinates to the range [0, 1]. This enables the XY coordinates to be\n        // converted to screen coordinates, and the Z coordinate to represent a depth value in the range [0, 1].\n        x = x * 0.5 + 0.5\n        y = y * 0.5 + 0.5\n        z = z * 0.5 + 0.5\n\n        // Convert the X and Y coordinates from the range [0,1] to screen coordinates.\n        x = x * viewport.width + viewport.x\n        y = y * viewport.height + viewport.y\n        result.x = x\n        result.y = y\n        result.z = z\n        return true\n    }\n\n    /**\n     * Converts a geographic [Position] to Cartesian coordinates according to an [altitudeMode].\n     * The Cartesian coordinate system is a function of this render context's current globe and its terrain surface,\n     * depending on the altitude mode. In general, it is not safe to cache the Cartesian coordinates,\n     * as many factors contribute to the value returned, and may change from one frame to the next.\n     *\n     * @param position     the specified position\n     * @param altitudeMode an altitude mode indicating how to interpret the position's altitude component\n     * @param result       a pre-allocated [Vec3] in which to store the computed X, Y and Z Cartesian coordinates\n     *\n     * @return the result argument, set to the computed Cartesian coordinates\n     */\n    fun geographicToCartesian(\n        position: Position, altitudeMode: AltitudeMode, result: Vec3\n    ) = geographicToCartesian(position.latitude, position.longitude, position.altitude, altitudeMode, result)\n\n    /**\n     * Converts a geographic position to Cartesian coordinates according to an [altitudeMode].\n     * The Cartesian coordinate system is a function of this render context's current globe and its terrain surface,\n     * depending on the altitude mode. In general, it is not safe to cache the Cartesian coordinates,\n     * as many factors contribute to the value returned, and may change from one frame to the next.\n     *\n     * @param latitude     the position's latitude\n     * @param longitude    the position's longitude\n     * @param altitude     the position's altitude in meters\n     * @param altitudeMode an altitude mode indicating how to interpret the position's altitude component\n     * @param result       a pre-allocated [Vec3] in which to store the computed X, Y and Z Cartesian coordinates\n     *\n     * @return the result argument, set to the computed Cartesian coordinates\n     */\n    fun geographicToCartesian(\n        latitude: Angle, longitude: Angle, altitude: Double, altitudeMode: AltitudeMode, result: Vec3\n    ): Vec3 {\n        when (altitudeMode) {\n            ABSOLUTE -> globe?.geographicToCartesian(latitude, longitude, altitude * verticalExaggeration, result)\n            CLAMP_TO_GROUND -> if (terrain?.surfacePoint(latitude, longitude, result) != true) globe?.run {\n                // Use elevation model height as a fallback\n                val elevation = getElevation(latitude, longitude)\n                geographicToCartesian(latitude, longitude, elevation * verticalExaggeration, result)\n            }\n            RELATIVE_TO_GROUND -> if (terrain?.surfacePoint(latitude, longitude, result) == true) {\n                // Offset along the normal vector at the terrain surface point.\n                if (altitude != 0.0) globe?.geographicToCartesianNormal(latitude, longitude, scratchVector)?.also {\n                    result.add(scratchVector.multiply(altitude))\n                }\n            } else globe?.run {\n                // Use elevation model height as a fallback\n                val elevation = altitude + getElevation(latitude, longitude)\n                geographicToCartesian(latitude, longitude, elevation * verticalExaggeration, result)\n            }\n        }\n        return result\n    }\n\n    // TODO redesign ShaderProgram to operate as a resource accessible from DrawContext\n    // TODO created automatically on OpenGL thread, unless the caller wants to explicitly create a program\n    inline fun <reified T: AbstractShaderProgram> getShaderProgram(builder: () -> T): T {\n        val key = T::class\n        return renderResourceCache?.run{ get(key) ?: builder().also { put(key, it, it.programLength) } } as T\n    }\n\n    fun getTexture(imageSource: ImageSource, imageOptions: ImageOptions?, retrieve: Boolean = true) =\n        renderResourceCache?.run { get(imageSource) ?: if (retrieve) retrieveTexture(imageSource, imageOptions) else null } as Texture?\n\n    inline fun <reified T: AbstractBufferObject> getBufferObject(key: Any, builder: () -> T) =\n        renderResourceCache?.run{ get(key) ?: builder().also { put(key, it, it.byteCount) } } as T\n\n    fun getText(text: String?, attributes: TextAttributes, render: Boolean = true) = renderResourceCache?.run {\n        scratchTextCacheKey.text = text\n        scratchTextCacheKey.attributes = attributes\n        // Use scratch key on get operation to avoid unnecessary object creation on each text render on each frame\n        get(scratchTextCacheKey) as Texture? ?: if (render) textRenderer.renderText(text, attributes)?.also {\n            // Use new text cache key and copy attributes on put operation to avoid cache issues on attributes modification\n            put(TextCacheKey(text, TextAttributes(attributes)), it, it.byteCount)\n        } else null\n    }\n\n    fun offerDrawable(drawable: Drawable, groupId: DrawableGroup, order: Double) {\n        drawableQueue?.offerDrawable(drawable, groupId, order)\n    }\n\n    fun offerSurfaceDrawable(drawable: Drawable, zOrder: Double) {\n        drawableQueue?.offerDrawable(drawable, DrawableGroup.SURFACE, zOrder)\n    }\n\n    fun offerShapeDrawable(drawable: Drawable, cameraDistance: Double) {\n        drawableQueue?.offerDrawable(drawable, DrawableGroup.SHAPE, -cameraDistance) // order by descending distance to the viewer\n    }\n\n    fun offerDrawableTerrain(drawable: DrawableTerrain, sortOrder: Double) {\n        drawableTerrain?.offerDrawable(drawable, DrawableGroup.SURFACE, sortOrder)\n    }\n\n    fun sortDrawables() {\n        drawableQueue?.sortDrawables()\n        drawableTerrain?.sortDrawables()\n    }\n\n    val drawableCount get() = drawableQueue?.count ?: 0\n\n    @Suppress(\"UNCHECKED_CAST\")\n    inline fun <reified T : Drawable> getDrawablePool(): Pool<T> {\n        val key = T::class\n        // use SynchronizedPool; acquire and are release may be called in separate threads\n        return drawablePools[key] as Pool<T>? ?: SynchronizedPool<T>().also { drawablePools[key] = it }\n    }\n\n    fun offerPickedObject(pickedObject: PickedObject) { pickedObjects?.offerPickedObject(pickedObject) }\n\n    fun nextPickedObjectId(): Int {\n        if (++pickedObjectId > MAX_PICKED_OBJECT_ID) pickedObjectId = 1\n        return pickedObjectId\n    }\n\n    fun getUserProperty(key: Any) = userProperties[key]\n\n    fun putUserProperty(key: Any, value: Any) = userProperties.put(key, value)\n\n    fun removeUserProperty(key: Any) = userProperties.remove(key)\n\n    fun hasUserProperty(key: Any) = userProperties.containsKey(key)\n\n    protected data class TextCacheKey(\n        var text: String? = null,\n        var attributes: TextAttributes? = null\n    )\n}","package earth.worldwind.render\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.kgl.*\nimport earth.worldwind.util.math.powerOfTwoCeiling\n\nopen class Texture(val width: Int, val height: Int, protected val format: Int, protected val type: Int) : RenderResource {\n    companion object {\n        protected fun estimateByteCount(width: Int, height: Int, format: Int, type: Int, hasMipMap: Boolean): Int {\n            require(width >= 0 && height >= 0) {\n                logMessage(ERROR, \"Texture\", \"estimateByteCount\", \"invalidWidthOrHeight\")\n            }\n            // Compute the number of bytes per row of texture image level 0. Use a default of 32 bits per pixel when either\n            // of the bitmap's type or internal format are unrecognized. Adjust the width to the next highest power-of-two\n            // to better estimate the memory consumed by non power-of-two images.\n            val widthPow2 = powerOfTwoCeiling(width)\n            var bytesPerRow = widthPow2 * 4\n            when (type) {\n                GL_UNSIGNED_BYTE -> when (format) {\n                    GL_ALPHA, GL_LUMINANCE -> bytesPerRow = widthPow2 // 8 bits per pixel\n                    GL_RGB -> bytesPerRow = widthPow2 * 3 // 24 bits per pixel\n                    GL_RGBA -> bytesPerRow = widthPow2 * 4 // 32 bits per pixel\n                    GL_LUMINANCE_ALPHA -> bytesPerRow = widthPow2 * 2 // 16 bits per pixel\n                }\n                GL_UNSIGNED_INT -> bytesPerRow = widthPow2 * 4 // 32 bits per pixel\n                GL_UNSIGNED_SHORT, GL_UNSIGNED_SHORT_5_6_5,\n                GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_5_5_5_1 -> bytesPerRow = widthPow2 * 2 // 16 bits per pixel\n            }\n\n            // Compute the number of bytes for the entire texture image level 0 (i.e. bytePerRow * numRows). Adjust the\n            // height to the next highest power-of-two to better estimate the memory consumed by non power-of-two images.\n            val heightPow2 = powerOfTwoCeiling(height)\n            var byteCount = bytesPerRow * heightPow2\n\n            // If the texture will have mipmaps, add 1/3 to account for the bytes used by texture image level 1 through\n            // texture image level N.\n            if (hasMipMap) byteCount += byteCount / 3\n            return byteCount\n        }\n    }\n\n    val coordTransform = Matrix3()\n    val byteCount get() = estimateByteCount(width, height, format, type, hasMipMap)\n    protected var name = KglTexture.NONE\n    protected var parameters: MutableMap<Int, Int>? = null\n    protected open val hasMipMap = false\n    private var pickMode = false\n\n    fun getTexParameter(name: Int) = parameters?.get(name)?:0\n\n    fun setTexParameter(name: Int, param: Int) {\n        val parameters = parameters ?: mutableMapOf<Int, Int>().also { parameters = it }\n        parameters[name] = param\n    }\n\n    override fun release(dc: DrawContext) {\n        if (name.isValid()) deleteTexture(dc)\n    }\n\n    fun getTextureName(dc: DrawContext): KglTexture {\n        if (!name.isValid()) createTexture(dc)\n        return name\n    }\n\n    fun bindTexture(dc: DrawContext): Boolean {\n        if (!name.isValid()) createTexture(dc)\n        if (name.isValid()) dc.bindTexture(name)\n        if (name.isValid() && pickMode != dc.isPickMode) {\n            setTexParameters(dc)\n            pickMode = dc.isPickMode\n        }\n        return name.isValid()\n    }\n\n    protected open fun createTexture(dc: DrawContext) {\n        val currentTexture = dc.currentTexture\n        try {\n            // Create the OpenGL texture 2D object.\n            name = dc.gl.createTexture()\n            dc.gl.bindTexture(GL_TEXTURE_2D, name)\n\n            // Specify the texture object's image data\n            allocTexImage(dc)\n\n            // Configure the texture object's parameters.\n            setTexParameters(dc)\n        } finally {\n            // Restore the current OpenGL texture object binding.\n            dc.gl.bindTexture(GL_TEXTURE_2D, currentTexture)\n        }\n    }\n\n    protected open fun deleteTexture(dc: DrawContext) {\n        dc.gl.deleteTexture(name)\n        name = KglTexture.NONE\n    }\n\n    protected open fun allocTexImage(dc: DrawContext) {\n        // Allocate texture memory for the OpenGL texture 2D object. The texture memory is initialized with 0.\n        dc.gl.texImage2D(\n            GL_TEXTURE_2D, 0 /*level*/, format, width, height, 0 /*border*/, format, type, null /*pixels*/\n        )\n    }\n\n    // TODO refactor setTexParameters to apply all configured tex parameters\n    // TODO apply defaults only when no parameter is configured\n    // TODO consider simplifying the defaults and requiring that layers/shapes specify what they want\n    protected open fun setTexParameters(dc: DrawContext) {\n        var param: Int\n\n        // Configure the OpenGL texture minification function. Always use the nearest filtering function in picking mode.\n        when {\n            dc.isPickMode -> dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)\n            getTexParameter(GL_TEXTURE_MIN_FILTER).also { param = it } != 0 ->\n                dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, param)\n            else -> dc.gl.texParameteri(\n                GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, if (hasMipMap) GL_LINEAR_MIPMAP_LINEAR else GL_LINEAR\n            )\n        }\n\n        // Configure the OpenGL texture magnification function. Always use the nearest filtering function in picking mode.\n        when {\n            dc.isPickMode -> dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)\n            getTexParameter(GL_TEXTURE_MAG_FILTER).also { param = it } != 0 ->\n                dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, param)\n            else -> dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)\n        }\n\n        // Configure the OpenGL texture wrapping function for texture coordinate S. Default to the edge clamping\n        // function to render image tiles without seams.\n        if (getTexParameter(GL_TEXTURE_WRAP_S).also { param = it } != 0)\n            dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, param)\n        else dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE)\n\n        // Configure the OpenGL texture wrapping function for texture coordinate T. Default to the edge clamping\n        // function to render image tiles without seams.\n        if (getTexParameter(GL_TEXTURE_WRAP_T).also { param = it } != 0)\n            dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, param)\n        else dc.gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE)\n    }\n}","package earth.worldwind.render.buffer\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.geom.Range\nimport earth.worldwind.render.RenderResource\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.kgl.KglBuffer\n\nabstract class AbstractBufferObject(protected val target: Int, val byteCount: Int) : RenderResource {\n    val ranges = mutableMapOf<Int, Range>()\n    protected var id = KglBuffer.NONE\n\n    override fun release(dc: DrawContext) { deleteBufferObject(dc) }\n\n    open fun bindBuffer(dc: DrawContext): Boolean {\n        if (id.isValid()) dc.bindBuffer(target, id)\n        return id.isValid()\n    }\n\n    protected open fun loadBuffer(dc: DrawContext) {\n        val currentBuffer = dc.currentBuffer(target)\n        try {\n            // Create the OpenGL buffer object.\n            if (!id.isValid()) createBufferObject(dc)\n            // Make the OpenGL buffer object bound to the specified target.\n            dc.bindBuffer(target, id)\n            // Load the current NIO buffer as the OpenGL buffer object's data.\n            loadBufferObjectData(dc)\n        } catch (e: Exception) {\n            // The NIO buffer could not be used as buffer data for an OpenGL buffer object. Delete the buffer object\n            // to ensure that calls to bindBuffer fail.\n            deleteBufferObject(dc)\n            logMessage(\n                ERROR, \"BufferObject\", \"loadBuffer\", \"Exception attempting to load buffer data\", e\n            )\n        } finally {\n            // Restore the current OpenGL buffer object binding.\n            dc.bindBuffer(target, currentBuffer)\n        }\n    }\n\n    protected open fun createBufferObject(dc: DrawContext) { id = dc.gl.createBuffer() }\n\n    protected open fun deleteBufferObject(dc: DrawContext) {\n        if (id.isValid()) {\n            dc.gl.deleteBuffer(id)\n            id = KglBuffer.NONE\n        }\n    }\n\n    protected abstract fun loadBufferObjectData(dc: DrawContext)\n}","package earth.worldwind.render.buffer\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.util.kgl.GL_STATIC_DRAW\n\nopen class FloatBufferObject(target: Int, array: FloatArray, size: Int = array.size) : AbstractBufferObject(target, size * 4) {\n    protected var array: FloatArray? = array\n\n    override fun release(dc: DrawContext) {\n        super.release(dc)\n        array = null // array can be non-null if the object has not been bound\n    }\n\n    override fun bindBuffer(dc: DrawContext): Boolean {\n        array?.let{ loadBuffer(dc) }.also { array = null }\n        return super.bindBuffer(dc)\n    }\n\n    override fun loadBufferObjectData(dc: DrawContext) {\n        array?.let { dc.gl.bufferData(target, byteCount, it, GL_STATIC_DRAW) }\n    }\n}","package earth.worldwind.render.buffer\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.util.kgl.GL_STATIC_DRAW\n\nopen class ShortBufferObject(target: Int, array: ShortArray, size: Int = array.size) : AbstractBufferObject(target, size * 2) {\n    protected var array: ShortArray? = array\n\n    override fun release(dc: DrawContext) {\n        super.release(dc)\n        array = null // array can be non-null if the object has not been bound\n    }\n\n    override fun bindBuffer(dc: DrawContext): Boolean {\n        array?.let{ loadBuffer(dc) }.also { array = null }\n        return super.bindBuffer(dc)\n    }\n\n    override fun loadBufferObjectData(dc: DrawContext) {\n        array?.let { dc.gl.bufferData(target, byteCount, it, GL_STATIC_DRAW) }\n    }\n}","package earth.worldwind.render.image\n\nimport kotlin.jvm.JvmOverloads\n\n/**\n * Options for images displayed by WorldWind components.\n */\nopen class ImageOptions @JvmOverloads constructor(\n    /**\n     * Indicates the in-memory configuration for images displayed by WorldWind components. By default, images are\n     * represented in the 32-bit RGBA_8888 configuration, the highest quality available. Components that do not require\n     * an alpha channel and want to conserve memory may use the 16-bit RGBA_565 configuration. Accepted values are\n     * [ImageConfig.RGBA_8888] and [ImageConfig.RGB_565].\n     */\n    var imageConfig: ImageConfig = ImageConfig.RGBA_8888\n) {\n    /**\n     * Indicates the image sampling algorithm used by WorldWind to display images that appear larger or smaller on\n     * screen than their native resolution. Accepted values are [ResamplingMode.BILINEAR] and [ResamplingMode.NEAREST_NEIGHBOR].\n     */\n    var resamplingMode = ResamplingMode.BILINEAR\n    /**\n     * Indicates how WorldWind displays the contents of an image when attempting to draw a region outside of the image\n     * bounds. Accepted values are [WrapMode.CLAMP] and [WrapMode.REPEAT].\n     */\n    var wrapMode = WrapMode.CLAMP\n    /**\n     * Initial width for image that has no dimensions (e.g. SVG image)\n     */\n    var initialWidth = 0\n    /**\n     * Initial height for image that has no dimensions (e.g. SVG image)\n     */\n    var initialHeight = 0\n}","package earth.worldwind.render.program\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.render.RenderResource\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.kgl.*\n\n/**\n * Represents an OpenGL shading language (GLSL) shader program and provides methods for identifying and accessing shader\n * variables. Shader programs are configured by calling `setProgramSources` to specify the the GLSL vertex\n * shader and fragment shader source code, then made current by calling `useProgram`.\n */\nabstract class AbstractShaderProgram: RenderResource {\n    companion object {\n        protected const val VERTEX_SHADER = 0\n        protected const val FRAGMENT_SHADER = 1\n    }\n\n    protected abstract var programSources: Array<String>\n    protected abstract val attribBindings: Array<String>\n    protected lateinit var gl : Kgl\n        private set\n    /**\n     * Indicates the approximate size of the OpenGL resources referenced by this GPU program.\n     */\n    val programLength get() = programSources.sumOf{str -> str.length}\n\n    /**\n     * Indicates the OpenGL program object associated with this GPU program.\n     */\n    protected var program = KglProgram.NONE\n    protected var mustBuildProgram = true\n\n    override fun release(dc: DrawContext) = deleteProgram(dc)\n\n    fun useProgram(dc: DrawContext): Boolean {\n        if (mustBuildProgram) {\n            // Clear the program's build dirty bit.\n            mustBuildProgram = false\n\n            // Remove any existing GLSL program.\n            if (program.isValid()) deleteProgram(dc)\n\n            // Compile and link the GLSL program sources.\n            buildProgram(dc)\n\n            // Free memory, occupied by program sources\n            programSources = emptyArray()\n\n            // Give subclasses an opportunity to initialize default GLSL uniform values.\n            if (program.isValid()) {\n                val currentProgram = dc.currentProgram\n                try {\n                    dc.useProgram(program)\n                    initProgram(dc)\n                } finally {\n                    dc.useProgram(currentProgram)\n                }\n            }\n        }\n        if (program.isValid()) dc.useProgram(program)\n        return program.isValid()\n    }\n\n    protected open fun buildProgram(dc: DrawContext) {\n        val vs = dc.gl.createShader(GL_VERTEX_SHADER)\n        dc.gl.shaderSource(vs, programSources[VERTEX_SHADER])\n        dc.gl.compileShader(vs)\n        if (dc.gl.getShaderParameteri(vs, GL_COMPILE_STATUS) != GL_TRUE) {\n            val msg = dc.gl.getShaderInfoLog(vs)\n            dc.gl.deleteShader(vs)\n            logMessage(\n                ERROR, \"ShaderProgram\", \"buildProgram\", \"Error compiling GL vertex shader \\n$msg\"\n            )\n            return\n        }\n        val fs = dc.gl.createShader(GL_FRAGMENT_SHADER)\n        dc.gl.shaderSource(fs, programSources[FRAGMENT_SHADER])\n        dc.gl.compileShader(fs)\n\n        if (dc.gl.getShaderParameteri(vs, GL_COMPILE_STATUS) != GL_TRUE) {\n            val msg = dc.gl.getShaderInfoLog(fs)\n            dc.gl.deleteShader(vs)\n            dc.gl.deleteShader(fs)\n            logMessage(\n                ERROR, \"ShaderProgram\", \"buildProgram\", \"Error compiling GL fragment shader \\n$msg\"\n            )\n            return\n        }\n        val program = dc.gl.createProgram()\n        dc.gl.attachShader(program, vs)\n        dc.gl.attachShader(program, fs)\n        for (i in attribBindings.indices) dc.gl.bindAttribLocation(program, i, attribBindings[i])\n        dc.gl.linkProgram(program)\n        dc.gl.deleteShader(vs)\n        dc.gl.deleteShader(fs)\n        if (dc.gl.getProgramParameteri(program, GL_LINK_STATUS) != GL_TRUE) {\n            val msg = dc.gl.getProgramInfoLog(program)\n            dc.gl.deleteProgram(program)\n            logMessage(ERROR, \"ShaderProgram\", \"buildProgram\", \"Error linking GL program \\n$msg\")\n            return\n        }\n        this.program = program\n    }\n\n    protected open fun initProgram(dc: DrawContext) { gl = dc.gl }\n\n    protected open fun deleteProgram(dc: DrawContext) {\n        if (program.isValid()) {\n            dc.gl.deleteProgram(program)\n            program = KglProgram.NONE\n        }\n    }\n}","package earth.worldwind.render.program\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.Color\nimport earth.worldwind.util.kgl.KglUniformLocation\n\nopen class BasicShaderProgram : AbstractShaderProgram() {\n    override var programSources = arrayOf(\n        \"\"\"\n            uniform bool enableTexture;\n            uniform mat4 mvpMatrix;\n            uniform mat3 texCoordMatrix;\n\n            attribute vec4 vertexPoint;\n            attribute vec2 vertexTexCoord;\n\n            varying vec2 texCoord;\n\n            void main() {\n                /* Transform the vertex position by the modelview-projection matrix. */\n                gl_Position = mvpMatrix * vertexPoint;\n\n                /* Transform the vertex tex coord by the tex coord matrix. */\n                if (enableTexture) {\n                    texCoord = (texCoordMatrix * vec3(vertexTexCoord, 1.0)).st;\n                }\n            }\n        \"\"\".trimIndent(),\n        \"\"\"\n            precision mediump float;\n\n            uniform bool enablePickMode;\n            uniform bool enableTexture;\n            uniform vec4 color;\n            uniform sampler2D texSampler;\n\n            varying vec2 texCoord;\n\n            void main() {\n                /* TODO consolidate pickMode and enableTexture into a single textureMode */\n                /* TODO it's confusing that pickMode must be disabled during surface shape render-to-texture */\n                if (enablePickMode && enableTexture) {\n                    /* Modulate the RGBA color with the 2D texture's Alpha component (rounded to 0.0 or 1.0). */\n                    float texMask = floor(texture2D(texSampler, texCoord).a + 0.5);\n                    gl_FragColor = color * texMask;\n                } else if (!enablePickMode && enableTexture) {\n                    /* Modulate the RGBA color with the 2D texture's RGBA color. */\n                    gl_FragColor = color * texture2D(texSampler, texCoord);\n                } else {\n                    /* Return the RGBA color as-is. */\n                    gl_FragColor = color;\n                }\n            }\n        \"\"\".trimIndent()\n    )\n    override val attribBindings = arrayOf(\"vertexPoint\", \"vertexTexCoord\")\n\n    protected var enablePickMode = false\n    protected var enableTexture = false\n    protected val mvpMatrix = Matrix4()\n    protected val texCoordMatrix = Matrix3()\n    protected val color = Color()\n    protected var enablePickModeId = KglUniformLocation.NONE\n    protected var enableTextureId = KglUniformLocation.NONE\n    protected var mvpMatrixId = KglUniformLocation.NONE\n    protected var texCoordMatrixId = KglUniformLocation.NONE\n    protected var texSamplerId = KglUniformLocation.NONE\n    protected var colorId = KglUniformLocation.NONE\n    private val array = FloatArray(16)\n\n    override fun initProgram(dc: DrawContext) {\n        super.initProgram(dc)\n        enablePickModeId = gl.getUniformLocation(program, \"enablePickMode\")\n        gl.uniform1i(enablePickModeId, if (enablePickMode) 1 else 0)\n        enableTextureId = gl.getUniformLocation(program, \"enableTexture\")\n        gl.uniform1i(enableTextureId, if (enableTexture) 1 else 0)\n        mvpMatrixId = gl.getUniformLocation(program, \"mvpMatrix\")\n        mvpMatrix.transposeToArray(array, 0) // 4 x 4 identity matrix\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, array, 0)\n        texCoordMatrixId = gl.getUniformLocation(program, \"texCoordMatrix\")\n        texCoordMatrix.transposeToArray(array, 0) // 3 x 3 identity matrix\n        gl.uniformMatrix3fv(texCoordMatrixId, 1, false, array, 0)\n        colorId = gl.getUniformLocation(program, \"color\")\n        val alpha = color.alpha\n        gl.uniform4f(colorId, color.red * alpha, color.green * alpha, color.blue * alpha, alpha)\n        texSamplerId = gl.getUniformLocation(program, \"texSampler\")\n        gl.uniform1i(texSamplerId, 0) // GL_TEXTURE0\n    }\n\n    fun enablePickMode(enable: Boolean) {\n        if (enablePickMode != enable) {\n            enablePickMode = enable\n            gl.uniform1i(enablePickModeId, if (enable) 1 else 0)\n        }\n    }\n\n    fun enableTexture(enable: Boolean) {\n        if (enableTexture != enable) {\n            enableTexture = enable\n            gl.uniform1i(enableTextureId, if (enable) 1 else 0)\n        }\n    }\n\n    fun loadModelviewProjection(matrix: Matrix4) {\n        // Don't bother testing whether mvpMatrix has changed, the common case is to load a different matrix.\n        matrix.transposeToArray(array, 0)\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, array, 0)\n    }\n\n    fun loadTexCoordMatrix(matrix: Matrix3) {\n        if (texCoordMatrix != matrix) {\n            texCoordMatrix.copy(matrix)\n            matrix.transposeToArray(array, 0)\n            gl.uniformMatrix3fv(texCoordMatrixId, 1, false, array, 0)\n        }\n    }\n\n    fun loadColor(color: Color) {\n        if (this.color != color) {\n            this.color.copy(color)\n            val alpha = color.alpha\n            gl.uniform4f(colorId, color.red * alpha, color.green * alpha, color.blue * alpha, alpha)\n        }\n    }\n}","package earth.worldwind.render.program\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.Color\nimport earth.worldwind.util.kgl.KglUniformLocation\n\nopen class SightlineProgram : AbstractShaderProgram() {\n    override var programSources = arrayOf(\n        \"\"\"\n            uniform mat4 mvpMatrix;\n            uniform mat4 slpMatrix[2];\n\n            attribute vec4 vertexPoint;\n\n            varying vec4 sightlinePosition;\n            varying float sightlineDistance;\n\n            void main() {\n                /* Transform the vertex position by the modelview-projection matrix. */\n                gl_Position = mvpMatrix * vertexPoint;\n\n                /* Transform the vertex position by the sightline-projection matrix. */\n                vec4 sightlineEyePosition = slpMatrix[1] * vertexPoint;\n                sightlinePosition = slpMatrix[0] * sightlineEyePosition;\n                sightlineDistance = length(sightlineEyePosition);\n            }\n        \"\"\".trimIndent(),\n        \"\"\"\n            #ifdef GL_FRAGMENT_PRECISION_HIGH\n            precision highp float;\n            uniform highp sampler2D depthSampler;\n            #else\n            precision mediump float;\n            uniform mediump sampler2D depthSampler;\n            #endif\n\n            uniform float range;\n            uniform vec4 color[2];\n\n            varying vec4 sightlinePosition;\n            varying float sightlineDistance;\n\n            const vec3 minusOne = vec3(-1.0, -1.0, -1.0);\n            const vec3 plusOne = vec3(1.0, 1.0, 1.0);\n\n            void main() {\n                /* Compute a mask that's on when the position is inside the occlusion projection, and off otherwise. Transform the\n                   position to clip coordinates, where values between -1.0 and 1.0 are in the frustum. */\n                vec3 clipCoord = sightlinePosition.xyz / sightlinePosition.w;\n                vec3 clipCoordMask = step(minusOne, clipCoord) * step(clipCoord, plusOne);\n                float clipMask = clipCoordMask.x * clipCoordMask.y * clipCoordMask.z;\n\n                /* Compute a mask that's on when the position is inside the sightline's range, and off otherwise.*/\n                float rangeMask = step(sightlineDistance, range);\n\n                /* Compute a mask that's on when the object's depth is less than the sightline's depth. The depth texture contains\n                   the scene's minimum depth at each position, from the sightline's point of view. */\n                vec3 sightlineCoord = clipCoord * 0.5 + 0.5;\n                float sightlineDepth = texture2D(depthSampler, sightlineCoord.xy).r;\n                float occludeMask = step(sightlineDepth, sightlineCoord.z);\n\n                /* Modulate the RGBA color with the computed masks to display fragments according to the sightline's configuration. */\n                gl_FragColor = mix(color[0], color[1], occludeMask) * clipMask * rangeMask;\n            }\n        \"\"\".trimIndent()\n    )\n    override val attribBindings = arrayOf(\"vertexPoint\")\n\n    protected var mvpMatrixId = KglUniformLocation.NONE\n    protected var slpMatrixId = KglUniformLocation.NONE\n    protected var rangeId = KglUniformLocation.NONE\n    protected var depthSamplerId = KglUniformLocation.NONE\n    protected var colorId = KglUniformLocation.NONE\n    private val array = FloatArray(32)\n\n    override fun initProgram(dc: DrawContext) {\n        super.initProgram(dc)\n        mvpMatrixId = gl.getUniformLocation(program, \"mvpMatrix\")\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, array, 0)\n        slpMatrixId = gl.getUniformLocation(program, \"slpMatrix\")\n        gl.uniformMatrix4fv(slpMatrixId, 2, false, array, 0)\n        rangeId = gl.getUniformLocation(program, \"range\")\n        gl.uniform1f(rangeId, 0f)\n        colorId = gl.getUniformLocation(program, \"color\")\n        gl.uniform4f(colorId, 1f, 1f, 1f, 1f)\n        depthSamplerId = gl.getUniformLocation(program, \"depthSampler\")\n        gl.uniform1i(depthSamplerId, 0) // GL_TEXTURE0\n    }\n\n    fun loadModelviewProjection(matrix: Matrix4) {\n        matrix.transposeToArray(array, 0)\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, array, 0)\n    }\n\n    fun loadSightlineProjection(projection: Matrix4, sightline: Matrix4) {\n        projection.transposeToArray(array, 0)\n        sightline.transposeToArray(array, 16)\n        gl.uniformMatrix4fv(slpMatrixId, 2, false, array, 0)\n    }\n\n    fun loadRange(range: Float) {\n        gl.uniform1f(rangeId, range)\n    }\n\n    fun loadColor(visibleColor: Color, occludedColor: Color) {\n        visibleColor.premultiplyToArray(array, 0)\n        occludedColor.premultiplyToArray(array, 4)\n        gl.uniform4fv(colorId, 2, array, 0)\n    }\n}","package earth.worldwind.render.program\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.render.Color\nimport earth.worldwind.util.kgl.KglUniformLocation\n\n// TODO Try accumulating surface tile state (texCoordMatrix, texSampler), loading uniforms once, then loading a uniform\n// TODO index to select the state for a surface tile. This reduces the uniform calls when many surface tiles intersect\n// TODO one terrain tile.\n// TODO Try class representing transform with a specific scale+translate object that can be uploaded to a GLSL vec4\nopen class SurfaceTextureProgram : AbstractShaderProgram() {\n    override var programSources = arrayOf(\n        \"\"\"\n            uniform bool enableTexture;\n            uniform mat4 mvpMatrix;\n            uniform mat3 texCoordMatrix[2];\n\n            attribute vec4 vertexPoint;\n            attribute vec2 vertexTexCoord;\n\n            varying vec2 texCoord;\n            varying vec2 tileCoord;\n\n            void main() {\n                /* Transform the vertex position by the modelview-projection matrix. */\n                gl_Position = mvpMatrix * vertexPoint;\n\n                /* Transform the vertex tex coord by the tex coord matrices. */\n                if (enableTexture) {\n                    vec3 texCoord3 = vec3(vertexTexCoord, 1.0);\n                    texCoord = (texCoordMatrix[0] * texCoord3).st;\n                    tileCoord = (texCoordMatrix[1] * texCoord3).st;\n                }\n            }\n        \"\"\".trimIndent(),\n        \"\"\"\n            #ifdef GL_FRAGMENT_PRECISION_HIGH\n            precision highp float;\n            #else\n            precision mediump float;\n            #endif\n\n            uniform bool enablePickMode;\n            uniform bool enableTexture;\n            uniform vec4 color;\n            uniform sampler2D texSampler;\n\n            varying vec2 texCoord;\n            varying vec2 tileCoord;\n\n            void main() {\n                /* Using the second texture coordinate, compute a mask that's 1.0 when the fragment is inside the surface tile, and\n                   0.0 otherwise. */\n                float sMask = step(0.0, tileCoord.s) * step(0.0, 1.0 - tileCoord.s);\n                float tMask = step(0.0, tileCoord.t) * step(0.0, 1.0 - tileCoord.t);\n                float tileMask = sMask * tMask;\n\n                if (enablePickMode && enableTexture) {\n                    /* Using the first texture coordinate, modulate the RGBA color with the 2D texture's Alpha component (rounded to\n                       0.0 or 1.0). Finally, modulate the result by the tile mask to suppress fragments outside the surface tile. */\n                    float texMask = floor(texture2D(texSampler, texCoord).a + 0.5);\n                    gl_FragColor = color * texMask * tileMask;\n                } else if (!enablePickMode && enableTexture) {\n                    /* Using the first texture coordinate, modulate the RGBA color with the 2D texture's RGBA color. Finally,\n                       modulate by the tile mask to suppress fragments outside the surface tile. */\n                    gl_FragColor = color * texture2D(texSampler, texCoord) * tileMask;\n                } else {\n                    /* Modulate the RGBA color by the tile mask to suppress fragments outside the surface tile. */\n                    gl_FragColor = color * tileMask;\n                }\n            }\n        \"\"\".trimIndent()\n    )\n    override val attribBindings = arrayOf(\"vertexPoint\", \"vertexTexCoord\")\n\n    val mvpMatrix = Matrix4()\n    val texCoordMatrix = arrayOf(Matrix3(), Matrix3())\n    protected var enablePickModeId = KglUniformLocation.NONE\n    protected var enableTextureId = KglUniformLocation.NONE\n    protected var mvpMatrixId = KglUniformLocation.NONE\n    protected var texCoordMatrixId = KglUniformLocation.NONE\n    protected var texSamplerId = KglUniformLocation.NONE\n    protected var colorId = KglUniformLocation.NONE\n    private val mvpMatrixArray = FloatArray(16)\n    private val texCoordMatrixArray = FloatArray(9 * 2)\n    private val color = Color()\n\n    override fun initProgram(dc: DrawContext) {\n        super.initProgram(dc)\n        enablePickModeId = gl.getUniformLocation(program, \"enablePickMode\")\n        gl.uniform1i(enablePickModeId, 0) // disable pick mode\n        enableTextureId = gl.getUniformLocation(program, \"enableTexture\")\n        gl.uniform1i(enableTextureId, 0) // disable texture\n        mvpMatrixId = gl.getUniformLocation(program, \"mvpMatrix\")\n        Matrix4().transposeToArray(mvpMatrixArray, 0) // 4 x 4 identity matrix\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, mvpMatrixArray, 0)\n        texCoordMatrixId = gl.getUniformLocation(program, \"texCoordMatrix\")\n        Matrix3().transposeToArray(texCoordMatrixArray, 0) // 3 x 3 identity matrix\n        Matrix3().transposeToArray(texCoordMatrixArray, 9) // 3 x 3 identity matrix\n        gl.uniformMatrix3fv(texCoordMatrixId, 2, false, texCoordMatrixArray, 0)\n        colorId = gl.getUniformLocation(program, \"color\")\n        color.set(1f, 1f, 1f, 1f) // opaque white\n        gl.uniform4f(colorId, color.red, color.green, color.blue, color.alpha)\n        texSamplerId = gl.getUniformLocation(program, \"texSampler\")\n        gl.uniform1i(texSamplerId, 0) // GL_TEXTURE0\n    }\n\n    fun enablePickMode(enable: Boolean) { gl.uniform1i(enablePickModeId, if (enable) 1 else 0) }\n\n    fun enableTexture(enable: Boolean) { gl.uniform1i(enableTextureId, if (enable) 1 else 0) }\n\n    fun loadModelviewProjection() {\n        mvpMatrix.transposeToArray(mvpMatrixArray, 0)\n        gl.uniformMatrix4fv(mvpMatrixId, 1, false, mvpMatrixArray, 0)\n    }\n\n    fun loadTexCoordMatrix() {\n        texCoordMatrix[0].transposeToArray(texCoordMatrixArray, 0)\n        texCoordMatrix[1].transposeToArray(texCoordMatrixArray, 9)\n        gl.uniformMatrix3fv(texCoordMatrixId, 2, false, texCoordMatrixArray, 0)\n    }\n\n    fun loadColor(color: Color) {\n        if (this.color != color) { // suppress unnecessary writes to GLSL uniform variables\n            this.color.copy(color)\n            val a: Float = color.alpha\n            gl.uniform4f(colorId, color.red * a, color.green * a, color.blue * a, a)\n        }\n    }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.PickedObject\nimport earth.worldwind.geom.*\nimport earth.worldwind.render.AbstractRenderable\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.Texture\nimport kotlin.jvm.JvmOverloads\nimport kotlin.math.sqrt\n\nabstract class AbstractShape @JvmOverloads constructor(\n    override var attributes: ShapeAttributes = ShapeAttributes()\n): AbstractRenderable(), Attributable, Highlightable {\n    companion object {\n        const val NEAR_ZERO_THRESHOLD = 1.0e-10\n    }\n\n    var altitudeMode = AltitudeMode.ABSOLUTE\n        set(value) {\n            field = value\n            reset()\n        }\n    var pathType = PathType.GREAT_CIRCLE\n        set(value) {\n            field = value\n            reset()\n        }\n    override var highlightAttributes: ShapeAttributes? = null\n    override var isHighlighted = false\n    var maximumIntermediatePoints = 10\n    protected lateinit var activeAttributes: ShapeAttributes\n    protected var pickedObjectId = 0\n    protected val pickColor = Color()\n    protected val boundingSector = Sector()\n    protected val boundingBox = BoundingBox()\n    private val scratchPoint = Vec3()\n\n    override fun doRender(rc: RenderContext) {\n        // Don't render anything if the shape is not visible.\n        if (!intersectsFrustum(rc)) return\n\n        // Select the currently active attributes. Don't render anything if the attributes are unspecified.\n        determineActiveAttributes(rc)\n\n        // Keep track of the drawable count to determine whether or not this shape has enqueued drawables.\n        val drawableCount = rc.drawableCount\n        if (rc.isPickMode) {\n            pickedObjectId = rc.nextPickedObjectId()\n            PickedObject.identifierToUniqueColor(pickedObjectId, pickColor)\n        }\n\n        // Enqueue drawables for processing on the OpenGL thread.\n        makeDrawable(rc)\n\n        // Enqueue a picked object that associates the shape's drawables with its picked object ID.\n        if (rc.isPickMode && rc.drawableCount != drawableCount) {\n            rc.offerPickedObject(PickedObject.fromRenderable(pickedObjectId, this, rc.currentLayer!!))\n        }\n    }\n\n    protected open fun intersectsFrustum(rc: RenderContext) = boundingBox.isUnitBox || boundingBox.intersectsFrustum(rc.frustum)\n\n    protected open fun determineActiveAttributes(rc: RenderContext) {\n        val highlightAttributes = highlightAttributes\n        activeAttributes = if (isHighlighted && highlightAttributes != null) highlightAttributes else attributes\n    }\n\n    protected open fun cameraDistanceGeographic(rc: RenderContext, boundingSector: Sector): Double {\n        val lat = rc.camera!!.position.latitude.coerceIn(\n            boundingSector.minLatitude,\n            boundingSector.maxLatitude\n        )\n        val lon = rc.camera!!.position.longitude.coerceIn(\n            boundingSector.minLongitude,\n            boundingSector.maxLongitude\n        )\n        val point = rc.geographicToCartesian(lat, lon, 0.0, AltitudeMode.CLAMP_TO_GROUND, scratchPoint)\n        return point.distanceTo(rc.cameraPoint)\n    }\n\n    protected open fun cameraDistanceCartesian(rc: RenderContext, array: FloatArray, count: Int, stride: Int, offset: Vec3): Double {\n        val cx = rc.cameraPoint.x - offset.x\n        val cy = rc.cameraPoint.y - offset.y\n        val cz = rc.cameraPoint.z - offset.z\n        var minDistance2 = Double.POSITIVE_INFINITY\n        for (idx in 0 until count step stride) {\n            val px = array[idx]\n            val py = array[idx + 1]\n            val pz = array[idx + 2]\n            val dx = px - cx\n            val dy = py - cy\n            val dz = pz - cz\n            val distance2 = dx * dx + dy * dy + dz * dz\n            if (minDistance2 > distance2) minDistance2 = distance2\n        }\n        return sqrt(minDistance2)\n    }\n\n    protected open fun computeRepeatingTexCoordTransform(texture: Texture, metersPerPixel: Double, result: Matrix3): Matrix3 {\n        val texCoordMatrix = result.setToIdentity()\n        texCoordMatrix.setScale(1.0 / (texture.width * metersPerPixel), 1.0 / (texture.height * metersPerPixel))\n        texCoordMatrix.multiplyByMatrix(texture.coordTransform)\n        return texCoordMatrix\n    }\n\n    protected abstract fun reset()\n\n    protected abstract fun makeDrawable(rc: RenderContext)\n}","package earth.worldwind.shape\n\nimport earth.worldwind.draw.DrawShapeState\nimport earth.worldwind.draw.Drawable\nimport earth.worldwind.draw.DrawableShape\nimport earth.worldwind.draw.DrawableSurfaceShape\nimport earth.worldwind.geom.*\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.geom.Angle.Companion.toDegrees\nimport earth.worldwind.render.*\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.buffer.ShortBufferObject\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ResamplingMode\nimport earth.worldwind.render.image.WrapMode\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.kgl.*\nimport kotlin.jvm.JvmOverloads\nimport kotlin.math.*\n\n/**\n * Ellipse shape defined by a geographic center position and radii for the semi-major and semi-minor axes.\n * <br>\n * <h3>Axes and Heading</h3>\n * <br>\n * Ellipse axes, by default, are oriented such that the semi-major axis points East and the semi-minor axis points\n * North. Ellipse provides an optional heading, which when set to anything other than 0.0 rotates the semi-major and\n * semi-minor axes about the center position, while retaining the axes relative relationship to one another. Heading is\n * defined clockwise from North. Configuring ellipse with a heading of 45.0 results in the semi-major axis\n * pointing Southeast and the semi-minor axis pointing Northeast.\n * <br>\n * <h3>Altitude Mode and Terrain Following</h3>\n * <br>\n * Ellipse geometry displays at a constant altitude determined by the geographic center position and altitude mode. For\n * example, an ellipse with a center position altitude of 1km and altitude mode of ABSOLUTE displays at 1km above mean\n * sea level. The same ellipse with an altitude mode of RELATIVE_TO_GROUND displays at 1km above ground level, relative\n * to the ellipse's center location.\n * <br>\n * Surface ellipse geometry, where an ellipse appears draped across the terrain, may be achieved by enabling ellipse's\n * terrain following state and setting its altitude mode to CLAMP_TO_GROUND. See [isFollowTerrain] and\n * [altitudeMode].\n * <br>\n * <h3>Display Granularity</h3>\n * <br>\n * Ellipse's appearance on screen is composed of discrete segments which approximate the ellipse's geometry. This\n * approximation is chosen such that the display appears to be a continuous smooth ellipse. Applications can control the\n * maximum number of angular intervals used in this representation with [maximumIntervals].\n */\nopen class Ellipse @JvmOverloads constructor(\n    center: Position, majorRadius: Double, minorRadius: Double, attributes: ShapeAttributes = ShapeAttributes()\n): AbstractShape(attributes) {\n    /**\n     * The ellipse's geographic center position.\n     */\n    var center = Position(center)\n        set(value) {\n            field.copy(value)\n            reset()\n        }\n    /**\n     * The ellipse's radius perpendicular to it's heading, in meters.\n     * When the ellipse's heading is 0.0, the semi-major axis points East.\n     *\n     * @throws IllegalArgumentException If the radius is negative\n     */\n    var majorRadius = majorRadius\n        set(value) {\n            require(value >= 0) {\n                logMessage(ERROR, \"Ellipse\", \"setMajorRadius\", \"invalidRadius\")\n            }\n            field = value\n            reset()\n        }\n    /**\n     * The ellipse's radius parallel to it's heading, in meters.\n     * When the ellipse's heading is 0.0, the semi-minor axis points North.\n     *\n     * @throws IllegalArgumentException If the radius is negative\n     */\n    var minorRadius = minorRadius\n        set(value) {\n            require(value >= 0) {\n                logMessage(ERROR, \"Ellipse\", \"setMinorRadius\", \"invalidRadius\")\n            }\n            field = value\n            reset()\n        }\n    /**\n     * The ellipse's heading clockwise from North. When ellipse's heading is 0.0,\n     * the semi-major axis points East and the semi-minor axis points North.\n     * Headings other than 0.0 rotate the axes about the ellipse's center position,\n     * while retaining the axes relative relationship to one another.\n     */\n    var heading = ZERO\n        set(value) {\n            field = value\n            reset()\n        }\n    /**\n     * Draw sides of the ellipse which extend from the defined position and altitude to the ground.\n     */\n    var isExtrude = false\n        set(value) {\n            field = value\n            reset()\n        }\n    /**\n     * Determines whether this ellipse's geometry follows the terrain surface or is fixed at a constant altitude.\n     */\n    var isFollowTerrain = false\n        set(value) {\n            field = value\n            reset()\n        }\n    /**\n     * The maximum pixels a single edge interval will span before the number of intervals is increased. Increasing this\n     * value will make ellipses appear coarser.\n     */\n    var maximumPixelsPerInterval = 50.0\n        set(value) {\n            require(value >= 0) {\n                logMessage(ERROR, \"Ellipse\", \"maximumPixelsPerInterval\", \"invalidPixelsPerInterval\")\n            }\n            field = value\n            reset()\n        }\n    /**\n     * Sets the maximum number of angular intervals that may be used to approximate this ellipse's on screen.\n     * <br>\n     * Ellipse may use a minimum number of intervals to ensure that its appearance on screen at least roughly\n     * approximates the ellipse's shape. When the specified number of intervals is too small, it is clamped to an\n     * implementation-defined minimum number of intervals.\n     * <br>\n     * Ellipse may require that the number of intervals is an even multiple of some integer. When the specified number\n     * of intervals does not meet this criteria, the next smallest integer that meets ellipse's criteria is used\n     * instead.\n     *\n     * @throws IllegalArgumentException If the number of intervals is negative\n     */\n    var maximumIntervals = 256\n        set(value) {\n            require(value >= 0) {\n                logMessage(ERROR, \"Ellipse\", \"setMaximumIntervals\", \"invalidNumIntervals\")\n            }\n            field = value\n            reset()\n        }\n    /**\n     * The number of intervals used for generating geometry. Clamped between MIN_INTERVALS and maximumIntervals.\n     * Will always be even.\n     */\n    protected var activeIntervals = 0\n    protected var vertexArray = FloatArray(0)\n    protected var vertexIndex = 0\n    protected var vertexBufferKey = Any()\n    protected val vertexOrigin = Vec3()\n    protected var isSurfaceShape = false\n    protected var texCoord1d = 0.0\n    protected val texCoord2d = Vec3()\n    protected val texCoordMatrix = Matrix3()\n    protected val modelToTexCoord = Matrix4()\n    protected var cameraDistance = 0.0\n    protected val prevPoint = Vec3()\n\n    init {\n        require(majorRadius >= 0 && minorRadius >= 0) {\n            logMessage(ERROR, \"Ellipse\", \"constructor\", \"invalidRadius\")\n        }\n    }\n\n    companion object {\n        protected const val VERTEX_STRIDE = 6\n        /**\n         * The minimum number of intervals that will be used for geometry generation.\n         */\n        protected const val MIN_INTERVALS = 32\n        /**\n         * Key for Range object in the element buffer describing the top of the Ellipse.\n         */\n        protected const val TOP_RANGE = 0\n        /**\n         * Key for Range object in the element buffer describing the outline of the Ellipse.\n         */\n        protected const val OUTLINE_RANGE = 1\n        /**\n         * Key for Range object in the element buffer describing the extruded sides of the Ellipse.\n         */\n        protected const val SIDE_RANGE = 2\n\n        protected val defaultInteriorImageOptions = ImageOptions().apply { wrapMode = WrapMode.REPEAT }\n        protected val defaultOutlineImageOptions = ImageOptions().apply {\n            wrapMode = WrapMode.REPEAT\n            resamplingMode = ResamplingMode.NEAREST_NEIGHBOR\n        }\n\n        /**\n         * Simple interval count based cache of the keys for element buffers. Element buffers are dependent only on the\n         * number of intervals so the keys are cached here. The element buffer object itself is in the\n         * RenderResourceCache and subject to the restrictions and behavior of that cache.\n         */\n        protected val elementBufferKeys = mutableMapOf<Int,Any>()\n\n        private val scratchPosition = Position()\n        private val scratchPoint = Vec3()\n\n        protected fun assembleElements(intervals: Int): ShortBufferObject {\n            // Create temporary storage for elements\n            // TODO Use ShortArray instead of mutableListOf<Short> to avoid unnecessary memory re-allocations\n            val elements = mutableListOf<Short>()\n\n            // Generate the top element buffer with spine\n            var idx = intervals.toShort()\n            val offset = computeIndexOffset(intervals)\n\n            // Add the anchor leg\n            elements.add(0.toShort())\n            elements.add(1.toShort())\n            // Tessellate the interior\n            for (i in 2 until intervals) {\n                // Add the corresponding interior spine point if this isn't the vertex following the last vertex for the\n                // negative major axis\n                if (i != intervals / 2 + 1) if (i > intervals / 2) elements.add(--idx) else elements.add(idx++)\n                // Add the degenerate triangle at the negative major axis in order to flip the triangle strip back towards\n                // the positive axis\n                if (i == intervals / 2) elements.add(i.toShort())\n                // Add the exterior vertex\n                elements.add(i.toShort())\n            }\n            // Complete the strip\n            elements.add(--idx)\n            elements.add(0.toShort())\n            val topRange = Range(0, elements.size)\n\n            // Generate the outline element buffer\n            for (i in 0 until intervals) elements.add(i.toShort())\n            val outlineRange = Range(topRange.upper, elements.size)\n\n            // Generate the side element buffer\n            for (i in 0 until intervals) {\n                elements.add(i.toShort())\n                elements.add(i.plus(offset).toShort())\n            }\n            elements.add(0.toShort())\n            elements.add(offset.toShort())\n            val sideRange = Range(outlineRange.upper, elements.size)\n\n            // Generate a buffer for the element\n            val elementBuffer = ShortBufferObject(GL_ELEMENT_ARRAY_BUFFER, elements.toShortArray())\n            elementBuffer.ranges[TOP_RANGE] = topRange\n            elementBuffer.ranges[OUTLINE_RANGE] = outlineRange\n            elementBuffer.ranges[SIDE_RANGE] = sideRange\n            return elementBuffer\n        }\n\n        protected fun computeNumberSpinePoints(intervals: Int) = intervals / 2 - 1 // intervals should be even\n\n        protected fun computeIndexOffset(intervals: Int) = intervals + computeNumberSpinePoints(intervals)\n    }\n\n    override fun makeDrawable(rc: RenderContext) {\n        if (majorRadius == 0.0 && minorRadius == 0.0) return  // nothing to draw\n\n        if (mustAssembleGeometry(rc)) {\n            assembleGeometry(rc)\n            vertexBufferKey = Any()\n        }\n\n        // Obtain a drawable form the render context pool.\n        val drawable: Drawable\n        val drawState: DrawShapeState\n        if (isSurfaceShape) {\n            val pool = rc.getDrawablePool<DrawableSurfaceShape>()\n            drawable = DrawableSurfaceShape.obtain(pool)\n            drawState = drawable.drawState\n            drawable.sector.copy(boundingSector)\n            cameraDistance = cameraDistanceGeographic(rc, boundingSector)\n        } else {\n            val pool = rc.getDrawablePool<DrawableShape>()\n            drawable = DrawableShape.obtain(pool)\n            drawState = drawable.drawState\n            cameraDistance = boundingBox.distanceTo(rc.cameraPoint)\n        }\n\n        // Use the basic GLSL program to draw the shape.\n        drawState.program = rc.getShaderProgram { BasicShaderProgram() }\n\n        // Assemble the drawable's OpenGL vertex buffer object.\n        drawState.vertexBuffer = rc.getBufferObject(vertexBufferKey) { FloatBufferObject(GL_ARRAY_BUFFER, vertexArray) }\n\n        // Get the attributes of the element buffer\n        val elementBufferKey = elementBufferKeys[activeIntervals] ?: Any().also { elementBufferKeys[activeIntervals] = it }\n        drawState.elementBuffer = rc.getBufferObject(elementBufferKey) { assembleElements(activeIntervals) }\n        if (isSurfaceShape) {\n            drawInterior(rc, drawState)\n            drawOutline(rc, drawState)\n        } else {\n            drawOutline(rc, drawState)\n            drawInterior(rc, drawState)\n        }\n\n        // Configure the drawable according to the shape's attributes.\n        drawState.vertexOrigin.copy(vertexOrigin)\n        drawState.vertexStride = VERTEX_STRIDE * 4 // stride in bytes\n        drawState.enableCullFace = isExtrude\n        drawState.enableDepthTest = activeAttributes.isDepthTest\n\n        // Enqueue the drawable for processing on the OpenGL thread.\n        if (isSurfaceShape) rc.offerSurfaceDrawable(drawable, 0.0 /*zOrder*/)\n        else rc.offerShapeDrawable(drawable, cameraDistance)\n    }\n\n    protected open fun drawInterior(rc: RenderContext, drawState: DrawShapeState) {\n        if (!activeAttributes.isDrawInterior) return\n\n        // Configure the drawable to use the interior texture when drawing the interior.\n        activeAttributes.interiorImageSource?.let { interiorImageSource ->\n            rc.getTexture(interiorImageSource, defaultInteriorImageOptions)?.let { texture ->\n                val metersPerPixel = rc.pixelSizeAtDistance(cameraDistance)\n                computeRepeatingTexCoordTransform(texture, metersPerPixel, texCoordMatrix)\n                drawState.texture(texture)\n                drawState.texCoordMatrix(texCoordMatrix)\n            }\n        } ?: drawState.texture(null)\n\n        // Configure the drawable to display the shape's interior.\n        drawState.color(if (rc.isPickMode) pickColor else activeAttributes.interiorColor)\n        drawState.texCoordAttrib(2 /*size*/, 12 /*offset in bytes*/)\n        val top = drawState.elementBuffer!!.ranges[TOP_RANGE]!!\n        drawState.drawElements(GL_TRIANGLE_STRIP, top.length, GL_UNSIGNED_SHORT, top.lower * 2 /*offset*/)\n        if (isExtrude) {\n            val side = drawState.elementBuffer!!.ranges[SIDE_RANGE]!!\n            drawState.texture(null)\n            drawState.drawElements(GL_TRIANGLE_STRIP, side.length, GL_UNSIGNED_SHORT, side.lower * 2)\n        }\n    }\n\n    protected open fun drawOutline(rc: RenderContext, drawState: DrawShapeState) {\n        if (!activeAttributes.isDrawOutline) return\n\n        // Configure the drawable to use the outline texture when drawing the outline.\n        activeAttributes.outlineImageSource?.let { outlineImageSource ->\n            rc.getTexture(outlineImageSource, defaultOutlineImageOptions)?.let { texture ->\n                val metersPerPixel = rc.pixelSizeAtDistance(cameraDistance)\n                computeRepeatingTexCoordTransform(texture, metersPerPixel, texCoordMatrix)\n                drawState.texture(texture)\n                drawState.texCoordMatrix(texCoordMatrix)\n            }\n        } ?: drawState.texture(null)\n\n        // Configure the drawable to display the shape's outline.\n        drawState.color(if (rc.isPickMode) pickColor else activeAttributes.outlineColor)\n        drawState.lineWidth(activeAttributes.outlineWidth)\n        drawState.texCoordAttrib(1 /*size*/, 20 /*offset in bytes*/)\n        val outline = drawState.elementBuffer!!.ranges[OUTLINE_RANGE]!!\n        drawState.drawElements(GL_LINE_LOOP, outline.length, GL_UNSIGNED_SHORT, outline.lower * 2 /*offset*/)\n        if (activeAttributes.isDrawVerticals && isExtrude) {\n            val side = drawState.elementBuffer!!.ranges[SIDE_RANGE]!!\n            drawState.color(if (rc.isPickMode) pickColor else activeAttributes.outlineColor)\n            drawState.lineWidth(activeAttributes.outlineWidth)\n            drawState.texture(null)\n            drawState.drawElements(GL_LINES, side.length, GL_UNSIGNED_SHORT, side.lower * 2)\n        }\n    }\n\n    protected open fun mustAssembleGeometry(rc: RenderContext): Boolean {\n        val calculatedIntervals = computeIntervals(rc)\n        val sanitizedIntervals = sanitizeIntervals(calculatedIntervals)\n        if (vertexArray.isEmpty() || sanitizedIntervals != activeIntervals) {\n            activeIntervals = sanitizedIntervals\n            return true\n        }\n        return false\n    }\n\n    protected open fun assembleGeometry(rc: RenderContext) {\n        // Determine whether the shape geometry must be assembled as Cartesian geometry or as goegraphic geometry.\n        isSurfaceShape = altitudeMode == AltitudeMode.CLAMP_TO_GROUND && isFollowTerrain\n\n        // Compute a matrix that transforms from Cartesian coordinates to shape texture coordinates.\n        determineModelToTexCoord(rc)\n\n        // Use the ellipse's center position as the local origin for vertex positions.\n        if (isSurfaceShape) {\n            vertexOrigin.set(center.longitude.inDegrees, center.latitude.inDegrees, center.altitude)\n        } else {\n            rc.geographicToCartesian(center, altitudeMode, scratchPoint)\n            vertexOrigin.set(scratchPoint.x, scratchPoint.y, scratchPoint.z)\n        }\n\n        // Determine the number of spine points\n        val spineCount = computeNumberSpinePoints(activeIntervals) // activeIntervals must be even\n\n        // Clear the shape's vertex array. The array will accumulate values as the shapes's geometry is assembled.\n        vertexIndex = 0\n        vertexArray = if (isExtrude && !isSurfaceShape) FloatArray((activeIntervals * 2 + spineCount) * VERTEX_STRIDE)\n        else FloatArray((activeIntervals + spineCount) * VERTEX_STRIDE)\n\n        // Check if minor radius is less than major in which case we need to flip the definitions and change the phase\n        val isStandardAxisOrientation = majorRadius > minorRadius\n        val headingAdjustment = if (isStandardAxisOrientation) 90.0 else 0.0\n\n        // Vertex generation begins on the positive major axis and works ccs around the ellipse. The spine points are\n        // then appended from positive major axis to negative major axis.\n        val deltaRadians = 2 * PI / activeIntervals\n        val majorArcRadians: Double\n        val minorArcRadians: Double\n        val globeRadius = max(rc.globe!!.equatorialRadius, rc.globe!!.polarRadius)\n        if (isStandardAxisOrientation) {\n            majorArcRadians = majorRadius / globeRadius\n            minorArcRadians = minorRadius / globeRadius\n        } else {\n            majorArcRadians = minorRadius / globeRadius\n            minorArcRadians = majorRadius / globeRadius\n        }\n\n        // Determine the offset from the top and extruded vertices\n        val arrayOffset = computeIndexOffset(activeIntervals) * VERTEX_STRIDE\n        // Setup spine radius values\n        var spineIdx = 0\n        val spineRadius = DoubleArray(spineCount)\n\n        // Iterate around the ellipse to add vertices\n        for (i in 0 until activeIntervals) {\n            val radians = deltaRadians * i\n            val x = cos(radians) * majorArcRadians\n            val y = sin(radians) * minorArcRadians\n            val azimuthDegrees = toDegrees(-atan2(y, x))\n            val arcRadius = sqrt(x * x + y * y)\n            // Calculate the great circle location given this activeIntervals step (azimuthDegrees) a correction value to\n            // start from an east-west aligned major axis (90.0) and the user specified user heading value\n            val azimuth = heading.plusDegrees(azimuthDegrees + headingAdjustment)\n            val loc = center.greatCircleLocation(azimuth, arcRadius, scratchPosition)\n            addVertex(rc, loc.latitude, loc.longitude, center.altitude, arrayOffset, isExtrude)\n            // Add the major arc radius for the spine points. Spine points are vertically coincident with exterior\n            // points. The first and middle most point do not have corresponding spine points.\n            if (i > 0 && i < activeIntervals / 2) spineRadius[spineIdx++] = x\n        }\n\n        // Add the interior spine point vertices\n        for (i in 0 until spineCount) {\n            center.greatCircleLocation(heading.plusDegrees(headingAdjustment), spineRadius[i], scratchPosition)\n            addVertex(rc, scratchPosition.latitude, scratchPosition.longitude, center.altitude, arrayOffset, false)\n        }\n\n        // Compute the shape's bounding sector from its assembled coordinates.\n        if (isSurfaceShape) {\n            boundingSector.setEmpty()\n            boundingSector.union(vertexArray, vertexArray.size, VERTEX_STRIDE)\n            boundingSector.translate(vertexOrigin.y /*lat*/, vertexOrigin.x /*lon*/)\n            boundingBox.setToUnitBox() // Surface/geographic shape bounding box is unused\n        } else {\n            boundingBox.setToPoints(vertexArray, vertexArray.size, VERTEX_STRIDE)\n            boundingBox.translate(vertexOrigin.x, vertexOrigin.y, vertexOrigin.z)\n            boundingSector.setEmpty()\n        }\n    }\n\n    protected open fun addVertex(\n        rc: RenderContext, latitude: Angle, longitude: Angle, altitude: Double, offset: Int, isExtrudedSkirt: Boolean\n    ) {\n        var offsetVertexIndex = vertexIndex + offset\n        var point = rc.geographicToCartesian(latitude, longitude, altitude, altitudeMode, scratchPoint)\n        val texCoord2d = texCoord2d.copy(point).multiplyByMatrix(modelToTexCoord)\n        if (vertexIndex == 0) texCoord1d = 0.0\n        else texCoord1d += point.distanceTo(prevPoint)\n        prevPoint.copy(point)\n        if (isSurfaceShape) {\n            vertexArray[vertexIndex++] = (longitude.inDegrees - vertexOrigin.x).toFloat()\n            vertexArray[vertexIndex++] = (latitude.inDegrees - vertexOrigin.y).toFloat()\n            vertexArray[vertexIndex++] = (altitude - vertexOrigin.z).toFloat()\n            // reserved for future texture coordinate use\n            vertexArray[vertexIndex++] = texCoord2d.x.toFloat()\n            vertexArray[vertexIndex++] = texCoord2d.y.toFloat()\n            vertexArray[vertexIndex++] = texCoord1d.toFloat()\n        } else {\n            vertexArray[vertexIndex++] = (point.x - vertexOrigin.x).toFloat()\n            vertexArray[vertexIndex++] = (point.y - vertexOrigin.y).toFloat()\n            vertexArray[vertexIndex++] = (point.z - vertexOrigin.z).toFloat()\n            vertexArray[vertexIndex++] = texCoord2d.x.toFloat()\n            vertexArray[vertexIndex++] = texCoord2d.y.toFloat()\n            vertexArray[vertexIndex++] = texCoord1d.toFloat()\n            if (isExtrudedSkirt) {\n                point = rc.geographicToCartesian(latitude, longitude, 0.0, AltitudeMode.CLAMP_TO_GROUND, scratchPoint)\n                vertexArray[offsetVertexIndex++] = (point.x - vertexOrigin.x).toFloat()\n                vertexArray[offsetVertexIndex++] = (point.y - vertexOrigin.y).toFloat()\n                vertexArray[offsetVertexIndex++] = (point.z - vertexOrigin.z).toFloat()\n                vertexArray[offsetVertexIndex++] = 0f //unused\n                vertexArray[offsetVertexIndex++] = 0f //unused\n                vertexArray[offsetVertexIndex] = 0f //unused\n            }\n        }\n    }\n\n    protected open fun determineModelToTexCoord(rc: RenderContext) {\n        val point = rc.geographicToCartesian(center, altitudeMode, scratchPoint)\n        rc.globe!!.cartesianToLocalTransform(point.x, point.y, point.z, modelToTexCoord)\n        modelToTexCoord.invertOrthonormal()\n    }\n\n    /**\n     * Calculate the number of times to split the edges of the shape for geometry assembly.\n     *\n     * @param rc current RenderContext\n     *\n     * @return an even number of intervals\n     */\n    protected open fun computeIntervals(rc: RenderContext): Int {\n        var intervals = MIN_INTERVALS\n        if (intervals >= maximumIntervals) return intervals // use at least the minimum number of intervals\n        val centerPoint = rc.geographicToCartesian(center, altitudeMode, scratchPoint)\n        val maxRadius = max(majorRadius, minorRadius)\n        val cameraDistance = centerPoint.distanceTo(rc.cameraPoint) - maxRadius\n        if (cameraDistance <= 0) return maximumIntervals // use the maximum number of intervals when the camera is very close\n        val metersPerPixel = rc.pixelSizeAtDistance(cameraDistance)\n        val circumferencePixels = computeCircumference() / metersPerPixel\n        val circumferenceIntervals = circumferencePixels / maximumPixelsPerInterval\n        val subdivisions = ln(circumferenceIntervals / intervals) / ln(2.0)\n        val subdivisionCount = ceil(subdivisions).toInt().coerceAtLeast(0)\n        intervals = intervals shl subdivisionCount // subdivide the base intervals to achieve the desired number of intervals\n        return intervals.coerceAtMost(maximumIntervals) // don't exceed the maximum number of intervals\n    }\n\n    protected open fun sanitizeIntervals(intervals: Int) = if (intervals % 2 == 0) intervals else intervals - 1\n\n    open fun computeCircumference(): Double {\n        val a = majorRadius\n        val b = minorRadius\n        return PI * (3 * (a + b) - sqrt((3 * a + b) * (a + 3 * b)))\n    }\n\n    override fun reset() { vertexArray = FloatArray(0) }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.PickedObject\nimport earth.worldwind.draw.DrawableScreenTexture\nimport earth.worldwind.geom.*\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.globe.Globe\nimport earth.worldwind.render.AbstractRenderable\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.util.math.boundingRectForUnitSquare\nimport kotlin.jvm.JvmOverloads\n\n/**\n * Represents a label at a geographic position. Labels display a single line of text according to specified [TextAttributes].\n */\nopen class Label @JvmOverloads constructor(\n    /**\n     * The label's geographic position.\n     */\n    position: Position,\n    /**\n     * Indicates the text displayed by this label. The returned string may be null, indicating that this label displays\n     * nothing.\n     */\n    var text: String? = null,\n    /**\n     * Indicates this label's \"normal\" attributes, that is the attributes used when the label's highlighted flag is\n     * false. If null and this label is not highlighted, this label displays nothing.\n     */\n    var attributes: TextAttributes = TextAttributes()\n) : AbstractRenderable(), Highlightable, Movable {\n    /**\n     * The label's geographic position.\n     */\n    var position = Position(position)\n        set(value) {\n            field.copy(value)\n        }\n    /**\n     * The label's altitude mode. See [AltitudeMode]\n     */\n    override var altitudeMode = AltitudeMode.ABSOLUTE\n    /**\n     * Indicates the rotation applied to this label. The rotation represents clockwise clockwise degrees relative to\n     * this label's labelRotationMode.\n     */\n    var rotation = ZERO\n    /**\n     * Indicates the orientation mode used to interpret this label's rotation. Label rotation may be either relative to\n     * the screen or relative to the globe, as indicated by the following allowable values:\n     * `OrientationMode.RELATIVE_TO_SCREEN` - The label's orientation is fixed relative to the screen. Rotation indicates\n     * clockwise degrees relative to the screen's vertical axis. This is the default mode.\n     * `OrientationMode.RELATIVE_TO_GLOBE` - The label's orientation is fixed relative to the globe. Rotation indicates\n     * clockwise degrees relative to North.\n     */\n    var rotationMode = OrientationMode.RELATIVE_TO_SCREEN\n    /**\n     * Determines whether the normal or highlighted attributes should be used.\n     */\n    override var isHighlighted = false\n    /**\n     * The attributes used when this label's highlighted flag is true. If null and the highlighted flag is true,\n     * this label's normal attributes are used. If they, too, are null, this label displays nothing.\n     */\n    var highlightAttributes: TextAttributes? = null\n    /**\n     * The attributes identified for use during the current render pass.\n     */\n    protected lateinit var activeAttributes: TextAttributes\n    /**\n     * A position associated with the object that indicates its aggregate geographic position. For a Label, this is\n     * simply it's position property.\n     */\n    override val referencePosition get() = position\n    /**\n     * Indicates whether this placemark has visual priority over other shapes in the scene.\n     */\n    var isAlwaysOnTop = false\n\n    companion object {\n        /**\n         * The default amount of screen depth offset applied to the label's text during rendering. Values less than zero\n         * bias depth values toward the viewer.\n         */\n        protected const val DEFAULT_DEPTH_OFFSET = -0.1\n\n        /**\n         * The label's properties associated with the current render pass.\n         */\n        private val renderData = RenderData()\n    }\n\n    /**\n     * Moves the shape over the globe's surface. For a Label, this simply change its position.\n     *\n     * @param globe    not used.\n     * @param position the new position of the shape's reference position.\n     */\n    override fun moveTo(globe: Globe, position: Position) { this.position = position }\n\n    override fun doRender(rc: RenderContext) {\n        if (text?.isEmpty() != false) return  // no text to render\n\n        // Compute the label's Cartesian model point.\n        rc.geographicToCartesian(position, altitudeMode, renderData.placePoint)\n\n        // Compute the camera distance to the place point, the value which is used for ordering the label drawable and\n        // determining the amount of depth offset to apply.\n        renderData.cameraDistance = if (isAlwaysOnTop) 0.0 else rc.cameraPoint.distanceTo(renderData.placePoint)\n\n        // Compute a screen depth offset appropriate for the current viewing parameters.\n        var depthOffset = 0.0\n        if (renderData.cameraDistance < rc.horizonDistance) depthOffset = DEFAULT_DEPTH_OFFSET\n\n        // Project the label's model point to screen coordinates, using the screen depth offset to push the screen\n        // point's z component closer to the eye point.\n        if (!rc.projectWithDepth(renderData.placePoint, depthOffset, renderData.screenPlacePoint)) return  // clipped by the near plane or the far plane\n\n        // Select the currently active attributes. Don't render anything if the attributes are unspecified.\n        determineActiveAttributes(rc)\n\n        // Keep track of the drawable count to determine whether or not this label has enqueued drawables.\n        val drawableCount = rc.drawableCount\n        if (rc.isPickMode) {\n            renderData.pickedObjectId = rc.nextPickedObjectId()\n            PickedObject.identifierToUniqueColor(\n                renderData.pickedObjectId, renderData.pickColor\n            )\n        }\n\n        // Enqueue drawables for processing on the OpenGL thread.\n        makeDrawable(rc)\n\n        // Enqueue a picked object that associates the label's drawables with its picked object ID.\n        if (rc.isPickMode && rc.drawableCount != drawableCount) {\n            rc.offerPickedObject(\n                PickedObject.fromRenderable(\n                    renderData.pickedObjectId, this, rc.currentLayer!!\n                )\n            )\n        }\n    }\n\n    protected open fun determineActiveAttributes(rc: RenderContext) {\n        val highlightAttributes = highlightAttributes\n        activeAttributes = if (isHighlighted && highlightAttributes != null) highlightAttributes else attributes\n    }\n\n    protected open fun makeDrawable(rc: RenderContext) {\n        // Render the label's texture when the label's position is in the frustum. If the label's position is outside\n        // the frustum we don't do anything. This ensures that label textures are rendered only as necessary.\n        val texture = rc.getText(text, activeAttributes, rc.frustum.containsPoint(renderData.placePoint)) ?: return\n\n        // Initialize the unit square transform to the identity matrix.\n        renderData.unitSquareTransform.setToIdentity()\n\n        // Apply the label's translation according to its text size and text offset. The text offset is defined with its\n        // origin at the text's bottom-left corner and axes that extend up and to the right from the origin point.\n        val w = texture.width.toDouble()\n        val h = texture.height.toDouble()\n        val s = activeAttributes.scale\n        activeAttributes.textOffset.offsetForSize(w, h, renderData.offset)\n        renderData.unitSquareTransform.setTranslation(\n            renderData.screenPlacePoint.x - renderData.offset.x * s,\n            renderData.screenPlacePoint.y - renderData.offset.y * s,\n            renderData.screenPlacePoint.z\n        )\n\n        // Apply the label's rotation according to its rotation value and orientation mode. The rotation is applied\n        // such that the text rotates around the text offset point.\n        val actualRotation = if (rotationMode == OrientationMode.RELATIVE_TO_GLOBE)\n            rc.camera!!.heading - rotation else -rotation\n        if (actualRotation != ZERO) {\n            renderData.unitSquareTransform.multiplyByTranslation(\n                renderData.offset.x, renderData.offset.y, 0.0\n            )\n            renderData.unitSquareTransform.multiplyByRotation(0.0, 0.0, 1.0, actualRotation)\n            renderData.unitSquareTransform.multiplyByTranslation(\n                -renderData.offset.x, -renderData.offset.y, 0.0\n            )\n        }\n\n        // Apply the label's translation and scale according to its text size.\n        renderData.unitSquareTransform.multiplyByScale(w * s, h * s, 1.0)\n        boundingRectForUnitSquare(renderData.unitSquareTransform, renderData.screenBounds)\n        if (!rc.frustum.intersectsViewport(renderData.screenBounds)) return  // the text is outside the viewport\n\n        // Obtain a pooled drawable and configure it to draw the label's text.\n        val pool = rc.getDrawablePool<DrawableScreenTexture>()\n        val drawable = DrawableScreenTexture.obtain(pool)\n\n        // Use the basic GLSL program to draw the text.\n        drawable.program = rc.getShaderProgram { BasicShaderProgram() }\n\n        // Use the text's unit square transform matrix.\n        drawable.unitSquareTransform.copy(renderData.unitSquareTransform)\n\n        // Configure the drawable according to the active attributes. Use a color appropriate for the pick mode. When\n        // picking use a unique color associated with the picked object ID. Use the texture associated with the active\n        // attributes' text image and its associated tex coord transform. The text texture includes the appropriate\n        // color for drawing, specifying white for normal drawing ensures the color multiplication in the shader results\n        // in the texture's color.\n        if (rc.isPickMode) drawable.color.copy(renderData.pickColor)\n        else drawable.color.set(1f, 1f, 1f, 1f)\n        drawable.texture = texture\n        drawable.enableDepthTest = activeAttributes.isDepthTestEnabled\n\n        // Enqueue a drawable for processing on the OpenGL thread.\n        rc.offerShapeDrawable(drawable, renderData.cameraDistance)\n    }\n\n    /**\n     * Properties associated with the label during a render pass.\n     */\n    protected open class RenderData {\n        /**\n         * The model coordinate point corresponding to the label's position.\n         */\n        val placePoint = Vec3()\n        /**\n         * The screen coordinate point corresponding to the label's position.\n         */\n        val screenPlacePoint = Vec3()\n        /**\n         * The screen coordinate offset corresponding to the active attributes.\n         */\n        val offset = Vec2()\n        /**\n         * The screen coordinate transform to apply to the drawable unit square.\n         */\n        val unitSquareTransform = Matrix4()\n        /**\n         * The screen viewport indicating the label's screen bounds.\n         */\n        val screenBounds = Viewport()\n        /**\n         * Unique identifier associated with the label during picking.\n         */\n        var pickedObjectId = 0\n        /**\n         * Unique color used to display the label during picking.\n         */\n        val pickColor = Color()\n        /**\n         * The distance from the camera position to the label position, in meters.\n         */\n        var cameraDistance = 0.0\n    }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.PickedObject\nimport earth.worldwind.draw.DrawableSightline\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.BoundingSphere\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Vec3\nimport earth.worldwind.globe.Globe\nimport earth.worldwind.render.AbstractRenderable\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.program.SightlineProgram\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.jvm.JvmOverloads\n\n/**\n * Displays an omnidirectional sightline's visibility within the WorldWind scene. The sightline's placement and area of\n * potential visibility are represented by a Cartesian sphere with a center position and a range. Terrain features\n * within the sphere are considered visible if there is a direct line-of-sight between the center position and a given\n * terrain point.\n * <br>\n * OmnidirectionalSightline displays an overlay on the WorldWind terrain indicating which terrain features are visible,\n * and which are occluded. Visible terrain features, those having a direct line-of-sight to the center position, appear\n * in the sightline's normal attributes or its highlight attributes, depending on the highlight state. Occluded terrain\n * features appear in the sightline's occlude attributes, regardless of highlight state. Terrain features outside the\n * sightline's range are excluded from the overlay.\n * <br>\n * <h3>Limitations and Planned Improvements</h3>   * OmnidirectionalSightline is currently limited to terrain-based\n * occlusion, and does not incorporate other 3D scene elements during visibility determination. Subsequent iterations\n * will support occlusion of both terrain and 3D polygons.  * The visibility overlay is drawn in ShapeAttributes'\n * interior color only. Subsequent iterations will add an outline where the sightline's range intersects the scene, and\n * will display the sightline's geometry as an outline.  * OmnidirectionalSightline requires OpenGL ES 2.0\n * extension [GL_OES_depth_texture](https://www.khronos.org/registry/OpenGL/extensions/OES/OES_depth_texture.txt).\n * Subsequent iterations may relax this requirement.\n */\nopen class OmnidirectionalSightline @JvmOverloads constructor(\n    /**\n     * Indicates the geographic position where this sightline is centered.\n     */\n    position: Position,\n    /**\n     * Indicates this sightline's range. Range represents the sightline's transmission distance in meters from its\n     * center position.\n     */\n    range: Double,\n    /**\n     * Indicates this sightline's \"normal\" attributes. These attributes are used for the sightline's overlay when the\n     * highlighted flag is false, and there is a direct line-of-sight from the sightline's center position to a terrain\n     * feature. If null and this sightline is not highlighted, visible terrain features are excluded from\n     * the overlay.\n     */\n    override var attributes: ShapeAttributes = ShapeAttributes()\n) : AbstractRenderable(), Attributable, Highlightable, Movable {\n    /**\n     * Indicates the geographic position where this sightline is centered.\n     */\n    var position = Position(position)\n        set(value) {\n            field.copy(value)\n        }\n    /**\n     * Indicates this sightline's range. Range represents the sightline's transmission distance in meters from its\n     * center position.\n     *\n     * @throws IllegalArgumentException If the range is negative\n     */\n    var range = range\n        set(value) {\n            require(value >= 0) {\n                logMessage(ERROR, \"OmnidirectionalSightline\", \"setRange\", \"invalidRange\")\n            }\n            field = value\n        }\n    /**\n     * The sightline's altitude mode. See [AltitudeMode]\n     */\n    override var altitudeMode = AltitudeMode.ABSOLUTE\n    /**\n     * Determines whether the normal or highlighted attributes should be used for visible features.\n     */\n    override var isHighlighted = false\n    /**\n     * The attributes to use for visible features, when the sightline is highlighted.\n     */\n    override var highlightAttributes: ShapeAttributes? = null\n    /**\n     * The attributes to use for occluded features.\n     */\n    var occludeAttributes = ShapeAttributes().apply { interiorColor.copy(Color(1f, 0f, 0f, 1f)) }\n    /**\n     * A position associated with the object that indicates its aggregate geographic position. For an\n     * OmnidirectionalSightline, this is simply it's position property.\n     */\n    override val referencePosition get() = position\n    /**\n     * The attributes to use for visible features during the current render pass.\n     */\n    protected lateinit var activeAttributes: ShapeAttributes\n\n    private val centerPoint = Vec3()\n    private var pickedObjectId = 0\n    private val pickColor = Color()\n    private val boundingSphere = BoundingSphere()\n\n    init {\n        require(range >= 0) {\n            logMessage(ERROR, \"OmnidirectionalSightline\", \"constructor\", \"invalidRange\")\n        }\n    }\n\n    /**\n     * Moves the sightline over the globe's surface.\n     *\n     * @param globe    not used.\n     * @param position the new position of the sightline's reference position.\n     */\n    override fun moveTo(globe: Globe, position: Position) { this.position = position }\n\n    override fun doRender(rc: RenderContext) {\n        // Compute this sightline's center point in Cartesian coordinates.\n        if (!determineCenterPoint(rc)) return\n\n        // Don't render anything if the sightline's coverage area is not visible.\n        if (!isVisible(rc)) return\n\n        // Select the currently active attributes.\n        determineActiveAttributes(rc)\n\n        // Configure the pick color when rendering in pick mode.\n        if (rc.isPickMode) {\n            pickedObjectId = rc.nextPickedObjectId()\n            PickedObject.identifierToUniqueColor(pickedObjectId, pickColor)\n        }\n\n        // Enqueue drawables for processing on the OpenGL thread.\n        makeDrawable(rc)\n\n        // Enqueue a picked object that associates the sightline's drawables with its picked object ID.\n        if (rc.isPickMode) rc.offerPickedObject(PickedObject.fromRenderable(pickedObjectId, this, rc.currentLayer!!))\n    }\n\n    protected open fun determineCenterPoint(rc: RenderContext): Boolean {\n        rc.geographicToCartesian(position, altitudeMode, centerPoint)\n        return centerPoint.x != 0.0 && centerPoint.y != 0.0 && centerPoint.z != 0.0\n    }\n\n    protected open fun isVisible(rc: RenderContext): Boolean {\n        val cameraDistance = centerPoint.distanceTo(rc.cameraPoint)\n        val pixelSizeMeters = rc.pixelSizeAtDistance(cameraDistance)\n        return if (range < pixelSizeMeters) false // The range is zero, or is less than one screen pixel\n        else boundingSphere.set(centerPoint, range).intersectsFrustum(rc.frustum)\n    }\n\n    protected open fun determineActiveAttributes(rc: RenderContext) {\n        val highlightAttributes = highlightAttributes\n        activeAttributes = if (isHighlighted && highlightAttributes != null) highlightAttributes else attributes\n    }\n\n    protected open fun makeDrawable(rc: RenderContext) {\n        // Obtain a pooled drawable and configure it to draw the sightline's coverage.\n        val pool = rc.getDrawablePool<DrawableSightline>()\n        val drawable = DrawableSightline.obtain(pool)\n\n        // Compute the transform from sightline local coordinates to world coordinates.\n        rc.globe!!.cartesianToLocalTransform(\n            centerPoint.x, centerPoint.y, centerPoint.z, drawable.centerTransform\n        )\n\n        // Clamp range to max float value as OpenGL drawable operates with float range\n        drawable.range = range.coerceIn(0.0, Float.MAX_VALUE.toDouble()).toFloat()\n\n        // Configure the drawable colors according to the current attributes. When picking use a unique color associated\n        // with the picked object ID. Null attributes indicate that nothing is drawn.\n        drawable.visibleColor.copy(if (rc.isPickMode) pickColor else activeAttributes.interiorColor)\n        drawable.occludedColor.copy(if (rc.isPickMode) pickColor else occludeAttributes.interiorColor)\n\n        // Use the sightline GLSL program to draw the coverage.\n        drawable.program = rc.getShaderProgram { SightlineProgram() }\n\n        // Enqueue a drawable for processing on the OpenGL thread.\n        rc.offerSurfaceDrawable(drawable, 0.0 /*z-order*/)\n    }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.draw.DrawShapeState\nimport earth.worldwind.draw.Drawable\nimport earth.worldwind.draw.DrawableShape\nimport earth.worldwind.draw.DrawableSurfaceShape\nimport earth.worldwind.geom.*\nimport earth.worldwind.render.*\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.buffer.ShortBufferObject\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ResamplingMode\nimport earth.worldwind.render.image.WrapMode\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.shape.PathType.*\nimport earth.worldwind.util.kgl.*\nimport kotlin.jvm.JvmOverloads\n\nopen class Path @JvmOverloads constructor(\n    positions: List<Position>, attributes: ShapeAttributes = ShapeAttributes()\n): AbstractShape(attributes) {\n    var positions = positions\n        set(value) {\n            field = value\n            reset()\n        }\n    var isExtrude = false\n        set(value) {\n            field = value\n            reset()\n        }\n    var isFollowTerrain = false\n        set(value) {\n            field = value\n            reset()\n        }\n    protected var vertexArray = FloatArray(0)\n    protected var vertexIndex = 0\n    // TODO Use ShortArray instead of mutableListOf<Short> to avoid unnecessary memory re-allocations\n    protected val interiorElements = mutableListOf<Short>()\n    protected val outlineElements = mutableListOf<Short>()\n    protected val verticalElements = mutableListOf<Short>()\n    protected lateinit var vertexBufferKey: Any\n    protected lateinit var elementBufferKey: Any\n    protected val vertexOrigin = Vec3()\n    protected var isSurfaceShape = false\n    protected var texCoord1d = 0.0\n    private val point = Vec3()\n    private val prevPoint = Vec3()\n    private val texCoordMatrix = Matrix3()\n    private val intermediateLocation = Location()\n\n    companion object {\n        protected const val VERTEX_STRIDE = 4\n        protected val defaultOutlineImageOptions = ImageOptions().apply {\n            resamplingMode = ResamplingMode.NEAREST_NEIGHBOR\n            wrapMode = WrapMode.REPEAT\n        }\n\n        protected fun nextCacheKey() = Any()\n    }\n\n    override fun reset() {\n        vertexArray = FloatArray(0)\n        interiorElements.clear()\n        outlineElements.clear()\n        verticalElements.clear()\n    }\n\n    override fun makeDrawable(rc: RenderContext) {\n        if (positions.isEmpty()) return  // nothing to draw\n\n        if (mustAssembleGeometry(rc)) {\n            assembleGeometry(rc)\n            vertexBufferKey = nextCacheKey()\n            elementBufferKey = nextCacheKey()\n        }\n\n        // Obtain a drawable form the render context pool, and compute distance to the render camera.\n        val drawable: Drawable\n        val drawState: DrawShapeState\n        val cameraDistance: Double\n        if (isSurfaceShape) {\n            val pool = rc.getDrawablePool<DrawableSurfaceShape>()\n            drawable = DrawableSurfaceShape.obtain(pool)\n            drawState = drawable.drawState\n            cameraDistance = cameraDistanceGeographic(rc, boundingSector)\n            drawable.sector.copy(boundingSector)\n        } else {\n            val pool = rc.getDrawablePool<DrawableShape>()\n            drawable = DrawableShape.obtain(pool)\n            drawState = drawable.drawState\n            cameraDistance = cameraDistanceCartesian(rc, vertexArray, vertexIndex, VERTEX_STRIDE, vertexOrigin)\n        }\n\n        // Use the basic GLSL program to draw the shape.\n        drawState.program = rc.getShaderProgram { BasicShaderProgram() }\n\n        // Assemble the drawable's OpenGL vertex buffer object.\n        drawState.vertexBuffer = rc.getBufferObject(vertexBufferKey) {\n            FloatBufferObject(GL_ARRAY_BUFFER, vertexArray, vertexIndex)\n        }\n\n        // Assemble the drawable's OpenGL element buffer object.\n        drawState.elementBuffer = rc.getBufferObject(elementBufferKey) {\n            ShortBufferObject(GL_ELEMENT_ARRAY_BUFFER, (interiorElements + outlineElements + verticalElements).toShortArray())\n        }\n\n        // Configure the drawable's vertex texture coordinate attribute.\n        drawState.texCoordAttrib(1 /*size*/, 12 /*stride in bytes*/)\n\n        // Configure the drawable to use the outline texture when drawing the outline.\n        if (activeAttributes.isDrawOutline) {\n            activeAttributes.outlineImageSource?.let { outlineImageSource ->\n                rc.getTexture(outlineImageSource, defaultOutlineImageOptions)?.let { texture ->\n                    val metersPerPixel = rc.pixelSizeAtDistance(cameraDistance)\n                    computeRepeatingTexCoordTransform(texture, metersPerPixel, texCoordMatrix)\n                    drawState.texture(texture)\n                    drawState.texCoordMatrix(texCoordMatrix)\n                }\n            }\n        }\n\n        // Configure the drawable to display the shape's outline. Increase surface shape line widths by 1/2 pixel. Lines\n        // drawn indirectly offscreen framebuffer appear thinner when sampled as a texture.\n        if (activeAttributes.isDrawOutline) {\n            drawState.color(if (rc.isPickMode) pickColor else activeAttributes.outlineColor)\n            drawState.lineWidth(activeAttributes.outlineWidth + if (isSurfaceShape) 0.5f else 0f)\n            drawState.drawElements(\n                GL_LINE_STRIP, outlineElements.size,\n                GL_UNSIGNED_SHORT, interiorElements.size * 2\n            )\n        }\n\n        // Disable texturing for the remaining drawable primitives.\n        drawState.texture(null)\n\n        // Configure the drawable to display the shape's extruded verticals.\n        if (activeAttributes.isDrawOutline && activeAttributes.isDrawVerticals && isExtrude) {\n            drawState.color(if (rc.isPickMode) pickColor else activeAttributes.outlineColor)\n            drawState.lineWidth(activeAttributes.outlineWidth)\n            drawState.drawElements(\n                GL_LINES, verticalElements.size,\n                GL_UNSIGNED_SHORT, interiorElements.size * 2 + outlineElements.size * 2\n            )\n        }\n\n        // Configure the drawable to display the shape's extruded interior.\n        if (activeAttributes.isDrawInterior && isExtrude) {\n            drawState.color(if (rc.isPickMode) pickColor else activeAttributes.interiorColor)\n            drawState.drawElements(\n                GL_TRIANGLE_STRIP, interiorElements.size,\n                GL_UNSIGNED_SHORT, 0\n            )\n        }\n\n        // Configure the drawable according to the shape's attributes.\n        drawState.vertexOrigin.copy(vertexOrigin)\n        drawState.vertexStride = VERTEX_STRIDE * 4 // stride in bytes\n        drawState.enableCullFace = false\n        drawState.enableDepthTest = activeAttributes.isDepthTest\n\n        // Enqueue the drawable for processing on the OpenGL thread.\n        if (isSurfaceShape) rc.offerSurfaceDrawable(drawable, 0.0 /*zOrder*/)\n        else rc.offerShapeDrawable(drawable, cameraDistance)\n    }\n\n    protected open fun mustAssembleGeometry(rc: RenderContext) = vertexArray.isEmpty()\n\n    protected open fun assembleGeometry(rc: RenderContext) {\n        // Determine whether the shape geometry must be assembled as Cartesian geometry or as geographic geometry.\n        isSurfaceShape = altitudeMode == AltitudeMode.CLAMP_TO_GROUND && isFollowTerrain\n\n        // Determine the number of vertexes\n        val vertexCount = if (isSurfaceShape || maximumIntermediatePoints <= 0 || pathType == LINEAR) positions.size\n        else if(positions.isNotEmpty()) positions.size + (positions.size - 1) * maximumIntermediatePoints else 0\n\n        // Clear the shape's vertex array and element arrays. These arrays will accumulate values as the shapes's\n        // geometry is assembled.\n        vertexIndex = 0\n        vertexArray = if (isExtrude && !isSurfaceShape) FloatArray(vertexCount * 2 * VERTEX_STRIDE)\n        else FloatArray(vertexCount * VERTEX_STRIDE)\n        interiorElements.clear()\n        outlineElements.clear()\n        verticalElements.clear()\n\n        // Add the first vertex.\n        var begin = positions[0]\n        addVertex(rc, begin.latitude, begin.longitude, begin.altitude, false /*intermediate*/)\n\n        // Add the remaining vertices, inserting vertices along each edge as indicated by the path's properties.\n        for (idx in 1 until positions.size) {\n            val end = positions[idx]\n            addIntermediateVertices(rc, begin, end)\n            addVertex(rc, end.latitude, end.longitude, end.altitude, false /*intermediate*/)\n            begin = end\n        }\n\n        // Compute the shape's bounding box or bounding sector from its assembled coordinates.\n        if (isSurfaceShape) {\n            boundingSector.setEmpty()\n            boundingSector.union(vertexArray, vertexIndex, VERTEX_STRIDE)\n            boundingSector.translate(vertexOrigin.y /*latitude*/, vertexOrigin.x /*longitude*/)\n            boundingBox.setToUnitBox() // Surface/geographic shape bounding box is unused\n        } else {\n            boundingBox.setToPoints(vertexArray, vertexIndex, VERTEX_STRIDE)\n            boundingBox.translate(vertexOrigin.x, vertexOrigin.y, vertexOrigin.z)\n            boundingSector.setEmpty() // Cartesian shape bounding sector is unused\n        }\n    }\n\n    protected open fun addIntermediateVertices(rc: RenderContext, begin: Position, end: Position) {\n        if (isSurfaceShape || maximumIntermediatePoints <= 0) return  // suppress intermediate vertices when configured to do so\n        val azimuth: Angle\n        val length: Double\n        when (pathType) {\n            GREAT_CIRCLE -> {\n                azimuth = begin.greatCircleAzimuth(end)\n                length = begin.greatCircleDistance(end)\n            }\n            RHUMB_LINE -> {\n                azimuth = begin.rhumbAzimuth(end)\n                length = begin.rhumbDistance(end)\n            }\n            else -> return  // suppress intermediate vertices when the path type is linear\n        }\n        if (length < NEAR_ZERO_THRESHOLD) return  // suppress intermediate vertices when the edge length less than a millimeter (on Earth)\n        val numSubsegments = maximumIntermediatePoints + 1\n        val deltaDist = length / numSubsegments\n        val deltaAlt = (end.altitude - begin.altitude) / numSubsegments\n        var dist = deltaDist\n        var alt = begin.altitude + deltaAlt\n        for (idx in 1 until numSubsegments) {\n            val loc = intermediateLocation\n            when (pathType) {\n                GREAT_CIRCLE -> begin.greatCircleLocation(azimuth, dist, loc)\n                RHUMB_LINE -> begin.rhumbLocation(azimuth, dist, loc)\n                else -> {}\n            }\n            addVertex(rc, loc.latitude, loc.longitude, alt, true /*intermediate*/)\n            dist += deltaDist\n            alt += deltaAlt\n        }\n    }\n\n    protected open fun addVertex(\n        rc: RenderContext, latitude: Angle, longitude: Angle, altitude: Double, intermediate: Boolean\n    ): Int {\n        val vertex = vertexIndex / VERTEX_STRIDE\n        var point = rc.geographicToCartesian(latitude, longitude, altitude, altitudeMode, point)\n        if (vertex == 0) {\n            if (isSurfaceShape) vertexOrigin.set(longitude.inDegrees, latitude.inDegrees, altitude)\n            else vertexOrigin.copy(point)\n            texCoord1d = 0.0\n        } else {\n            texCoord1d += point.distanceTo(prevPoint)\n        }\n        prevPoint.copy(point)\n        if (isSurfaceShape) {\n            vertexArray[vertexIndex++] = (longitude.inDegrees - vertexOrigin.x).toFloat()\n            vertexArray[vertexIndex++] = (latitude.inDegrees - vertexOrigin.y).toFloat()\n            vertexArray[vertexIndex++] = (altitude - vertexOrigin.z).toFloat()\n            vertexArray[vertexIndex++] = texCoord1d.toFloat()\n            outlineElements.add(vertex.toShort())\n        } else {\n            vertexArray[vertexIndex++] = (point.x - vertexOrigin.x).toFloat()\n            vertexArray[vertexIndex++] = (point.y - vertexOrigin.y).toFloat()\n            vertexArray[vertexIndex++] = (point.z - vertexOrigin.z).toFloat()\n            vertexArray[vertexIndex++] = texCoord1d.toFloat()\n            outlineElements.add(vertex.toShort())\n            if (isExtrude) {\n                point = rc.geographicToCartesian(latitude, longitude, 0.0, altitudeMode, this.point)\n                vertexArray[vertexIndex++] = (point.x - vertexOrigin.x).toFloat()\n                vertexArray[vertexIndex++] = (point.y - vertexOrigin.y).toFloat()\n                vertexArray[vertexIndex++] = (point.z - vertexOrigin.z).toFloat()\n                vertexArray[vertexIndex++] = 0f /*unused*/\n                interiorElements.add(vertex.toShort())\n                interiorElements.add(vertex.inc().toShort())\n            }\n            if (isExtrude && !intermediate) {\n                verticalElements.add(vertex.toShort())\n                verticalElements.add(vertex.inc().toShort())\n            }\n        }\n        return vertex\n    }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.PickedObject\nimport earth.worldwind.draw.DrawableLines\nimport earth.worldwind.draw.DrawableScreenTexture\nimport earth.worldwind.geom.*\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.globe.Globe\nimport earth.worldwind.render.AbstractRenderable\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.Texture\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.util.kgl.GL_ARRAY_BUFFER\nimport earth.worldwind.util.math.boundingRectForUnitSquare\nimport kotlin.jvm.JvmOverloads\nimport kotlin.jvm.JvmStatic\nimport kotlin.math.abs\nimport kotlin.math.sin\n\n/**\n * Represents a Placemark shape. A placemark displays an image, a label and a leader connecting the placemark's\n * geographic position to the ground. All three of these items are optional. By default, the leader is not pickable. See\n * [Placemark.isLeaderPickingEnabled].\n * <br>\n * Placemarks may be drawn with either an image or as single-color square with a specified size. When the placemark\n * attributes indicate a valid image, the placemark's image is drawn as a rectangle in the image's original dimensions,\n * scaled by the image scale attribute. Otherwise, the placemark is drawn as a square with width and height equal to the\n * value of the image scale attribute, in pixels, and color equal to the image color attribute.\n */\nopen class Placemark @JvmOverloads constructor(\n    /**\n     * The placemark's geographic position.\n     */\n    position: Position,\n    /**\n     * The placemark's normal attributes.\n     */\n    var attributes: PlacemarkAttributes = PlacemarkAttributes(),\n    /**\n     * The placemark's display name.\n     */\n    name: String? = null\n) : AbstractRenderable(if (name?.isEmpty() != false) \"Placemark\" else name), Highlightable, Movable {\n    /**\n     * The placemark's geographic position.\n     */\n    var position = Position(position)\n        set(value) {\n            field.copy(value)\n        }\n    /**\n     * The placemark's altitude mode. See [AltitudeMode]\n     */\n    override var altitudeMode = AltitudeMode.ABSOLUTE\n    /**\n     * The attributes to use when the placemark is highlighted.\n     */\n    var highlightAttributes: PlacemarkAttributes? = null\n    /**\n     * Determines whether the normal or highlighted attributes should be used.\n     */\n    override var isHighlighted = false\n    /**\n     * The label text to draw near the placemark.\n     */\n    var label: String? = /*name*/null // Do not use display name as label by default\n    /**\n     * Sets the optional level-of-detail selector used to inject logic for selecting PlacemarkAttributes based on\n     * the camera distance and highlighted attribute.  If set to null, the normal and highlight attribute bundles used\n     * respectfully for the normal and highlighted states.\n     */\n    var levelOfDetailSelector: LevelOfDetailSelector? = null\n    /**\n     * Enables or disables the eye distance scaling feature for this placemark. When enabled, the placemark's size is\n     * reduced at higher eye distances. If true, this placemark's size is scaled inversely proportional to the eye\n     * distance if the eye distance is greater than the value of the [Placemark.eyeDistanceScalingThreshold]\n     * property. When the eye distance is below the threshold, this placemark is scaled only according to the [PlacemarkAttributes.imageScale].\n     */\n    var isEyeDistanceScaling = false\n    /**\n     * Sets the eye distance above which to reduce the size of this placemark, in meters.\n     * If [isEyeDistanceScaling] is true, this placemark's image, label and leader sizes are reduced as the eye\n     * distance increases beyond this threshold.\n     */\n    var eyeDistanceScalingThreshold = DEFAULT_EYE_DISTANCE_SCALING_THRESHOLD\n    /**\n     * Sets the eye altitude, in meters, above which this placemark's label is not displayed.\n     */\n    var eyeDistanceScalingLabelThreshold = 1.5 * DEFAULT_EYE_DISTANCE_SCALING_THRESHOLD\n    /**\n     * Indicates whether this placemark's leader, if any, is pickable.\n     */\n    var isLeaderPickingEnabled = false\n    /**\n     * Enable additional altitude offset (billboarding) to prevent clipping Placamerk by terrain on tilt.\n     */\n    var isBillboardingEnabled = false\n    /**\n     * Indicates whether this placemark has visual priority over other shapes in the scene.\n     */\n    var isAlwaysOnTop = false\n    /**\n     * The amount of rotation to apply to the image, measured clockwise and relative to this placemark's\n     * [Placemark.imageRotationReference].\n     */\n    var imageRotation = ZERO\n    /**eyeDistanceScaling\n     * Sets the type of rotation to apply if the [Placemark.imageRotation] is not zero. This value indicates\n     * whether to apply this placemark's image rotation relative to the screen or the globe.\n     * <br>\n     * If [OrientationMode.RELATIVE_TO_SCREEN], this placemark's image is rotated in the plane of the screen and its\n     * orientation relative to the globe changes as the view changes.\n     * If [OrientationMode.RELATIVE_TO_GLOBE], this placemark's image is rotated in a plane tangent to the globe at\n     * this placemark's position and retains its orientation relative to the globe.\n     */\n    var imageRotationReference = OrientationMode.RELATIVE_TO_SCREEN\n    /**\n     * Sets the amount of tilt to apply to the image, measured away from the eye point and relative to this\n     * placemark's [Placemark.imageTiltReference]. While any positive or negative number may be specified,\n     * values outside the range [0. 90] cause some or all of the image to be clipped.\n     */\n    var imageTilt = ZERO\n    /**\n     * Sets the type tilt to apply when [Placemark.imageTilt] is non-zero. This value indicates whether to\n     * apply this placemark's image tilt relative to the screen or the globe.\n     * <br>\n     * If [OrientationMode.RELATIVE_TO_SCREEN], this placemark's image is tilted inwards (for positive tilts) relative\n     * to the plane of the screen, and its orientation relative to the globe changes as the view changes.\n     * If [OrientationMode.RELATIVE_TO_GLOBE], this placemark's image is tilted towards the globe's surface, and retains its\n     * orientation relative to the surface.\n     */\n    var imageTiltReference = OrientationMode.RELATIVE_TO_SCREEN\n    /**\n     * A position associated with the object that indicates its aggregate geographic position. For a Placemark, this is\n     * simply it's position property.\n     *\n     * @return [Placemark.position]\n     */\n    override val referencePosition get() = position\n    /**\n     * The attributes identified for use during the current render pass.\n     */\n    protected lateinit var activeAttributes: PlacemarkAttributes\n    /**\n     * The picked object ID associated with the placemark during the current render pass.\n     */\n    protected var pickedObjectId = 0\n    protected val pickColor = Color()\n    /**\n     * The distance from the camera to the placemark in meters.\n     */\n    protected var cameraDistance = 0.0\n    /**\n     * Leader line vertex array. Initially sized to store two xyz points.\n     */\n    protected val vertexArray = FloatArray(6)\n    protected var vertexArrayHashCode = 0\n    protected lateinit var vertexBufferKey: Any\n\n    /**\n     * Presents an interfaced for dynamically determining the PlacemarkAttributes based on the distance between the\n     * placemark and the camera.\n     */\n    interface LevelOfDetailSelector {\n        /**\n         * Gets the active attributes for the current distance to the camera and highlighted state.\n         *\n         * @param rc             The current render context\n         * @param placemark      The placemark needing a level of detail selection\n         * @param cameraDistance The distance from the placemark to the camera (meters)\n         *\n         * @return if placemark should display or skip its rendering\n         */\n        fun selectLevelOfDetail(rc: RenderContext, placemark: Placemark, cameraDistance: Double): Boolean\n    }\n\n    /**\n     * Moves the shape over the globe's surface. For a Placemark, this simply set [Placemark.position].\n     *\n     * @param globe    not used.\n     * @param position the new position of the shape's reference position.\n     */\n    override fun moveTo(globe: Globe, position: Position) { this.position = position }\n\n    /**\n     * Performs the rendering; called by the public render method.\n     *\n     * @param rc the current render context\n     */\n    override fun doRender(rc: RenderContext) {\n        // Compute the placemark's Cartesian model point.\n        rc.geographicToCartesian(position, altitudeMode, placePoint)\n\n        // Compute the camera distance to the place point, the value which is used for ordering the placemark drawable\n        // and determining the amount of depth offset to apply.\n        cameraDistance = if (isAlwaysOnTop) 0.0 else rc.cameraPoint.distanceTo(placePoint)\n\n        // Allow the placemark to adjust the level of detail based on distance to the camera\n        if (levelOfDetailSelector?.selectLevelOfDetail(rc, this, cameraDistance) == false) return // skip rendering\n\n        // Determine the attributes to use for the current render pass.\n        determineActiveAttributes(rc)\n\n        // Perform point based culling for placemarks who's textures haven't been loaded yet.\n        // If the texture hasn't been loaded yet, then perform point-based culling to avoid\n        // loading textures for placemarks that are 'probably' outside the viewing frustum.\n        // There are cases where a placemark's texture would be partially visible if it at the\n        // edge of the screen were loaded. In these cases the placemark will \"pop\" into view when\n        // the placePoint enters the view frustum.\n        val activeTexture = activeAttributes.imageSource?.let {\n            rc.getTexture(it, null, rc.frustum.containsPoint(placePoint))\n        }\n\n        // Compute a camera-position proximity scaling factor, so that distant placemarks can be scaled smaller than\n        // nearer placemarks.\n        var visibilityScale = if (isEyeDistanceScaling)\n            (eyeDistanceScalingThreshold / cameraDistance).coerceIn(activeAttributes.minimumImageScale, 1.0) else 1.0\n\n        // Apply the icon's translation and scale according to the image size, image offset and image scale. The image\n        // offset is defined with its origin at the image's bottom-left corner and axes that extend up and to the right\n        // from the origin point. When the placemark has no active texture the image scale defines the image size and no\n        // other scaling is applied.\n        val offsetX: Double\n        val offsetY: Double\n        val scaleX: Double\n        val scaleY: Double\n        if (activeTexture != null) {\n            val w = activeTexture.width.toDouble()\n            val h = activeTexture.height.toDouble()\n            val s = activeAttributes.imageScale * visibilityScale\n            activeAttributes.imageOffset.offsetForSize(w, h, offset)\n            offsetX = offset.x * s\n            offsetY = offset.y * s\n            scaleX = w * s\n            scaleY = h * s\n        } else {\n            // This branch serves both non-textured attributes and also textures that haven't been loaded yet.\n            // We set the size for non-loaded textures to the typical size of a contemporary \"small\" icon (24px)\n            var size = if (activeAttributes.imageSource != null) 24.0 else activeAttributes.imageScale\n            size *= visibilityScale\n            activeAttributes.imageOffset.offsetForSize(size, size, offset)\n            offsetX = offset.x\n            offsetY = offset.y\n            scaleY = size\n            scaleX = scaleY\n        }\n\n        // Offset along the normal vector to avoid collision with terrain.\n        if (isBillboardingEnabled && offsetY != 0.0) {\n            rc.globe!!.geographicToCartesianNormal(position.latitude, position.longitude, scratchVector).also {\n                // Use real camera distance in billboarding\n                val distance = if (isAlwaysOnTop) rc.cameraPoint.distanceTo(placePoint) else cameraDistance\n                val altitude = rc.pixelSizeAtDistance(distance) * sin(rc.camera!!.tilt.inRadians)\n                placePoint.add(scratchVector.multiply(offsetY * altitude))\n            }\n        }\n\n        // Compute a screen depth offset appropriate for the current viewing parameters.\n        var depthOffset = 0.0\n        val absTilt = abs(rc.camera!!.tilt.inDegrees)\n        if (cameraDistance < rc.horizonDistance && absTilt <= 90) {\n            depthOffset = (1 - absTilt / 90) * DEFAULT_DEPTH_OFFSET\n        }\n\n        // Project the placemark's model point to screen coordinates, using the screen depth offset to push the screen\n        // point's z component closer to the eye point.\n        if (!rc.projectWithDepth(placePoint, depthOffset, screenPlacePoint)) return // clipped by the near plane or the far plane\n\n        // Keep track of the drawable count to determine whether this placemark has enqueued drawables.\n        val drawableCount = rc.drawableCount\n        if (rc.isPickMode) {\n            pickedObjectId = rc.nextPickedObjectId()\n            PickedObject.identifierToUniqueColor(pickedObjectId, pickColor)\n        }\n\n        // Prepare a drawable for the placemark's leader, if requested. Enqueue the leader drawable before the icon\n        // drawable in order to give the icon visual priority over the leader.\n        if (mustDrawLeader(rc)) {\n            // Compute the placemark's Cartesian ground point.\n            rc.geographicToCartesian(position, AltitudeMode.CLAMP_TO_GROUND, groundPoint)\n\n            // If the leader is visible, enqueue a drawable leader for processing on the OpenGL thread.\n            if (rc.frustum.intersectsSegment(groundPoint, placePoint)) {\n                val pool = rc.getDrawablePool<DrawableLines>()\n                val drawable = DrawableLines.obtain(pool)\n                prepareDrawableLeader(rc, drawable)\n                rc.offerShapeDrawable(drawable, cameraDistance)\n            }\n        }\n\n        // Prepare image transformation matrix\n        prepareImageTransform(rc.camera!!, offsetX, offsetY, scaleX, scaleY)\n\n        // If the placemark's icon is visible, enqueue a drawable icon for processing on the OpenGL thread.\n        boundingRectForUnitSquare(imageTransform, imageBounds)\n        if (rc.frustum.intersectsViewport(imageBounds)) {\n            val pool = rc.getDrawablePool<DrawableScreenTexture>()\n            val drawable = DrawableScreenTexture.obtain(pool)\n            prepareDrawableIcon(rc, drawable, activeTexture)\n            rc.offerShapeDrawable(drawable, cameraDistance)\n        }\n\n        // If there's a label, perform these same operations for the label texture.\n        if (mustDrawLabel(rc)) {\n            // Compute a camera-position proximity scaling factor, so that distant placemarks can be scaled smaller than\n            // nearer placemarks.\n            visibilityScale = if (isEyeDistanceScaling)\n                    (eyeDistanceScalingLabelThreshold / cameraDistance).coerceIn(activeAttributes.minimumImageScale, 1.0) else 1.0\n\n            // Render the label's texture when the label's position is in the frustum. If the label's position is outside\n            // the frustum we don't do anything. This ensures that label textures are rendered only as necessary.\n            rc.getText(label, activeAttributes.labelAttributes, rc.frustum.containsPoint(placePoint))?.let { labelTexture ->\n                val w = labelTexture.width.toDouble()\n                val h = labelTexture.height.toDouble()\n                val s = activeAttributes.labelAttributes.scale * visibilityScale\n                activeAttributes.labelAttributes.textOffset.offsetForSize(w, h, offset)\n                labelTransform.setTranslation(\n                    screenPlacePoint.x - offset.x * s,\n                    screenPlacePoint.y - offset.y * s,\n                    screenPlacePoint.z\n                )\n                labelTransform.setScale(w * s, h * s, 1.0)\n                boundingRectForUnitSquare(labelTransform, labelBounds)\n                if (rc.frustum.intersectsViewport(labelBounds)) {\n                    val pool = rc.getDrawablePool<DrawableScreenTexture>()\n                    val drawable = DrawableScreenTexture.obtain(pool)\n                    prepareDrawableLabel(rc, drawable, labelTexture)\n                    rc.offerShapeDrawable(drawable, cameraDistance)\n                }\n            }\n        }\n\n        // Enqueue a picked object that associates the placemark's icon and leader with its picked object ID.\n        if (rc.isPickMode && rc.drawableCount != drawableCount) {\n            rc.offerPickedObject(PickedObject.fromRenderable(pickedObjectId, this, rc.currentLayer!!))\n        }\n    }\n\n    /**\n     * Determines the placemark attributes to use for the current render pass.\n     *\n     * @param rc the current render context\n     */\n    protected open fun determineActiveAttributes(rc: RenderContext) {\n        val highlightAttributes = highlightAttributes\n        activeAttributes = if (isHighlighted && highlightAttributes != null) highlightAttributes else attributes\n    }\n\n    /**\n     * Prepare image transform matrix according to specified parameters\n     *\n     * @param camera current camera view\n     * @param offsetX offset along X axis\n     * @param offsetY offset along X axis\n     * @param scaleX scaled width\n     * @param scaleY scaled height\n     */\n    protected open fun prepareImageTransform(\n        camera: Camera, offsetX: Double, offsetY: Double, scaleX: Double, scaleY: Double\n    ) {\n        // Initialize the unit square transform to the identity matrix.\n        imageTransform.setToIdentity()\n\n        // Position image on screen\n        imageTransform.multiplyByTranslation(\n            screenPlacePoint.x, screenPlacePoint.y, screenPlacePoint.z\n        )\n\n        // Divide Z by 2^24 to prevent texture clipping when tilting (where 24 is depth buffer bit size).\n        // Doing so will limit depth range to (diagonal length)/2^24 and make its value within 0..1 range.\n        imageTransform.multiplyByScale(1.0, 1.0, 1.0 / (1 shl 24))\n\n        // Perform the tilt so that the image tilts back from its base into the view volume\n        if (imageTilt != ZERO) {\n            val actualTilt = if (imageTiltReference == OrientationMode.RELATIVE_TO_GLOBE)\n                camera.tilt + imageTilt else imageTilt\n            imageTransform.multiplyByRotation(-1.0, 0.0, 0.0, actualTilt)\n        }\n\n        // Perform image rotation\n        if (imageRotation != ZERO) {\n            val actualRotation = if (imageRotationReference == OrientationMode.RELATIVE_TO_GLOBE)\n                camera.heading - imageRotation else -imageRotation\n            imageTransform.multiplyByRotation(0.0, 0.0, 1.0, actualRotation)\n        }\n\n        // Apply pivot translation\n        imageTransform.multiplyByTranslation(-offsetX, -offsetY, 0.0)\n\n        // Apply scale\n        imageTransform.multiplyByScale(scaleX, scaleY, 1.0)\n    }\n\n    /**\n     * Prepares this placemark's icon or symbol for processing in a subsequent drawing pass. Implementations must be\n     * careful not to leak resources from Placemark into the Drawable.\n     *\n     * @param rc       the current render context\n     * @param drawable the Drawable to be prepared\n     */\n    protected open fun prepareDrawableIcon(rc: RenderContext, drawable: DrawableScreenTexture, activeTexture: Texture?) {\n        // Use the basic GLSL program to draw the placemark's icon.\n        drawable.program = rc.getShaderProgram { BasicShaderProgram() }\n\n        // Use the plaemark's unit square transform matrix.\n        drawable.unitSquareTransform.copy(imageTransform)\n\n        // Configure the drawable according to the placemark's active attributes. Use a color appropriate for the pick\n        // mode. When picking use a unique color associated with the picked object ID. Use the texture associated with\n        // the active attributes' image source and its associated tex coord transform. If the texture is not specified\n        // or not available, draw a simple colored square.\n        drawable.color.copy(if (rc.isPickMode) pickColor else activeAttributes.imageColor)\n        drawable.texture = activeTexture\n        drawable.enableDepthTest = activeAttributes.isDepthTestEnabled\n    }\n\n    /**\n     * Prepares this placemark's label for processing in a subsequent drawing pass. Implementations must be\n     * careful not to leak resources from Placemark into the Drawable.\n     *\n     * @param rc       the current render context\n     * @param drawable the Drawable to be prepared\n     */\n    protected open fun prepareDrawableLabel(rc: RenderContext, drawable: DrawableScreenTexture, labelTexture: Texture) {\n        // Use the basic GLSL program to draw the placemark's label.\n        drawable.program = rc.getShaderProgram { BasicShaderProgram() }\n\n        // Use the label's unit square transform matrix.\n        drawable.unitSquareTransform.copy(labelTransform)\n\n        // Configure the drawable according to the active label attributes. Use a color appropriate for the pick mode. When\n        // picking use a unique color associated with the picked object ID. Use the texture associated with the active\n        // attributes' text image and its associated tex coord transform. The text texture includes the appropriate\n        // color for drawing, specifying white for normal drawing ensures the color multiplication in the shader results\n        // in the texture's color.\n        if (rc.isPickMode) drawable.color.copy(pickColor) else drawable.color.set(1f, 1f, 1f, 1f)\n        drawable.texture = labelTexture\n        drawable.enableDepthTest = activeAttributes.labelAttributes.isDepthTestEnabled\n    }\n\n    /**\n     * Prepares this placemark's leader for drawing in a subsequent drawing pass. Implementations must be careful not to\n     * leak resources from Placemark into the Drawable.\n     *\n     * @param rc       the current render context\n     * @param drawable the Drawable to be prepared\n     */\n    protected open fun prepareDrawableLeader(rc: RenderContext, drawable: DrawableLines) {\n        // Use the basic GLSL program to draw the placemark's leader.\n        drawable.program = rc.getShaderProgram { BasicShaderProgram() }\n\n        // Compute the drawable's vertex points, in Cartesian coordinates relative to the placemark's ground point.\n        vertexArray[0] = 0f // groundPoint.x - groundPoint.x\n        vertexArray[1] = 0f // groundPoint.y - groundPoint.y\n        vertexArray[2] = 0f // groundPoint.z - groundPoint.z\n        vertexArray[3] = (placePoint.x - groundPoint.x).toFloat()\n        vertexArray[4] = (placePoint.y - groundPoint.y).toFloat()\n        vertexArray[5] = (placePoint.z - groundPoint.z).toFloat()\n\n        // Regenerate vertex buffer on array change\n        val hashCode = vertexArray.contentHashCode()\n        if (vertexArrayHashCode != hashCode) {\n            vertexArrayHashCode = hashCode\n            vertexBufferKey = nextCacheKey()\n        }\n        drawable.vertexPoints = rc.getBufferObject(vertexBufferKey) { FloatBufferObject(GL_ARRAY_BUFFER, vertexArray) }\n\n        // Compute the drawable's modelview-projection matrix, relative to the placemark's ground point.\n        drawable.mvpMatrix.copy(rc.modelviewProjection)\n        drawable.mvpMatrix.multiplyByTranslation(groundPoint.x, groundPoint.y, groundPoint.z)\n\n        // Configure the drawable according to the placemark's active leader attributes. Use a color appropriate for the\n        // pick mode. When picking use a unique color associated with the picked object ID.\n        drawable.color.copy(if (rc.isPickMode) pickColor else activeAttributes.leaderAttributes.outlineColor)\n        drawable.lineWidth = activeAttributes.leaderAttributes.outlineWidth\n        drawable.enableDepthTest = activeAttributes.leaderAttributes.isDepthTest\n    }\n\n    /**\n     * Determines if a label should and can be drawn.\n     *\n     * @return True if there is a valid label and label attributes.\n     */\n    protected open fun mustDrawLabel(rc: RenderContext) = activeAttributes.isDrawLabel && label?.isNotEmpty() == true\n\n    /**\n     * Determines if a leader-line should and can be drawn.\n     *\n     * @return True if leader-line directive is enabled and there are valid leader-line attributes.\n     */\n    protected open fun mustDrawLeader(rc: RenderContext) =\n        activeAttributes.isDrawLeader && (isLeaderPickingEnabled || !rc.isPickMode) && altitudeMode != AltitudeMode.CLAMP_TO_GROUND\n\n    companion object {\n        /**\n         * The default eye distance above which to reduce the size of this placemark, in meters.\n         * If [Placemark.isEyeDistanceScaling] is true, this placemark's image, label and leader sizes are reduced as\n         * the eye distance increases beyond this threshold.\n         */\n        protected const val DEFAULT_EYE_DISTANCE_SCALING_THRESHOLD = 4e5\n        protected const val DEFAULT_DEPTH_OFFSET = -0.03\n        private val placePoint = Vec3()\n        private val scratchVector = Vec3()\n        private val screenPlacePoint = Vec3()\n        private val groundPoint = Vec3()\n        private val offset = Vec2()\n        private val imageTransform = Matrix4()\n        private val labelTransform = Matrix4()\n        private val imageBounds = Viewport()\n        private val labelBounds = Viewport()\n\n        /**\n         * This factory method creates a Placemark and an associated PlacemarkAttributes bundle that draws a simple square\n         * centered on the supplied position with the given size and color.\n         *\n         * @param position  The geographic position where the placemark is drawn.\n         * @param color     The color of the placemark.\n         * @param pixelSize The width and height of the placemark.\n         *\n         * @return A new Placemark with a PlacemarkAttributes bundle.\n         */\n        @JvmStatic\n        fun createWithColorAndSize(position: Position, color: Color, pixelSize: Int) =\n            Placemark(position, PlacemarkAttributes().apply {\n                imageColor = color\n                imageScale = pixelSize.toDouble()\n            })\n\n        /**\n         * This factory method creates a Placemark and an associated PlacemarkAttributes bundle that draws the given image\n         * centered on the supplied position.\n         *\n         * @param position    The geographic position with the placemark is drawn.\n         * @param imageSource The object containing the image that is drawn.\n         *\n         * @return A new Placemark with a PlacemarkAttributes bundle.\n         */\n        @JvmStatic\n        fun createWithImage(position: Position, imageSource: ImageSource) =\n            Placemark(position, PlacemarkAttributes.createWithImage(imageSource))\n\n        /**\n         * This factory method creates a Placemark and an associated PlacemarkAttributes bundle (with TextAttributes) that\n         * draws the given image centered on the supplied position with a nearby label.\n         *\n         * @param position    The geographic position with the placemark is drawn.\n         * @param imageSource The object containing the image that is drawn.\n         * @param label       The text that is drawn near the image. This parameter becomes the placemark's displayName\n         *                    property.\n         *\n         * @return A new Placemark with a PlacemarkAttributes bundle containing TextAttributes.\n         */\n        @JvmStatic\n        fun createWithImageAndLabel(\n            position: Position, imageSource: ImageSource, label: String\n        ) = Placemark(position, PlacemarkAttributes.createWithImage(imageSource), label)\n\n        protected fun nextCacheKey() = Any()\n    }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.geom.Offset\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.image.ImageSource\nimport kotlin.jvm.JvmStatic\n\n/**\n * Holds attributes applied to [Placemark] shapes.\n * The defaults indicate a placemark displayed as a white 1x1 pixel square\n * centered on the placemark's geographic position.\n */\nopen class PlacemarkAttributes(\n    /**\n     * Returns the source of the placemark's image. If null, the placemark is drawn as a square whose width and height\n     * are the value of this attribute object's [imageScale] property.\n     */\n    var imageSource: ImageSource?,\n    /**\n     * Returns the image color. When this attribute bundle has a valid image path the placemark's image is composed with\n     * this image color to achieve the final placemark color. Otherwise, the placemark is drawn in this color. The color\n     * white, the default, causes the image to be drawn in its native colors.\n     */\n    imageColor: Color,\n    /**\n     * Returns the location within the placemark's image to align with the placemark's geographic position. The default\n     * value centers the image at the geographic position.\n     */\n    imageOffset: Offset,\n    /**\n     * Returns the amount to scale the placemark's image. When this attribute bundle has a valid image path the scale is\n     * applied to the image's dimensions. Otherwise, the scale indicates the dimensions in pixels of a square drawn at\n     * the placemark's geographic position. A scale of 0 causes the placemark to disappear; however, the placemark's\n     * label, if any, is still drawn.\n     */\n    var imageScale: Double,\n    /**\n     * Returns the minimum amount to scale the placemark's image. When a [Placemark.isEyeDistanceScaling] is true,\n     * this value controls the minimum size of the rendered placemark. A value of 0 allows the placemark to disappear.\n     */\n    var minimumImageScale: Double,\n    /**\n     * Returns whether to draw a placemark's label text.\n     */\n    var isDrawLabel: Boolean,\n    /**\n     * Returns whether to draw a line from the placemark's geographic position to the ground.\n     */\n    var isDrawLeader: Boolean,\n    /**\n     * Returns whether the placemark should be depth-tested against other objects in the scene. If true, the placemark\n     * may be occluded by terrain and other objects in certain viewing situations. If false, the placemark will not be\n     * occluded by terrain and other objects. If this value is true, the placemark's label, if any, has an independent\n     * depth-test control.\n     */\n    var isDepthTestEnabled: Boolean,\n    /**\n     * Returns the attributes to apply to the placemark's label\n     */\n    labelAttributes: TextAttributes,\n    /**\n     * Returns the attributes to apply to the leader line if it's drawn.\n     */\n    leaderAttributes: ShapeAttributes\n) {\n    /**\n     * Returns the image color. When this attribute bundle has a valid image path the placemark's image is composed with\n     * this image color to achieve the final placemark color. Otherwise, the placemark is drawn in this color. The color\n     * white, the default, causes the image to be drawn in its native colors.\n     */\n    var imageColor = imageColor\n        set(value) {\n            field.copy(value)\n        }\n    /**\n     * Returns the location within the placemark's image to align with the placemark's geographic position. The default\n     * value centers the image at the geographic position.\n     */\n    var imageOffset = imageOffset\n        set(value) {\n            field.copy(value)\n        }\n    /**\n     * Returns the attributes to apply to the placemark's label\n     */\n    var labelAttributes = labelAttributes\n        set(value) {\n            field.copy(value)\n        }\n    /**\n     * Returns the attributes to apply to the leader line if it's drawn.\n     */\n    var leaderAttributes = leaderAttributes\n        set(value) {\n            field.copy(value)\n        }\n\n    /**\n     * Constructs a placemark attributes bundle. The defaults indicate a placemark displayed as a white 1x1 pixel square\n     * centered on the placemark's geographic position.\n     */\n    constructor(): this(\n        imageSource = null,\n        imageColor = Color(1f, 1f, 1f, 1f), // white\n        imageOffset = Offset.center(),\n        imageScale = 1.0,\n        minimumImageScale = 0.0,\n        isDrawLabel = true,\n        isDrawLeader = false,\n        isDepthTestEnabled = true,\n        labelAttributes = TextAttributes(),\n        leaderAttributes = ShapeAttributes()\n    )\n\n    /**\n     * Constructs a placemark attribute bundle from the specified attributes. Performs a deep copy of the color, offset,\n     * label attributes and leader-line attributes.\n     *\n     * @param attributes The attributes to be copied.\n     */\n    constructor(attributes: PlacemarkAttributes): this(\n        attributes.imageSource,\n        Color(attributes.imageColor),\n        Offset(attributes.imageOffset),\n        attributes.imageScale,\n        attributes.minimumImageScale,\n        attributes.isDrawLabel,\n        attributes.isDrawLeader,\n        attributes.isDepthTestEnabled,\n        TextAttributes(attributes.labelAttributes),\n        ShapeAttributes(attributes.leaderAttributes)\n    )\n\n    fun copy(attributes: PlacemarkAttributes) = apply {\n        imageSource = attributes.imageSource\n        imageColor.copy(attributes.imageColor)\n        imageOffset.copy(attributes.imageOffset)\n        imageScale = attributes.imageScale\n        minimumImageScale = attributes.minimumImageScale\n        isDrawLabel = attributes.isDrawLabel\n        isDrawLeader = attributes.isDrawLeader\n        isDepthTestEnabled = attributes.isDepthTestEnabled\n        labelAttributes.copy(attributes.labelAttributes)\n        leaderAttributes.copy(attributes.leaderAttributes)\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is PlacemarkAttributes) return false\n        if (imageSource != other.imageSource) return false\n        if (imageColor != other.imageColor) return false\n        if (imageOffset != other.imageOffset) return false\n        if (imageScale != other.imageScale) return false\n        if (minimumImageScale != other.minimumImageScale) return false\n        if (isDrawLabel != other.isDrawLabel) return false\n        if (isDrawLeader != other.isDrawLeader) return false\n        if (isDepthTestEnabled != other.isDepthTestEnabled) return false\n        if (labelAttributes != other.labelAttributes) return false\n        if (leaderAttributes != other.leaderAttributes) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = imageSource?.hashCode() ?: 0\n        result = 31 * result + imageColor.hashCode()\n        result = 31 * result + imageOffset.hashCode()\n        result = 31 * result + imageScale.hashCode()\n        result = 31 * result + minimumImageScale.hashCode()\n        result = 31 * result + isDrawLabel.hashCode()\n        result = 31 * result + isDrawLeader.hashCode()\n        result = 31 * result + isDepthTestEnabled.hashCode()\n        result = 31 * result + labelAttributes.hashCode()\n        result = 31 * result + leaderAttributes.hashCode()\n        return result\n    }\n\n    companion object {\n        @JvmStatic\n        fun createWithImage(imageSource: ImageSource) = PlacemarkAttributes().apply { this.imageSource = imageSource }\n\n        @JvmStatic\n        fun createWithImageAndLeader(imageSource: ImageSource) = PlacemarkAttributes().apply {\n            this.imageSource = imageSource\n            isDrawLeader = true\n        }\n    }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.draw.DrawShapeState\nimport earth.worldwind.draw.Drawable\nimport earth.worldwind.draw.DrawableShape\nimport earth.worldwind.draw.DrawableSurfaceShape\nimport earth.worldwind.geom.*\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.render.*\nimport earth.worldwind.render.buffer.FloatBufferObject\nimport earth.worldwind.render.buffer.ShortBufferObject\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ResamplingMode\nimport earth.worldwind.render.image.WrapMode\nimport earth.worldwind.render.program.BasicShaderProgram\nimport earth.worldwind.shape.PathType.*\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.WARN\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.glu.GLU\nimport earth.worldwind.util.glu.GLUtessellatorCallbackAdapter\nimport earth.worldwind.util.kgl.*\nimport kotlin.jvm.JvmOverloads\n\nopen class Polygon @JvmOverloads constructor(\n    positions: List<Position> = listOf(), attributes: ShapeAttributes = ShapeAttributes()\n): AbstractShape(attributes) {\n    protected val boundaries = mutableListOf(positions)\n    val boundaryCount get() = boundaries.size\n    var isExtrude = false\n        set(value) {\n            field = value\n            reset()\n        }\n    var followTerrain = false\n        set(value) {\n            field = value\n            reset()\n        }\n    protected var vertexArray = FloatArray(0)\n    protected var vertexIndex = 0\n    // TODO Use ShortArray instead of mutableListOf<Short> to avoid unnecessary memory re-allocations\n    protected val topElements = mutableListOf<Short>()\n    protected val sideElements = mutableListOf<Short>()\n    protected val outlineElements = mutableListOf<Short>()\n    protected val verticalElements = mutableListOf<Short>()\n    protected var vertexBufferKey = nextCacheKey()\n    protected var elementBufferKey = nextCacheKey()\n    protected val vertexOrigin = Vec3()\n    protected var isSurfaceShape = false\n    protected var cameraDistance = 0.0\n    protected var texCoord1d = 0.0\n    protected val tessCallback = object : GLUtessellatorCallbackAdapter() {\n        override fun combineData(\n            coords: DoubleArray, data: Array<Any?>, weight: FloatArray, outData: Array<Any?>, polygonData: Any\n        ) = tessCombine(polygonData as RenderContext, coords, data, weight, outData)\n\n        override fun vertexData(vertexData: Any, polygonData: Any) = tessVertex(polygonData as RenderContext, vertexData)\n\n        override fun edgeFlagData(boundaryEdge: Boolean, polygonData: Any) = tessEdgeFlag(polygonData as RenderContext, boundaryEdge)\n\n        override fun errorData(errnum: Int, polygonData: Any) = tessError(polygonData as RenderContext, errnum)\n    }\n    private val point = Vec3()\n    private val prevPoint = Vec3()\n    private val texCoord2d = Vec3()\n    private val texCoordMatrix = Matrix3()\n    private val modelToTexCoord = Matrix4()\n    private val intermediateLocation = Location()\n    private val tessCoords = DoubleArray(3)\n    private val tessVertices = IntArray(3)\n    private val tessEdgeFlags = BooleanArray(3)\n    private var tessEdgeFlag = true\n    private var tessVertexCount = 0\n\n    companion object {\n        protected const val VERTEX_STRIDE = 6\n        protected val defaultInteriorImageOptions = ImageOptions().apply { wrapMode = WrapMode.REPEAT }\n        protected val defaultOutlineImageOptions = ImageOptions().apply {\n            wrapMode = WrapMode.REPEAT\n            resamplingMode = ResamplingMode.NEAREST_NEIGHBOR\n        }\n        protected const val VERTEX_ORIGINAL = 0\n        protected const val VERTEX_INTERMEDIATE = 1\n        protected const val VERTEX_COMBINED = 2\n        protected fun nextCacheKey() = Any()\n    }\n\n    fun getBoundary(index: Int): List<Position> {\n        require(index in boundaries.indices) {\n            logMessage(ERROR, \"Polygon\", \"getBoundary\", \"invalidIndex\")\n        }\n        return boundaries[index]\n    }\n\n    fun setBoundary(index: Int, positions: List<Position>): List<Position> {\n        require(index in boundaries.indices) {\n            logMessage(ERROR, \"Polygon\", \"setBoundary\", \"invalidIndex\")\n        }\n        reset()\n        // TODO Make deep copy of positions the same way as for single position shapes?\n        return boundaries.set(index, positions)\n    }\n\n    fun addBoundary(positions: List<Position>): Boolean {\n        reset()\n        // TODO Make deep copy of positions the same way as for single position shapes?\n        return boundaries.add(positions)\n    }\n\n    fun addBoundary(index: Int, positions: List<Position>) {\n        require(index in boundaries.indices) {\n            logMessage(ERROR, \"Polygon\", \"addBoundary\", \"invalidIndex\")\n        }\n        reset()\n        // TODO Make deep copy of positions the same way as for single position shapes?\n        boundaries.add(index, positions)\n    }\n\n    fun removeBoundary(index: Int): List<Position> {\n        require(index in boundaries.indices) {\n            logMessage(ERROR, \"Polygon\", \"removeBoundary\", \"invalidIndex\")\n        }\n        reset()\n        return boundaries.removeAt(index)\n    }\n\n    fun clearBoundaries() {\n        boundaries.clear()\n        reset()\n    }\n\n    override fun reset() {\n        vertexArray = FloatArray(0)\n        topElements.clear()\n        sideElements.clear()\n        outlineElements.clear()\n        verticalElements.clear()\n    }\n\n    override fun makeDrawable(rc: RenderContext) {\n        if (boundaries.isEmpty()) return  // nothing to draw\n\n        if (mustAssembleGeometry(rc)) {\n            assembleGeometry(rc)\n            vertexBufferKey = nextCacheKey()\n            elementBufferKey = nextCacheKey()\n        }\n\n        // Obtain a drawable form the render context pool.\n        val drawable: Drawable\n        val drawState: DrawShapeState\n        if (isSurfaceShape) {\n            val pool = rc.getDrawablePool<DrawableSurfaceShape>()\n            drawable = DrawableSurfaceShape.obtain(pool)\n            drawState = drawable.drawState\n            cameraDistance = cameraDistanceGeographic(rc, boundingSector)\n            drawable.sector.copy(boundingSector)\n        } else {\n            val pool = rc.getDrawablePool<DrawableShape>()\n            drawable = DrawableShape.obtain(pool)\n            drawState = drawable.drawState\n            cameraDistance = cameraDistanceCartesian(rc, vertexArray, vertexIndex, VERTEX_STRIDE, vertexOrigin)\n        }\n\n        // Use the basic GLSL program to draw the shape.\n        drawState.program = rc.getShaderProgram { BasicShaderProgram() }\n\n        // Assemble the drawable's OpenGL vertex buffer object.\n        drawState.vertexBuffer = rc.getBufferObject(vertexBufferKey) {\n            FloatBufferObject(GL_ARRAY_BUFFER, vertexArray, vertexIndex)\n        }\n\n        // Assemble the drawable's OpenGL element buffer object.\n        drawState.elementBuffer = rc.getBufferObject(elementBufferKey) {\n            ShortBufferObject(\n                GL_ELEMENT_ARRAY_BUFFER, (topElements + sideElements + outlineElements + verticalElements).toShortArray()\n            )\n        }\n        if (isSurfaceShape || activeAttributes.interiorColor.alpha >= 1.0) {\n            drawInterior(rc, drawState)\n            drawOutline(rc, drawState)\n        } else {\n            drawOutline(rc, drawState)\n            drawInterior(rc, drawState)\n        }\n\n        // Configure the drawable according to the shape's attributes. Disable triangle backface culling when we're\n        // displaying a polygon without extruded sides, so we want to draw the top and the bottom.\n        drawState.vertexOrigin.copy(vertexOrigin)\n        drawState.vertexStride = VERTEX_STRIDE * 4 // stride in bytes\n        drawState.enableCullFace = isExtrude\n        drawState.enableDepthTest = activeAttributes.isDepthTest\n\n        // Enqueue the drawable for processing on the OpenGL thread.\n        if (isSurfaceShape) rc.offerSurfaceDrawable(drawable, 0.0 /*zOrder*/)\n        else rc.offerShapeDrawable(drawable, cameraDistance)\n    }\n\n    protected open fun drawInterior(rc: RenderContext, drawState: DrawShapeState) {\n        if (!activeAttributes.isDrawInterior) return\n\n        // Configure the drawable to use the interior texture when drawing the interior.\n        activeAttributes.interiorImageSource?.let { interiorImageSource ->\n            rc.getTexture(interiorImageSource, defaultInteriorImageOptions)?.let { texture ->\n                val metersPerPixel = rc.pixelSizeAtDistance(cameraDistance)\n                computeRepeatingTexCoordTransform(texture, metersPerPixel, texCoordMatrix)\n                drawState.texture(texture)\n                drawState.texCoordMatrix(texCoordMatrix)\n            }\n        } ?: drawState.texture(null)\n\n        // Configure the drawable to display the shape's interior top.\n        drawState.color(if (rc.isPickMode) pickColor else activeAttributes.interiorColor)\n        drawState.texCoordAttrib(2 /*size*/, 12 /*offset in bytes*/)\n        drawState.drawElements(GL_TRIANGLES, topElements.size, GL_UNSIGNED_SHORT, 0 /*offset*/)\n\n        // Configure the drawable to display the shape's interior sides.\n        if (isExtrude) {\n            drawState.texture(null)\n            drawState.drawElements(GL_TRIANGLES, sideElements.size, GL_UNSIGNED_SHORT, topElements.size * 2 /*offset*/)\n        }\n    }\n\n    protected open fun drawOutline(rc: RenderContext, drawState: DrawShapeState) {\n        if (!activeAttributes.isDrawOutline) return\n\n        // Configure the drawable to use the outline texture when drawing the outline.\n        activeAttributes.outlineImageSource?.let { outlineImageSource ->\n            rc.getTexture(outlineImageSource, defaultOutlineImageOptions)?.let { texture ->\n                val metersPerPixel = rc.pixelSizeAtDistance(cameraDistance)\n                computeRepeatingTexCoordTransform(texture, metersPerPixel, texCoordMatrix)\n                drawState.texture(texture)\n                drawState.texCoordMatrix(texCoordMatrix)\n            }\n        } ?: drawState.texture(null)\n\n        // Configure the drawable to display the shape's outline.\n        drawState.color(if (rc.isPickMode) pickColor else activeAttributes.outlineColor)\n        drawState.lineWidth(activeAttributes.outlineWidth)\n        drawState.texCoordAttrib(1 /*size*/, 20 /*offset in bytes*/)\n        drawState.drawElements(\n            GL_LINES, outlineElements.size,\n            GL_UNSIGNED_SHORT, topElements.size * 2 + sideElements.size * 2 /*offset*/\n        )\n\n        // Configure the drawable to display the shape's extruded verticals.\n        if (activeAttributes.isDrawVerticals && isExtrude) {\n            drawState.color(if (rc.isPickMode) pickColor else activeAttributes.outlineColor)\n            drawState.lineWidth(activeAttributes.outlineWidth)\n            drawState.texture(null)\n            drawState.drawElements(\n                GL_LINES, verticalElements.size,\n                GL_UNSIGNED_SHORT, topElements.size * 2 + sideElements.size * 2 + outlineElements.size * 2 /*offset*/\n            )\n        }\n    }\n\n    protected open fun mustAssembleGeometry(rc: RenderContext) = vertexArray.isEmpty()\n\n    protected open fun assembleGeometry(rc: RenderContext) {\n        // Determine whether the shape geometry must be assembled as Cartesian geometry or as geographic geometry.\n        isSurfaceShape = altitudeMode == AltitudeMode.CLAMP_TO_GROUND && followTerrain\n\n        // Determine the number of vertexes\n        val noIntermediatePoints = isSurfaceShape || maximumIntermediatePoints <= 0 || pathType == LINEAR\n        val vertexCount = boundaries.sumOf { p ->\n            if (noIntermediatePoints) p.size\n            else if (p.isNotEmpty() && p[0] == p[p.size - 1]) p.size + (p.size - 1) * maximumIntermediatePoints\n            else p.size + p.size * maximumIntermediatePoints\n        }\n\n        // Clear the shape's vertex array and element arrays. These arrays will accumulate values as the shapes's\n        // geometry is assembled.\n        vertexIndex = 0\n        vertexArray = if (isExtrude && !isSurfaceShape) FloatArray(vertexCount * 2 * VERTEX_STRIDE)\n        else if (!isSurfaceShape) FloatArray(vertexCount * VERTEX_STRIDE)\n        else FloatArray((vertexCount + boundaries.size) * VERTEX_STRIDE) // Reserve boundaries.size for combined vertexes\n        topElements.clear()\n        sideElements.clear()\n        outlineElements.clear()\n        verticalElements.clear()\n\n        // Compute a matrix that transforms from Cartesian coordinates to shape texture coordinates.\n        determineModelToTexCoord(rc)\n        val tess = rc.tessellator\n        GLU.gluTessNormal(tess, 0.0, 0.0, 1.0)\n        GLU.gluTessCallback(tess, GLU.GLU_TESS_COMBINE_DATA, tessCallback)\n        GLU.gluTessCallback(tess, GLU.GLU_TESS_VERTEX_DATA, tessCallback)\n        GLU.gluTessCallback(tess, GLU.GLU_TESS_EDGE_FLAG_DATA, tessCallback)\n        GLU.gluTessCallback(tess, GLU.GLU_TESS_ERROR_DATA, tessCallback)\n        GLU.gluTessBeginPolygon(tess, rc)\n        for (positions in boundaries) {\n            if (positions.isEmpty()) continue  // no boundary positions to assemble\n            GLU.gluTessBeginContour(tess)\n\n            // Add the boundary's first vertex.\n            var begin = positions[0]\n            addVertex(rc, begin.latitude, begin.longitude, begin.altitude, VERTEX_ORIGINAL /*type*/)\n\n            // Add the remaining boundary vertices, tessellating each edge as indicated by the polygon's properties.\n            for (idx in 1 until positions.size) {\n                val end = positions[idx]\n                addIntermediateVertices(rc, begin, end)\n                addVertex(rc, end.latitude, end.longitude, end.altitude, VERTEX_ORIGINAL /*type*/)\n                begin = end\n            }\n\n            // Tessellate the implicit closing edge if the boundary is not already closed.\n            if (begin != positions[0]) addIntermediateVertices(rc, begin, positions[0])\n            GLU.gluTessEndContour(tess)\n        }\n        GLU.gluTessEndPolygon(tess)\n        GLU.gluTessCallback(tess, GLU.GLU_TESS_COMBINE_DATA, null)\n        GLU.gluTessCallback(tess, GLU.GLU_TESS_VERTEX_DATA, null)\n        GLU.gluTessCallback(tess, GLU.GLU_TESS_EDGE_FLAG_DATA, null)\n        GLU.gluTessCallback(tess, GLU.GLU_TESS_ERROR_DATA, null)\n\n        // Compute the shape's bounding box or bounding sector from its assembled coordinates.\n        if (isSurfaceShape) {\n            boundingSector.setEmpty()\n            boundingSector.union(vertexArray, vertexIndex, VERTEX_STRIDE)\n            boundingSector.translate(vertexOrigin.y /*lat*/, vertexOrigin.x /*lon*/)\n            boundingBox.setToUnitBox() // Surface/geographic shape bounding box is unused\n        } else {\n            boundingBox.setToPoints(vertexArray, vertexIndex, VERTEX_STRIDE)\n            boundingBox.translate(vertexOrigin.x, vertexOrigin.y, vertexOrigin.z)\n            boundingSector.setEmpty() // Cartesian shape bounding sector is unused\n        }\n    }\n\n    protected open fun addIntermediateVertices(rc: RenderContext, begin: Position, end: Position) {\n        if (isSurfaceShape || maximumIntermediatePoints <= 0) return  // suppress intermediate vertices when configured to do so\n        val azimuth: Angle\n        val length: Double\n        when (pathType) {\n            GREAT_CIRCLE -> {\n                azimuth = begin.greatCircleAzimuth(end)\n                length = begin.greatCircleDistance(end)\n            }\n            RHUMB_LINE -> {\n                azimuth = begin.rhumbAzimuth(end)\n                length = begin.rhumbDistance(end)\n            }\n            else -> return  // suppress intermediate vertices when the path type is linear\n        }\n        if (length < NEAR_ZERO_THRESHOLD) return  // suppress intermediate vertices when the edge length less than a millimeter (on Earth)\n        val numSubsegments = maximumIntermediatePoints + 1\n        val deltaDist = length / numSubsegments\n        val deltaAlt = (end.altitude - begin.altitude) / numSubsegments\n        var dist = deltaDist\n        var alt = begin.altitude + deltaAlt\n        for (idx in 1 until numSubsegments) {\n            val loc = intermediateLocation\n            when (pathType) {\n                GREAT_CIRCLE -> begin.greatCircleLocation(azimuth, dist, loc)\n                RHUMB_LINE -> begin.rhumbLocation(azimuth, dist, loc)\n                else -> {}\n            }\n            addVertex(rc, loc.latitude, loc.longitude, alt, VERTEX_INTERMEDIATE /*type*/)\n            dist += deltaDist\n            alt += deltaAlt\n        }\n    }\n\n    protected open fun addVertex(rc: RenderContext, latitude: Angle, longitude: Angle, altitude: Double, type: Int): Int {\n        val vertex = vertexIndex / VERTEX_STRIDE\n        var point = rc.geographicToCartesian(latitude, longitude, altitude, altitudeMode, point)\n        val texCoord2d = texCoord2d.copy(point).multiplyByMatrix(modelToTexCoord)\n        if (type != VERTEX_COMBINED) {\n            tessCoords[0] = longitude.inDegrees\n            tessCoords[1] = latitude.inDegrees\n            tessCoords[2] = altitude\n            GLU.gluTessVertex(rc.tessellator, tessCoords, 0 /*coords_offset*/, vertex)\n        }\n        if (vertex == 0) {\n            if (isSurfaceShape) vertexOrigin.set(longitude.inDegrees, latitude.inDegrees, altitude) else vertexOrigin.copy(point)\n            texCoord1d = 0.0\n        } else {\n            texCoord1d += point.distanceTo(prevPoint)\n        }\n        prevPoint.copy(point)\n        if (isSurfaceShape) {\n            vertexArray[vertexIndex++] = (longitude.inDegrees - vertexOrigin.x).toFloat()\n            vertexArray[vertexIndex++] = (latitude.inDegrees - vertexOrigin.y).toFloat()\n            vertexArray[vertexIndex++] = (altitude - vertexOrigin.z).toFloat()\n            vertexArray[vertexIndex++] = texCoord2d.x.toFloat()\n            vertexArray[vertexIndex++] = texCoord2d.y.toFloat()\n            vertexArray[vertexIndex++] = texCoord1d.toFloat()\n        } else {\n            vertexArray[vertexIndex++] = (point.x - vertexOrigin.x).toFloat()\n            vertexArray[vertexIndex++] = (point.y - vertexOrigin.y).toFloat()\n            vertexArray[vertexIndex++] = (point.z - vertexOrigin.z).toFloat()\n            vertexArray[vertexIndex++] = texCoord2d.x.toFloat()\n            vertexArray[vertexIndex++] = texCoord2d.y.toFloat()\n            vertexArray[vertexIndex++] = texCoord1d.toFloat()\n            if (isExtrude) {\n                point = rc.geographicToCartesian(latitude, longitude, 0.0, AltitudeMode.CLAMP_TO_GROUND, this.point)\n                vertexArray[vertexIndex++] = (point.x - vertexOrigin.x).toFloat()\n                vertexArray[vertexIndex++] = (point.y - vertexOrigin.y).toFloat()\n                vertexArray[vertexIndex++] = (point.z - vertexOrigin.z).toFloat()\n                vertexArray[vertexIndex++] = 0f /*unused*/\n                vertexArray[vertexIndex++] = 0f /*unused*/\n                vertexArray[vertexIndex++] = 0f /*unused*/\n            }\n            if (isExtrude && type == VERTEX_ORIGINAL) {\n                verticalElements.add(vertex.toShort())\n                verticalElements.add(vertex.inc().toShort())\n            }\n        }\n        return vertex\n    }\n\n    protected open fun determineModelToTexCoord(rc: RenderContext) {\n        var mx = 0.0\n        var my = 0.0\n        var mz = 0.0\n        var numPoints = 0.0\n        for (positions in boundaries) {\n            if (positions.isEmpty()) continue  // no boundary positions\n            for (pos in positions) {\n                val point = rc.geographicToCartesian(pos, AltitudeMode.ABSOLUTE, point)\n                mx += point.x\n                my += point.y\n                mz += point.z\n                numPoints++\n            }\n        }\n        mx /= numPoints\n        my /= numPoints\n        mz /= numPoints\n        rc.globe!!.cartesianToLocalTransform(mx, my, mz, modelToTexCoord)\n        modelToTexCoord.invertOrthonormal()\n    }\n\n    protected open fun tessCombine(rc: RenderContext, coords: DoubleArray, data: Array<Any?>, weight: FloatArray, outData: Array<Any?>) {\n        ensureVertexArrayCapacity() // Increment array size to fit combined vertexes\n        outData[0] = addVertex(rc, coords[1].degrees /*lat*/, coords[0].degrees /*lon*/, coords[2] /*alt*/, VERTEX_COMBINED /*type*/)\n    }\n\n    protected open fun tessVertex(rc: RenderContext, vertexData: Any) {\n        tessVertices[tessVertexCount] = vertexData as Int\n        tessEdgeFlags[tessVertexCount] = tessEdgeFlag\n        if (tessVertexCount < 2) {\n            tessVertexCount++ // increment the vertex count and wait for more vertices\n            return\n        } else {\n            tessVertexCount = 0 // reset the vertex count and process one triangle\n        }\n        val v0 = tessVertices[0].toShort()\n        val v1 = tessVertices[1].toShort()\n        val v2 = tessVertices[2].toShort()\n        topElements.add(v0)\n        topElements.add(v1)\n        topElements.add(v2)\n        if (tessEdgeFlags[0] && isExtrude && !isSurfaceShape) {\n            sideElements.add(v0)\n            sideElements.add(v0.inc())\n            sideElements.add(v1)\n            sideElements.add(v1)\n            sideElements.add(v0.inc())\n            sideElements.add(v1.inc())\n        }\n        if (tessEdgeFlags[1] && isExtrude && !isSurfaceShape) {\n            sideElements.add(v1)\n            sideElements.add(v1.inc())\n            sideElements.add(v2)\n            sideElements.add(v2)\n            sideElements.add(v1.inc())\n            sideElements.add(v2.inc())\n        }\n        if (tessEdgeFlags[2] && isExtrude && !isSurfaceShape) {\n            sideElements.add(v2)\n            sideElements.add(v2.inc())\n            sideElements.add(v0)\n            sideElements.add(v0)\n            sideElements.add(v2.inc())\n            sideElements.add(v0.inc())\n        }\n        if (tessEdgeFlags[0]) {\n            outlineElements.add(v0)\n            outlineElements.add(v1)\n        }\n        if (tessEdgeFlags[1]) {\n            outlineElements.add(v1)\n            outlineElements.add(v2)\n        }\n        if (tessEdgeFlags[2]) {\n            outlineElements.add(v2)\n            outlineElements.add(v0)\n        }\n    }\n\n    protected open fun tessEdgeFlag(rc: RenderContext, boundaryEdge: Boolean) { tessEdgeFlag = boundaryEdge }\n\n    protected open fun tessError(rc: RenderContext, errNum: Int) {\n        val errStr = GLU.gluErrorString(errNum)\n        logMessage(\n            WARN, \"Polygon\", \"assembleGeometry\", \"Error attempting to tessellate polygon '$errStr'\"\n        )\n    }\n\n    protected open fun ensureVertexArrayCapacity() {\n        val size = vertexArray.size\n        if (size == vertexIndex) {\n            val increment = (size shr 1).coerceAtLeast(12)\n            val newArray = FloatArray(size + increment)\n            vertexArray.copyInto(newArray)\n            vertexArray = newArray\n        }\n    }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.image.ImageSource\n\n/**\n * Holds attributes applied to geographic shapes.\n */\nopen class ShapeAttributes(\n    /**\n     * Indicates whether shape interiors are enabled.\n     */\n    var isDrawInterior: Boolean,\n    /**\n     * Indicates whether shape outlines are enabled.\n     */\n    var isDrawOutline: Boolean,\n    /**\n     * Indicates whether shape vertical outlines are enabled. Not all shapes display vertical outlines. Those that do\n     * not ignore this property. When enabled, those that do display vertical lines extending from the shape's specified\n     * positions to the ground.\n     */\n    var isDrawVerticals: Boolean,\n    /**\n     * Indicates whether shape depth-testing is enabled. When true, shapes may be occluded by terrain and other shapes\n     * in certain viewing situations. When false, shapes will not be occluded by terrain and other shapes.\n     */\n    var isDepthTest: Boolean,\n    /**\n     * Sets whether shape lighting is enabled. When true, the appearance of a shape's color and image source may be\n     * modified by shading applied from a global light source.\n     */\n    var isLightingEnabled: Boolean,\n    /**\n     * Indicates the color and opacity of shape interiors.\n     */\n    interiorColor: Color,\n    /**\n     * Indicates the color and opacity of shape outlines.\n     */\n    outlineColor: Color,\n    /**\n     * Indicates the width of shape outlines.\n     */\n    var outlineWidth: Float,\n    /**\n     * Indicates the image source applied to shape interiors. When null, shape interiors are displayed in the interior\n     * color. When non-null, image pixels appear in shape interiors, with each image pixel multiplied by the interior\n     * RGBA color. Use a white interior color to display unmodified image pixels.\n     * <br>\n     * By default, interior image sources are displayed as a repeating pattern across shape interiors. The pattern\n     * matches image pixels to screen pixels, such that the image appears to repeat in screen coordinates.\n     */\n    var interiorImageSource: ImageSource?,\n    /**\n     * Indicates the image source applied to shape outlines.\n     */\n    var outlineImageSource: ImageSource?\n) {\n    /**\n     * Indicates the color and opacity of shape interiors.\n     */\n    var interiorColor = interiorColor\n        set(value) {\n            field.copy(value)\n        }\n    /**\n     * Indicates the color and opacity of shape outlines.\n     */\n    var outlineColor = outlineColor\n        set(value) {\n            field.copy(value)\n        }\n\n    constructor(): this(\n        isDrawInterior = true,\n        isDrawOutline = true,\n        isDrawVerticals = false,\n        isDepthTest = true,\n        isLightingEnabled = false,\n        interiorColor = Color(1f, 1f, 1f, 1f), // white\n        outlineColor = Color(1f, 0f, 0f, 1f), // red\n        outlineWidth = 1.0f,\n        interiorImageSource = null,\n        outlineImageSource = null\n    )\n\n    constructor(attributes: ShapeAttributes): this(\n        attributes.isDrawInterior,\n        attributes.isDrawOutline,\n        attributes.isDrawVerticals,\n        attributes.isDepthTest,\n        attributes.isLightingEnabled,\n        Color(attributes.interiorColor),\n        Color(attributes.outlineColor),\n        attributes.outlineWidth,\n        attributes.interiorImageSource,\n        attributes.outlineImageSource\n    )\n\n    fun copy(attributes: ShapeAttributes) = apply {\n        isDrawInterior = attributes.isDrawInterior\n        isDrawOutline = attributes.isDrawOutline\n        isDrawVerticals = attributes.isDrawVerticals\n        isDepthTest = attributes.isDepthTest\n        isLightingEnabled = attributes.isLightingEnabled\n        interiorColor.copy(attributes.interiorColor)\n        outlineColor.copy(attributes.outlineColor)\n        outlineWidth = attributes.outlineWidth\n        interiorImageSource = attributes.interiorImageSource\n        outlineImageSource = attributes.outlineImageSource\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is ShapeAttributes) return false\n        if (isDrawInterior != other.isDrawInterior) return false\n        if (isDrawOutline != other.isDrawOutline) return false\n        if (isDrawVerticals != other.isDrawVerticals) return false\n        if (isDepthTest != other.isDepthTest) return false\n        if (isLightingEnabled != other.isLightingEnabled) return false\n        if (interiorColor != other.interiorColor) return false\n        if (outlineColor != other.outlineColor) return false\n        if (outlineWidth != other.outlineWidth) return false\n        if (interiorImageSource != other.interiorImageSource) return false\n        if (outlineImageSource != other.outlineImageSource) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = isDrawInterior.hashCode()\n        result = 31 * result + isDrawOutline.hashCode()\n        result = 31 * result + isDrawVerticals.hashCode()\n        result = 31 * result + isDepthTest.hashCode()\n        result = 31 * result + isLightingEnabled.hashCode()\n        result = 31 * result + interiorColor.hashCode()\n        result = 31 * result + outlineColor.hashCode()\n        result = 31 * result + outlineWidth.hashCode()\n        result = 31 * result + (interiorImageSource?.hashCode() ?: 0)\n        result = 31 * result + (outlineImageSource?.hashCode() ?: 0)\n        return result\n    }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.PickedObject\nimport earth.worldwind.draw.DrawableSurfaceTexture\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.AbstractRenderable\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ImageSource\nimport earth.worldwind.render.program.SurfaceTextureProgram\n\nopen class SurfaceImage(sector: Sector, var imageSource: ImageSource): AbstractRenderable(\"Surface Image\") {\n    var sector = Sector(sector)\n        set(value) {\n            field.copy(value)\n        }\n    var imageOptions: ImageOptions? = null\n\n    override fun doRender(rc: RenderContext) {\n        if (sector.isEmpty) return  // nothing to render\n        if (!rc.terrain!!.sector.intersects(sector)) return  // no terrain surface to render on\n        val texture = rc.getTexture(imageSource, imageOptions) ?: return // no texture to draw\n\n        // Enqueue a drawable surface texture for processing on the OpenGL thread.\n        val program = getShaderProgram(rc)\n        val pool = rc.getDrawablePool<DrawableSurfaceTexture>()\n        val drawable = DrawableSurfaceTexture.obtain(pool).set(program, sector, texture, texture.coordTransform)\n        rc.offerSurfaceDrawable(drawable, 0.0 /*z-order*/)\n\n        // Enqueue a picked object that associates the drawable surface texture with this surface image.\n        if (rc.isPickMode) {\n            val pickedObjectId = rc.nextPickedObjectId()\n            PickedObject.identifierToUniqueColor(pickedObjectId, drawable.color)\n            rc.offerPickedObject(PickedObject.fromRenderable(pickedObjectId, this, rc.currentLayer!!))\n        }\n    }\n\n    protected open fun getShaderProgram(rc: RenderContext) = rc.getShaderProgram { SurfaceTextureProgram() }\n}","package earth.worldwind.shape\n\nimport earth.worldwind.geom.Offset\nimport earth.worldwind.render.Color\nimport earth.worldwind.render.Font\n\n/**\n * Holds attributes applied to text shapes and [Placemark] labels.\n */\nopen class TextAttributes protected constructor(\n    font: Font,\n    textColor: Color,\n    textOffset: Offset,\n    outlineColor: Color,\n    var outlineWidth: Float,\n    var isOutlineEnabled: Boolean,\n    var isDepthTestEnabled: Boolean,\n    var scale: Double\n) {\n    var font = font\n        set(value) {\n            field.copy(value)\n        }\n    var textColor = textColor\n        set(value) {\n            field.copy(value)\n        }\n    var textOffset = textOffset\n        set(value) {\n            field.copy(value)\n        }\n    var outlineColor = outlineColor\n        set(value) {\n            field.copy(value)\n        }\n\n    constructor(): this(\n        font = Font(),\n        textColor = Color(1f, 1f, 1f, 1f),\n        textOffset = Offset.bottomCenter(),\n        outlineColor = Color(0f, 0f, 0f, 1f),\n        outlineWidth = 3f,\n        isOutlineEnabled = true,\n        isDepthTestEnabled = true,\n        scale = 1.0\n    )\n\n    constructor(attributes: TextAttributes): this(\n        attributes.font,\n        Color(attributes.textColor),\n        Offset(attributes.textOffset),\n        Color(attributes.outlineColor),\n        attributes.outlineWidth,\n        attributes.isOutlineEnabled,\n        attributes.isDepthTestEnabled,\n        attributes.scale\n    )\n\n    fun copy(attributes: TextAttributes) = apply {\n        font.copy(attributes.font)\n        textColor.copy(attributes.textColor)\n        textOffset.copy(attributes.textOffset)\n        outlineColor.copy(attributes.outlineColor)\n        outlineWidth = attributes.outlineWidth\n        isOutlineEnabled = attributes.isOutlineEnabled\n        isDepthTestEnabled = attributes.isDepthTestEnabled\n        scale = attributes.scale\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is TextAttributes) return false\n        if (font != other.font) return false\n        if (textColor != other.textColor) return false\n        if (textOffset != other.textOffset) return false\n        if (outlineColor != other.outlineColor) return false\n        if (outlineWidth != other.outlineWidth) return false\n        if (isOutlineEnabled != other.isOutlineEnabled) return false\n        if (isDepthTestEnabled != other.isDepthTestEnabled) return false\n        if (scale != other.scale) return false\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = font.hashCode()\n        result = 31 * result + textColor.hashCode()\n        result = 31 * result + textOffset.hashCode()\n        result = 31 * result + outlineColor.hashCode()\n        result = 31 * result + outlineWidth.hashCode()\n        result = 31 * result + isOutlineEnabled.hashCode()\n        result = 31 * result + isDepthTestEnabled.hashCode()\n        result = 31 * result + scale.hashCode()\n        return result\n    }\n}","package earth.worldwind.render\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport org.w3c.dom.CENTER\nimport org.w3c.dom.CanvasTextAlign\n\n/**\n * Holds attributes controlling the style, size and other attributes of [earth.worldwind.shape.Label] shapes and\n * the textual features of [earth.worldwind.shape.Placemark] and other shapes. The values used for these attributes are those\n * defined by the <a href=\"http://www.w3schools.com/cssref/pr_font_font.asp\">CSS Font property</a>.\n */\nactual open class Font(\n    /**\n     * The font size.\n     */\n    var size: Int,\n    /**\n     * The font family.\n     * @see <a href=\"http://www.w3schools.com/cssref/pr_font_font-family.asp\">CSS font-family</a> for defined values.\n     */\n    var family: String = \"sans-serif\",\n    /**\n     * The font weight.\n     * @see <a href=\"http://www.w3schools.com/cssref/pr_font_weight.asp\">CSS font-weight</a> for defined values.\n     */\n    var weight: String = \"normal\",\n    /**\n     * The font style.\n     * @see <a href=\"http://www.w3schools.com/cssref/pr_font_font-style.asp\">CSS font-style</a> for defined values.\n     */\n    var style: String = \"normal\",\n    /**\n     * The font variant.\n     * @see <a href=\"http://www.w3schools.com/cssref/pr_font_font-variant.asp\">CSS font-variant</a> for defined values.\n     */\n    var variant: String = \"normal\",\n    /**\n     * The horizontal alignment of the font.\n     * Recognized values are \"left\", \"center\" and \"right\".\n     */\n    var horizontalAlignment: CanvasTextAlign = CanvasTextAlign.CENTER\n) {\n    actual constructor(): this(14)\n    actual constructor(family: String, weight: FontWeight, size: Int): this(\n        size, family,\n        if(weight == FontWeight.BOLD) \"bold\" else \"normal\",\n        if(weight == FontWeight.ITALIC) \"italic\" else \"normal\",\n    )\n\n    init {\n        require(size > 0) {\n            logMessage(ERROR, \"Font\", \"constructor\", \"invalidSize\");\n        }\n    }\n\n    actual fun copy(font: Font) {\n        size = font.size\n        style = font.style\n        variant = font.variant\n        weight = font.weight\n        family = font.family\n        horizontalAlignment = font.horizontalAlignment\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Font) return false\n        if (size != other.size) return false\n        if (style != other.style) return false\n        if (variant != other.variant) return false\n        if (weight != other.weight) return false\n        if (family != other.family) return false\n        if (horizontalAlignment != other.horizontalAlignment) return false\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = size\n        result = 31 * result + style.hashCode()\n        result = 31 * result + variant.hashCode()\n        result = 31 * result + weight.hashCode()\n        result = 31 * result + family.hashCode()\n        result = 31 * result + horizontalAlignment.hashCode()\n        return result\n    }\n\n    /**\n     * A string representing this font's style, weight, size and family properties, suitable for\n     * passing directly to a 2D canvas context.\n     */\n    override fun toString() = \"$style $variant $weight ${size}px $family\"\n}","package earth.worldwind.shape\n\nimport earth.worldwind.draw.DrawableSurfaceTexture\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Matrix3\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.render.AbstractRenderable\nimport earth.worldwind.render.RenderContext\nimport earth.worldwind.render.Texture\nimport earth.worldwind.render.image.ImageOptions\nimport earth.worldwind.render.image.ImageTile\nimport earth.worldwind.render.program.SurfaceTextureProgram\nimport earth.worldwind.util.*\n\nopen class TiledSurfaceImage(tileFactory: TileFactory, levelSet: LevelSet): AbstractRenderable(\"Tiled Surface Image\") {\n    /**\n     * Tile factory implementation.\n     */\n    var tileFactory = tileFactory\n        set(value) {\n            field = value\n            invalidateTiles()\n        }\n    /**\n     * Tile pyramid representation.\n     */\n    var levelSet = levelSet\n        set(value) {\n            field = value\n            invalidateTiles()\n        }\n    /**\n     * Additional image texture options.\n     */\n    var imageOptions: ImageOptions? = null\n        set(value) {\n            field = value\n            invalidateTiles()\n        }\n    /**\n     * Define imagery level of details. It controls tile pixel density on the screen.\n     */\n    var detailControl = 1.0\n    /**\n     * Determines how many levels to skip from retrieving texture during tile pyramid subdivision.\n     */\n    var levelOffset = 0\n    /**\n     * Define cache tiles factory implementation.\n     */\n    var cacheTileFactory: TileFactory? = null\n    /**\n     * Configures tiled surface image to work only with cache source.\n     */\n    var useCacheOnly = false\n    protected val topLevelTiles = mutableListOf<Tile>()\n\n    companion object {\n        // Retrieve top level tiles to avoid black holes when navigating and zooming out camera\n        private const val RETRIEVE_TOP_LEVEL_TILES = true\n    }\n\n    /**\n     * Memory cache for this layer's subdivision tiles. Each entry contains an array of four image tiles corresponding\n     * to the subdivision of the group's common parent tile. The cache is configured to hold 1000 groups, a number\n     * empirically determined to be sufficient for storing the tiles needed to navigate a small region.\n     */\n    protected val tileCache = LruMemoryCache<String, Array<Tile>>(1000)\n    protected var activeProgram: SurfaceTextureProgram? = null\n    protected var ancestorTile: ImageTile? = null\n    protected var ancestorTexture: Texture? = null\n    protected val ancestorTexCoordMatrix = Matrix3()\n\n    override fun doRender(rc: RenderContext) {\n        if (rc.terrain!!.sector.isEmpty) return  // no terrain surface to render on\n        determineActiveProgram(rc)\n        assembleTiles(rc)\n        activeProgram = null // clear the active program to avoid leaking render resources\n        ancestorTile = null // clear the ancestor tile and texture\n        ancestorTexture = null\n    }\n\n    /**\n     * Determine list of tiles which fit specified sector and maximum resolution.\n     *\n     * @param sector     the bounding sector.\n     * @param resolution the desired resolution in angular value of latitude per pixel.\n     * @return List of tiles which fit specified sector and maximum resolution.\n     */\n    open fun assembleTilesList(sector: Sector, resolution: Angle): List<ImageTile> {\n        val result = mutableListOf<ImageTile>()\n        val lastLevelNumber = levelSet.levelForResolution(resolution).levelNumber\n        if (topLevelTiles.isEmpty()) createTopLevelTiles()\n        topLevelTiles.forEach { addAndSubdivideTile(it as ImageTile, sector, lastLevelNumber, result) }\n        return result\n    }\n\n    protected open fun addAndSubdivideTile(tile: ImageTile, sector: Sector, lastLevelNumber: Int, result: MutableList<ImageTile>) {\n        if (!tile.intersectsSector(sector)) return // Ignore tiles and its descendants outside the specified sector\n        // Skip tiles with level less than specified offset from the result list\n        if (tile.level.levelNumber >= levelOffset) result.add(tile)\n        // Do not subdivide if specified level or last available level reached\n        if (tile.level.levelNumber < lastLevelNumber && !tile.level.isLastLevel) {\n            tile.subdivide(tileFactory).forEach {\n                addAndSubdivideTile(it as ImageTile, sector, lastLevelNumber, result)\n            }\n        }\n    }\n\n    protected open fun determineActiveProgram(rc: RenderContext) {\n        activeProgram = rc.getShaderProgram { SurfaceTextureProgram() }\n    }\n\n    protected open fun assembleTiles(rc: RenderContext) {\n        // TODO\n        // The need to create Tiles with a defined image source couples the need to determine a tile's visibility with\n        // he need to know its image source. Decoupling the two would mean we only need to know the image source when\n        // the texture is actually requested Could the tile-based operations done here be implicit on level/row/column,\n        // or use transient pooled tile objects not tied to an image source?\n        if (topLevelTiles.isEmpty()) createTopLevelTiles()\n        for (tile in topLevelTiles) addTileOrDescendants(rc, tile as ImageTile)\n    }\n\n    protected open fun createTopLevelTiles() {\n        levelSet.firstLevel?.let { Tile.assembleTilesForLevel(it, tileFactory, topLevelTiles) }\n    }\n\n    protected open fun addTileOrDescendants(rc: RenderContext, tile: ImageTile) {\n        // ignore the tile and its descendants if it's not needed or not visible\n        if (!tile.intersectsSector(levelSet.sector) || !tile.intersectsFrustum(rc, rc.frustum)) return\n        val retrieveCurrentLevel = tile.level.levelNumber >= levelOffset\n        if (tile.level.isLastLevel || !tile.mustSubdivide(rc, detailControl)) {\n            if (retrieveCurrentLevel) addTile(rc, tile)\n            return  // use the tile if it does not need to be subdivided\n        }\n        val currentAncestorTile = ancestorTile\n        val currentAncestorTexture = ancestorTexture\n        getTexture(rc, tile, RETRIEVE_TOP_LEVEL_TILES && retrieveCurrentLevel)?.let { tileTexture ->\n            // tile has a texture; use it as a fallback tile for descendants\n            ancestorTile = tile\n            ancestorTexture = tileTexture\n        }\n        // each tile has a cached size of 1, recursively process the tile's children\n        for (child in tile.subdivideToCache(tileFactory, tileCache, 4)) addTileOrDescendants(rc, child as ImageTile)\n        ancestorTile = currentAncestorTile // restore the last fallback tile, even if it was null\n        ancestorTexture = currentAncestorTexture\n    }\n\n    protected open fun addTile(rc: RenderContext, tile: ImageTile) {\n        val texture = getTexture(rc, tile)\n        val ancestorTile = ancestorTile\n        val ancestorTexture = ancestorTexture\n        if (texture != null) { // use the tile's own texture\n            val pool = rc.getDrawablePool<DrawableSurfaceTexture>()\n            val drawable = DrawableSurfaceTexture.obtain(pool).set(activeProgram, tile.sector, texture, texture.coordTransform)\n            rc.offerSurfaceDrawable(drawable, 0.0 /*z-order*/)\n        } else if (ancestorTile != null && ancestorTexture != null) { // use the ancestor tile's texture, transformed to fill the tile sector\n            ancestorTexCoordMatrix.copy(ancestorTexture.coordTransform)\n            ancestorTexCoordMatrix.multiplyByTileTransform(tile.sector, ancestorTile.sector)\n            val pool = rc.getDrawablePool<DrawableSurfaceTexture>()\n            val drawable = DrawableSurfaceTexture.obtain(pool).set(activeProgram, tile.sector, ancestorTexture, ancestorTexCoordMatrix)\n            rc.offerSurfaceDrawable(drawable, 0.0 /*z-order*/)\n        }\n    }\n\n    // TODO If cache source retrieved but it is outdated, than try to retrieve original image source anyway to refresh cache\n    protected open fun getTexture(rc: RenderContext, tile: ImageTile, retrieve: Boolean = true): Texture? {\n        // No image source indicates an empty level or an image missing from the tiled data store\n        val imageSource = tile.imageSource ?: return null\n        // If cache tile factory is specified, then create cache source and store it in tile\n        val cacheSource = tile.cacheSource ?: cacheTileFactory?.run {\n            (createTile(tile.sector, tile.level, tile.row, tile.column) as ImageTile).imageSource?.also { tile.cacheSource = it }\n        }\n        // If cache source is not absent, then retrieve it instead of original image source\n        val isCacheAbsent = cacheSource == null || rc.renderResourceCache!!.absentResourceList.isResourceAbsent(cacheSource.hashCode())\n        return rc.getTexture(\n            if (isCacheAbsent) imageSource else cacheSource!!, imageOptions, retrieve && (!useCacheOnly || !isCacheAbsent)\n        )\n    }\n\n    protected open fun invalidateTiles() {\n        topLevelTiles.clear()\n        tileCache.clear()\n    }\n}","package earth.worldwind.util\n\nimport kotlinx.datetime.Clock\nimport kotlin.time.Duration\nimport kotlin.time.Duration.Companion.seconds\n\n/**\n * Provides a collection to keep track of resources whose retrieval failed and when retrieval may be tried again.\n */\nopen class AbsentResourceList<T>(\n    /**\n     * The number of attempts to make before the resource is marked as absent.\n     */\n    private val maxTrys: Int,\n    /**\n     * The amount of time to wait between attempts, in milliseconds.\n     */\n    private val minCheckInterval: Duration\n) {\n    /**\n     * The amount of time, in milliseconds, beyond which retrieval attempts should again be allowed.\n     * When this time has elapsed from the most recent failed attempt the number of try's attempted is\n     * reset to 0. This prevents the resource from being permanently blocked.\n     */\n    var tryAgainInterval = 60.seconds\n\n    private val possiblyAbsent = mutableMapOf<T, AbsentResourceEntry>()\n\n    fun clear() { possiblyAbsent.clear() }\n\n    /**\n     * Indicates whether a specified resource is marked as absent.\n     * @param resourceId The resource identifier.\n     * @returns true if the resource is marked as absent, otherwise false.\n     */\n    fun isResourceAbsent(resourceId: T): Boolean {\n        val entry = possiblyAbsent[resourceId] ?: return false\n        if (entry.permanent) return true\n\n        val timeSinceLastMark = Clock.System.now() - entry.timeOfLastMark\n\n        if (timeSinceLastMark > tryAgainInterval) {\n            possiblyAbsent.remove(resourceId)\n            return false\n        }\n\n        return timeSinceLastMark < minCheckInterval || entry.numTrys > maxTrys\n    }\n\n    /**\n     * Marks a resource attempt as having failed. This increments the number-of-tries counter and sets the time\n     * of the last attempt. When this method has been called [AbsentResourceList.maxTrys] times the resource is marked\n     * as absent until this absent resource list's [AbsentResourceList.tryAgainInterval] is reached.\n     *\n     * @param resourceId The resource identifier.\n     * @param permanent Marks a resource attempt as having failed permanently. No attempt will ever again be made to retrieve the resource.\n     */\n    fun markResourceAbsent(resourceId: T, permanent: Boolean = false) {\n        (possiblyAbsent[resourceId] ?: AbsentResourceEntry().also { possiblyAbsent[resourceId] = it }).makeTry(permanent)\n    }\n\n    /**\n     * Removes the specified resource from this absent resource list. Call this method when retrieval attempt succeeded.\n     * @param resourceId The resource identifier.\n     */\n    fun unmarkResourceAbsent(resourceId: T) { possiblyAbsent.remove(resourceId) }\n\n    private inner class AbsentResourceEntry {\n        var timeOfLastMark = Clock.System.now()\n            private set\n        var numTrys = 0\n            private set\n        var permanent = false\n            private set\n\n        fun makeTry(permanent: Boolean = false) {\n            numTrys++\n            timeOfLastMark = Clock.System.now()\n            this.permanent = permanent\n        }\n    }\n}","package earth.worldwind.util\n\n/**\n * AbstractSource instances are intended to be used as a key into a cache or other data structure that enables sharing of\n * loaded resources.\n */\nabstract class AbstractSource protected constructor(protected val source: Any) {\n    /**\n     * Resource post-processing routine.\n     */\n    var postprocessor: ResourcePostprocessor<*>? = null\n\n    /**\n     * @return generic image source as unrecognized object.\n     */\n    fun asUnrecognized() = source\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is AbstractSource) return false\n        if (source != other.source) return false\n        return true\n    }\n\n    override fun hashCode() = source.hashCode()\n\n    override fun toString() = source.toString()\n}","package earth.worldwind.util\n\nimport kotlin.math.max\n\n@Suppress(\"UNCHECKED_CAST\")\nopen class BasicPool<T>: Pool<T> {\n    companion object {\n        protected const val MIN_CAPACITY_INCREMENT = 12\n    }\n\n    protected var size = 0\n    protected var entries = arrayOfNulls<Any?>(size)\n\n    override fun acquire(): T? {\n        if (size > 0) {\n            val last = --size\n            val instance = entries[last]\n            entries[last] = null\n            return instance as T?\n        }\n        return null\n    }\n\n    override fun release(instance: T?) {\n        // TODO reduce the pool size when excess entries may not be needed\n        // TODO use a keep alive time to indicate how long to keep stale instances\n        if (instance != null) {\n            val capacity = entries.size\n            if (capacity == size) {\n                // increase the pool size by the larger of 50% or the minimum increment\n                val increment = max(capacity shr 1, MIN_CAPACITY_INCREMENT)\n                val newEntries = arrayOfNulls<Any?>(capacity + increment)\n                entries.copyInto(newEntries, 0, 0, capacity)\n                entries = newEntries\n            }\n            entries[size++] = instance\n        }\n    }\n}","package earth.worldwind.util\n\nimport earth.worldwind.geom.Angle.Companion.ZERO\nimport earth.worldwind.geom.Location\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.math.ceil\nimport kotlin.math.roundToInt\n\n/**\n * Represents a level of a specific resolution in a [LevelSet].\n */\nopen class Level internal constructor(\n    /**\n     * The LevelSet that this level is a member of.\n     */\n    val parent: LevelSet,\n    /**\n     * The level's ordinal in its parent level set.\n     */\n    val levelNumber: Int,\n    /**\n     * The geographic width and height of tiles within this level.\n     */\n    val tileDelta: Location\n) {\n    /**\n     * The width in pixels of the image represented by all tiles in this level set, or the number of sample points in\n     * the longitudinal direction of this level set.\n     */\n    val levelWidth: Int\n    /**\n     * The height in pixels of the image represented by all tiles in this level set, or the number of sample points in\n     * the latitudinal direction of this level set.\n     */\n    val levelHeight: Int\n    /**\n     * The parent LevelSet's tileWidth.\n     */\n    val tileWidth: Int\n    /**\n     * The parent LevelSet's tileHeight.\n     */\n    val tileHeight: Int\n    /**\n     * Indicates whether this level is the lowest resolution level (level 0) within the parent level set.\n     */\n    val isFirstLevel get() = levelNumber == 0\n    /**\n     * Indicates whether this level is the highest resolution level within the parent level set.\n     */\n    val isLastLevel get() = levelNumber == parent.numLevels - 1\n    /**\n     * Returns the level whose ordinal occurs immediately before this level's ordinal in the parent level set, or null\n     * if this is the fist level.\n     */\n    val previousLevel get() = parent.level(levelNumber - 1)\n    /**\n     * Returns the level whose ordinal occurs immediately after this level's ordinal in the parent level set, or null if\n     * this is the last level.\n     */\n    val nextLevel get() = parent.level(levelNumber + 1)\n\n    /**\n     * Constructs a Level within a LevelSet. Applications typically do not interact with this class.\n     */\n    init {\n        require(tileDelta.latitude > ZERO && tileDelta.longitude > ZERO) {\n            logMessage(ERROR, \"Level\", \"constructor\", \"The tile delta is zero\")\n        }\n        levelWidth = (parent.tileWidth * parent.sector.deltaLongitude.inDegrees / tileDelta.longitude.inDegrees).roundToInt()\n        levelHeight = (parent.tileHeight * parent.sector.deltaLatitude.inDegrees / tileDelta.latitude.inDegrees).roundToInt()\n        tileWidth = parent.tileWidth\n        tileHeight = parent.tileHeight\n    }\n\n    /**\n     * Calculates amount of tiles, which fit specified sector\n     *\n     * @param sector the desired sector to check tile count\n     * @return Number of tiles which fit specified sector at this level\n     */\n    fun tilesInSector(sector: Sector): Int {\n        val tilesPerLat = ceil(sector.deltaLatitude.inDegrees / tileDelta.latitude.inDegrees).toInt()\n        val tilesPerLon = ceil(sector.deltaLongitude.inDegrees / tileDelta.longitude.inDegrees).toInt()\n        return tilesPerLat * tilesPerLon\n    }\n}","package earth.worldwind.util\n\nimport earth.worldwind.geom.Angle.Companion.NEG180\nimport earth.worldwind.geom.Angle.Companion.NEG90\nimport earth.worldwind.geom.Angle.Companion.POS90\nimport earth.worldwind.geom.Angle.Companion.toDegrees\nimport earth.worldwind.geom.Location\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.math.ceil\nimport kotlin.math.floor\nimport kotlin.math.ln\n\n/**\n * Configuration values for a multi-resolution, hierarchical collection of tiles organized into levels of increasing\n * resolution.\n */\nopen class LevelSetConfig {\n    /**\n     * The sector spanned by the level set.\n     */\n    val sector = Sector().setFullSphere()\n    /**\n     * Tile origin for level set\n     */\n    val tileOrigin = Location(NEG90, NEG180)\n    /**\n     * The geographic width and height of tiles in the first level (the lowest resolution) of the level set.\n     */\n    var firstLevelDelta = Location(POS90, POS90)\n    /**\n     * The number of levels in the level set.\n     */\n    var numLevels = 1\n    /**\n     * The width in pixels of images associated with tiles in the level set, or the number of sample points in the\n     * longitudinal direction of elevation tiles associated with the level set.\n     */\n    var tileWidth = 256\n    /**\n     * The height in pixels of images associated with tiles in the level set, or the number of sample points in the\n     * latitudinal direction of elevation tiles associated with the level set.\n     */\n    var tileHeight = 256\n\n    /**\n     * Returns the number of levels necessary to achieve the specified resolution. The result is correct for this\n     * configuration's current firstLevelDelta, tileWidth and tileHeight, and is invalid if any of these values change.\n     *\n     * @param radiansPerPixel the desired resolution in radians per pixel\n     *\n     * @return the number of levels\n     *\n     * @throws IllegalArgumentException If the resolution is not positive\n     */\n    fun numLevelsForResolution(radiansPerPixel: Double): Int {\n        require(radiansPerPixel > 0) {\n            logMessage(ERROR, \"LevelSetConfig\", \"numLevelsForResolution\", \"invalidResolution\")\n        }\n        val degreesPerPixel = toDegrees(radiansPerPixel)\n        val firstLevelDegreesPerPixel = firstLevelDelta.latitude.inDegrees / tileHeight\n        val level = ln(firstLevelDegreesPerPixel / degreesPerPixel) / ln(2.0) // fractional level address\n        var levelNumber = ceil(level).toInt() // ceiling captures the resolution\n        if (levelNumber < 0) levelNumber = 0 // need at least one level, even if it exceeds the desired resolution\n        return levelNumber + 1 // convert level number to level count\n    }\n\n    /**\n     * Returns the number of levels closest to the specified resolution, but does not exceed it. May be used to\n     * configure level sets where a not to exceed resolution is mandated. The result is correct for this configuration's\n     * current firstLevelDelta, tileWidth and tileHeight, and is invalid if any of these values change.\n     *\n     * @param radiansPerPixel the desired not to exceed resolution in radians per pixel\n     *\n     * @return the number of levels\n     *\n     * @throws IllegalArgumentException If the resolution is not positive\n     */\n    fun numLevelsForMinResolution(radiansPerPixel: Double): Int {\n        require(radiansPerPixel > 0) {\n            logMessage(ERROR, \"LevelSetConfig\", \"numLevelsForMinResolution\", \"invalidResolution\")\n        }\n        val degreesPerPixel = toDegrees(radiansPerPixel)\n        val firstLevelDegreesPerPixel = firstLevelDelta.latitude.inDegrees / tileHeight\n        val level = ln(firstLevelDegreesPerPixel / degreesPerPixel) / ln(2.0) // fractional level address\n        var levelNumber = floor(level).toInt() // floor prevents exceeding the min scale\n        if (levelNumber < 0) levelNumber = 0 // need at least one level, even if it exceeds the desired resolution\n        return levelNumber + 1 // convert level number to level count\n    }\n}","package earth.worldwind.util\n\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport kotlin.jvm.JvmOverloads\n\nopen class LruMemoryCache<K, V> @JvmOverloads constructor(\n    val capacity: Long, protected val lowWater: Long = (capacity * 0.75).toLong()\n) {\n    var usedCapacity = 0L\n        protected set\n    val entryCount get() = entries.size\n    // sorts entries from least recently used to most recently used\n    protected open val lruComparator = Comparator<Entry<K, V>> { lhs, rhs -> lhs.lastUsed.compareTo(rhs.lastUsed) }\n    protected val entries = mutableMapOf<K, Entry<K, V>>()\n    protected open var age = 0L\n        get() = ++field // Auto increment cache age on each access to its entries\n\n    protected open class Entry<K, V>(val key: K, val value: V, val size: Int) { var lastUsed = 0L }\n\n    init {\n        require(capacity >= 1) {\n            logMessage(ERROR, \"LruMemoryCache\", \"constructor\", \"invalidCapacity\")\n        }\n        require(lowWater in 0 until capacity) {\n            logMessage(\n                ERROR, \"LruMemoryCache\", \"constructor\",\n                \"The specified low-water value is greater than or equal to the capacity, or less than 1\"\n            )\n        }\n    }\n\n    open operator fun get(key: K) = entries[key]?.run{\n        lastUsed = age\n        value\n    }\n\n    open fun put(key: K, value: V, size: Int): V? {\n        if (usedCapacity + size > capacity) makeSpace(size)\n        val newEntry = Entry(key, value, size)\n        newEntry.lastUsed = age\n        usedCapacity += newEntry.size\n        val oldEntry = entries.put(key, newEntry)\n        if (oldEntry != null) {\n            usedCapacity -= oldEntry.size\n            if (newEntry.value !== oldEntry.value) {\n                entryRemoved(oldEntry.key, oldEntry.value, newEntry.value, false)\n                return oldEntry.value\n            }\n        }\n        return null\n    }\n\n    open fun remove(key: K) = entries.remove(key)?.run {\n        usedCapacity -= size\n        entryRemoved(key, value, null, false)\n        value\n    }\n\n    open fun trimToAge(maxAge: Long): Int {\n        var trimmedCapacity = 0\n\n        // Sort the entries from least recently used to most recently used.\n        val sortedEntries = assembleSortedEntries()\n\n        // Remove the least recently used entries until the entry's age is within the specified maximum age.\n        for (entry in sortedEntries) {\n            if (entry.lastUsed < maxAge) {\n                entries.remove(entry.key)\n                usedCapacity -= entry.size\n                trimmedCapacity += entry.size\n                entryRemoved(entry.key, entry.value, null, false)\n            } else break\n        }\n        return trimmedCapacity\n    }\n\n    open fun containsKey(key: K) = entries.containsKey(key)\n\n    open fun clear() {\n        for (entry in entries.values) entryRemoved(entry.key, entry.value, null, false)\n        entries.clear()\n        usedCapacity = 0\n    }\n\n    protected open fun makeSpace(spaceRequired: Int) {\n        // Sort the entries from least recently used to most recently used.\n        val sortedEntries = assembleSortedEntries()\n\n        // Remove the least recently used entries until the cache capacity reaches the low water and the cache has\n        // enough free capacity for the required space.\n        for (entry in sortedEntries) {\n            if (usedCapacity > lowWater || capacity - usedCapacity < spaceRequired) {\n                entries.remove(entry.key)\n                usedCapacity -= entry.size\n                entryRemoved(entry.key, entry.value, null, true)\n            } else break\n        }\n    }\n\n    /*\n     * Sort the entries from least recently used to most recently used.\n     */\n    protected open fun assembleSortedEntries() = entries.values.sortedWith(lruComparator)\n\n    protected open fun entryRemoved(key: K, oldValue: V, newValue: V?, evicted: Boolean) {}\n}","package earth.worldwind.util\n\nval messageTable = mapOf(\n    \"errorReadingProgramSource\" to \"Error reading program sources\",\n    \"exceptionParsingText\" to \"Exception parsing text\",\n    \"invalidBitmap\" to \"The bitmap is recycled\",\n    \"invalidCapacity\" to \"The capacity is less than 1\",\n    \"invalidCount\" to \"The count is invalid\",\n    \"invalidClipDistance\" to \"The clip distance is invalid\",\n    \"invalidFieldOfView\" to \"The field of view is invalid\",\n    \"invalidHeight\" to \"The height is invalid\",\n    \"invalidIndex\" to \"The index is invalid\",\n    \"invalidNumIntervals\" to \"The number of intervals is invalid\",\n    \"invalidNumLevels\" to \"The number of levels is invalid\",\n    \"invalidRadius\" to \"The radius is invalid\",\n    \"invalidRange\" to \"The range is invalid\",\n    \"invalidResolution\" to \"The resolution is invalid\",\n    \"invalidStride\" to \"The stride is invalid\",\n    \"invalidTileDelta\" to \"The tile delta is invalid\",\n    \"invalidWidth\" to \"The width is invalid\",\n    \"invalidWidthOrHeight\" to \"The width or the height is invalid\",\n    \"missingArray\" to \"The array insufficient length\",\n    \"missingLayerNames\" to \"The layer names are empty\",\n    \"singularMatrix\" to \"The matrix cannot be inverted\"\n)","package earth.worldwind.util\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.geom.Angle.Companion.radians\nimport earth.worldwind.geom.Location\nimport kotlinx.datetime.Instant\nimport kotlinx.datetime.TimeZone\nimport kotlinx.datetime.toLocalDateTime\nimport kotlin.math.*\n\n/**\n * Provides utilities for determining the Sun geographic and celestial location.\n */\nobject SunPosition {\n    class CelestialLocation(val declination: Angle, val rightAscension: Angle)\n\n    /**\n     * Computes the geographic location of the sun for a given date\n     * @param instant Input instant\n     * @return the geographic location\n     */\n    fun getAsGeographicLocation(instant: Instant) = celestialToGeographic(getAsCelestialLocation(instant), instant)\n\n    /**\n     * Computes the celestial location of the sun for a given julianDate\n     * @param instant Input instant\n     * @return the celestial location\n     */\n    fun getAsCelestialLocation(instant: Instant): CelestialLocation {\n        val julianDate = computeJulianDate(instant)\n\n        //number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        val numDays = julianDate - 2451545\n        val meanLongitude = Angle.normalizeAngle360(280.460 + 0.9856474 * numDays)\n        val meanAnomaly = Angle.toRadians(Angle.normalizeAngle360(357.528 + 0.9856003 * numDays))\n        val eclipticLongitude = meanLongitude + 1.915 * sin(meanAnomaly) + 0.02 * sin(2 * meanAnomaly)\n        val eclipticLongitudeRad = Angle.toRadians(eclipticLongitude)\n        val obliquityOfTheEcliptic = Angle.toRadians(23.439 - 0.0000004 * numDays)\n        val declination = asin(sin(obliquityOfTheEcliptic) * sin(eclipticLongitudeRad)).radians\n        var rightAscension = atan(cos(obliquityOfTheEcliptic) * tan(eclipticLongitudeRad)).radians\n        if (eclipticLongitude >= 90 && eclipticLongitude < 270) rightAscension += Angle.POS180\n        return CelestialLocation(declination, rightAscension.normalize360())\n    }\n\n    /**\n     * Converts from celestial coordinates (declination and right ascension) to geographic coordinates\n     * (latitude, longitude) for a given julian date\n     * @param celestialLocation Celestial location\n     * @param instant Input instant\n     * @return the geographic location\n     */\n    fun celestialToGeographic(celestialLocation: CelestialLocation, instant: Instant): Location {\n        val julianDate = computeJulianDate(instant)\n\n        //number of days (positive or negative) since Greenwich noon, Terrestrial Time, on 1 January 2000 (J2000.0)\n        val numDays = julianDate - 2451545\n\n        //Greenwich Mean Sidereal Time\n        val GMST = Angle.normalizeAngle360(280.46061837 + 360.98564736629 * numDays)\n\n        //Greenwich Hour Angle\n        val GHA = Angle.normalizeAngle360(GMST - celestialLocation.rightAscension.inDegrees)\n\n        val longitude = (-GHA).degrees.normalizeLongitude()\n\n        return Location(celestialLocation.declination, longitude)\n    }\n\n    /**\n     * Computes the julian date from a javascript date object\n     * @param instant Input instant\n     * @return the julian date\n     */\n    fun computeJulianDate(instant: Instant): Double {\n        val date = instant.toLocalDateTime(TimeZone.UTC)\n        var year = date.year\n        var month = date.monthNumber + 1\n        val day = date.dayOfMonth\n        val hour = date.hour\n        val minute = date.minute\n        val second = date.second\n        val dayFraction = (hour + minute / 60.0 + second / 3600.0) / 24.0\n        if (month <= 2) {\n            year -= 1\n            month += 12\n        }\n        val a = floor(year / 100.0)\n        val b = 2 - a + floor(a / 4.0)\n        val JD0h = floor(365.25 * (year + 4716)) + floor(30.6001 * (month + 1)) + day + b - 1524.5\n        return JD0h + dayFraction\n    }\n\n}","package earth.worldwind.util\n\nimport earth.worldwind.geom.*\nimport earth.worldwind.render.RenderContext\nimport kotlinx.datetime.Instant\nimport kotlin.jvm.JvmStatic\nimport kotlin.math.*\n\n/**\n * Geographically rectangular tile within a [LevelSet], typically representing terrain or imagery. Provides a base\n * class for tiles used by tiled image layers and elevation models. Applications typically do not interact with this\n * class.\n */\nopen class Tile protected constructor(\n    /**\n     * The sector spanned by this tile.\n     */\n    val sector: Sector,\n    /**\n     * The level at which this tile lies within a [LevelSet].\n     */\n    val level: Level,\n    /**\n     * The tile's row within its level.\n     */\n    val row: Int,\n    /**\n     * The tile's column within its level.\n     */\n    val column: Int\n) {\n    /**\n     * A key that uniquely identifies this tile within a level set. Tile keys are not unique to a specific level set.\n     */\n    val tileKey = level.levelNumber.toString() + '.' + row + '.' + column\n    /**\n     * A factor expressing the size of a pixel or elevation cell at the center of this tile, in radians per pixel (or\n     * cell).\n     * <br>\n     * Texel size in meters is computed as `(tileDelta / tileWidth) * cos(lat) * R`, where lat is the\n     * centroid latitude and R is the globe's equatorial radius. This is derived by considering that texels are laid out\n     * continuously on the arc of constant latitude connecting the tile's east and west edges and passing through its\n     * centroid. The radii for the corresponding circle of constant latitude is `cos(lat) * R`, and the arc\n     * length is therefore `tileDelta * cos(lat) * R`. The size of a texel along this arc is then found by\n     * dividing by the number of texels along that arc, defined by the property Level.tileWidth.\n     * <br>\n     * This property stores the constant part of the texel size computation, `(tileDelta / tileWidth) *\n     * cos(lat)`, leaving the globe-dependant variable `R` to be incorporated by the globe attached to\n     * the RenderContext.\n     */\n    protected val texelSizeFactor = level.tileDelta.longitude.inRadians / level.tileWidth * cos(sector.centroidLatitude.inRadians)\n    /**\n     * The tile's Cartesian bounding box.\n     */\n    protected val extent by lazy { BoundingBox() }\n    /**\n     * The nearest point on the tile to the camera. Altitude value is based on the minimum height for the tile.\n     */\n    protected val nearestPoint = Vec3()\n\n    protected val heightLimits by lazy { FloatArray(2) }\n    protected var heightLimitsTimestamp = Instant.DISTANT_PAST\n    protected var extentExaggeration = 0.0f\n\n    /**\n     * Indicates whether this tile's Cartesian extent intersects a specified frustum.\n     *\n     * @param rc      the current render context\n     * @param frustum the frustum of interest\n     *\n     * @return true if the specified frustum intersects this tile's extent, otherwise false\n     */\n    fun intersectsFrustum(rc: RenderContext, frustum: Frustum) = getExtent(rc).intersectsFrustum(frustum)\n\n    /**\n     * Indicates whether this tile intersects a specified sector.\n     *\n     * @param sector the sector of interest\n     *\n     * @return true if the specified sector intersects this tile's sector, otherwise false\n     */\n    fun intersectsSector(sector: Sector) = this.sector.intersects(sector)\n\n    /**\n     * Indicates whether this tile should be subdivided based on the current navigation state and a specified detail\n     * factor.\n     *\n     * @param rc           the current render context\n     * @param detailFactor the detail factor to consider\n     *\n     * @return true if the tile should be subdivided, otherwise false\n     */\n    open fun mustSubdivide(rc: RenderContext, detailFactor: Double): Boolean {\n        val distanceToCamera = distanceToCamera(rc)\n        val texelSize = texelSizeFactor * rc.globe!!.equatorialRadius\n        val pixelSize = rc.pixelSizeAtDistance(distanceToCamera)\n\n        // Adjust the subdivision factory when the display density is low.\n        return texelSize > pixelSize * detailFactor * rc.densityFactor\n    }\n\n    /**\n     * Returns the four children formed by subdividing this tile. This tile's sector is subdivided into four quadrants\n     * as follows: Southwest; Southeast; Northwest; Northeast. A new tile is then constructed for each quadrant and\n     * configured with the next level within this tile's LevelSet and its corresponding row and column within that\n     * level. This returns null if this tile's level is the last level within its [LevelSet].\n     *\n     * @param tileFactory the tile factory to use to create the children\n     *\n     * @return an array containing the four child tiles, or null if this tile's level is the last level\n     */\n    open fun subdivide(tileFactory: TileFactory): Array<Tile> {\n        val childLevel = level.nextLevel ?: return emptyArray()\n\n        val latMin = sector.minLatitude\n        val lonMin = sector.minLongitude\n        val latMid = sector.centroidLatitude\n        val lonMid = sector.centroidLongitude\n        val latMax = sector.maxLatitude\n        val lonMax = sector.maxLongitude\n\n        var childRow = 2 * row\n        var childCol = 2 * column\n        var childSector = Sector(latMin, latMid, lonMin, lonMid)\n        val child0 = tileFactory.createTile(childSector, childLevel, childRow, childCol) // Southwest\n\n        childRow = 2 * row\n        childCol = 2 * column + 1\n        childSector = Sector(latMin, latMid, lonMid, lonMax)\n        val child1 = tileFactory.createTile(childSector, childLevel, childRow, childCol) // Southeast\n\n        childRow = 2 * row + 1\n        childCol = 2 * column\n        childSector = Sector(latMid, latMax, lonMin, lonMid)\n        val child2 = tileFactory.createTile(childSector, childLevel, childRow, childCol) // Northwest\n\n        childRow = 2 * row + 1\n        childCol = 2 * column + 1\n        childSector = Sector(latMid, latMax, lonMid, lonMax)\n        val child3 = tileFactory.createTile(childSector, childLevel, childRow, childCol) // Northeast\n\n        return arrayOf(child0, child1, child2, child3)\n    }\n\n    /**\n     * Returns the four children formed by subdividing this tile, drawing those children from a specified cache. The\n     * cache is checked for a child collection prior to subdividing. If one exists in the cache it is returned rather\n     * than creating a new collection of children. If a new collection is created in the same manner as [subdivide] and added to the cache.\n     *\n     * @param tileFactory the tile factory to use to create the children\n     * @param cache       a memory cache that may contain pre-existing child tiles.\n     * @param cacheSize   the cached size of the four child tiles\n     *\n     * @return an array containing the four child tiles, or null if this tile's level is the last level\n     */\n    open fun subdivideToCache(\n        tileFactory: TileFactory, cache: LruMemoryCache<String, Array<Tile>>, cacheSize: Int\n    ) = cache[tileKey] ?: subdivide(tileFactory).also { cache.put(tileKey, it, cacheSize) }\n\n    protected open fun getExtent(rc: RenderContext): BoundingBox {\n        val globe = rc.globe!!\n        val heightLimits = heightLimits\n        val extent = extent\n        val timestamp = globe.elevationModel.timestamp\n        if (timestamp !== heightLimitsTimestamp) {\n            // initialize the heights for elevation model scan\n            heightLimits[0] = Float.MAX_VALUE\n            heightLimits[1] = -Float.MAX_VALUE\n            globe.elevationModel.getHeightLimits(sector, heightLimits)\n            // check for valid height limits\n            if (heightLimits[0] > heightLimits[1]) heightLimits.fill(0f)\n        }\n        val ve = rc.verticalExaggeration.toFloat()\n        if (ve != extentExaggeration || timestamp !== heightLimitsTimestamp) {\n            val minHeight = heightLimits[0] * ve\n            val maxHeight = heightLimits[1] * ve\n            extent.setToSector(sector, globe, minHeight, maxHeight)\n        }\n        heightLimitsTimestamp = timestamp\n        extentExaggeration = ve\n        return extent\n    }\n\n    /**\n     * Calculates the distance from this tile to the camera point which ensures front to back sorting.\n     *\n     * @param rc the render context which provides the current camera point\n     *\n     * @return the L1 distance in degrees\n     */\n    protected open fun drawSortOrder(rc: RenderContext): Double {\n        val cameraPosition = rc.camera!!.position\n        // determine the nearest latitude\n        val latAbsDifference = abs(cameraPosition.latitude.inDegrees - sector.centroidLatitude.inDegrees)\n        // determine the nearest longitude and account for the antimeridian discontinuity\n        val lonAbsDifference = abs(cameraPosition.longitude.inDegrees - sector.centroidLongitude.inDegrees)\n        val lonAbsDifferenceCorrected = min(lonAbsDifference, 360.0 - lonAbsDifference)\n\n        return latAbsDifference + lonAbsDifferenceCorrected // L1 distance on cylinder\n    }\n\n    /**\n     * Calculates the distance from this tile to the camera point associated with the specified render context.\n     *\n     * @param rc the render context which provides the current camera point\n     *\n     * @return the distance in meters\n     */\n    protected open fun distanceToCamera(rc: RenderContext): Double {\n        val cameraPosition = rc.camera!!.position\n        // determine the nearest latitude\n        val nearestLat = cameraPosition.latitude.coerceIn(sector.minLatitude, sector.maxLatitude)\n        // determine the nearest longitude and account for the antimeridian discontinuity\n        val lonDifference = cameraPosition.longitude.inDegrees - sector.centroidLongitude.inDegrees\n        val nearestLon = when {\n            lonDifference < -180.0 -> sector.maxLongitude\n            lonDifference > 180.0 -> sector.minLongitude\n            else -> cameraPosition.longitude.coerceIn(sector.minLongitude, sector.maxLongitude)\n        }\n        val minHeight = heightLimits[0] * rc.verticalExaggeration\n        rc.geographicToCartesian(nearestLat, nearestLon, minHeight, AltitudeMode.ABSOLUTE, nearestPoint)\n        return rc.cameraPoint.distanceTo(nearestPoint)\n    }\n\n    companion object {\n        /**\n         * Computes a row number for a tile within a level given the tile's latitude.\n         *\n         * @param tileDelta the level's tile delta\n         * @param latitude  the tile's minimum latitude\n         * @param origin    the origin of the grid\n         *\n         * @return the computed row number\n         */\n        @JvmStatic\n        fun computeRow(tileDelta: Angle, latitude: Angle, origin: Angle): Int {\n            var row = floor((latitude.inDegrees - origin.inDegrees) / tileDelta.inDegrees).toInt()\n            // if latitude is at the end of the grid, subtract 1 from the computed row to return the last row\n            if (latitude.inDegrees - origin.inDegrees == 180.0) row -= 1\n            return row\n        }\n\n        /**\n         * Computes a column number for a tile within a level given the tile's longitude.\n         *\n         * @param tileDelta the level's tile delta\n         * @param longitude the tile's minimum longitude\n         * @param origin    the origin of the grid\n         *\n         * @return The computed column number\n         */\n        @JvmStatic\n        fun computeColumn(tileDelta: Angle, longitude: Angle, origin: Angle): Int {\n            var col = floor((longitude.inDegrees - origin.inDegrees) / tileDelta.inDegrees).toInt()\n            // if longitude is at the end of the grid, subtract 1 from the computed column to return the last column\n            if (longitude.inDegrees - origin.inDegrees == 360.0) col -= 1\n            return col\n        }\n\n        /**\n         * Computes the last row number for a tile within a level given the tile's maximum latitude.\n         *\n         * @param tileDelta   the level's tile delta\n         * @param maxLatitude the tile's maximum latitude\n         * @param origin      the origin of the grid\n         *\n         * @return the computed row number\n         */\n        @JvmStatic\n        fun computeLastRow(tileDelta: Angle, maxLatitude: Angle, origin: Angle): Int {\n            var row = ceil((maxLatitude.inDegrees - origin.inDegrees) / tileDelta.inDegrees - 1).toInt()\n            // if max latitude is in the first row, set the max row to 0\n            if (maxLatitude.inDegrees - origin.inDegrees < tileDelta.inDegrees) row = 0\n            return row\n        }\n\n        /**\n         * Computes the last column number for a tile within a level given the tile's maximum longitude.\n         *\n         * @param tileDelta    the level's tile delta\n         * @param maxLongitude the tile's maximum longitude\n         * @param origin       the origin of the grid\n         *\n         * @return The computed column number\n         */\n        @JvmStatic\n        fun computeLastColumn(tileDelta: Angle, maxLongitude: Angle, origin: Angle): Int {\n            var col = ceil((maxLongitude.inDegrees - origin.inDegrees) / tileDelta.inDegrees - 1).toInt()\n            // if max longitude is in the first column, set the max column to 0\n            if (maxLongitude.inDegrees - origin.inDegrees < tileDelta.inDegrees) col = 0\n            return col\n        }\n\n        /**\n         * Creates all tiles for a specified level within a [LevelSet].\n         *\n         * @param level       the level to create the tiles for\n         * @param tileFactory the tile factory to use for creating tiles.\n         * @param result      an pre-allocated Collection in which to store the results\n         *\n         * @return the result argument populated with the tiles for the specified level\n         */\n        @JvmStatic\n        fun assembleTilesForLevel(level: Level, tileFactory: TileFactory, result: MutableList<Tile>): MutableList<Tile> {\n            val sector = level.parent.sector\n            val tileOrigin = level.parent.tileOrigin\n            val tileDelta = level.tileDelta\n            val firstRow = computeRow(tileDelta.latitude, sector.minLatitude, tileOrigin.latitude)\n            val lastRow = computeLastRow(tileDelta.latitude, sector.maxLatitude, tileOrigin.latitude)\n            val firstCol = computeColumn(tileDelta.longitude, sector.minLongitude, tileOrigin.longitude)\n            val lastCol = computeLastColumn(tileDelta.longitude, sector.maxLongitude, tileOrigin.longitude)\n            val firstRowLat = tileOrigin.latitude.plusDegrees(firstRow * tileDelta.latitude.inDegrees)\n            val firstColLon = tileOrigin.longitude.plusDegrees(firstCol * tileDelta.longitude.inDegrees)\n            var minLat = firstRowLat\n            for (row in firstRow..lastRow) {\n                val maxLat = minLat + tileDelta.latitude\n                var minLon = firstColLon\n                for (col in firstCol..lastCol) {\n                    val maxLon = minLon + tileDelta.longitude\n                    val tileSector = Sector(minLat, maxLat, minLon, maxLon)\n                    result.add(tileFactory.createTile(tileSector, level, row, col))\n                    minLon = maxLon\n                }\n                minLat = maxLat\n            }\n            return result\n        }\n    }\n}","package earth.worldwind.util.format\n\nimport kotlin.math.*\n\nclass ExponentFormatter(val value: Double) {\n    var mantissa: Double\n        private set\n    var exponent: Int = 0\n        private set(value) {\n            field = value\n            strExponent = \"e$exponent\"\n        }\n\n    private val mstr: String\n    private var strExponent: String\n\n    init {\n        val x = abs(value)\n        exponent = log10(x).toInt()\n        if (exponent < 0) exponent--\n        mantissa = x / 10.0.pow(exponent)\n        if (value < 0) mantissa = -mantissa\n        mstr = mantissa.toString()\n        strExponent = \"e$exponent\"\n    }\n\n    fun scientific(width: Int, fractionWidth: Int = -1): String {\n        val minLength = if (mantissa < 0) 2 else 1\n\n        // Get the desired part of mantissa with proper bounding and rounding\n        // it works only for \"normalized\" mantissa that is always has d[.ddddd] form, e.g.  integer\n        // part is always 1 digit long\n        //\n        // ERROR: this rounding does not work with trailint (***9)8 - like variants\n        //\n        fun mpart(length: Int): String {\n            var l = length\n            if (l > mstr.length) l = mstr.length\n            val result = StringBuilder(mstr.slice(0 until l))\n            // exact value, no rounding:\n            if (result.length == mstr.length) return result.toString()\n\n            // next significant digit\n            var nextDigit = mstr[result.length]\n            if (nextDigit == '.') {\n                if (result.length + 1 >= mstr.length) return result.toString()\n                nextDigit = mstr[result.length + 1]\n            }\n            if (nextDigit in \"56789\") {\n                val (m, ovf) = roundUp(result)\n                if( !ovf ) return m\n                // overflow: exponent should grow\n                exponent++\n                // and the point position should be fixed\n                val pointPos = m.indexOf('.')\n                val mb = StringBuilder(m)\n                if( pointPos == -1 )\n                    return m // it was the last letter and was therefore removed by roundUp\n                return mb.deleteAt(pointPos).insert(pointPos - 1, '.').toString()\n            }\n            return result.toString()\n        }\n\n        if (width == 0) return mstr + strExponent\n\n        if (fractionWidth < 0 && width > 0) {\n            var l = width - strExponent.length\n            if (l < minLength) l = minLength\n            return mpart(l) + strExponent\n        }\n\n        if (fractionWidth < 0 && width < 0) return mstr + strExponent\n\n        // fractionWidth >= 0\n        if (fractionWidth == 0) return \"${mstr[0]}$strExponent\"\n\n        // fractionWidth > 0, +1 for decimal dot\n        return mpart(minLength + 1 + fractionWidth) + strExponent\n    }\n\n\n    override fun toString() = \"${mantissa}e${exponent}\"\n}\n\ninternal fun scientificFormat(value: Double, width: Int, fractionPartLength: Int = -1) =\n    ExponentFormatter(value).scientific(width, fractionPartLength)\n\ninternal fun fractionalFormat(_value: Double, width: Int, fractionPartLength: Int = -1): String {\n    var value = _value\n    val result = StringBuilder()\n\n    if (abs(value) >= 1) {\n        val i = if (fractionPartLength == 0) value.roundToLong() else value.toLong()\n        result.append(i)\n        value -= i\n    } else result.append((if (value < 0) \"-0\" else \"0\"))\n\n    var fl = if (fractionPartLength < 0) {\n        if (width < 0) 6\n        else width - result.length - 1\n    } else fractionPartLength\n\n    if (fl != 0) result.append('.')\n\n    var rest = value * 10\n    while (fl-- > 0) {\n        val d = rest.toInt()\n        result.append(abs(d))\n        rest = (rest - d) * 10\n    }\n    // now we might need to round it up:\n    return if( rest.toInt().absoluteValue < 5 ) result.toString() else roundUp(result, keepWidth = false).first\n}\n\n/**\n * Round up the mantissa part (call it with default arguments to start).\n * @return rounded mantissa and overflow flag (set when 9,99 -> 10,00 and like)\n */\nprivate fun roundUp(\n    result: StringBuilder,\n    length: Int = result.length,\n    pos: Int = result.length - 1,\n    keepWidth: Boolean = true\n): Pair<String,Boolean> {\n    if (pos < 0) {\n        // if we get there, it means the number of digits should grow, like \"9.99\" -> \"10.00\"\n        // but we need to keep the length so \"10.0\":\n        result.insert(0, '1')\n        if (keepWidth) result.deleteAt(length)\n        return result.toString() to true\n    }\n    // not the first digit: perform rounding:\n    val d = result[pos]\n    // it could be a decimal point we ignore and continue with rounding\n    if (d == '.') return roundUp(result, length, pos - 1, keepWidth)\n\n    // Small number add one \"0.19\" -> \"0.2\"\n    // Simple case: alter only the current digit\n    if (d != '9') {\n        result[pos] = d + 1\n        return result.toString() to false\n    }\n    // Complex case:  9->0 and propagate changes up.\n    result[pos] = '0'\n    return roundUp(result, length, pos - 1, keepWidth)\n}","package earth.worldwind.util.format\n\nimport kotlinx.datetime.*\n\ninternal enum class Positioning { LEFT, RIGHT, CENTER; }\n\ninternal class Specification(val parent: StringFormat, var index: Int) {\n    enum class Stage { FLAGS, LENGTH, FRACTION; }\n\n    private var stage = Stage.FLAGS\n    private var size: Int = -1\n    private var fractionalPartSize: Int = -1\n    private var positioninig = Positioning.RIGHT\n    private var fillChar = ' '\n    private var currentPart = StringBuilder()\n    //    private var pos = 0\n    private var explicitPlus = false\n    private var done = false\n    private var indexIsOverride = false\n    private val isScanningFlags: Boolean\n        get() = stage == Stage.FLAGS\n\n    internal fun scan() {\n        while (!done) {\n            when (val ch = parent.nextChar()) {\n                '-', '^' -> {\n                    if (!isScanningFlags) invalidFormat(\"unexpected $ch\")\n                    positioninig = if (ch == '-') Positioning.LEFT else Positioning.CENTER\n                }\n                '+' -> {\n                    if (!isScanningFlags) invalidFormat(\"unexpected $ch\")\n                    explicitPlus = true\n                }\n                in \"*#_=\" -> {\n                    if (!isScanningFlags) invalidFormat(\"bad fill char $ch position\")\n                    fillChar = ch\n                }\n                '0' -> {\n                    if (isScanningFlags) fillChar = '0'\n                    else currentPart.append(ch)\n                }\n                in \"123456789\" -> {\n                    if (stage == Stage.FLAGS) stage = Stage.LENGTH\n                    currentPart.append(ch)\n                }\n                '$', '!' -> {\n                    if (stage != Stage.LENGTH) invalidFormat(\"unexpected $ch position\")\n                    if (indexIsOverride) invalidFormat(\"argument number '$ch' should occur only once\")\n                    indexIsOverride = true\n                    index = currentPart.toString().toInt() - 1\n                    parent.pushbackArgumentIndex()\n                    currentPart.clear()\n                }\n                's' -> createStringField()\n                'd', 'i' -> createIntegerField()\n                'o' -> createOctalField()\n                'x' -> createHexField(false)\n                'X' -> createHexField(true)\n                'f', 'F' -> createFloat()\n                'E' -> createScientific(true)\n                'e' -> createScientific(false)\n                'g' -> createAutoFloat(true)\n                'G' -> createAutoFloat(false)\n                'c', 'C' -> createCharacter()\n                't' -> createTimeField(false)\n                'T' -> createTimeField(true)\n                '.' -> {\n                    stage = when (stage) {\n                        Stage.FLAGS -> Stage.FRACTION\n                        Stage.LENGTH -> {\n                            endStage(false)\n                            Stage.FRACTION\n                        }\n                        else -> invalidFormat(\"can't parse specification: unexpected '.'\")\n                    }\n                }\n                else -> invalidFormat(\"unexpected character '$ch'\")\n            }\n        }\n    }\n\n    private fun invalidFormat(message: String): Nothing { parent.invalidFormat(message) }\n\n    private val time get() = parent.getLocalDateTime(index)\n\n    private fun createTimeField(upperCase: Boolean) {\n        val ch = parent.nextChar()\n        endStage()\n        val result: String = when (ch) {\n            'H' -> \"%02d\".format(time.hour)\n            'k' -> \"%d\".format(time.hour)\n            'I', 'l' -> {\n                var t = time.hour\n                if (t > 12) t -= 12\n                if (ch == 'I') \"%02d\".format(t)\n                else t.toString()\n            }\n            'M' -> \"%02d\".format(time.minute)\n            'S' -> \"%02d\".format(time.second)\n            'L' -> \"%03d\".format(time.nanosecond / 1_000_000)\n            'N' -> \"%09d\".format(time.nanosecond)\n            'p' -> {\n                if (upperCase) if (time.hour > 12) \"PM\" else \"AM\"\n                else if (time.hour > 12) \"pm\" else \"am\"\n            }\n            'z' -> {\n                val tz = TimeZone.currentSystemDefault()\n                tz.offsetAt(time.toInstant(tz)).toString().replace(\":\", \"\")\n            }\n            'Z' -> {\n                // There us yet no abbreviations like 'CET', so we put there string representation like +01:00\n                val tz = TimeZone.currentSystemDefault()\n                tz.offsetAt(time.toInstant(tz)).toString()\n            }\n            's' -> {\n                val tz = TimeZone.currentSystemDefault()\n                time.toInstant(tz).epochSeconds.toString()\n            }\n            'Q' -> {\n                val tz = TimeZone.currentSystemDefault()\n                time.toInstant(tz).toEpochMilliseconds().toString()\n            }\n            // Date fields\n            'B' -> getMonthName(time.month.number)\n            'b', 'h' -> getAbbreviatedMonthName(time.month.number)\n            'e' -> time.dayOfMonth.toString()\n            'd' -> \"%02s\".format(time.dayOfMonth)\n            'm' -> \"%02s\".format(time.month.number)\n            'A' -> getWeekDayName(time.dayOfWeek)\n            'a' -> getAbbreviatedWeekDayName(time.dayOfWeek)\n            'y' -> time.year.toString().takeLast(2)\n            'Y' -> \"%04d\".format(time.year)\n            'j' -> \"%03d\".format(time.dayOfYear)\n            // shortcuts\n            'R' -> \"%1!tH:%1!tM\".format(time)\n            'r' ->\n                if (upperCase) \"%1!tI:%1!tM:%1!tS %1!Tp\".format(time)\n                else \"%1!tI:%1!tM:%1!tS %1!tp\".format(time)\n            'T' -> \"%tH:%1!tM:%1!tS\".format(time)\n            'D' -> \"%tm/%1!td/%1!ty\".format(time)\n            'F' -> \"%tY-%1!tm-%1!td\".format(time)\n            'c' -> \"%ta %1!tb %1!td %1!tT %1!tZ %1!tY\".format(time)\n            'O' -> {\n                val tz = TimeZone.currentSystemDefault()\n                val offset = tz.offsetAt(time.toInstant(tz)).toString()\n                \"%tFT%1!tT%s\".format(time, offset)\n            }\n            '#' -> \"%tY%1!tm%1!td%1!tH%1!tM%1!tS\".format(time.toInstant(TimeZone.UTC))\n            else -> invalidFormat(\"unknown time field specificator: 't$ch'\")\n        }\n        insertField(result)\n    }\n\n    private fun createStringField() {\n        endStage()\n        insertField(parent.getText(index))\n    }\n\n    private fun createIntegerField() {\n        endStage()\n        val number = parent.getNumber(index).toLong()\n        if (explicitPlus && fillChar == '0' && number > 0) insertField(number.toString(), \"+\")\n        else insertField(if (explicitPlus) \"+$number\" else \"$number\")\n    }\n\n    private fun createHexField(upperCase: Boolean) {\n        endStage()\n        val number = parent.getNumber(index).toLong()\n        if (explicitPlus) invalidFormat(\"'+' is incompatible with hex format\")\n        val text = number.toString(16)\n        insertField(if (upperCase) text.uppercase() else text.lowercase())\n    }\n\n    private fun createOctalField() {\n        endStage()\n        val number = parent.getNumber(index).toLong()\n        if (explicitPlus) invalidFormat(\"'+' is incompatible with oct format\")\n        insertField(number.toString(8))\n    }\n\n    private fun createCharacter() {\n        endStage()\n        insertField(parent.getCharacter(index).toString())\n    }\n\n    private fun endStage(setDone: Boolean = true) {\n        if (setDone) done = true\n        if (currentPart.isNotEmpty()) {\n            when (stage) {\n                Stage.LENGTH -> size = currentPart.toString().toInt()\n                Stage.FRACTION -> fractionalPartSize = currentPart.toString().toInt()\n                Stage.FLAGS -> invalidFormat(\"can't parse format specifier (error 7)\")\n            }\n            currentPart.clear()\n        }\n    }\n\n    private fun insertField(text: String, prefix: String = \"\") {\n        val l = text.length + prefix.length\n        if (size < 0 || size < l) parent.specificationDone(prefix + text)\n        else {\n            var padStart = 0\n            var padEnd = 0\n            when (positioninig) {\n                Positioning.LEFT -> padEnd = size - l\n                Positioning.RIGHT -> padStart = size - l\n                Positioning.CENTER -> {\n                    padStart = (size - l) / 2\n                    padEnd = size - padStart - l\n                }\n            }\n            val result = StringBuilder(prefix)\n            while (padStart-- > 0) result.append(fillChar)\n            result.append(text)\n            while (padEnd-- > 0) result.append(fillChar)\n            parent.specificationDone(result.toString())\n        }\n    }\n\n    private fun createFloat() {\n        endStage()\n        val number = parent.getNumber(index).toDouble()\n        val t = fractionalFormat(number, size, fractionalPartSize)\n\n        if (explicitPlus && fillChar == '0' && number > 0) insertField(t, \"+\")\n        else insertField(if (explicitPlus) \"+$t\" else t)\n    }\n\n    private fun createScientific(upperCase: Boolean) {\n        endStage()\n        val number = parent.getNumber(index).toDouble()\n        val t = scientificFormat(number, size, fractionalPartSize).let {\n            if (upperCase) it.uppercase() else it.lowercase()\n        }\n\n        if (explicitPlus && fillChar == '0' && number > 0) insertField(t, \"+\")\n        else insertField(if (explicitPlus) \"+$t\" else t)\n    }\n\n    private fun createAutoFloat(upperCase: Boolean) {\n        endStage()\n        val number = parent.getNumber(index)\n        val t = number.toString().let {\n            if (upperCase) it.uppercase() else it.lowercase()\n        }\n\n        if (explicitPlus && fillChar == '0' && number.toDouble() > 0) insertField(t, \"+\")\n        else insertField(if (explicitPlus) \"+$t\" else t)\n    }\n\n    companion object {\n        private val englishMonthNames: List<String> by lazy {\n            \"January February March April May June July August September October November December\".split(' ')\n        }\n        private val englishWeekDayNames: List<String> by lazy {\n            \"Monday Tuesday Wednesday Thursday Friday Saturday Sunday\".split(' ')\n        }\n\n        fun getAbbreviatedMonthName(monthNumber: Int) = getMonthName(monthNumber).take(3)\n\n        fun getMonthName(monthNumber: Int) = englishMonthNames[monthNumber - 1]\n\n        fun getWeekDayName(d: DayOfWeek): String {\n            val n = d.isoDayNumber\n            return englishWeekDayNames[n-1]\n        }\n\n        fun getAbbreviatedWeekDayName(d: DayOfWeek): String {\n            val n = d.isoDayNumber\n            return englishWeekDayNames[n-1].take(3)\n        }\n    }\n}",null,"package earth.worldwind.util.format\n\nimport kotlinx.datetime.*\n\ninternal class StringFormat(val format: String, val args: Array<out Any?>) {\n\n    private var pos = 0\n    private var specStart = -1\n    private val result = StringBuilder()\n    private var currentIndex = 0\n\n    fun process(): StringFormat {\n        while (pos < format.length) {\n            val ch = format[pos++]\n            if (ch == '%') {\n                specStart = when {\n                    specStart == pos - 1 -> {\n                        result.append(ch)\n                        -1\n                    }\n                    specStart < 0 -> pos\n                    else -> invalidFormat(\"unexpected %\")\n                }\n            } else {\n                if (specStart >= 0) {\n                    pos--\n                    Specification(this, currentIndex++).scan()\n                } else result.append(ch)\n            }\n        }\n        return this\n    }\n\n    internal fun nextChar(): Char {\n        if (pos >= format.length) invalidFormat(\"unexpected end of string inside format specification\")\n        return format[pos++]\n    }\n\n    internal fun invalidFormat(reason: String): Nothing {\n        throw IllegalArgumentException(\"bad format: $reason at ofset ${pos - 1} of \\\"$format\\\"\")\n    }\n\n    override fun toString() = result.toString()\n\n    internal fun getNumber(index: Int): Number = notNullArg(index)\n\n    internal fun getText(index: Int) = args[index]!!.toString()\n\n    internal fun getCharacter(index: Int): Char = notNullArg(index)\n\n    internal fun specificationDone(text: String) {\n        result.append(text)\n        specStart = -1\n    }\n\n    fun getLocalDateTime(index: Int): LocalDateTime {\n        val t = notNullArg<Any>(index)\n        return when(t) {\n            is Instant -> t.toLocalDateTime(TimeZone.currentSystemDefault())\n            is LocalDateTime -> t\n            is LocalDate -> t.atTime(0,0,0)\n            else -> convertToInstant(t).toLocalDateTime(TimeZone.currentSystemDefault())\n        }\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    fun <T>notNullArg(index: Int) = args[index]!! as T\n\n    fun pushbackArgumentIndex() { currentIndex-- }\n}\n\nfun String.format(vararg args: Any?): String = StringFormat(this, args).process().toString()\n\nexpect fun convertToInstant(t: Any): Instant","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu\n\nimport earth.worldwind.util.glu.error.Error\nimport earth.worldwind.util.glu.tessellator.GLUtessellatorImpl\n\n/**\n * Provides access to the OpenGL Utility Library (GLU). This library\n * provides standard methods for setting up view volumes, building\n * mipmaps and performing other common operations.  The GLU NURBS\n * routines are not currently exposed.\n * <BR></BR>\n * Notes from the Reference Implementation for this class:\n * Thanks to the contributions of many individuals, this class is a\n * pure Java port of SGI's original C sources. All of the projection,\n * mipmap, scaling, and tessellation routines that are exposed are\n * compatible with the GLU 1.3 specification. The GLU NURBS routines\n * are not currently exposed.\n */\nobject GLU {\n    fun gluErrorString(errorCode: Int) = Error.gluErrorString(errorCode)\n    /**\n     * **gluNewTess** creates and returns a new tessellation object.  This\n     * object must be referred to when calling tesselation methods.  A return\n     * value of null means that there was not enough memeory to allocate the\n     * object.\n     *\n     * @return A new tessellation object.\n     *\n     * @see .gluTessBeginPolygon gluTessBeginPolygon\n     *\n     * @see .gluDeleteTess       gluDeleteTess\n     *\n     * @see .gluTessCallback     gluTessCallback\n     */\n    fun gluNewTess() = GLUtessellatorImpl.gluNewTess()\n\n    /**\n     * **gluDeleteTess** destroys the indicated tessellation object (which was\n     * created with [gluNewTess][.gluNewTess]).\n     *\n     * @param tessellator\n     * Specifies the tessellation object to destroy.\n     *\n     * @see .gluNewTess      gluNewTess\n     *\n     * @see .gluTessCallback gluTessCallback\n     */\n    fun gluDeleteTess(tessellator: GLUtessellator) {\n        (tessellator as GLUtessellatorImpl).gluDeleteTess()\n    }\n\n    /**\n     * **gluTessProperty** is used to control properites stored in a\n     * tessellation object.  These properties affect the way that the polygons are\n     * interpreted and rendered.  The legal value for *which* are as\n     * follows:\n     * <UL>\n     * <LI>**GLU_TESS_WINDING_RULE**\n     * <BR></BR>\n     * Determines which parts of the polygon are on the \"interior\".\n     * *value* may be set to one of\n     * <BR></BR>**GLU_TESS_WINDING_ODD**,\n     * <BR></BR>**GLU_TESS_WINDING_NONZERO**,\n     * <BR></BR>**GLU_TESS_WINDING_POSITIVE**, or\n     * <BR></BR>**GLU_TESS_WINDING_NEGATIVE**, or\n     * <BR></BR>**GLU_TESS_WINDING_ABS_GEQ_TWO**.\n     * <BR></BR>\n     * To understand how the winding rule works, consider that the input\n     * contours partition the plane into regions.  The winding rule determines\n     * which of these regions are inside the polygon.\n     * <BR></BR>\n     * For a single contour C, the winding number of a point x is simply the\n     * signed number of revolutions we make around x as we travel once around C\n     * (where CCW is positive).  When there are several contours, the individual\n     * winding numbers are summed.  This procedure associates a signed integer\n     * value with each point x in the plane.  Note that the winding number is\n     * the same for all points in a single region.\n     * <BR></BR>\n     * The winding rule classifies a region as \"inside\" if its winding number\n     * belongs to the chosen category (odd, nonzero, positive, negative, or\n     * absolute value of at least two).  The previous GLU tessellator (prior to\n     * GLU 1.2) used the \"odd\" rule.  The \"nonzero\" rule is another common way\n     * to define the interior.  The other three rules are useful for polygon CSG\n     * operations.\n    </LI> *\n     * <LI>**GLU_TESS_BOUNDARY_ONLY**\n     * <BR></BR>\n     * Is a boolean value (\"value\" should be set to GL_TRUE or GL_FALSE). When\n     * set to GL_TRUE, a set of closed contours separating the polygon interior\n     * and exterior are returned instead of a tessellation.  Exterior contours\n     * are oriented CCW with respect to the normal; interior contours are\n     * oriented CW. The **GLU_TESS_BEGIN** and **GLU_TESS_BEGIN_DATA**\n     * callbacks use the type GL_LINE_LOOP for each contour.\n    </LI> *\n     * <LI>**GLU_TESS_TOLERANCE**\n     * <BR></BR>\n     * Specifies a tolerance for merging features to reduce the size of the\n     * output. For example, two vertices that are very close to each other\n     * might be replaced by a single vertex.  The tolerance is multiplied by the\n     * largest coordinate magnitude of any input vertex; this specifies the\n     * maximum distance that any feature can move as the result of a single\n     * merge operation.  If a single feature takes part in several merge\n     * operations, the toal distance moved could be larger.\n     * <BR></BR>\n     * Feature merging is completely optional; the tolerance is only a hint.\n     * The implementation is free to merge in some cases and not in others, or\n     * to never merge features at all.  The initial tolerance is 0.\n     * <BR></BR>\n     * The current implementation merges vertices only if they are exactly\n     * coincident, regardless of the current tolerance.  A vertex is spliced\n     * into an edge only if the implementation is unable to distinguish which\n     * side of the edge the vertex lies on.  Two edges are merged only when both\n     * endpoints are identical.\n    </LI> *\n    </UL> *\n     *\n     * @param tessellator\n     * Specifies the tessellation object created with\n     * [gluNewTess][.gluNewTess]\n     * @param which\n     * Specifies the property to be set.  Valid values are\n     * **GLU_TESS_WINDING_RULE**, **GLU_TESS_BOUNDARDY_ONLY**,\n     * **GLU_TESS_TOLERANCE**.\n     * @param value\n     * Specifices the value of the indicated property.\n     *\n     * @see .gluGetTessProperty gluGetTessProperty\n     *\n     * @see .gluNewTess         gluNewTess\n     */\n    fun gluTessProperty(tessellator: GLUtessellator, which: Int, value: Double) {\n        (tessellator as GLUtessellatorImpl).gluTessProperty(which, value)\n    }\n\n    /**\n     * **gluGetTessProperty** retrieves properties stored in a tessellation\n     * object.  These properties affect the way that tessellation objects are\n     * interpreted and rendered.  See the\n     * [gluTessProperty][.gluTessProperty] reference\n     * page for information about the properties and what they do.\n     *\n     * @param tessellator\n     * Specifies the tessellation object (created with\n     * [gluNewTess][.gluNewTess]).\n     * @param which\n     * Specifies the property whose value is to be fetched. Valid values\n     * are **GLU_TESS_WINDING_RULE**, **GLU_TESS_BOUNDARY_ONLY**,\n     * and **GLU_TESS_TOLERANCES**.\n     * @param value\n     * Specifices an array into which the value of the named property is\n     * written.\n     *\n     * @see .gluNewTess      gluNewTess\n     *\n     * @see .gluTessProperty gluTessProperty\n     */\n    fun gluGetTessProperty(\n        tessellator: GLUtessellator, which: Int, value: DoubleArray, value_offset: Int\n    ) {\n        (tessellator as GLUtessellatorImpl).gluGetTessProperty(which, value, value_offset)\n    }\n\n    /**\n     * **gluTessNormal** describes a normal for a polygon that the program is\n     * defining. All input data will be projected onto a plane perpendicular to\n     * the one of the three coordinate axes before tessellation and all output\n     * triangles will be oriented CCW with repsect to the normal (CW orientation\n     * can be obtained by reversing the sign of the supplied normal).  For\n     * example, if you know that all polygons lie in the x-y plane, call\n     * **gluTessNormal**(tess, 0.0, 0.0, 0.0) before rendering any polygons.\n     * <BR></BR>\n     * If the supplied normal is (0.0, 0.0, 0.0)(the initial value), the normal\n     * is determined as follows.  The direction of the normal, up to its sign, is\n     * found by fitting a plane to the vertices, without regard to how the\n     * vertices are connected.  It is expected that the input data lies\n     * approximately in the plane; otherwise, projection perpendicular to one of\n     * the three coordinate axes may substantially change the geometry.  The sign\n     * of the normal is chosen so that the sum of the signed areas of all input\n     * contours is nonnegative (where a CCW contour has positive area).\n     * <BR></BR>\n     * The supplied normal persists until it is changed by another call to\n     * **gluTessNormal**.\n     *\n     * @param tessellator\n     * Specifies the tessellation object (created by\n     * [gluNewTess][.gluNewTess]).\n     * @param x\n     * Specifies the first component of the normal.\n     * @param y\n     * Specifies the second component of the normal.\n     * @param z\n     * Specifies the third component of the normal.\n     *\n     * @see .gluTessBeginPolygon gluTessBeginPolygon\n     *\n     * @see .gluTessEndPolygon   gluTessEndPolygon\n     */\n    fun gluTessNormal(tessellator: GLUtessellator, x: Double, y: Double, z: Double) {\n        (tessellator as GLUtessellatorImpl).gluTessNormal(x, y, z)\n    }\n\n    /**\n     * **gluTessCallback** is used to indicate a callback to be used by a\n     * tessellation object. If the specified callback is already defined, then it\n     * is replaced. If *aCallback* is null, then the existing callback\n     * becomes undefined.\n     * <BR></BR>\n     * These callbacks are used by the tessellation object to describe how a\n     * polygon specified by the user is broken into triangles. Note that there are\n     * two versions of each callback: one with user-specified polygon data and one\n     * without. If both versions of a particular callback are specified, then the\n     * callback with user-specified polygon data will be used. Note that the\n     * polygonData parameter used by some of the methods is a copy of the\n     * reference that was specified when\n     * [gluTessBeginPolygon][.gluTessBeginPolygon]\n     * was called. The legal callbacks are as follows:\n     * <UL>\n     * <LI>**GLU_TESS_BEGIN**\n     * <BR></BR>\n     * The begin callback is invoked like\n     * glBegin to indicate the start of a (triangle) primitive. The method\n     * takes a single argument of type int. If the\n     * **GLU_TESS_BOUNDARY_ONLY** property is set to **GL_FALSE**, then\n     * the argument is set to either **GL_TRIANGLE_FAN**,\n     * **GL_TRIANGLE_STRIP**, or **GL_TRIANGLES**. If the\n     * **GLU_TESS_BOUNDARY_ONLY** property is set to **GL_TRUE**, then the\n     * argument will be set to **GL_LINE_LOOP**. The method prototype for\n     * this callback is:\n     * <PRE>void begin(int type);</PRE>\n    </LI> *\n     * <LI>**GLU_TESS_BEGIN_DATA**\n     * <BR></BR>\n     * The same as the **GLU_TESS_BEGIN** callback except\n     * that it takes an additional reference argument. This reference is\n     * identical to the opaque reference provided when\n     * [gluTessBeginPolygon][.gluTessBeginPolygon]\n     * was called. The method prototype for this callback is:\n     * <PRE>void beginData(int type, Object polygonData);</PRE>\n    </LI> *\n     * <LI>**GLU_TESS_EDGE_FLAG**\n     * <BR></BR>\n     * The edge flag callback is similar to\n     * glEdgeFlag. The method takes\n     * a single boolean boundaryEdge that indicates which edges lie on the\n     * polygon boundary. If the boundaryEdge is **GL_TRUE**, then each vertex\n     * that follows begins an edge that lies on the polygon boundary, that is,\n     * an edge that separates an interior region from an exterior one. If the\n     * boundaryEdge is **GL_FALSE**, then each vertex that follows begins an\n     * edge that lies in the polygon interior. The edge flag callback (if\n     * defined) is invoked before the first vertex callback.\n     * <BR></BR>\n     * Since triangle fans and triangle strips do not support edge flags, the\n     * begin callback is not called with **GL_TRIANGLE_FAN** or\n     * **GL_TRIANGLE_STRIP** if a non-null edge flag callback is provided.\n     * (If the callback is initialized to null, there is no impact on\n     * performance). Instead, the fans and strips are converted to independent\n     * triangles. The method prototype for this callback is:\n     * <PRE>void edgeFlag(boolean boundaryEdge);</PRE>\n    </LI> *\n     * <LI>**GLU_TESS_EDGE_FLAG_DATA**\n     * <BR></BR>\n     * The same as the **GLU_TESS_EDGE_FLAG** callback except that it takes\n     * an additional reference argument. This reference is identical to the\n     * opaque reference provided when\n     * [gluTessBeginPolygon][.gluTessBeginPolygon]\n     * was called. The method prototype for this callback is:\n     * <PRE>void edgeFlagData(boolean boundaryEdge, Object polygonData);</PRE>\n    </LI> *\n     * <LI>**GLU_TESS_VERTEX**\n     * <BR></BR>\n     * The vertex callback is invoked between the begin and end callbacks. It is\n     * similar to glVertex3f, and it\n     * defines the vertices of the triangles created by the tessellation\n     * process. The method takes a reference as its only argument. This\n     * reference is identical to the opaque reference provided by the user when\n     * the vertex was described (see\n     * [gluTessVertex][.gluTessVertex]). The method\n     * prototype for this callback is:\n     * <PRE>void vertex(Object vertexData);</PRE>\n    </LI> *\n     * <LI>**GLU_TESS_VERTEX_DATA**\n     * <BR></BR>\n     * The same as the **GLU_TESS_VERTEX** callback except that it takes an\n     * additional reference argument. This reference is identical to the opaque\n     * reference provided when\n     * [gluTessBeginPolygon][.gluTessBeginPolygon]\n     * was called. The method prototype for this callback is:\n     * <PRE>void vertexData(Object vertexData, Object polygonData);</PRE>\n    </LI> *\n     * <LI>**GLU_TESS_END**\n     * <BR></BR>\n     * The end callback serves the same purpose as\n     * glEnd. It indicates the end of a\n     * primitive and it takes no arguments. The method prototype for this\n     * callback is:\n     * <PRE>void end();</PRE>\n    </LI> *\n     * <LI>**GLU_TESS_END_DATA**\n     * <BR></BR>\n     * The same as the **GLU_TESS_END** callback except that it takes an\n     * additional reference argument. This reference is identical to the opaque\n     * reference provided when\n     * [gluTessBeginPolygon][.gluTessBeginPolygon]\n     * was called. The method prototype for this callback is:\n     * <PRE>void endData(Object polygonData);</PRE>\n    </LI> *\n     * <LI>**GLU_TESS_COMBINE**\n     * <BR></BR>\n     * The combine callback is called to create a new vertex when the\n     * tessellation detects an intersection, or wishes to merge features. The\n     * method takes four arguments: an array of three elements each of type\n     * double, an array of four references, an array of four elements each of\n     * type float, and a reference to a reference. The prototype is:\n     * <PRE>void combine(double[] coords, Object[] data,\n     * float[] weight, Object[] outData);</PRE>\n     * The vertex is defined as a linear combination of up to four existing\n     * vertices, stored in *data*. The coefficients of the linear\n     * combination are given by *weight*; these weights always add up to 1.\n     * All vertex pointers are valid even when some of the weights are 0.\n     * *coords* gives the location of the new vertex.\n     * <BR></BR>\n     * The user must allocate another vertex, interpolate parameters using\n     * *data* and *weight*, and return the new vertex pointer\n     * in *outData*. This handle is supplied during rendering callbacks.\n     * The user is responsible for freeing the memory some time after\n     * [gluTessEndPolygon][.gluTessEndPolygon] is\n     * called.\n     * <BR></BR>\n     * For example, if the polygon lies in an arbitrary plane in 3-space, and a\n     * color is associated with each vertex, the **GLU_TESS_COMBINE**\n     * callback might look like this:\n     * <PRE>\n     * void myCombine(double[] coords, Object[] data,\n     * float[] weight, Object[] outData)\n     * {\n     * MyVertex newVertex = new MyVertex();\n     *\n     * newVertex.x = coords[0];\n     * newVertex.y = coords[1];\n     * newVertex.z = coords[2];\n     * newVertex.r = weight[0]*data[0].r +\n     * weight[1]*data[1].r +\n     * weight[2]*data[2].r +\n     * weight[3]*data[3].r;\n     * newVertex.g = weight[0]*data[0].g +\n     * weight[1]*data[1].g +\n     * weight[2]*data[2].g +\n     * weight[3]*data[3].g;\n     * newVertex.b = weight[0]*data[0].b +\n     * weight[1]*data[1].b +\n     * weight[2]*data[2].b +\n     * weight[3]*data[3].b;\n     * newVertex.a = weight[0]*data[0].a +\n     * weight[1]*data[1].a +\n     * weight[2]*data[2].a +\n     * weight[3]*data[3].a;\n     * outData = newVertex;\n     * }</PRE>\n     * If the tessellation detects an intersection, then the\n     * **GLU_TESS_COMBINE** or **GLU_TESS_COMBINE_DATA** callback (see\n     * below) must be defined, and it must write a non-null reference into\n     * *outData*. Otherwise the **GLU_TESS_NEED_COMBINE_CALLBACK** error\n     * occurs, and no output is generated.\n    </LI> *\n     * <LI>**GLU_TESS_COMBINE_DATA**\n     * <BR></BR>\n     * The same as the **GLU_TESS_COMBINE** callback except that it takes an\n     * additional reference argument. This reference is identical to the opaque\n     * reference provided when\n     * [gluTessBeginPolygon][.gluTessBeginPolygon]\n     * was called. The method prototype for this callback is:\n     * <PRE>\n     * void combineData(double[] coords, Object[] data,\n     * float[] weight, Object[] outData,\n     * Object polygonData);</PRE>\n     *\n    </LI> *\n     * <LI>**GLU_TESS_ERROR**\n     * <BR></BR>\n     * The error callback is called when an error is encountered. The one\n     * argument is of type int; it indicates the specific error that occurred\n     * and will be set to one of **GLU_TESS_MISSING_BEGIN_POLYGON**,\n     * **GLU_TESS_MISSING_END_POLYGON**,\n     * **GLU_TESS_MISSING_BEGIN_CONTOUR**,\n     * **GLU_TESS_MISSING_END_CONTOUR**, **GLU_TESS_COORD_TOO_LARGE**,\n     * **GLU_TESS_NEED_COMBINE_CALLBACK** or **GLU_OUT_OF_MEMORY**.\n     * Character strings describing these errors can be retrieved with the\n     * [gluErrorString][.gluErrorString] call. The\n     * method prototype for this callback is:\n     * <PRE>\n     * void error(int errnum);</PRE>\n     * The GLU library will recover from the first four errors by inserting the\n     * missing call(s). **GLU_TESS_COORD_TOO_LARGE** indicates that some\n     * vertex coordinate exceeded the predefined constant\n     * **GLU_TESS_MAX_COORD** in absolute value, and that the value has been\n     * clamped. (Coordinate values must be small enough so that two can be\n     * multiplied together without overflow.)\n     * **GLU_TESS_NEED_COMBINE_CALLBACK** indicates that the tessellation\n     * detected an intersection between two edges in the input data, and the\n     * **GLU_TESS_COMBINE** or **GLU_TESS_COMBINE_DATA** callback was not\n     * provided. No output is generated. **GLU_OUT_OF_MEMORY** indicates that\n     * there is not enough memory so no output is generated.\n    </LI> *\n     * <LI>**GLU_TESS_ERROR_DATA**\n     * <BR></BR>\n     * The same as the GLU_TESS_ERROR callback except that it takes an\n     * additional reference argument. This reference is identical to the opaque\n     * reference provided when\n     * [gluTessBeginPolygon][.gluTessBeginPolygon]\n     * was called. The method prototype for this callback is:\n     * <PRE>\n     * void errorData(int errnum, Object polygonData);</PRE>\n    </LI> *\n    </UL> *\n     *\n     * @param tessellator\n     * Specifies the tessellation object (created with\n     * [gluNewTess][.gluNewTess]).\n     * @param which\n     * Specifies the callback being defined. The following values are\n     * valid: **GLU_TESS_BEGIN**, **GLU_TESS_BEGIN_DATA**,\n     * **GLU_TESS_EDGE_FLAG**, **GLU_TESS_EDGE_FLAG_DATA**,\n     * **GLU_TESS_VERTEX**, **GLU_TESS_VERTEX_DATA**,\n     * **GLU_TESS_END**, **GLU_TESS_END_DATA**,\n     * **GLU_TESS_COMBINE**,  **GLU_TESS_COMBINE_DATA**,\n     * **GLU_TESS_ERROR**, and **GLU_TESS_ERROR_DATA**.\n     * @param aCallback\n     * Specifies the callback object to be called.\n     *\n     * @see .gluNewTess          gluNewTess\n     *\n     * @see .gluErrorString      gluErrorString\n     *\n     * @see .gluTessVertex       gluTessVertex\n     *\n     * @see .gluTessBeginPolygon gluTessBeginPolygon\n     *\n     * @see .gluTessBeginContour gluTessBeginContour\n     *\n     * @see .gluTessProperty     gluTessProperty\n     *\n     * @see .gluTessNormal       gluTessNormal\n     */\n    fun gluTessCallback(\n        tessellator: GLUtessellator, which: Int, aCallback: GLUtessellatorCallback?\n    ) {\n        (tessellator as GLUtessellatorImpl).gluTessCallback(which, aCallback)\n    }\n\n    /**\n     * **gluTessVertex** describes a vertex on a polygon that the program\n     * defines. Successive **gluTessVertex** calls describe a closed contour.\n     * For example, to describe a quadrilateral **gluTessVertex** should be\n     * called four times. **gluTessVertex** can only be called between\n     * [gluTessBeginContour][.gluTessBeginContour] and\n     * [gluTessEndContour][.gluTessBeginContour].\n     * <BR></BR>\n     * **data** normally references to a structure containing the vertex\n     * location, as well as other per-vertex attributes such as color and normal.\n     * This reference is passed back to the user through the\n     * **GLU_TESS_VERTEX** or **GLU_TESS_VERTEX_DATA** callback after\n     * tessellation (see the [ gluTessCallback][.gluTessCallback] reference page).\n     *\n     * @param tessellator\n     * Specifies the tessellation object (created with\n     * [gluNewTess][.gluNewTess]).\n     * @param coords\n     * Specifies the coordinates of the vertex.\n     * @param data\n     * Specifies an opaque reference passed back to the program with the\n     * vertex callback (as specified by\n     * [gluTessCallback][.gluTessCallback]).\n     *\n     * @see .gluTessBeginPolygon gluTessBeginPolygon\n     *\n     * @see .gluNewTess          gluNewTess\n     *\n     * @see .gluTessBeginContour gluTessBeginContour\n     *\n     * @see .gluTessCallback     gluTessCallback\n     *\n     * @see .gluTessProperty     gluTessProperty\n     *\n     * @see .gluTessNormal       gluTessNormal\n     *\n     * @see .gluTessEndPolygon   gluTessEndPolygon\n     */\n    fun gluTessVertex(\n        tessellator: GLUtessellator, coords: DoubleArray, coords_offset: Int, data: Any\n    ) {\n        (tessellator as GLUtessellatorImpl).gluTessVertex(coords, coords_offset, data)\n    }\n\n    /**\n     * **gluTessBeginPolygon** and\n     * [gluTessEndPolygon][.gluTessEndPolygon] delimit\n     * the definition of a convex, concave or self-intersecting polygon. Within\n     * each **gluTessBeginPolygon**\n     * [gluTessEndPolygon][.gluTessEndPolygon] pair,\n     * there must be one or more calls to\n     * [gluTessBeginContour][.gluTessBeginContour]/\n     * [gluTessEndContour][.gluTessEndContour]. Within\n     * each contour, there are zero or more calls to\n     * [gluTessVertex][.gluTessVertex]. The vertices\n     * specify a closed contour (the last vertex of each contour is automatically\n     * linked to the first). See the [ gluTessVertex][.gluTessVertex], [ gluTessBeginContour][.gluTessBeginContour], and [ gluTessEndContour][.gluTessEndContour] reference pages for more details.\n     * <BR></BR>\n     * **data ** is a reference to a user-defined data structure. If the\n     * appropriate callback(s) are specified (see\n     * [gluTessCallback][.gluTessCallback]), then this\n     * reference is returned to the callback method(s). Thus, it is a convenient\n     * way to store per-polygon information.\n     * <BR></BR>\n     * Once [gluTessEndPolygon][.gluTessEndPolygon] is\n     * called, the polygon is tessellated, and the resulting triangles are\n     * described through callbacks. See\n     * [gluTessCallback][.gluTessCallback] for\n     * descriptions of the callback methods.\n     *\n     * @param tessellator\n     * Specifies the tessellation\n     object(\n         created with\n         * [gluNewTess][.gluNewTess]).\n     * @param data\n     * Specifies a reference to user polygon data .\n     *\n     * @see.gluNewTess gluNewTess\n     *\n     * @see.gluTessBeginContour gluTessBeginContour\n     *\n     * @see.gluTessVertex gluTessVertex\n     *\n     * @see.gluTessCallback gluTessCallback\n     *\n     * @see.gluTessProperty gluTessProperty\n     *\n     * @see.gluTessNormal gluTessNormal\n     *\n     * @see.gluTessEndPolygon gluTessEndPolygon\n     */\n    fun gluTessBeginPolygon(tessellator: GLUtessellator, data: Any) {\n        (tessellator as GLUtessellatorImpl).gluTessBeginPolygon(data)\n    }\n\n    /**\n     * **gluTessBeginContour** and\n     * [gluTessEndContour][.gluTessEndContour] delimit\n     * the definition of a polygon contour. Within each\n     * **gluTessBeginContour**\n     * [gluTessEndContour][.gluTessEndContour] pair,\n     * there can be zero or more calls to\n     * [gluTessVertex][.gluTessVertex]. The vertices\n     * specify a closed contour (the last vertex of each contour is automatically\n     * linked to the first). See the [ gluTessVertex][.gluTessVertex] reference page for more details. **gluTessBeginContour**\n     * can only be called between\n     * [gluTessBeginPolygon][.gluTessBeginPolygon] and\n     * [gluTessEndPolygon][.gluTessEndPolygon].\n     *\n     * @param tessellator\n     * Specifies the tessellation\n     object(\n         created with\n         * [gluNewTess][.gluNewTess]).\n     *\n     * @see.gluNewTess gluNewTess\n     *\n     * @see.gluTessBeginPolygon gluTessBeginPolygon\n     *\n     * @see.gluTessVertex gluTessVertex\n     *\n     * @see.gluTessCallback gluTessCallback\n     *\n     * @see.gluTessProperty gluTessProperty\n     *\n     * @see.gluTessNormal gluTessNormal\n     *\n     * @see.gluTessEndPolygon gluTessEndPolygon\n     */\n    fun gluTessBeginContour(tessellator: GLUtessellator) {\n        (tessellator as GLUtessellatorImpl).gluTessBeginContour()\n    }\n\n    /**\n     * **gluTessEndContour** and\n     * [gluTessBeginContour][gluTessBeginContour]\n     * delimit the definition of a polygon contour. Within each\n     * [gluTessBeginContour][gluTessBeginContour]/\n     * **gluTessEndContour** pair, there can be zero or more calls to\n     * [gluTessVertex][gluTessVertex]. The vertices\n     * specify a closed contour (the last vertex of each contour is automatically\n     * linked to the first). See the [ gluTessVertex][gluTessVertex] reference page for more details.\n     * [gluTessBeginContour][gluTessBeginContour] can\n     * only be called between [ gluTessBeginPolygon][gluTessBeginPolygon] and\n     * [gluTessEndPolygon][gluTessEndPolygon].\n     *\n     * @param tessellator\n     * Specifies the tessellation object (created with\n     * [gluNewTess][gluNewTess]).\n     *\n     * @see .gluNewTess          gluNewTess\n     *\n     * @see .gluTessBeginPolygon gluTessBeginPolygon\n     *\n     * @see .gluTessVertex       gluTessVertex\n     *\n     * @see .gluTessCallback     gluTessCallback\n     *\n     * @see .gluTessProperty     gluTessProperty\n     *\n     * @see .gluTessNormal       gluTessNormal\n     *\n     * @see .gluTessEndPolygon   gluTessEndPolygon\n     */\n    fun gluTessEndContour(tessellator: GLUtessellator) {\n        (tessellator as GLUtessellatorImpl).gluTessEndContour()\n    }\n\n    /**\n     * **gluTessEndPolygon** and\n     * [gluTessBeginPolygon][gluTessBeginPolygon]\n     * delimit the definition of a convex, concave or self-intersecting polygon.\n     * Within each [ gluTessBeginPolygon][gluTessBeginPolygon]/ **gluTessEndPolygon** pair, there must be one or\n     * more calls to [ gluTessBeginContour][gluTessBeginContour]/[ gluTessEndContour][gluTessEndContour]. Within each contour, there are zero or more calls to\n     * [gluTessVertex][gluTessVertex]. The vertices\n     * specify a closed contour (the last vertex of each contour is automatically\n     * linked to the first). See the [ gluTessVertex][gluTessVertex], [ gluTessBeginContour][gluTessBeginContour] and [ gluTessEndContour][gluTessEndContour] reference pages for more details.\n     * <BR></BR>\n     * Once **gluTessEndPolygon** is called, the polygon is tessellated, and\n     * the resulting triangles are described through callbacks. See\n     * [gluTessCallback][gluTessCallback] for\n     * descriptions of the callback functions.\n     *\n     * @param tessellator\n     * Specifies the tessellation object (created with\n     * [gluNewTess][gluNewTess]).\n     *\n     * @see .gluNewTess          gluNewTess\n     *\n     * @see .gluTessBeginContour gluTessBeginContour\n     *\n     * @see .gluTessVertex       gluTessVertex\n     *\n     * @see .gluTessCallback     gluTessCallback\n     *\n     * @see .gluTessProperty     gluTessProperty\n     *\n     * @see .gluTessNormal       gluTessNormal\n     *\n     * @see .gluTessBeginPolygon gluTessBeginPolygon\n     */\n    fun gluTessEndPolygon(tessellator: GLUtessellator) {\n        (tessellator as GLUtessellatorImpl).gluTessEndPolygon()\n    }\n\n    //----------------------------------------------------------------------\n    // GLU constants\n    // Boolean\n    const val GLU_FALSE = 0\n    const val GLU_TRUE = 1\n\n    // String Name\n    const val GLU_VERSION = 100800\n    const val GLU_EXTENSIONS = 100801\n\n    // Extensions\n    const val versionString = \"1.3\"\n    const val extensionString = \"GLU_EXT_object_space_tess \"\n\n    // ErrorCode\n    const val GLU_INVALID_ENUM = 100900\n    const val GLU_INVALID_VALUE = 100901\n    const val GLU_OUT_OF_MEMORY = 100902\n    const val GLU_INVALID_OPERATION = 100904\n\n    // TessCallback\n    const val GLU_TESS_BEGIN = 100100\n    const val GLU_TESS_VERTEX = 100101\n    const val GLU_TESS_END = 100102\n    const val GLU_TESS_ERROR = 100103\n    const val GLU_TESS_EDGE_FLAG = 100104\n    const val GLU_TESS_COMBINE = 100105\n    const val GLU_TESS_BEGIN_DATA = 100106\n    const val GLU_TESS_VERTEX_DATA = 100107\n    const val GLU_TESS_END_DATA = 100108\n    const val GLU_TESS_ERROR_DATA = 100109\n    const val GLU_TESS_EDGE_FLAG_DATA = 100110\n    const val GLU_TESS_COMBINE_DATA = 100111\n\n    // TessContour\n    const val GLU_CW = 100120\n    const val GLU_CCW = 100121\n    const val GLU_INTERIOR = 100122\n    const val GLU_EXTERIOR = 100123\n    const val GLU_UNKNOWN = 100124\n\n    // TessProperty\n    const val GLU_TESS_WINDING_RULE = 100140\n    const val GLU_TESS_BOUNDARY_ONLY = 100141\n    const val GLU_TESS_TOLERANCE = 100142\n\n    // TessError\n    const val GLU_TESS_ERROR1 = 100151\n    const val GLU_TESS_ERROR2 = 100152\n    const val GLU_TESS_ERROR3 = 100153\n    const val GLU_TESS_ERROR4 = 100154\n    const val GLU_TESS_ERROR5 = 100155\n    const val GLU_TESS_ERROR6 = 100156\n    const val GLU_TESS_ERROR7 = 100157\n    const val GLU_TESS_ERROR8 = 100158\n    const val GLU_TESS_MISSING_BEGIN_POLYGON = 100151\n    const val GLU_TESS_MISSING_BEGIN_CONTOUR = 100152\n    const val GLU_TESS_MISSING_END_POLYGON = 100153\n    const val GLU_TESS_MISSING_END_CONTOUR = 100154\n    const val GLU_TESS_COORD_TOO_LARGE = 100155\n    const val GLU_TESS_NEED_COMBINE_CALLBACK = 100156\n\n    // TessWinding\n    const val GLU_TESS_WINDING_ODD = 100130\n    const val GLU_TESS_WINDING_NONZERO = 100131\n    const val GLU_TESS_WINDING_POSITIVE = 100132\n    const val GLU_TESS_WINDING_NEGATIVE = 100133\n    const val GLU_TESS_WINDING_ABS_GEQ_TWO = 100134\n    const val GLU_TESS_MAX_COORD = 1.0e150\n}\n","/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n * \n * http://oss.sgi.com/projects/FreeB\n * \n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n * \n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n * \n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n */\npackage earth.worldwind.util.glu.error\n\nimport earth.worldwind.util.glu.GLU\nimport kotlin.jvm.JvmStatic\n\nobject Error {\n\tprivate val gluErrorStrings = arrayOf(\n\t\t\"invalid enumerant\",\n\t\t\"invalid value\",\n\t\t\"out of memory\",\n\t\t\"\",\n\t\t\"invalid operation\"\n\t)\n\n\t@JvmStatic\n\tfun gluErrorString(errorCode: Int): String? {\n\t\tif (errorCode == 0) return \"no error\"\n\t\tif (errorCode >= GLU.GLU_INVALID_ENUM && errorCode <= GLU.GLU_INVALID_OPERATION)\n\t\t\treturn gluErrorStrings[errorCode - GLU.GLU_INVALID_ENUM]\n\t\treturn if (errorCode >= GLU.GLU_TESS_ERROR1 && errorCode <= GLU.GLU_TESS_ERROR8)\n\t\t\tgluErrorStrings[errorCode - (GLU.GLU_TESS_ERROR1 - 1)] else null\n\t}\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu.tessellator\n\ninternal class ActiveRegion(\n    /**\n     * upper edge, directed right to left\n     */\n    var eUp: GLUhalfEdge\n) {\n    /**\n     * dictionary node corresponding to eUp\n     */\n    var nodeUp: DictNode? = null\n    /**\n     * used to determine which regions are inside the polygon\n     */\n    var windingNumber = 0\n    /**\n     * is this region inside the polygon?\n     */\n    var inside = false\n    /**\n     * marks fake edges at t = +/-infinity\n     */\n    var sentinel = false\n    /**\n     * marks regions where the upper or lower\n     * edge has changed, but we haven't checked\n     * whether they intersect yet\n     */\n    var dirty = false\n    /**\n     * marks temporary edges introduced when\n     * we process a \"right vertex\" (one without\n     * any edges leaving to the right)\n     */\n    var fixUpperEdge = false\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\nclass CachedVertex {\n    val coords = DoubleArray(3)\n    var data: Any? = null\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu.tessellator\n\nclass Dict private constructor(\n    var head: DictNode,\n    var frame: Any,\n    var leq: DictLeq\n) {\n\n    interface DictLeq {\n        fun leq(frame: Any, key1: Any?, key2: Any?): Boolean\n    }\n\n    companion object {\n        fun dictNewDict(frame: Any, leq: DictLeq): Dict {\n            return Dict(DictNode(), frame, leq)\n        }\n\n        @Suppress(\"UNUSED_PARAMETER\")\n        fun dictDeleteDict(dict: Dict) {\n// Memory will clear automatically\n//            dict.head = null\n//            dict.frame = null\n//            dict.leq = null\n        }\n\n        fun dictInsert(dict: Dict, key: Any?): DictNode {\n            return dictInsertBefore(dict, dict.head, key)\n        }\n\n        fun dictInsertBefore(dict: Dict, node: DictNode, key: Any?): DictNode {\n            var n = node\n            do {\n                n = n.prev\n            } while (n.key != null && !dict.leq.leq(dict.frame, n.key, key))\n            val newNode = DictNode(key).apply {\n                prev = n\n                next = n.next\n            }\n            n.next.prev = newNode\n            n.next = newNode\n            return newNode\n        }\n\n        fun dictKey(aNode: DictNode) = aNode.key\n\n        fun dictSucc(aNode: DictNode) = aNode.next\n\n        fun dictPred(aNode: DictNode) = aNode.prev\n\n        fun dictMin(aDict: Dict) = aDict.head.next\n\n        fun dictMax(aDict: Dict) = aDict.head.prev\n\n        fun dictDelete(node: DictNode) {\n            node.next.prev = node.prev\n            node.prev.next = node.next\n        }\n\n        fun dictSearch(dict: Dict, key: Any?): DictNode {\n            var node = dict.head\n            do {\n                node = node.next\n            } while (node.key != null && !dict.leq.leq(dict.frame, key, node.key))\n            return node\n        }\n    }\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu.tessellator\n\nclass DictNode(\n    var key: Any? = null,\n) {\n    var next = this\n    var prev = this\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu.tessellator\n\nclass GLUface {\n    /**\n     * next face (never NULL)\n     */\n    var next: GLUface? = null\n    /**\n     * previous face (never NULL)\n     */\n    var prev: GLUface? = null\n    /**\n     * a half edge with this left face\n     */\n    var anEdge: GLUhalfEdge? = null\n    /**\n     * room for client's data\n     */\n    var data: Any? = null\n\n    /* Internal data (keep hidden) */\n    /**\n     * \"stack\" for conversion to strips\n     */\n    var trail: GLUface? = null\n    /**\n     * flag for conversion to strips\n     */\n    var marked = false\n    /**\n     * this face is in the polygon interior\n     */\n    var inside = false\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\nclass GLUhalfEdge(val first: Boolean) {\n    /**\n     * doubly-linked list (prev==Sym->next)\n     */\n    var next: GLUhalfEdge? = null\n    /**\n     * same edge, opposite direction\n     */\n    var sym: GLUhalfEdge? = null\n    /**\n     * next edge CCW around origin\n     */\n    var oNext: GLUhalfEdge? = null\n    /**\n     * next edge CCW around left face\n     */\n    var lNext: GLUhalfEdge? = null\n    /**\n     * origin vertex (Overtex too long)\n     */\n    var org: GLUvertex? = null\n    /**\n     * left face\n     */\n    var lFace: GLUface? = null\n\n    /* Internal data (keep hidden) */\n    /**\n     * a region with this upper edge (sweep.c)\n     */\n    internal var activeRegion: ActiveRegion? = null\n    /**\n     * change in winding number when crossing\n     */\n    var winding = 0\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\nclass GLUmesh {\n    /**\n     * dummy header for vertex list\n     */\n    val vHead = GLUvertex()\n    /**\n     * dummy header for face list\n     */\n    val fHead = GLUface()\n    /**\n     * dummy header for edge list\n     */\n    internal val eHead = GLUhalfEdge(true)\n    /**\n     * and its symmetric counterpart\n     */\n    internal val eHeadSym = GLUhalfEdge(false)\n}","/*\n * Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n * All rights reserved.\n */\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\nimport earth.worldwind.util.glu.GLU\nimport earth.worldwind.util.glu.GLUtessellator\nimport earth.worldwind.util.glu.GLUtessellatorCallback\nimport earth.worldwind.util.glu.GLUtessellatorCallbackAdapter\n\nclass GLUtessellatorImpl private constructor() : GLUtessellator {\n    /**\n     * what begin/end calls have we seen?\n     */\n    private var state = TessState.T_DORMANT\n    /**\n     * lastEdge->Org is the most recent vertex\n     */\n    private var lastEdge: GLUhalfEdge? = null\n    /**\n     *  stores the input contours, and eventually the tessellation itself\n     */\n    var mesh: GLUmesh? = null\n\n    /*** state needed for projecting onto the sweep plane  */\n    /**\n     * user-specified normal (if provided)\n     */\n    val normal = DoubleArray(3)\n    /**\n     * unit vector in s-direction (debugging)\n     */\n    val sUnit = DoubleArray(3)\n    /**\n     * unit vector in t-direction (debugging)\n     */\n    val tUnit = DoubleArray(3)\n\n    /*** state needed for the line sweep  */\n    /**\n     * tolerance for merging features\n     */\n    private var relTolerance = GLU_TESS_DEFAULT_TOLERANCE\n    /**\n     * rule for determining polygon interior\n     */\n    var windingRule = GLU.GLU_TESS_WINDING_ODD\n    /**\n     * fatal error: needed combine callback\n     */\n    var fatalError = false\n    /**\n     * edge dictionary for sweep line\n     */\n    var dict: Dict? = null\n    /**\n     * priority queue of vertex events\n     */\n    var pq: PriorityQ? = null\n    /**\n     * current sweep event being processed\n     */\n    var event: GLUvertex? = null\n\n    /*** state needed for rendering callbacks (see render.c)  */\n    /**\n     * mark boundary edges (use EdgeFlag)\n     */\n    var flagBoundary = false\n    /**\n     * Extract contours, not triangles\n     */\n    var boundaryOnly = false\n    /**\n     * list of triangles which could not be rendered as strips or fans\n     */\n    var lonelyTriList: GLUface? = null\n    /*** state needed to cache single-contour polygons for renderCache()  */\n    /**\n     * empty cache on next vertex() call\n     */\n    private var flushCacheOnNextVertex = false\n    /**\n     * number of cached vertices\n     */\n    var cacheCount = 0\n    /**\n     * the vertex data\n     */\n    val cache = Array(TESS_MAX_CACHE) { CachedVertex() }\n\n    /*** rendering callbacks that also pass polygon data   */\n    /**\n     * client data for current polygon\n     */\n    private var polygonData: Any? = null\n    private var callBegin: GLUtessellatorCallback = NULL_CB\n    private var callEdgeFlag: GLUtessellatorCallback = NULL_CB\n    private var callVertex: GLUtessellatorCallback = NULL_CB\n    private var callEnd: GLUtessellatorCallback = NULL_CB\n\n    //private var callMesh: GLUtessellatorCallback = NULL_CB\n    private var callError: GLUtessellatorCallback = NULL_CB\n    private var callCombine: GLUtessellatorCallback = NULL_CB\n    private var callBeginData: GLUtessellatorCallback = NULL_CB\n    private var callEdgeFlagData: GLUtessellatorCallback = NULL_CB\n    private var callVertexData: GLUtessellatorCallback = NULL_CB\n    private var callEndData: GLUtessellatorCallback = NULL_CB\n\n    //private GLUtessellatorCallback callMeshData;\n    private var callErrorData: GLUtessellatorCallback = NULL_CB\n    private var callCombineData: GLUtessellatorCallback = NULL_CB\n\n    private fun makeDormant() {\n        /**\n         * Return the tessellator to its original dormant state.\n         */\n        mesh?.let { Mesh.glMeshDeleteMesh(it) }\n        state = TessState.T_DORMANT\n        lastEdge = null\n        mesh = null\n    }\n\n    private fun requireState(newState: Int) {\n        if (state != newState) gotoState(newState)\n    }\n\n    private fun gotoState(newState: Int) {\n        while (state != newState) {\n            /**\n             * We change the current state one level at a time, to get to the desired state.\n             */\n            if (state < newState) {\n                if (state == TessState.T_DORMANT) {\n                    callErrorOrErrorData(GLU.GLU_TESS_MISSING_BEGIN_POLYGON)\n                    gluTessBeginPolygon(null)\n                } else if (state == TessState.T_IN_POLYGON) {\n                    callErrorOrErrorData(GLU.GLU_TESS_MISSING_BEGIN_CONTOUR)\n                    gluTessBeginContour()\n                }\n            } else {\n                if (state == TessState.T_IN_CONTOUR) {\n                    callErrorOrErrorData(GLU.GLU_TESS_MISSING_END_CONTOUR)\n                    gluTessEndContour()\n                } else if (state == TessState.T_IN_POLYGON) {\n                    callErrorOrErrorData(GLU.GLU_TESS_MISSING_END_POLYGON)\n                    /* gluTessEndPolygon( tess ) is too much work! */\n                    makeDormant()\n                }\n            }\n        }\n    }\n\n    fun gluDeleteTess() {\n        requireState(TessState.T_DORMANT)\n    }\n\n    fun gluTessProperty(which: Int, value: Double) {\n        when (which) {\n            GLU.GLU_TESS_TOLERANCE -> {\n                if (value < 0.0 || value > 1.0) callErrorOrErrorData(GLU.GLU_INVALID_VALUE)\n                else relTolerance = value\n            }\n            GLU.GLU_TESS_WINDING_RULE -> {\n                val windingRule = value.toInt()\n                if (windingRule.toDouble() != value) {\n                    /* not an integer */\n                    callErrorOrErrorData(GLU.GLU_INVALID_VALUE)\n                } else {\n                    when (windingRule) {\n                        GLU.GLU_TESS_WINDING_ODD,\n                        GLU.GLU_TESS_WINDING_NONZERO,\n                        GLU.GLU_TESS_WINDING_POSITIVE,\n                        GLU.GLU_TESS_WINDING_NEGATIVE,\n                        GLU.GLU_TESS_WINDING_ABS_GEQ_TWO -> this.windingRule = windingRule\n                        else -> callErrorOrErrorData(GLU.GLU_INVALID_VALUE)\n                    }\n                }\n            }\n            GLU.GLU_TESS_BOUNDARY_ONLY -> boundaryOnly = value != 0.0\n            else -> callErrorOrErrorData(GLU.GLU_INVALID_ENUM)\n        }\n    }\n\n    /**\n     * Returns tessellator property\n     */\n    fun gluGetTessProperty(which: Int, value: DoubleArray, value_offset: Int) {\n        when (which) {\n            GLU.GLU_TESS_TOLERANCE -> value[value_offset] = relTolerance\n            GLU.GLU_TESS_WINDING_RULE -> value[value_offset] = windingRule.toDouble()\n            GLU.GLU_TESS_BOUNDARY_ONLY -> value[value_offset] = if (boundaryOnly) 1.0 else 0.0\n            else -> {\n                value[value_offset] = 0.0\n                callErrorOrErrorData(GLU.GLU_INVALID_ENUM)\n            }\n        }\n    }\n\n    fun gluTessNormal(x: Double, y: Double, z: Double) {\n        normal[0] = x\n        normal[1] = y\n        normal[2] = z\n    }\n\n    fun gluTessCallback(which: Int, aCallback: GLUtessellatorCallback?) {\n        when (which) {\n            GLU.GLU_TESS_BEGIN -> callBegin = aCallback ?: NULL_CB\n            GLU.GLU_TESS_BEGIN_DATA -> callBeginData = aCallback ?: NULL_CB\n            GLU.GLU_TESS_EDGE_FLAG -> {\n                callEdgeFlag = aCallback ?: NULL_CB\n                /**\n                 * If the client wants boundary edges to be flagged,\n                 * we render everything as separate triangles (no strips or fans).\n                 */\n                flagBoundary = aCallback != null\n            }\n            GLU.GLU_TESS_EDGE_FLAG_DATA -> {\n                run {\n                    callBegin = aCallback ?: NULL_CB\n                    callEdgeFlagData = callBegin\n                }\n                /**\n                 * If the client wants boundary edges to be flagged,\n                 * we render everything as separate triangles (no strips or fans).\n                 */\n                flagBoundary = aCallback != null\n            }\n            GLU.GLU_TESS_VERTEX -> callVertex = aCallback ?: NULL_CB\n            GLU.GLU_TESS_VERTEX_DATA -> callVertexData = aCallback ?: NULL_CB\n            GLU.GLU_TESS_END -> callEnd = aCallback ?: NULL_CB\n            GLU.GLU_TESS_END_DATA -> callEndData = aCallback ?: NULL_CB\n            GLU.GLU_TESS_ERROR -> callError = aCallback ?: NULL_CB\n            GLU.GLU_TESS_ERROR_DATA -> callErrorData = aCallback ?: NULL_CB\n            GLU.GLU_TESS_COMBINE -> callCombine = aCallback ?: NULL_CB\n            GLU.GLU_TESS_COMBINE_DATA -> callCombineData = aCallback ?: NULL_CB\n            else -> callErrorOrErrorData(GLU.GLU_INVALID_ENUM)\n        }\n    }\n\n    private fun addVertex(coords: DoubleArray, vertexData: Any?): Boolean {\n        var e = lastEdge\n        if (e == null) {\n            /* Make a self-loop (one vertex, one edge). */\n            e = Mesh.glMeshMakeEdge(mesh!!)\n            if (!Mesh.glMeshSplice(e, e.sym!!)) return false\n        } else {\n            /**\n             * Create a new vertex and edge which immediately follow e\n             * in the ordering around the left face.\n             */\n            Mesh.glMeshSplitEdge(e)\n            e = e.lNext!!\n        }\n\n        /* The new vertex is now e.Org. */\n        e.org?.data = vertexData\n        e.org!!.coords[0] = coords[0]\n        e.org!!.coords[1] = coords[1]\n        e.org!!.coords[2] = coords[2]\n\n        /**\n         * The winding of an edge says how the winding number changes as we\n         * cross from the edge''s right face to its left face.  We add the\n         * vertices in such an order that a CCW contour will add +1 to\n         * the winding number of the region inside the contour.\n         */\n        e.winding = 1\n        e.sym?.winding = -1\n        lastEdge = e\n        return true\n    }\n\n    private fun cacheVertex(coords: DoubleArray, vertexData: Any?) {\n        val v = cache[cacheCount]\n        v.data = vertexData\n        v.coords[0] = coords[0]\n        v.coords[1] = coords[1]\n        v.coords[2] = coords[2]\n        ++cacheCount\n    }\n\n    private fun flushCache(): Boolean {\n        mesh = Mesh.glMeshNewMesh()\n        for (i in 0 until cacheCount) {\n            val vertex = cache[i]\n            if (!addVertex(vertex.coords, vertex.data)) return false\n        }\n        cacheCount = 0\n        flushCacheOnNextVertex = false\n        return true\n    }\n\n    fun gluTessVertex(coords: DoubleArray, coords_offset: Int, vertexData: Any?) {\n        var tooLarge = false\n        val clamped = DoubleArray(3)\n        requireState(TessState.T_IN_CONTOUR)\n        if (flushCacheOnNextVertex) {\n            if (!flushCache()) {\n                callErrorOrErrorData(GLU.GLU_OUT_OF_MEMORY)\n                return\n            }\n            lastEdge = null\n        }\n        var i = 0\n        while (i < 3) {\n            var x = coords[i + coords_offset]\n            if (x < -GLU.GLU_TESS_MAX_COORD) {\n                x = -GLU.GLU_TESS_MAX_COORD\n                tooLarge = true\n            }\n            if (x > GLU.GLU_TESS_MAX_COORD) {\n                x = GLU.GLU_TESS_MAX_COORD\n                tooLarge = true\n            }\n            clamped[i] = x\n            ++i\n        }\n        if (tooLarge) {\n            callErrorOrErrorData(GLU.GLU_TESS_COORD_TOO_LARGE)\n        }\n        if (mesh == null) {\n            if (cacheCount < TESS_MAX_CACHE) {\n                cacheVertex(clamped, vertexData)\n                return\n            }\n            if (!flushCache()) {\n                callErrorOrErrorData(GLU.GLU_OUT_OF_MEMORY)\n                return\n            }\n        }\n        if (!addVertex(clamped, vertexData)) {\n            callErrorOrErrorData(GLU.GLU_OUT_OF_MEMORY)\n        }\n    }\n\n    fun gluTessBeginPolygon(data: Any?) {\n        requireState(TessState.T_DORMANT)\n        state = TessState.T_IN_POLYGON\n        cacheCount = 0\n        flushCacheOnNextVertex = false\n        mesh = null\n        polygonData = data\n    }\n\n    fun gluTessBeginContour() {\n        requireState(TessState.T_IN_POLYGON)\n        state = TessState.T_IN_CONTOUR\n        lastEdge = null\n        if (cacheCount > 0) {\n            /**\n             * Just set a flag so we don't get confused by empty contours\n             * -- these can be generated accidentally with the obsolete\n             * NextContour() interface.\n             */\n            flushCacheOnNextVertex = true\n        }\n    }\n\n    fun gluTessEndContour() {\n        requireState(TessState.T_IN_CONTOUR)\n        state = TessState.T_IN_POLYGON\n    }\n\n    fun gluTessEndPolygon() {\n        try {\n            requireState(TessState.T_IN_POLYGON)\n            state = TessState.T_DORMANT\n            if (this.mesh == null) {\n                if (!flagBoundary /*&& callMesh == NULL_CB*/) {\n                    /**\n                     * Try some special code to make the easy cases go quickly\n                     * (eg. convex polygons).  This code does NOT handle multiple contours,\n                     * intersections, edge flags, and of course it does not generate\n                     * an explicit mesh either.\n                     */\n                    if (Render.glRenderCache(this)) {\n                        polygonData = null\n                        return\n                    }\n                }\n                if (!flushCache()) throw RuntimeException() /* could've used a label*/\n            }\n\n            /**\n             * Determine the polygon normal and project vertices onto the plane\n             * of the polygon.\n             */\n            Normal.glProjectPolygon(this)\n\n            /**\n             * __gl_computeInterior( tess ) computes the planar arrangement specified\n             * by the given contours, and further subdivides this arrangement\n             * into regions.  Each region is marked \"inside\" if it belongs\n             * to the polygon, according to the rule given by windingRule.\n             * Each interior region is guaranteed be monotone.\n             */\n            if (!Sweep.glComputeInterior(this)) {\n                throw RuntimeException() /* could've used a label */\n            }\n            val mesh = this.mesh!!\n            if (!fatalError) {\n                /**\n                 * If the user wants only the boundary contours, we throw away all edges\n                 * except those which separate the interior from the exterior.\n                 * Otherwise we tessellate all the regions marked \"inside\".\n                 */\n                val rc = if (boundaryOnly) {\n                    TessMono.glMeshSetWindingNumber(mesh, 1, true)\n                } else {\n                    TessMono.glMeshTessellateInterior(mesh)\n                }\n                if (!rc) throw RuntimeException() /* could've used a label */\n                Mesh.glMeshCheckMesh(mesh)\n                if (callBegin !== NULL_CB || callEnd !== NULL_CB || callVertex !== NULL_CB || callEdgeFlag !== NULL_CB || callBeginData !== NULL_CB || callEndData !== NULL_CB || callVertexData !== NULL_CB || callEdgeFlagData !== NULL_CB) {\n                    if (boundaryOnly) {\n                        Render.glRenderBoundary(this, mesh) /* output boundary contours */\n                    } else {\n                        Render.glRenderMesh(this, mesh) /* output strips and fans */\n                    }\n                }\n                //                if (callMesh != NULL_CB) {\n//                    /**\n//                     * Throw away the exterior faces, so that all faces are interior.\n//                     * This way the user doesn't have to check the \"inside\" flag,\n//                     * and we don't need to even reveal its existence.  It also leaves\n//                     * the freedom for an implementation to not generate the exterior\n//                     * faces in the first place.\n//                     */\n//                    TessMono.__gl_meshDiscardExterior(mesh);\n//                    callMesh.mesh(mesh);\t\t/* user wants the mesh itself */\n//                    mesh = null;\n//                    polygonData = null;\n//                    return;\n//                }\n            }\n            Mesh.glMeshDeleteMesh(mesh)\n            polygonData = null\n        } catch (e: Exception) {\n            e.printStackTrace()\n            callErrorOrErrorData(GLU.GLU_OUT_OF_MEMORY)\n        }\n    }\n\n    fun callBeginOrBeginData(a: Int) {\n        if (callBeginData !== NULL_CB) callBeginData.beginData(a, polygonData!!) else callBegin.begin(a)\n    }\n\n    fun callVertexOrVertexData(a: Any) {\n        if (callVertexData !== NULL_CB) callVertexData.vertexData(a, polygonData!!) else callVertex.vertex(a)\n    }\n\n    fun callEdgeFlagOrEdgeFlagData(a: Boolean) {\n        if (callEdgeFlagData !== NULL_CB) callEdgeFlagData.edgeFlagData(a, polygonData!!) else callEdgeFlag.edgeFlag(a)\n    }\n\n    fun callEndOrEndData() {\n        if (callEndData !== NULL_CB) callEndData.endData(polygonData!!) else callEnd.end()\n    }\n\n    fun callCombineOrCombineData(\n        coords: DoubleArray,\n        vertexData: Array<Any?>,\n        weights: FloatArray,\n        outData: Array<Any?>\n    ) {\n        if (callCombineData !== NULL_CB) callCombineData.combineData(coords, vertexData, weights, outData, polygonData!!)\n        else callCombine.combine(coords, vertexData, weights, outData)\n    }\n\n    fun callErrorOrErrorData(a: Int) {\n        if (callErrorData !== NULL_CB) callErrorData.errorData(a, polygonData!!) else callError.error(a)\n    }\n\n    companion object {\n        const val TESS_MAX_CACHE = 100\n        private const val GLU_TESS_DEFAULT_TOLERANCE = 0.0\n\n        //private static final int GLU_TESS_MESH = 100112;\t/* void (*)(GLUmesh *mesh)\t    */\n        private val NULL_CB = GLUtessellatorCallbackAdapter()\n\n        fun gluNewTess(): GLUtessellator = GLUtessellatorImpl()\n    }\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\nclass GLUvertex {\n    /**\n     * next vertex (never NULL)\n     */\n    var next: GLUvertex? = null\n    /**\n     * previous vertex (never NULL)\n     */\n    var prev: GLUvertex? = null\n    /**\n     * a half-edge with this origin\n     */\n    var anEdge: GLUhalfEdge? = null\n    /**\n     * client's data\n     */\n    var data: Any? = null\n\n    /* Internal data (keep hidden) */\n    /**\n     * vertex location in 3D\n     */\n    val coords = DoubleArray(3)\n    var s = 0.0\n    /**\n     * projection onto the sweep plane\n     */\n    var t = 0.0\n    /**\n     * to allow deletion from priority queue\n     */\n    var pqHandle = 0\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu.tessellator\n\nimport earth.worldwind.util.glu.GLU\nimport kotlin.math.abs\nimport kotlin.math.sqrt\n\ninternal object Normal {\n    private const val SLANTED_SWEEP = false\n    private var S_UNIT_X = 0.0 /* Pre-normalized */\n    private var S_UNIT_Y = 0.0\n    private const val TRUE_PROJECT = false\n\n    init {\n        if (SLANTED_SWEEP) {\n            /**\n             * The \"feature merging\" is not intended to be complete.  There are\n             * special cases where edges are nearly parallel to the sweep line\n             * which are not implemented.  The algorithm should still behave\n             * robustly (ie. produce a reasonable tesselation) in the presence\n             * of such edges, however it may miss features which could have been\n             * merged.  We could minimize this effect by choosing the sweep line\n             * direction to be something unusual (ie. not parallel to one of the\n             * coordinate axes).\n             */\n            S_UNIT_X = 0.5094153956495538 /* Pre-normalized */\n            S_UNIT_Y = 0.8605207462201063\n        } else {\n            S_UNIT_X = 1.0\n            S_UNIT_Y = 0.0\n        }\n    }\n\n    private fun dot(u: DoubleArray, v: DoubleArray): Double {\n        return u[0] * v[0] + u[1] * v[1] + u[2] * v[2]\n    }\n\n    fun normalize(v: DoubleArray) {\n        var len = v[0] * v[0] + v[1] * v[1] + v[2] * v[2]\n        len = sqrt(len)\n        v[0] /= len\n        v[1] /= len\n        v[2] /= len\n    }\n\n    fun longAxis(v: DoubleArray): Int {\n        var i = 0\n        if (abs(v[1]) > abs(v[0])) {\n            i = 1\n        }\n        if (abs(v[2]) > abs(v[i])) {\n            i = 2\n        }\n        return i\n    }\n\n    fun computeNormal(tess: GLUtessellatorImpl, norm: DoubleArray) {\n        val vHead = tess.mesh?.vHead!!\n        val maxVal = DoubleArray(3)\n        val minVal = DoubleArray(3)\n        val minVert = arrayOfNulls<GLUvertex>(3)\n        val maxVert = arrayOfNulls<GLUvertex>(3)\n        val d1 = DoubleArray(3)\n        val d2 = DoubleArray(3)\n        val tNorm = DoubleArray(3)\n        maxVal[2] = -2 * GLU.GLU_TESS_MAX_COORD\n        maxVal[1] = maxVal[2]\n        maxVal[0] = maxVal[1]\n        minVal[2] = 2 * GLU.GLU_TESS_MAX_COORD\n        minVal[1] = minVal[2]\n        minVal[0] = minVal[1]\n        var v = vHead.next!!\n        while (v !== vHead) {\n            var i = 0\n            while (i < 3) {\n                val c = v.coords[i]\n                if (c < minVal[i]) {\n                    minVal[i] = c\n                    minVert[i] = v\n                }\n                if (c > maxVal[i]) {\n                    maxVal[i] = c\n                    maxVert[i] = v\n                }\n                ++i\n            }\n            v = v.next!!\n        }\n\n        /**\n         * Find two vertices separated by at least 1/sqrt(3) of the maximum\n         * distance between any two vertices\n         */\n        var i = 0\n        if (maxVal[1] - minVal[1] > maxVal[0] - minVal[0]) {\n            i = 1\n        }\n        if (maxVal[2] - minVal[2] > maxVal[i] - minVal[i]) {\n            i = 2\n        }\n        if (minVal[i] >= maxVal[i]) {\n            /* All vertices are the same -- normal doesn't matter */\n            norm[0] = 0.0\n            norm[1] = 0.0\n            norm[2] = 1.0\n            return\n        }\n\n        /**\n         * Look for a third vertex which forms the triangle with maximum area\n         * (Length of normal == twice the triangle area)\n         */\n        var maxLen2 = 0.0\n        val v1 = minVert[i]!!\n        val v2 = maxVert[i]!!\n        d1[0] = v1.coords[0] - v2.coords[0]\n        d1[1] = v1.coords[1] - v2.coords[1]\n        d1[2] = v1.coords[2] - v2.coords[2]\n        v = vHead.next!!\n        while (v !== vHead) {\n            d2[0] = v.coords[0] - v2.coords[0]\n            d2[1] = v.coords[1] - v2.coords[1]\n            d2[2] = v.coords[2] - v2.coords[2]\n            tNorm[0] = d1[1] * d2[2] - d1[2] * d2[1]\n            tNorm[1] = d1[2] * d2[0] - d1[0] * d2[2]\n            tNorm[2] = d1[0] * d2[1] - d1[1] * d2[0]\n            val tLen2 = tNorm[0] * tNorm[0] + tNorm[1] * tNorm[1] + tNorm[2] * tNorm[2]\n            if (tLen2 > maxLen2) {\n                maxLen2 = tLen2\n                norm[0] = tNorm[0]\n                norm[1] = tNorm[1]\n                norm[2] = tNorm[2]\n            }\n            v = v.next!!\n        }\n        if (maxLen2 <= 0) {\n            /* All points lie on a single line -- any decent normal will do */\n            norm[2] = 0.0\n            norm[1] = norm[2]\n            norm[0] = norm[1]\n            norm[longAxis(d1)] = 1.0\n        }\n    }\n\n    fun checkOrientation(tess: GLUtessellatorImpl) {\n        val fHead = tess.mesh?.fHead!!\n        val vHead = tess.mesh?.vHead!!\n\n        /**\n         *  When we compute the normal automatically, we choose the orientation\n         * so that the the sum of the signed areas of all contours is non-negative.\n         */\n        var area = 0.0\n        var f = fHead.next!!\n        while (f !== fHead) {\n            var e = f.anEdge!!\n            if (e.winding <= 0) {\n                f = f.next!!\n                continue\n            }\n            do {\n                area += (e.org!!.s - e.sym!!.org!!.s) * (e.org!!.t + e.sym!!.org!!.t)\n                e = e.lNext!!\n            } while (e !== f.anEdge)\n            f = f.next!!\n        }\n        if (area < 0) {\n            /* Reverse the orientation by flipping all the t-coordinates */\n            var v = vHead.next!!\n            while (v !== vHead) {\n                v.t = -v.t\n                v = v.next!!\n            }\n            tess.tUnit[0] = -tess.tUnit[0]\n            tess.tUnit[1] = -tess.tUnit[1]\n            tess.tUnit[2] = -tess.tUnit[2]\n        }\n    }\n\n    /**\n     * Determine the polygon normal and project vertices onto the plane\n     * of the polygon.\n     */\n    fun glProjectPolygon(tess: GLUtessellatorImpl) {\n        val vHead = tess.mesh?.vHead!!\n        val norm = DoubleArray(3)\n        var computedNormal = false\n        norm[0] = tess.normal[0]\n        norm[1] = tess.normal[1]\n        norm[2] = tess.normal[2]\n        if (norm[0] == 0.0 && norm[1] == 0.0 && norm[2] == 0.0) {\n            computeNormal(tess, norm)\n            computedNormal = true\n        }\n        val sUnit = tess.sUnit\n        val tUnit = tess.tUnit\n        val i = longAxis(norm)\n        if (TRUE_PROJECT) {\n            /**\n             * Choose the initial sUnit vector to be approximately perpendicular\n             * to the normal.\n             */\n            normalize(norm)\n            sUnit[i] = 0.0\n            sUnit[(i + 1) % 3] = S_UNIT_X\n            sUnit[(i + 2) % 3] = S_UNIT_Y\n\n            /* Now make it exactly perpendicular */\n            val w = dot(sUnit, norm)\n            sUnit[0] -= w * norm[0]\n            sUnit[1] -= w * norm[1]\n            sUnit[2] -= w * norm[2]\n            normalize(sUnit)\n\n            /* Choose tUnit so that (sUnit,tUnit,norm) form a right-handed frame */\n            tUnit[0] = norm[1] * sUnit[2] - norm[2] * sUnit[1]\n            tUnit[1] = norm[2] * sUnit[0] - norm[0] * sUnit[2]\n            tUnit[2] = norm[0] * sUnit[1] - norm[1] * sUnit[0]\n            normalize(tUnit)\n        } else {\n            /* Project perpendicular to a coordinate axis -- better numerically */\n            sUnit[i] = 0.0\n            sUnit[(i + 1) % 3] = S_UNIT_X\n            sUnit[(i + 2) % 3] = S_UNIT_Y\n            tUnit[i] = 0.0\n            tUnit[(i + 1) % 3] = if (norm[i] > 0) -S_UNIT_Y else S_UNIT_Y\n            tUnit[(i + 2) % 3] = if (norm[i] > 0) S_UNIT_X else -S_UNIT_X\n        }\n\n        /* Project the vertices onto the sweep plane */\n        var v = vHead.next!!\n        while (v !== vHead) {\n            v.s = dot(v.coords, sUnit)\n            v.t = dot(v.coords, tUnit)\n            v = v.next!!\n        }\n        if (computedNormal) {\n            checkOrientation(tess)\n        }\n    }\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu.tessellator\n\nabstract class PriorityQ {\n    class PQnode {\n        var handle = 0\n    }\n\n    class PQhandleElem {\n        var key: Any? = null\n        var node = 0\n    }\n\n    interface Leq {\n        fun leq(key1: Any?, key2: Any?): Boolean\n    }\n\n    abstract fun pqDeletePriorityQ()\n    abstract fun pqInit(): Boolean\n    abstract fun pqInsert(keyNew: Any?): Int\n    abstract fun pqExtractMin(): Any?\n    abstract fun pqDelete(hCurr: Int)\n    abstract fun pqMinimum(): Any?\n    abstract fun pqIsEmpty(): Boolean //    #endif\n\n    companion object {\n        const val INIT_SIZE = 32\n\n        fun leq(x: Any, y: Any) = Geom.vertLeq(x as GLUvertex, y as GLUvertex)\n\n        fun pqNewPriorityQ(): PriorityQ = PriorityQSort()\n    }\n}","/*\n * Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n * All rights reserved.\n */\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\ninternal class PriorityQHeap : PriorityQ() {\n    var nodes = Array(INIT_SIZE + 1) { PQnode() }\n    var handles = Array(INIT_SIZE + 1) { PQhandleElem() }\n    var size = 0\n    var max = INIT_SIZE\n    var freeList = 0\n    var initialized = false\n\n    init {\n        nodes[1].handle = 1\n        handles[1].key = null\n    }\n\n    /* really __gl_pqHeapDeletePriorityQ */\n    override fun pqDeletePriorityQ() {\n        handles = emptyArray()\n        nodes = emptyArray()\n    }\n\n    fun floatDown(curr: Int) {\n        var c = curr\n        val n = nodes\n        val h = handles\n        val hCurr = n[c].handle\n        while (true) {\n            var child = c shl 1\n            if (child < size && leq(h[n[child + 1].handle].key!!, h[n[child].handle].key!!)) {\n                ++child\n            }\n            val hChild = n[child].handle\n            if (child > size || leq(h[hCurr].key!!, h[hChild].key!!)) {\n                n[c].handle = hCurr\n                h[hCurr].node = c\n                break\n            }\n            n[c].handle = hChild\n            h[hChild].node = c\n            c = child\n        }\n    }\n\n    fun floatUp(curr: Int) {\n        var c = curr\n        val n = nodes\n        val h = handles\n        val hCurr = n[c].handle\n        while (true) {\n            val parent = c shr 1\n            val hParent = n[parent].handle\n            if (parent == 0 || leq(h[hParent].key!!, h[hCurr].key!!)) {\n                n[c].handle = hCurr\n                h[hCurr].node = c\n                break\n            }\n            n[c].handle = hParent\n            h[hParent].node = c\n            c = parent\n        }\n    }\n\n    /* really __gl_pqHeapInit */\n    override fun pqInit(): Boolean {\n        /* This method of building a heap is O(n), rather than O(n lg n). */\n        var i = size\n        while (i >= 1) {\n            floatDown(i)\n            --i\n        }\n        initialized = true\n        return true\n    }\n\n    /* really __gl_pqHeapInsert */\n    /* returns LONG_MAX iff out of memory */\n    override fun pqInsert(keyNew: Any?): Int {\n        val free: Int\n        val curr = ++size\n        if (curr * 2 > max) {\n            /* If the heap overflows, double its size. */\n            max = max shl 1\n            nodes = Array(max + 1) { if (it < nodes.size) nodes[it] else PQnode() }\n            handles = Array(max + 1) { if (it < handles.size) handles[it] else PQhandleElem() }\n        }\n        if (freeList == 0) {\n            free = curr\n        } else {\n            free = freeList\n            freeList = handles[free].node\n        }\n        nodes[curr].handle = free\n        handles[free].node = curr\n        handles[free].key = keyNew\n        if (initialized) {\n            floatUp(curr)\n        }\n        return free\n    }\n\n    /* really __gl_pqHeapExtractMin */\n    override fun pqExtractMin(): Any? {\n        val n = nodes\n        val h = handles\n        val hMin = n[1].handle\n        val min = h[hMin].key\n        if (size > 0) {\n            n[1].handle = n[size].handle\n            h[n[1].handle].node = 1\n            h[hMin].key = null\n            h[hMin].node = freeList\n            freeList = hMin\n            if (--size > 0) {\n                floatDown(1)\n            }\n        }\n        return min\n    }\n\n    /* really __gl_pqHeapDelete */\n    override fun pqDelete(hCurr: Int) {\n        val n = nodes\n        val h = handles\n        val curr = h[hCurr].node\n        n[curr].handle = n[size].handle\n        h[n[curr].handle].node = curr\n        if (curr <= --size) {\n            if (curr <= 1 || leq(h[n[curr shr 1].handle].key!!, h[n[curr].handle].key!!)) {\n                floatDown(curr)\n            } else {\n                floatUp(curr)\n            }\n        }\n        h[hCurr].key = null\n        h[hCurr].node = freeList\n        freeList = hCurr\n    }\n\n    override fun pqMinimum(): Any? {\n        return handles[nodes[1].handle].key\n    }\n\n    override fun pqIsEmpty(): Boolean {\n        return size == 0\n    }\n}","/*\n * Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n * All rights reserved.\n */\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\nimport kotlin.math.abs\n\ninternal class PriorityQSort: PriorityQ() {\n    val heap = PriorityQHeap()\n    var keys: Array<Any?>? = arrayOfNulls(INIT_SIZE)\n\n    // JAVA: 'order' contains indices into the keys array.\n    // This simulates the indirect pointers used in the original C code\n    // (from Frank Suykens, Luciad.com).\n    var order: IntArray? = null\n    var size = 0\n    var max = INIT_SIZE\n    var initialized = false\n\n    /* really __gl_pqSortDeletePriorityQ */\n    override fun pqDeletePriorityQ() {\n        heap.pqDeletePriorityQ()\n        order = null\n        keys = null\n    }\n\n    private class Stack {\n        var p = 0\n        var r = 0\n    }\n\n    /* really __gl_pqSortInit */\n    override fun pqInit(): Boolean {\n        val stack = arrayOfNulls<Stack?>(50)\n        for (k in stack.indices) {\n            stack[k] = Stack()\n        }\n        var top = 0\n        var seed = 2016473283\n\n        /**\n         * Create an array of indirect pointers to the keys, so that we\n         * the handles we have returned are still valid.\n         */\n        order = IntArray(size + 1)\n        /* the previous line is a patch to compensate for the fact that IBM */\n        /* machines return a null on a malloc of zero bytes (unlike SGI),   */\n        /* so we have to put in this defense to guard against a memory      */\n        /* fault four lines down. from fossum@austin.ibm.com.               */\n        var p = 0\n        var r = size - 1\n        var piv = 0\n        var i = p\n        while (i <= r) {\n            // indirect pointers: keep an index into the keys array, not a direct pointer to its contents\n            order!![i] = piv\n            ++piv\n            ++i\n        }\n\n        /**\n         * Sort the indirect pointers in descending order,\n         * using randomized Quicksort\n         */\n        stack[top]?.p = p\n        stack[top]?.r = r\n        ++top\n        while (--top >= 0) {\n            p = stack[top]!!.p\n            r = stack[top]!!.r\n            while (r > p + 10) {\n                seed = abs(seed * 1539415821 + 1)\n                i = p + seed % (r - p + 1)\n                piv = order!![i]\n                order!![i] = order!![p]\n                order!![p] = piv\n                i = p - 1\n                var j = r + 1\n                do {\n                    do {\n                        ++i\n                    } while (gt(keys!![order!![i]]!!, keys!![piv]!!))\n                    do {\n                        --j\n                    } while (lt(keys!![order!![j]]!!, keys!![piv]!!))\n                    swap(order!!, i, j)\n                } while (i < j)\n                swap(order!!, i, j) /* Undo last swap */\n                if (i - p < r - j) {\n                    stack[top]?.p = j + 1\n                    stack[top]?.r = r\n                    ++top\n                    r = i - 1\n                } else {\n                    stack[top]?.p = p\n                    stack[top]?.r = i - 1\n                    ++top\n                    p = j + 1\n                }\n            }\n            /* Insertion sort small lists */\n            i = p + 1\n            while (i <= r) {\n                piv = order!![i]\n                var j = i\n                while (j > p && lt(keys!![order!![j - 1]]!!, keys!![piv]!!)) {\n                    order!![j] = order!![j - 1]\n                    --j\n                }\n                order!![j] = piv\n                ++i\n            }\n        }\n        max = size\n        initialized = true\n        heap.pqInit() /* always succeeds */\n\n/*      #ifndef NDEBUG\n        p = order;\n        r = p + size - 1;\n        for (i = p; i < r; ++i) {\n            Assertion.doAssert(LEQ(     * * (i + 1), **i ));\n        }\n        #endif*/\n        return true\n    }\n\n    /* really __gl_pqSortInsert */\n    /* returns LONG_MAX iff out of memory */\n    override fun pqInsert(keyNew: Any?): Int {\n        if (initialized) {\n            return heap.pqInsert(keyNew)\n        }\n        val curr = size\n        if (++size >= max) {\n            /* If the heap overflows, double its size. */\n            max = max shl 1\n            //            pq->keys = (PQHeapKey *)memRealloc( pq->keys,(size_t)(pq->max * sizeof( pq->keys[0] )));\n            val pqKeys = arrayOfNulls<Any>(max)\n            keys?.copyInto(pqKeys)\n            keys = pqKeys\n        }\n        keys!![curr] = keyNew\n\n        /* Negative handles index the sorted array. */\n        return -(curr + 1)\n    }\n\n    /* really __gl_pqSortExtractMin */\n    override fun pqExtractMin(): Any? {\n        if (size == 0) {\n            return heap.pqExtractMin()\n        }\n        val sortMin = keys!![order!![size - 1]]!!\n        if (!heap.pqIsEmpty()) {\n            val heapMin = heap.pqMinimum()!!\n            if (leq(heapMin, sortMin)) {\n                return heap.pqExtractMin()\n            }\n        }\n        do {\n            --size\n        } while (size > 0 && keys!![order!![size - 1]] == null)\n        return sortMin\n    }\n\n    /* really __gl_pqSortMinimum */\n    override fun pqMinimum(): Any? {\n        if (size == 0) {\n            return heap.pqMinimum()\n        }\n        val sortMin = keys!![order!![size - 1]]!!\n        if (!heap.pqIsEmpty()) {\n            val heapMin = heap.pqMinimum()!!\n            if (leq(heapMin, sortMin)) {\n                return heapMin\n            }\n        }\n        return sortMin\n    }\n\n    /* really __gl_pqSortIsEmpty */\n    override fun pqIsEmpty(): Boolean {\n        return size == 0 && heap.pqIsEmpty()\n    }\n\n    /* really __gl_pqSortDelete */\n    override fun pqDelete(hCurr: Int) {\n        var curr = hCurr\n        if (curr >= 0) {\n            heap.pqDelete(curr)\n            return\n        }\n        curr = -(curr + 1)\n        keys!![curr] = null\n        while (size > 0 && keys!![order!![size - 1]] == null) {\n            --size\n        }\n    }\n\n    companion object {\n        private fun lt(x: Any, y: Any): Boolean {\n            return !leq(y, x)\n        }\n\n        private fun gt(x: Any, y: Any): Boolean {\n            return !leq(x, y)\n        }\n\n        private fun swap(array: IntArray, a: Int, b: Int) {\n            val tmp = array[a]\n            array[a] = array[b]\n            array[b] = tmp\n        }\n    }\n}","/*\n * Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n * All rights reserved.\n */\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\nimport earth.worldwind.util.glu.GLU\nimport earth.worldwind.util.kgl.GL_LINE_LOOP\nimport earth.worldwind.util.kgl.GL_TRIANGLES\nimport earth.worldwind.util.kgl.GL_TRIANGLE_FAN\nimport earth.worldwind.util.kgl.GL_TRIANGLE_STRIP\n\n@Suppress(\"NAME_SHADOWING\")\ninternal object Render {\n    private const val USE_OPTIMIZED_CODE_PATH = false\n    private val renderFan = RenderFan()\n    private val renderStrip = RenderStrip()\n    private val renderTriangle = RenderTriangle()\n\n    /************************ Strips and Fans decomposition  */\n    /**\n     * __gl_renderMesh( tess, mesh ) takes a mesh and breaks it into triangle\n     * fans, strips, and separate triangles.  A substantial effort is made\n     * to use as few rendering primitives as possible (ie. to make the fans\n     * and strips as large as possible).\n     *\n     * The rendering output is provided as callbacks (see the api).\n     */\n    fun glRenderMesh(tess: GLUtessellatorImpl, mesh: GLUmesh) {\n        /* Make a list of separate triangles so we can render them all at once */\n        tess.lonelyTriList = null\n        var f = mesh.fHead.next!!\n        while (f !== mesh.fHead) {\n            f.marked = false\n            f = f.next!!\n        }\n        f = mesh.fHead.next!!\n        while (f !== mesh.fHead) {\n            /**\n             * We examine all faces in an arbitrary order.  Whenever we find\n             * an unprocessed face F, we output a group of faces including F\n             * whose size is maximum.\n             */\n            if (f.inside && !f.marked) {\n                renderMaximumFaceGroup(tess, f)\n            }\n            f = f.next!!\n        }\n        if (tess.lonelyTriList != null) {\n            renderLonelyTriangles(tess, tess.lonelyTriList)\n            tess.lonelyTriList = null\n        }\n    }\n\n    /**\n     * We want to find the largest triangle fan or strip of unmarked faces\n     * which includes the given face fOrig.  There are 3 possible fans\n     * passing through fOrig (one centered at each vertex), and 3 possible\n     * strips (one for each CCW permutation of the vertices).  Our strategy\n     * is to try all of these, and take the primitive which uses the most\n     * triangles (a greedy approach).\n     */\n    fun renderMaximumFaceGroup(tess: GLUtessellatorImpl, fOrig: GLUface) {\n        val e = fOrig.anEdge!!\n        var max = FaceCount()\n        max.size = 1\n        max.eStart = e\n        max.render = renderTriangle\n        if (!tess.flagBoundary) {\n            var newFace = maximumFan(e)\n            if (newFace.size > max.size) {\n                max = newFace\n            }\n            newFace = maximumFan(e.lNext!!)\n            if (newFace.size > max.size) {\n                max = newFace\n            }\n            newFace = maximumFan(e.oNext?.sym!!)\n            if (newFace.size > max.size) {\n                max = newFace\n            }\n            newFace = maximumStrip(e)\n            if (newFace.size > max.size) {\n                max = newFace\n            }\n            newFace = maximumStrip(e.lNext!!)\n            if (newFace.size > max.size) {\n                max = newFace\n            }\n            newFace = maximumStrip(e.oNext?.sym!!)\n            if (newFace.size > max.size) {\n                max = newFace\n            }\n        }\n        max.render?.render(tess, max.eStart!!, max.size)\n    }\n\n    /* Macros which keep track of faces we have marked temporarily, and allow\n     * us to backtrack when necessary.  With triangle fans, this is not\n     * really necessary, since the only awkward case is a loop of triangles\n     * around a single origin vertex.  However with strips the situation is\n     * more complicated, and we need a general tracking method like the\n     * one here.\n     */\n    private fun marked(f: GLUface): Boolean {\n        return !f.inside || f.marked\n    }\n\n    private fun addToTrail(f: GLUface, t: GLUface?): GLUface {\n        f.trail = t\n        f.marked = true\n        return f\n    }\n\n    private fun freeTrail(t: GLUface?) {\n        var t = t\n        while (t != null) {\n            t.marked = false\n            t = t.trail\n        }\n    }\n\n    /**\n     * eOrig.Lface is the face we want to render.  We want to find the size\n     * of a maximal fan around eOrig.Org.  To do this we just walk around\n     * the origin vertex as far as possible in both directions.\n     */\n    fun maximumFan(eOrig: GLUhalfEdge): FaceCount {\n        val newFace = FaceCount(0, null, renderFan)\n        var trail: GLUface? = null\n        var e = eOrig\n        while (!marked(e.lFace!!)) {\n            trail = addToTrail(e.lFace!!, trail)\n            ++newFace.size\n            e = e.oNext!!\n        }\n        e = eOrig\n        while (!marked(e.sym?.lFace!!)) {\n            trail = addToTrail(e.sym?.lFace!!, trail)\n            ++newFace.size\n            e = e.sym?.lNext!!\n        }\n        newFace.eStart = e\n        /*LINTED*/\n        freeTrail(trail)\n        return newFace\n    }\n\n    private fun isEven(n: Long): Boolean {\n        return n and 0x1L == 0L\n    }\n\n    /**\n     * Here we are looking for a maximal strip that contains the vertices\n     * eOrig.Org, eOrig.Dst, eOrig.Lnext.Dst (in that order or the\n     * reverse, such that all triangles are oriented CCW).\n     *\n     * Again we walk forward and backward as far as possible.  However for\n     * strips there is a twist: to get CCW orientations, there must be\n     * an *even* number of triangles in the strip on one side of eOrig.\n     * We walk the strip starting on a side with an even number of triangles;\n     * if both side have an odd number, we are forced to shorten one side.\n     */\n    fun maximumStrip(eOrig: GLUhalfEdge): FaceCount {\n        val newFace = FaceCount(0, null, renderStrip)\n        var headSize = 0L\n        var tailSize = 0L\n        var trail: GLUface? = null\n        var e = eOrig\n        while (!marked(e.lFace!!)) {\n            trail = addToTrail(e.lFace!!, trail)\n            ++tailSize\n            e = e.lNext?.sym!!\n            if (marked(e.lFace!!)) break\n            trail = addToTrail(e.lFace!!, trail)\n            ++tailSize\n            e = e.oNext!!\n        }\n        val eTail = e\n        e = eOrig\n        while (!marked(e.sym?.lFace!!)) {\n            trail = addToTrail(e.sym?.lFace!!, trail)\n            ++headSize\n            e = e.sym?.lNext!!\n            if (marked(e.sym?.lFace!!)) break\n            trail = addToTrail(e.sym?.lFace!!, trail)\n            ++headSize\n            e = e.sym?.oNext?.sym!!\n        }\n        val eHead = e\n        newFace.size = tailSize + headSize\n        when {\n            isEven(tailSize) -> {\n                newFace.eStart = eTail.sym\n            }\n            isEven(headSize) -> {\n                newFace.eStart = eHead\n            }\n            else -> {\n                /**\n                 * Both sides have odd length, we must shorten one of them.  In fact,\n                 * we must start from eHead to guarantee inclusion of eOrig.Lface.\n                 */\n                --newFace.size\n                newFace.eStart = eHead.oNext\n            }\n        }\n        /*LINTED*/\n        freeTrail(trail)\n        return newFace\n    }\n\n    /**\n     * Now we render all the separate triangles which could not be\n     * grouped into a triangle fan or strip.\n     */\n    fun renderLonelyTriangles(tess: GLUtessellatorImpl, f: GLUface?) {\n        var f = f\n        var edgeState = -1 /* force edge state output for first vertex */\n        tess.callBeginOrBeginData(GL_TRIANGLES)\n        while (f != null) {\n            /* Loop once for each edge (there will always be 3 edges) */\n            var e = f.anEdge!!\n            do {\n                if (tess.flagBoundary) {\n                    /**\n                     * Set the \"edge state\" to true just before we output the\n                     * first vertex of each edge on the polygon boundary.\n                     */\n                    val newState = if (!e.sym!!.lFace!!.inside) 1 else 0\n                    if (edgeState != newState) {\n                        edgeState = newState\n                        tess.callEdgeFlagOrEdgeFlagData(edgeState != 0)\n                    }\n                }\n                tess.callVertexOrVertexData(e.org?.data!!)\n                e = e.lNext!!\n            } while (e !== f.anEdge)\n            f = f.trail\n        }\n        tess.callEndOrEndData()\n    }\n\n    /************************ Boundary contour decomposition  */\n    /**\n     * __gl_renderBoundary( tess, mesh ) takes a mesh, and outputs one\n     * contour for each face marked \"inside\".  The rendering output is\n     * provided as callbacks (see the api).\n     */\n    fun glRenderBoundary(tess: GLUtessellatorImpl, mesh: GLUmesh) {\n        var f = mesh.fHead.next!!\n        while (f !== mesh.fHead) {\n            if (f.inside) {\n                tess.callBeginOrBeginData(GL_LINE_LOOP)\n                var e = f.anEdge!!\n                do {\n                    tess.callVertexOrVertexData(e.org?.data!!)\n                    e = e.lNext!!\n                } while (e !== f.anEdge)\n                tess.callEndOrEndData()\n            }\n            f = f.next!!\n        }\n    }\n\n    /************************ Quick-and-dirty decomposition  */\n    private const val SIGN_INCONSISTENT = 2\n    /**\n     * If check==false, we compute the polygon normal and place it in norm[].\n     * If check==true, we check that each triangle in the fan from v0 has a\n     * consistent orientation with respect to norm[].  If triangles are\n     * consistently oriented CCW, return 1; if CW, return -1; if all triangles\n     * are degenerate return 0; otherwise (no consistent orientation) return\n     * SIGN_INCONSISTENT.\n     */\n    fun computeNormal(tess: GLUtessellatorImpl, norm: DoubleArray, check: Boolean): Int {\n        val v = tess.cache\n        //            CachedVertex vn = v0 + tess.cacheCount;\n        val vn = tess.cacheCount\n        //            CachedVertex vc;\n        val n = DoubleArray(3)\n        var sign = 0\n\n        /**\n         * Find the polygon normal.  It is important to get a reasonable\n         * normal even when the polygon is self-intersecting (eg. a bowtie).\n         * Otherwise, the computed normal could be very tiny, but perpendicular\n         * to the true plane of the polygon due to numerical noise.  Then all\n         * the triangles would appear to be degenerate and we would incorrectly\n         * decompose the polygon as a fan (or simply not render it at all).\n         *\n         * We use a sum-of-triangles normal algorithm rather than the more\n         * efficient sum-of-trapezoids method (used in CheckOrientation()\n         * in normal.c).  This lets us explicitly reverse the signed area\n         * of some triangles to get a reasonable normal in the self-intersecting\n         * case.\n         */\n        if (!check) {\n            norm[2] = 0.0\n            norm[1] = norm[2]\n            norm[0] = norm[1]\n        }\n        var vc = 1\n        var xc = v[vc].coords[0] - v[0].coords[0]\n        var yc = v[vc].coords[1] - v[0].coords[1]\n        var zc = v[vc].coords[2] - v[0].coords[2]\n        while (++vc < vn) {\n            val xp = xc\n            val yp = yc\n            val zp = zc\n            xc = v[vc].coords[0] - v[0].coords[0]\n            yc = v[vc].coords[1] - v[0].coords[1]\n            zc = v[vc].coords[2] - v[0].coords[2]\n\n            /* Compute (vp - v0) cross (vc - v0) */\n            n[0] = yp * zc - zp * yc\n            n[1] = zp * xc - xp * zc\n            n[2] = xp * yc - yp * xc\n            val dot = n[0] * norm[0] + n[1] * norm[1] + n[2] * norm[2]\n            if (!check) {\n                /**\n                 * Reverse the contribution of back-facing triangles to get\n                 * a reasonable normal for self-intersecting polygons (see above)\n                 */\n                if (dot >= 0) {\n                    norm[0] += n[0]\n                    norm[1] += n[1]\n                    norm[2] += n[2]\n                } else {\n                    norm[0] -= n[0]\n                    norm[1] -= n[1]\n                    norm[2] -= n[2]\n                }\n            } else if (dot != 0.0) {\n                /* Check the new orientation for consistency with previous triangles */\n                sign = if (dot > 0) {\n                    if (sign < 0) return SIGN_INCONSISTENT\n                    1\n                } else {\n                    if (sign > 0) return SIGN_INCONSISTENT\n                    -1\n                }\n            }\n        }\n        return sign\n    }\n\n    /**\n     * __gl_renderCache( tess ) takes a single contour and tries to render it\n     * as a triangle fan.  This handles convex polygons, as well as some\n     * non-convex polygons if we get lucky.\n     *\n     * Returns true if the polygon was successfully rendered.  The rendering\n     * output is provided as callbacks (see the api).\n     */\n    fun glRenderCache(tess: GLUtessellatorImpl): Boolean {\n        val v = tess.cache\n        //            CachedVertex vn = v0 + tess.cacheCount;\n        val vn = tess.cacheCount\n        //            CachedVertex vc;\n        val norm = DoubleArray(3)\n        if (tess.cacheCount < 3) {\n            /* Degenerate contour -- no output */\n            return true\n        }\n        norm[0] = tess.normal[0]\n        norm[1] = tess.normal[1]\n        norm[2] = tess.normal[2]\n        if (norm[0] == 0.0 && norm[1] == 0.0 && norm[2] == 0.0) {\n            computeNormal(tess, norm, false)\n        }\n        val sign = computeNormal(tess, norm, true)\n        if (sign == SIGN_INCONSISTENT) {\n            /* Fan triangles did not have a consistent orientation */\n            return false\n        }\n        if (sign == 0) {\n            /* All triangles were degenerate */\n            return true\n        }\n        return if (!USE_OPTIMIZED_CODE_PATH) {\n            false\n        } else {\n            /* Make sure we do the right thing for each winding rule */\n            when (tess.windingRule) {\n                GLU.GLU_TESS_WINDING_ODD, GLU.GLU_TESS_WINDING_NONZERO -> {}\n                GLU.GLU_TESS_WINDING_POSITIVE -> if (sign < 0) return true\n                GLU.GLU_TESS_WINDING_NEGATIVE -> if (sign > 0) return true\n                GLU.GLU_TESS_WINDING_ABS_GEQ_TWO -> return true\n            }\n            tess.callBeginOrBeginData(if (tess.boundaryOnly) GL_LINE_LOOP else if (tess.cacheCount > 3) GL_TRIANGLE_FAN else GL_TRIANGLES)\n            tess.callVertexOrVertexData(v[0].data!!)\n            if (sign > 0) {\n                var vc = 1\n                while (vc < vn) {\n                    tess.callVertexOrVertexData(v[vc].data!!)\n                    ++vc\n                }\n            } else {\n                var vc = vn - 1\n                while (vc > 0) {\n                    tess.callVertexOrVertexData(v[vc].data!!)\n                    --vc\n                }\n            }\n            tess.callEndOrEndData()\n            true\n        }\n    }\n\n    /**\n     * This structure remembers the information we need about a primitive\n     * to be able to render it later, once we have determined which\n     * primitive is able to use the most triangles.\n     */\n    internal class FaceCount {\n        constructor()\n        constructor(size: Long, eStart: GLUhalfEdge?, render: RenderCallBack?) {\n            this.size = size\n            this.eStart = eStart\n            this.render = render\n        }\n\n        /**\n         * number of triangles used\n         */\n        var size = 0L\n        /**\n         * edge where this primitive starts\n         */\n        var eStart: GLUhalfEdge? = null\n        var render: RenderCallBack? = null\n    }\n\n    internal interface RenderCallBack {\n        fun render(tess: GLUtessellatorImpl, e: GLUhalfEdge, size: Long)\n    }\n\n    private class RenderTriangle : RenderCallBack {\n        /**\n         * Just add the triangle to a triangle list, so we can render all\n         * the separate triangles at once.\n         */\n        override fun render(tess: GLUtessellatorImpl, e: GLUhalfEdge, size: Long) {\n            tess.lonelyTriList = addToTrail(e.lFace!!, tess.lonelyTriList)\n        }\n    }\n\n    private class RenderFan : RenderCallBack {\n        /**\n         * Render as many CCW triangles as possible in a fan starting from\n         * edge \"e\".  The fan *should* contain exactly \"size\" triangles\n         * (otherwise we've goofed up somewhere).\n         */\n        override fun render(tess: GLUtessellatorImpl, e: GLUhalfEdge, size: Long) {\n            var e = e\n            var size = size\n            tess.callBeginOrBeginData(GL_TRIANGLE_FAN)\n            tess.callVertexOrVertexData(e.org?.data!!)\n            tess.callVertexOrVertexData(e.sym?.org?.data!!)\n            while (!marked(e.lFace!!)) {\n                e.lFace?.marked = true\n                --size\n                e = e.oNext!!\n                tess.callVertexOrVertexData(e.sym?.org?.data!!)\n            }\n            tess.callEndOrEndData()\n        }\n    }\n\n    private class RenderStrip : RenderCallBack {\n        /**\n         * Render as many CCW triangles as possible in a strip starting from\n         * edge \"e\".  The strip *should* contain exactly \"size\" triangles\n         * (otherwise we've goofed up somewhere).\n         */\n        override fun render(tess: GLUtessellatorImpl, e: GLUhalfEdge, size: Long) {\n            var e = e\n            var size = size\n            tess.callBeginOrBeginData(GL_TRIANGLE_STRIP)\n            tess.callVertexOrVertexData(e.org?.data!!)\n            tess.callVertexOrVertexData(e.sym?.org?.data!!)\n            while (!marked(e.lFace!!)) {\n                e.lFace?.marked = true\n                --size\n                e = e.lNext?.sym!!\n                tess.callVertexOrVertexData(e.org?.data!!)\n                if (marked(e.lFace!!)) break\n                e.lFace?.marked = true\n                --size\n                e = e.oNext!!\n                tess.callVertexOrVertexData(e.sym?.org?.data!!)\n            }\n            tess.callEndOrEndData()\n        }\n    }\n}","/*\n * Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n * All rights reserved.\n */\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\nimport earth.worldwind.util.glu.GLU\nimport earth.worldwind.util.glu.tessellator.Dict.DictLeq\n\n@Suppress(\"NAME_SHADOWING\")\ninternal object Sweep {\n    //    #ifdef FOR_TRITE_TEST_PROGRAM\n    //    extern void DebugEvent( GLUtessellator *tess );\n    //    #else\n    @Suppress(\"UNUSED_PARAMETER\")\n    private fun debugEvent(tess: GLUtessellatorImpl) {}\n\n    //    #endif\n    /*\n     * Invariants for the Edge Dictionary.\n     * - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)\n     *   at any valid location of the sweep event\n     * - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2\n     *   share a common endpoint\n     * - for each e, e.Dst has been processed, but not e.Org\n     * - each edge e satisfies VertLeq(e.Dst,event) && VertLeq(event,e.Org)\n     *   where \"event\" is the current sweep line event.\n     * - no edge e has zero length\n     *\n     * Invariants for the Mesh (the processed portion).\n     * - the portion of the mesh left of the sweep line is a planar graph,\n     *   ie. there is *some* way to embed it in the plane\n     * - no processed edge has zero length\n     * - no two processed vertices have identical coordinates\n     * - each \"inside\" region is monotone, ie. can be broken into two chains\n     *   of monotonically increasing vertices according to VertLeq(v1,v2)\n     *   - a non-invariant: these chains may intersect (very slightly)\n     *\n     * Invariants for the Sweep.\n     * - if none of the edges incident to the event vertex have an activeRegion\n     *   (ie. none of these edges are in the edge dictionary), then the vertex\n     *   has only right-going edges.\n     * - if an edge is marked \"fixUpperEdge\" (it is a temporary edge introduced\n     *   by ConnectRightVertex), then it is the only right-going edge from\n     *   its associated vertex.  (This says that these edges exist only\n     *   when it is necessary.)\n     */\n    /**\n     * When we merge two edges into one, we need to compute the combined\n     * winding of the new edge.\n     */\n    private fun addWinding(eDst: GLUhalfEdge, eSrc: GLUhalfEdge) {\n        eDst.winding += eSrc.winding\n        eDst.sym!!.winding += eSrc.sym!!.winding\n    }\n\n    private fun regionBelow(r: ActiveRegion): ActiveRegion {\n        return Dict.dictKey(Dict.dictPred(r.nodeUp!!)) as ActiveRegion\n    }\n\n    private fun regionAbove(r: ActiveRegion): ActiveRegion? {\n        return Dict.dictKey(Dict.dictSucc(r.nodeUp!!)) as ActiveRegion?\n    }\n\n    /**\n     * Both edges must be directed from right to left (this is the canonical\n     * direction for the upper edge of each region).\n     *\n     * The strategy is to evaluate a \"t\" value for each edge at the\n     * current sweep line position, given by tess.event.  The calculations\n     * are designed to be very stable, but of course they are not perfect.\n     *\n     * Special case: if both edge destinations are at the sweep event,\n     * we sort the edges by slope (they would otherwise compare equally).\n     */\n    fun edgeLeq(tess: GLUtessellatorImpl, reg1: ActiveRegion, reg2: ActiveRegion): Boolean {\n        val event = tess.event!!\n        val e1 = reg1.eUp\n        val e2 = reg2.eUp\n        if (e1.sym?.org === event) {\n            return if (e2.sym?.org === event) {\n                /**\n                 * Two edges right of the sweep line which meet at the sweep event.\n                 * Sort them by slope.\n                 */\n                if (Geom.vertLeq(e1.org!!, e2.org!!)) {\n                    Geom.edgeSign(e2.sym?.org!!, e1.org!!, e2.org!!) <= 0\n                } else Geom.edgeSign(e1.sym?.org!!, e2.org!!, e1.org!!) >= 0\n            } else Geom.edgeSign(e2.sym?.org!!, event, e2.org!!) <= 0\n        }\n        if (e2.sym?.org === event) {\n            return Geom.edgeSign(e1.sym?.org!!, event, e1.org!!) >= 0\n        }\n\n        /* General case - compute signed distance *from* e1, e2 to event */\n        val t1 = Geom.edgeEval(e1.sym?.org!!, event, e1.org!!)\n        val t2 = Geom.edgeEval(e2.sym?.org!!, event, e2.org!!)\n        return t1 >= t2\n    }\n\n    fun deleteRegion(reg: ActiveRegion) {\n        reg.eUp.activeRegion = null\n        Dict.dictDelete(reg.nodeUp!!) /* __gl_dictListDelete */\n    }\n\n    /**\n     * Replace an upper edge which needs fixing (see ConnectRightVertex).\n     */\n    fun fixUpperEdge(reg: ActiveRegion, newEdge: GLUhalfEdge): Boolean  {\n        if (!Mesh.glMeshDelete(reg.eUp)) return false\n        reg.fixUpperEdge = false\n        reg.eUp = newEdge\n        newEdge.activeRegion = reg\n        return true\n    }\n\n    fun topLeftRegion(reg: ActiveRegion): ActiveRegion? {\n        var reg = reg\n        val org = reg.eUp.org\n\n        /* Find the region above the uppermost edge with the same origin */\n        do {\n            reg = regionAbove(reg)!!\n        } while (reg.eUp.org === org)\n\n        /**\n         * If the edge above was a temporary edge introduced by ConnectRightVertex,\n         * now is the time to fix it.\n         */\n        if (reg.fixUpperEdge) {\n            val e = Mesh.glMeshConnect(regionBelow(reg).eUp.sym!!, reg.eUp.lNext!!)\n            if (!fixUpperEdge(reg, e)) return null\n            reg = regionAbove(reg)!!\n        }\n        return reg\n    }\n\n    fun topRightRegion(reg: ActiveRegion): ActiveRegion {\n        var reg = reg\n        val dst = reg.eUp.sym?.org\n\n        /* Find the region above the uppermost edge with the same destination */\n        do {\n            reg = regionAbove(reg)!!\n        } while (reg.eUp.sym?.org === dst)\n        return reg\n    }\n\n    /**\n     * Add a new active region to the sweep line, *somewhere* below \"regAbove\"\n     * (according to where the new edge belongs in the sweep-line dictionary).\n     * The upper edge of the new region will be \"eNewUp\".\n     * Winding number and \"inside\" flag are not updated.\n     */\n    fun addRegionBelow(\n        tess: GLUtessellatorImpl,\n        regAbove: ActiveRegion,\n        eNewUp: GLUhalfEdge\n    ): ActiveRegion {\n        val regNew = ActiveRegion(eNewUp)\n        /* __gl_dictListInsertBefore */\n        regNew.nodeUp = Dict.dictInsertBefore(tess.dict!!, regAbove.nodeUp!!, regNew)\n        regNew.fixUpperEdge = false\n        regNew.sentinel = false\n        regNew.dirty = false\n        eNewUp.activeRegion = regNew\n        return regNew\n    }\n\n    fun isWindingInside(tess: GLUtessellatorImpl, n: Int): Boolean {\n        when (tess.windingRule) {\n            GLU.GLU_TESS_WINDING_ODD -> return n and 1 != 0\n            GLU.GLU_TESS_WINDING_NONZERO -> return n != 0\n            GLU.GLU_TESS_WINDING_POSITIVE -> return n > 0\n            GLU.GLU_TESS_WINDING_NEGATIVE -> return n < 0\n            GLU.GLU_TESS_WINDING_ABS_GEQ_TWO -> return n >= 2 || n <= -2\n        }\n        throw RuntimeException()\n        /*NOTREACHED*/\n    }\n\n    fun computeWinding(tess: GLUtessellatorImpl, reg: ActiveRegion) {\n        reg.windingNumber = regionAbove(reg)!!.windingNumber + reg.eUp.winding\n        reg.inside = isWindingInside(tess, reg.windingNumber)\n    }\n\n    /**\n     * Delete a region from the sweep line.  This happens when the upper\n     * and lower chains of a region meet (at a vertex on the sweep line).\n     * The \"inside\" flag is copied to the appropriate mesh face (we could\n     * not do this before -- since the structure of the mesh is always\n     * changing, this face may not have even existed until now).\n     */\n    fun finishRegion(reg: ActiveRegion)  {\n        val e = reg.eUp\n        val f = e.lFace!!\n        f.inside = reg.inside\n        f.anEdge = e /* optimization for __gl_meshTessellateMonoRegion() */\n        deleteRegion(reg)\n    }\n\n    /**\n     * We are given a vertex with one or more left-going edges.  All affected\n     * edges should be in the edge dictionary.  Starting at regFirst.eUp,\n     * we walk down deleting all regions where both edges have the same\n     * origin vOrg.  At the same time we copy the \"inside\" flag from the\n     * active region to the face, since at this point each face will belong\n     * to at most one region (this was not necessarily true until this point\n     * in the sweep).  The walk stops at the region above regLast; if regLast\n     * is null we walk as far as possible.  At the same time we relink the\n     * mesh if necessary, so that the ordering of edges around vOrg is the\n     * same as in the dictionary.\n     */\n    fun finishLeftRegions(regFirst: ActiveRegion, regLast: ActiveRegion?): GLUhalfEdge  {\n        var regPrev = regFirst\n        var ePrev = regFirst.eUp\n        while (regPrev !== regLast) {\n            regPrev.fixUpperEdge = false /* placement was OK */\n            val reg = regionBelow(regPrev)\n            var e = reg.eUp\n            if (e.org !== ePrev.org) {\n                if (!reg.fixUpperEdge) {\n                    /**\n                     * Remove the last left-going edge.  Even though there are no further\n                     * edges in the dictionary with this origin, there may be further\n                     * such edges in the mesh (if we are adding left edges to a vertex\n                     * that has already been processed).  Thus it is important to call\n                     * FinishRegion rather than just DeleteRegion.\n                     */\n                    finishRegion(regPrev)\n                    break\n                }\n                /**\n                 * If the edge below was a temporary edge introduced by\n                 * ConnectRightVertex, now is the time to fix it.\n                 */\n                e = Mesh.glMeshConnect(ePrev.oNext?.sym!!, e.sym!!)\n                if (!fixUpperEdge(reg, e)) throw RuntimeException()\n            }\n\n            /* Relink edges so that ePrev.Onext == e */\n            if (ePrev.oNext !== e) {\n                if (!Mesh.glMeshSplice(e.sym?.lNext!!, e)) throw RuntimeException()\n                if (!Mesh.glMeshSplice(ePrev, e)) throw RuntimeException()\n            }\n            finishRegion(regPrev) /* may change reg.eUp */\n            ePrev = reg.eUp\n            regPrev = reg\n        }\n        return ePrev\n    }\n\n    /**\n     * Purpose: insert right-going edges into the edge dictionary, and update\n     * winding numbers and mesh connectivity appropriately.  All right-going\n     * edges share a common origin vOrg.  Edges are inserted CCW starting at\n     * eFirst; the last edge inserted is eLast.Sym.Lnext.  If vOrg has any\n     * left-going edges already processed, then eTopLeft must be the edge\n     * such that an imaginary upward vertical segment from vOrg would be\n     * contained between eTopLeft.Sym.Lnext and eTopLeft; otherwise eTopLeft\n     * should be null.\n     */\n    fun addRightEdges(\n        tess: GLUtessellatorImpl, regUp: ActiveRegion,\n        eFirst: GLUhalfEdge, eLast: GLUhalfEdge?, eTopLeft: GLUhalfEdge?,\n        cleanUp: Boolean\n    ) {\n        var eTopLeft = eTopLeft\n        var firstTime = true\n\n        /* Insert the new right-going edges in the dictionary */\n        var e = eFirst\n        do {\n            addRegionBelow(tess, regUp, e.sym!!)\n            e = e.oNext!!\n        } while (e !== eLast)\n\n        /**\n         * Walk *all* right-going edges from e.Org, in the dictionary order,\n         * updating the winding numbers of each region, and re-linking the mesh\n         * edges to match the dictionary ordering (if necessary).\n         */\n        if (eTopLeft == null) {\n            eTopLeft = regionBelow(regUp).eUp.sym?.oNext\n        }\n        var regPrev = regUp\n        var ePrev = eTopLeft!!\n        var reg: ActiveRegion\n        while (true) {\n            reg = regionBelow(regPrev)\n            e = reg.eUp.sym!!\n            if (e.org !== ePrev.org) break\n            if (e.oNext !== ePrev) {\n                /* Unlink e from its current position, and relink below ePrev */\n                if (!Mesh.glMeshSplice(e.sym?.lNext!!, e)) throw RuntimeException()\n                if (!Mesh.glMeshSplice(ePrev.sym?.lNext!!, e)) throw RuntimeException()\n            }\n            /* Compute the winding number and \"inside\" flag for the new regions */\n            reg.windingNumber = regPrev.windingNumber - e.winding\n            reg.inside = isWindingInside(tess, reg.windingNumber)\n\n            /**\n             * Check for two outgoing edges with same slope -- process these\n             * before any intersection tests (see example in __gl_computeInterior).\n             */\n            regPrev.dirty = true\n            if (!firstTime && checkForRightSplice(tess, regPrev)) {\n                addWinding(e, ePrev)\n                deleteRegion(regPrev)\n                if (!Mesh.glMeshDelete(ePrev)) throw RuntimeException()\n            }\n            firstTime = false\n            regPrev = reg\n            ePrev = e\n        }\n        regPrev.dirty = true\n        if (cleanUp) {\n            /* Check for intersections between newly adjacent edges. */\n            walkDirtyRegions(tess, regPrev)\n        }\n    }\n\n    fun callCombine(\n        tess: GLUtessellatorImpl, isect: GLUvertex,\n        data: Array<Any?>, weights: FloatArray, needed: Boolean\n    ) {\n        val coords = DoubleArray(3)\n\n        /* Copy coord data in case the callback changes it. */\n        coords[0] = isect.coords[0]\n        coords[1] = isect.coords[1]\n        coords[2] = isect.coords[2]\n        val outData = arrayOfNulls<Any>(1)\n        tess.callCombineOrCombineData(coords, data, weights, outData)\n        isect.data = outData[0]\n        if (isect.data == null) {\n            if (!needed) {\n                isect.data = data[0]\n            } else if (!tess.fatalError) {\n                /**\n                 * The only way fatal error is when two edges are found to intersect,\n                 * but the user has not provided the callback necessary to handle\n                 * generated intersection points.\n                 */\n                tess.callErrorOrErrorData(GLU.GLU_TESS_NEED_COMBINE_CALLBACK)\n                tess.fatalError = true\n            }\n        }\n    }\n\n    /**\n     * Two vertices with idential coordinates are combined into one.\n     * e1.Org is kept, while e2.Org is discarded.\n     */\n    fun spliceMergeVertices(tess: GLUtessellatorImpl, e1: GLUhalfEdge, e2: GLUhalfEdge) {\n        val data = arrayOfNulls<Any>(4)\n        val weights = floatArrayOf(0.5f, 0.5f, 0.0f, 0.0f)\n        data[0] = e1.org?.data\n        data[1] = e2.org?.data\n        callCombine(tess, e1.org!!, data, weights, false)\n        if (!Mesh.glMeshSplice(e1, e2)) throw RuntimeException()\n    }\n\n    /**\n     * Find some weights which describe how the intersection vertex is\n     * a linear combination of \"org\" and \"dest\".  Each of the two edges\n     * which generated \"isect\" is allocated 50% of the weight; each edge\n     * splits the weight between its org and dst according to the\n     * relative distance to \"isect\".\n     */\n    fun vertexWeights(\n        isect: GLUvertex, org: GLUvertex, dst: GLUvertex,\n        weights: FloatArray\n    ) {\n        val t1 = Geom.vertL1dist(org, isect)\n        val t2 = Geom.vertL1dist(dst, isect)\n        weights[0] = (0.5 * t2 / (t1 + t2)).toFloat()\n        weights[1] = (0.5 * t1 / (t1 + t2)).toFloat()\n        isect.coords[0] += weights[0] * org.coords[0] + weights[1] * dst.coords[0]\n        isect.coords[1] += weights[0] * org.coords[1] + weights[1] * dst.coords[1]\n        isect.coords[2] += weights[0] * org.coords[2] + weights[1] * dst.coords[2]\n    }\n\n    /**\n     * We've computed a new intersection point, now we need a \"data\" pointer\n     * from the user so that we can refer to this new vertex in the\n     * rendering callbacks.\n     */\n    fun getIntersectData(\n        tess: GLUtessellatorImpl, isect: GLUvertex,\n        orgUp: GLUvertex, dstUp: GLUvertex,\n        orgLo: GLUvertex, dstLo: GLUvertex\n    ) {\n        val data = arrayOfNulls<Any>(4)\n        val weights = FloatArray(4)\n        val weights1 = FloatArray(2)\n        val weights2 = FloatArray(2)\n        data[0] = orgUp.data\n        data[1] = dstUp.data\n        data[2] = orgLo.data\n        data[3] = dstLo.data\n        isect.coords[2] = 0.0\n        isect.coords[1] = isect.coords[2]\n        isect.coords[0] = isect.coords[1]\n        vertexWeights(isect, orgUp, dstUp, weights1)\n        vertexWeights(isect, orgLo, dstLo, weights2)\n        weights1.copyInto(weights, 0)\n        weights2.copyInto(weights, 2)\n        callCombine(tess, isect, data, weights, true)\n    }\n\n    /**\n     * Check the upper and lower edge of \"regUp\", to make sure that the\n     * eUp.Org is above eLo, or eLo.Org is below eUp (depending on which\n     * origin is leftmost).\n     *\n     * The main purpose is to splice right-going edges with the same\n     * dest vertex and nearly identical slopes (ie. we can't distinguish\n     * the slopes numerically).  However the splicing can also help us\n     * to recover from numerical errors.  For example, suppose at one\n     * point we checked eUp and eLo, and decided that eUp.Org is barely\n     * above eLo.  Then later, we split eLo into two edges (eg. from\n     * a splice operation like this one).  This can change the result of\n     * our test so that now eUp.Org is incident to eLo, or barely below it.\n     * We must correct this condition to maintain the dictionary invariants.\n     *\n     * One possibility is to check these edges for intersection again\n     * (ie. CheckForIntersect).  This is what we do if possible.  However\n     * CheckForIntersect requires that tess.event lies between eUp and eLo,\n     * so that it has something to fall back on when the intersection\n     * calculation gives us an unusable answer.  So, for those cases where\n     * we can't check for intersection, this routine fixes the problem\n     * by just splicing the offending vertex into the other edge.\n     * This is a guaranteed solution, no matter how degenerate things get.\n     * Basically this is a combinatorial solution to a numerical problem.\n     */\n    fun checkForRightSplice(tess: GLUtessellatorImpl, regUp: ActiveRegion): Boolean {\n        val regLo = regionBelow(regUp)\n        val eUp = regUp.eUp\n        val eLo = regLo.eUp\n        if (Geom.vertLeq(eUp.org!!, eLo.org!!)) {\n            if (Geom.edgeSign(eLo.sym?.org!!, eUp.org!!, eLo.org!!) > 0) return false\n\n            /* eUp.Org appears to be below eLo */\n            if (!Geom.vertEq(eUp.org!!, eLo.org!!)) {\n                /* Splice eUp.Org into eLo */\n                Mesh.glMeshSplitEdge(eLo.sym!!)\n                if (!Mesh.glMeshSplice(eUp, eLo.sym?.lNext!!)) throw RuntimeException()\n                regLo.dirty = true\n                regUp.dirty = regLo.dirty\n            } else if (eUp.org !== eLo.org) {\n                /* merge the two vertices, discarding eUp.Org */\n                tess.pq?.pqDelete(eUp.org?.pqHandle!!) /* __gl_pqSortDelete */\n                spliceMergeVertices(tess, eLo.sym?.lNext!!, eUp)\n            }\n        } else {\n            if (Geom.edgeSign(eUp.sym?.org!!, eLo.org!!, eUp.org!!) < 0) return false\n\n            /* eLo.Org appears to be above eUp, so splice eLo.Org into eUp */\n            regUp.dirty = true\n            regionAbove(regUp)?.dirty = regUp.dirty\n            Mesh.glMeshSplitEdge(eUp.sym!!)\n            if (!Mesh.glMeshSplice(eLo.sym?.lNext!!, eUp)) throw RuntimeException()\n        }\n        return true\n    }\n\n    /**\n     * Check the upper and lower edge of \"regUp\", to make sure that the\n     * eUp.Sym.Org is above eLo, or eLo.Sym.Org is below eUp (depending on which\n     * destination is rightmost).\n     *\n     * Theoretically, this should always be true.  However, splitting an edge\n     * into two pieces can change the results of previous tests.  For example,\n     * suppose at one point we checked eUp and eLo, and decided that eUp.Sym.Org\n     * is barely above eLo.  Then later, we split eLo into two edges (eg. from\n     * a splice operation like this one).  This can change the result of\n     * the test so that now eUp.Sym.Org is incident to eLo, or barely below it.\n     * We must correct this condition to maintain the dictionary invariants\n     * (otherwise new edges might get inserted in the wrong place in the\n     * dictionary, and bad stuff will happen).\n     *\n     * We fix the problem by just splicing the offending vertex into the\n     * other edge.\n     */\n    fun checkForLeftSplice(regUp: ActiveRegion): Boolean {\n        val regLo = regionBelow(regUp)\n        val eUp = regUp.eUp\n        val eLo = regLo.eUp\n        if (Geom.vertLeq(eUp.sym?.org!!, eLo.sym?.org!!)) {\n            if (Geom.edgeSign(eUp.sym?.org!!, eLo.sym?.org!!, eUp.org!!) < 0) return false\n\n            /* eLo.Sym.Org is above eUp, so splice eLo.Sym.Org into eUp */\n            regUp.dirty = true\n            regionAbove(regUp)?.dirty = regUp.dirty\n            val e = Mesh.glMeshSplitEdge(eUp)\n            if (!Mesh.glMeshSplice(eLo.sym!!, e)) throw RuntimeException()\n            e.lFace?.inside = regUp.inside\n        } else {\n            if (Geom.edgeSign(eLo.sym?.org!!, eUp.sym?.org!!, eLo.org!!) > 0) return false\n\n            /* eUp.Sym.Org is below eLo, so splice eUp.Sym.Org into eLo */\n            regLo.dirty = true\n            regUp.dirty = regLo.dirty\n            val e = Mesh.glMeshSplitEdge(eLo)\n            if (!Mesh.glMeshSplice(eUp.lNext!!, eLo.sym!!)) throw RuntimeException()\n            e.sym?.lFace?.inside = regUp.inside\n        }\n        return true\n    }\n\n    /**\n     * Check the upper and lower edges of the given region to see if\n     * they intersect.  If so, create the intersection and add it\n     * to the data structures.\n     *\n     * Returns true if adding the new intersection resulted in a recursive\n     * call to AddRightEdges(); in this case all \"dirty\" regions have been\n     * checked for intersections, and possibly regUp has been deleted.\n     */\n    fun checkForIntersect(tess: GLUtessellatorImpl, regUp: ActiveRegion): Boolean {\n        var regUp = regUp\n        var regLo = regionBelow(regUp)\n        var eUp = regUp.eUp\n        var eLo = regLo.eUp\n        val orgUp = eUp.org!!\n        val orgLo = eLo.org!!\n        val dstUp = eUp.sym?.org!!\n        val dstLo = eLo.sym?.org!!\n        val isect = GLUvertex()\n        if (orgUp === orgLo) return false /* right endpoints are the same */\n        val tMinUp = orgUp.t.coerceAtMost(dstUp.t)\n        val tMaxLo = orgLo.t.coerceAtLeast(dstLo.t)\n        if (tMinUp > tMaxLo) return false /* t ranges do not overlap */\n        if (Geom.vertLeq(orgUp, orgLo)) {\n            if (Geom.edgeSign(dstLo, orgUp, orgLo) > 0) return false\n        } else {\n            if (Geom.edgeSign(dstUp, orgLo, orgUp) < 0) return false\n        }\n\n        /* At this point the edges intersect, at least marginally */\n        debugEvent(tess)\n        Geom.edgeIntersect(dstUp, orgUp, dstLo, orgLo, isect)\n        if (Geom.vertLeq(isect, tess.event!!)) {\n            /**\n             * The intersection point lies slightly to the left of the sweep line,\n             * so move it until it''s slightly to the right of the sweep line.\n             * (If we had perfect numerical precision, this would never happen\n             * in the first place).  The easiest and safest thing to do is\n             * replace the intersection by tess.event.\n             */\n            isect.s = tess.event!!.s\n            isect.t = tess.event!!.t\n        }\n        /**\n         * Similarly, if the computed intersection lies to the right of the\n         * rightmost origin (which should rarely happen), it can cause\n         * unbelievable inefficiency on sufficiently degenerate inputs.\n         * (If you have the test program, try running test54.d with the\n         * \"X zoom\" option turned on).\n         */\n        val orgMin = if (Geom.vertLeq(orgUp, orgLo)) orgUp else orgLo\n        if (Geom.vertLeq(orgMin, isect)) {\n            isect.s = orgMin.s\n            isect.t = orgMin.t\n        }\n        if (Geom.vertEq(isect, orgUp) || Geom.vertEq(isect, orgLo)) {\n            /* Easy case -- intersection at one of the right endpoints */\n            checkForRightSplice(tess, regUp)\n            return false\n        }\n        if ((!Geom.vertEq(dstUp, tess.event!!)\n                    && Geom.edgeSign(dstUp, tess.event!!, isect) >= 0)\n            || (!Geom.vertEq(dstLo, tess.event!!)\n                    && Geom.edgeSign(dstLo, tess.event!!, isect) <= 0)\n        ) {\n            /**\n             * Very unusual -- the new upper or lower edge would pass on the\n             * wrong side of the sweep event, or through it.  This can happen\n             * due to very small numerical errors in the intersection calculation.\n             */\n            if (dstLo === tess.event) {\n                /* Splice dstLo into eUp, and process the new region(s) */\n                Mesh.glMeshSplitEdge(eUp.sym!!)\n                if (!Mesh.glMeshSplice(eLo.sym!!, eUp)) throw RuntimeException()\n                regUp = topLeftRegion(regUp)!!\n                eUp = regionBelow(regUp).eUp\n                finishLeftRegions(regionBelow(regUp), regLo)\n                addRightEdges(tess, regUp, eUp.sym?.lNext!!, eUp, eUp, true)\n                return true\n            }\n            if (dstUp === tess.event) {\n                /* Splice dstUp into eLo, and process the new region(s) */\n                Mesh.glMeshSplitEdge(eLo.sym!!)\n                if (!Mesh.glMeshSplice(eUp.lNext!!, eLo.sym?.lNext!!)) throw RuntimeException()\n                regLo = regUp\n                regUp = topRightRegion(regUp)\n                val e = regionBelow(regUp).eUp.sym?.oNext\n                regLo.eUp = eLo.sym?.lNext!!\n                eLo = finishLeftRegions(regLo, null)\n                addRightEdges(tess, regUp, eLo.oNext!!, eUp.sym?.oNext, e, true)\n                return true\n            }\n            /**\n             * Special case: called from ConnectRightVertex.  If either\n             * edge passes on the wrong side of tess.event, split it\n             * (and wait for ConnectRightVertex to splice it appropriately).\n             */\n            if (Geom.edgeSign(dstUp, tess.event!!, isect) >= 0) {\n                regUp.dirty = true\n                regionAbove(regUp)?.dirty = regUp.dirty\n                Mesh.glMeshSplitEdge(eUp.sym!!)\n                eUp.org?.s = tess.event!!.s\n                eUp.org?.t = tess.event!!.t\n            }\n            if (Geom.edgeSign(dstLo, tess.event!!, isect) <= 0) {\n                regLo.dirty = true\n                regUp.dirty = regLo.dirty\n                Mesh.glMeshSplitEdge(eLo.sym!!)\n                eLo.org?.s = tess.event!!.s\n                eLo.org?.t = tess.event!!.t\n            }\n            /* leave the rest for ConnectRightVertex */\n            return false\n        }\n\n        /**\n         * General case -- split both edges, splice into new vertex.\n         * When we do the splice operation, the order of the arguments is\n         * arbitrary as far as correctness goes.  However, when the operation\n         * creates a new face, the work done is proportional to the size of\n         * the new face.  We expect the faces in the processed part of\n         * the mesh (ie. eUp.Lface) to be smaller than the faces in the\n         * unprocessed original contours (which will be eLo.Sym.Lnext.Lface).\n         */\n        Mesh.glMeshSplitEdge(eUp.sym!!)\n        Mesh.glMeshSplitEdge(eLo.sym!!)\n        if (!Mesh.glMeshSplice(eLo.sym?.lNext!!, eUp)) throw RuntimeException()\n        eUp.org?.s = isect.s\n        eUp.org?.t = isect.t\n        eUp.org?.pqHandle = tess.pq!!.pqInsert(eUp.org) /* __gl_pqSortInsert */\n        getIntersectData(tess, eUp.org!!, orgUp, dstUp, orgLo, dstLo)\n        regLo.dirty = true\n        regUp.dirty = regLo.dirty\n        regionAbove(regUp)?.dirty = regUp.dirty\n        return false\n    }\n\n    /**\n     * When the upper or lower edge of any region changes, the region is\n     * marked \"dirty\".  This routine walks through all the dirty regions\n     * and makes sure that the dictionary invariants are satisfied\n     * (see the comments at the beginning of this file).  Of course\n     * new dirty regions can be created as we make changes to restore\n     * the invariants.\n     */\n    fun walkDirtyRegions(tess: GLUtessellatorImpl, regUp: ActiveRegion) {\n        var regUp = regUp\n        var regLo = regionBelow(regUp)\n        while (true) {\n\n            /* Find the lowest dirty region (we walk from the bottom up). */\n            while (regLo.dirty) {\n                regUp = regLo\n                regLo = regionBelow(regLo)\n            }\n            if (!regUp.dirty) {\n                regLo = regUp\n                regUp = regionAbove(regUp) ?: return\n                if (!regUp.dirty) return /* We've walked all the dirty regions */\n            }\n            regUp.dirty = false\n            var eUp = regUp.eUp\n            var eLo = regLo.eUp\n            if (eUp.sym?.org !== eLo.sym?.org) {\n                /* Check that the edge ordering is obeyed at the Dst vertices. */\n                if (checkForLeftSplice(regUp)) {\n\n                    /**\n                     * If the upper or lower edge was marked fixUpperEdge, then\n                     * we no longer need it (since these edges are needed only for\n                     * vertices which otherwise have no right-going edges).\n                     */\n                    if (regLo.fixUpperEdge) {\n                        deleteRegion(regLo)\n                        if (!Mesh.glMeshDelete(eLo)) throw RuntimeException()\n                        regLo = regionBelow(regUp)\n                        eLo = regLo.eUp\n                    } else if (regUp.fixUpperEdge) {\n                        deleteRegion(regUp)\n                        if (!Mesh.glMeshDelete(eUp)) throw RuntimeException()\n                        regUp = regionAbove(regLo)!!\n                        eUp = regUp.eUp\n                    }\n                }\n            }\n            if (eUp.org !== eLo.org) {\n                if (eUp.sym?.org !== eLo.sym?.org && !regUp.fixUpperEdge && !regLo.fixUpperEdge\n                    && (eUp.sym?.org === tess.event || eLo.sym?.org === tess.event)\n                ) {\n                    /**\n                     * When all else fails in CheckForIntersect(), it uses tess.event\n                     * as the intersection location.  To make this possible, it requires\n                     * that tess.event lie between the upper and lower edges, and also\n                     * that neither of these is marked fixUpperEdge (since in the worst\n                     * case it might splice one of these edges into tess.event, and\n                     * violate the invariant that fixable edges are the only right-going\n                     * edge from their associated vertex).\n                     */\n                    if (checkForIntersect(tess, regUp)) {\n                        /* WalkDirtyRegions() was called recursively; we're done */\n                        return\n                    }\n                } else {\n                    /**\n                     * Even though we can't use CheckForIntersect(), the Org vertices\n                     * may violate the dictionary edge ordering.  Check and correct this.\n                     */\n                    checkForRightSplice(tess, regUp)\n                }\n            }\n            if (eUp.org === eLo.org && eUp.sym?.org === eLo.sym?.org) {\n                /* A degenerate loop consisting of only two edges -- delete it. */\n                addWinding(eLo, eUp)\n                deleteRegion(regUp)\n                if (!Mesh.glMeshDelete(eUp)) throw RuntimeException()\n                regUp = regionAbove(regLo)!!\n            }\n        }\n    }\n\n    /**\n     * Purpose: connect a \"right\" vertex vEvent (one where all edges go left)\n     * to the unprocessed portion of the mesh.  Since there are no right-going\n     * edges, two regions (one above vEvent and one below) are being merged\n     * into one.  \"regUp\" is the upper of these two regions.\n     *\n     * There are two reasons for doing this (adding a right-going edge):\n     *  - if the two regions being merged are \"inside\", we must add an edge\n     *    to keep them separated (the combined region would not be monotone).\n     *  - in any case, we must leave some record of vEvent in the dictionary,\n     *    so that we can merge vEvent with features that we have not seen yet.\n     *    For example, maybe there is a vertical edge which passes just to\n     *    the right of vEvent; we would like to splice vEvent into this edge.\n     *\n     * However, we don't want to connect vEvent to just any vertex.  We don''t\n     * want the new edge to cross any other edges; otherwise we will create\n     * intersection vertices even when the input data had no self-intersections.\n     * (This is a bad thing; if the user's input data has no intersections,\n     * we don't want to generate any false intersections ourselves.)\n     *\n     * Our eventual goal is to connect vEvent to the leftmost unprocessed\n     * vertex of the combined region (the union of regUp and regLo).\n     * But because of unseen vertices with all right-going edges, and also\n     * new vertices which may be created by edge intersections, we don''t\n     * know where that leftmost unprocessed vertex is.  In the meantime, we\n     * connect vEvent to the closest vertex of either chain, and mark the region\n     * as \"fixUpperEdge\".  This flag says to delete and reconnect this edge\n     * to the next processed vertex on the boundary of the combined region.\n     * Quite possibly the vertex we connected to will turn out to be the\n     * closest one, in which case we won''t need to make any changes.\n     */\n    fun connectRightVertex(\n        tess: GLUtessellatorImpl, regUp: ActiveRegion,\n        eBottomLeft: GLUhalfEdge\n    ) {\n        var regUp = regUp\n        var eBottomLeft = eBottomLeft\n        var eTopLeft = eBottomLeft.oNext!!\n        val regLo = regionBelow(regUp)\n        val eUp = regUp.eUp\n        val eLo = regLo.eUp\n        var degenerate = false\n        if (eUp.sym?.org !== eLo.sym?.org) {\n            checkForIntersect(tess, regUp)\n        }\n\n        /**\n         * Possible new degeneracies: upper or lower edge of regUp may pass\n         * through vEvent, or may coincide with new intersection vertex\n         */\n        if (Geom.vertEq(eUp.org!!, tess.event!!)) {\n            if (!Mesh.glMeshSplice(eTopLeft.sym?.lNext!!, eUp)) throw RuntimeException()\n            regUp = topLeftRegion(regUp)!!\n            eTopLeft = regionBelow(regUp).eUp\n            finishLeftRegions(regionBelow(regUp), regLo)\n            degenerate = true\n        }\n        if (Geom.vertEq(eLo.org!!, tess.event!!)) {\n            if (!Mesh.glMeshSplice(eBottomLeft, eLo.sym?.lNext!!)) throw RuntimeException()\n            eBottomLeft = finishLeftRegions(regLo, null)\n            degenerate = true\n        }\n        if (degenerate) {\n            addRightEdges(tess, regUp, eBottomLeft.oNext!!, eTopLeft, eTopLeft, true)\n            return\n        }\n\n        /**\n         * Non-degenerate situation -- need to add a temporary, fixable edge.\n         * Connect to the closer of eLo.Org, eUp.Org.\n         */\n        var eNew = if (Geom.vertLeq(eLo.org!!, eUp.org!!)) eLo.sym?.lNext!! else eUp\n        eNew = Mesh.glMeshConnect(eBottomLeft.oNext?.sym!!, eNew)\n\n        /**\n         * Prevent cleanup, otherwise eNew might disappear before we've even\n         * had a chance to mark it as a temporary edge.\n         */\n        addRightEdges(tess, regUp, eNew, eNew.oNext, eNew.oNext, false)\n        eNew.sym?.activeRegion?.fixUpperEdge = true\n        walkDirtyRegions(tess, regUp)\n    }\n\n    /**\n     * Because vertices at exactly the same location are merged together\n     * before we process the sweep event, some degenerate cases can't occur.\n     * However if someone eventually makes the modifications required to\n     * merge features which are close together, the cases below marked\n     * TOLERANCE_NONZERO will be useful.  They were debugged before the\n     * code to merge identical vertices in the main loop was added.\n     */\n    private const val TOLERANCE_NONZERO = false\n    /**\n     * The event vertex lies exacty on an already-processed edge or vertex.\n     * Adding the new vertex involves splicing it into the already-processed\n     * part of the mesh.\n     */\n    fun connectLeftDegenerate(\n        tess: GLUtessellatorImpl,\n        regUp: ActiveRegion, vEvent: GLUvertex\n    ) {\n        var regUp = regUp\n        val e = regUp.eUp\n        if (Geom.vertEq(e.org!!, vEvent)) {\n            /**\n             * e.Org is an unprocessed vertex - just combine them, and wait\n             * for e.Org to be pulled from the queue\n             */\n            spliceMergeVertices(tess, e, vEvent.anEdge!!)\n            return\n        }\n        if (!Geom.vertEq(e.sym?.org!!, vEvent)) {\n            /* General case -- splice vEvent into edge e which passes through it */\n            Mesh.glMeshSplitEdge(e.sym!!)\n            if (regUp.fixUpperEdge) {\n                /* This edge was fixable -- delete unused portion of original edge */\n                if (!Mesh.glMeshDelete(e.oNext!!)) throw RuntimeException()\n                regUp.fixUpperEdge = false\n            }\n            if (!Mesh.glMeshSplice(vEvent.anEdge!!, e)) throw RuntimeException()\n            sweepEvent(tess, vEvent) /* recurse */\n            return\n        }\n        regUp = topRightRegion(regUp)\n        val reg = regionBelow(regUp)\n        var eTopRight = reg.eUp.sym!!\n        val eLast = eTopRight.oNext\n        var eTopLeft = eLast\n        if (reg.fixUpperEdge) {\n            /**\n             * Here e.Sym.Org has only a single fixable edge going right.\n             * We can delete it since now we have some real right-going edges.\n             */\n            deleteRegion(reg)\n            if (!Mesh.glMeshDelete(eTopRight)) throw RuntimeException()\n            eTopRight = eTopLeft?.sym?.lNext!!\n        }\n        if (!Mesh.glMeshSplice(vEvent.anEdge!!, eTopRight)) throw RuntimeException()\n        if (!Geom.edgeGoesLeft(eTopLeft!!)) {\n            /* e.Sym.Org had no left-going edges -- indicate this to AddRightEdges() */\n            eTopLeft = null\n        }\n        addRightEdges(tess, regUp, eTopRight.oNext!!, eLast, eTopLeft, true)\n    }\n\n    /**\n     * Purpose: connect a \"left\" vertex (one where both edges go right)\n     * to the processed portion of the mesh.  Let R be the active region\n     * containing vEvent, and let U and L be the upper and lower edge\n     * chains of R.  There are two possibilities:\n     *\n     * - the normal case: split R into two regions, by connecting vEvent to\n     *   the rightmost vertex of U or L lying to the left of the sweep line\n     *\n     * - the degenerate case: if vEvent is close enough to U or L, we\n     *   merge vEvent into that edge chain.  The subcases are:\n     *\t- merging with the rightmost vertex of U or L\n     *\t- merging with the active edge of U or L\n     *\t- merging with an already-processed portion of U or L\n     */\n    fun connectLeftVertex(tess: GLUtessellatorImpl, vEvent: GLUvertex) {\n        /* Get a pointer to the active region containing vEvent */\n        val tmp = ActiveRegion(vEvent.anEdge?.sym!!)\n        val regUp = Dict.dictKey(Dict.dictSearch(tess.dict!!, tmp)) as ActiveRegion\n        val regLo = regionBelow(regUp)\n        val eUp = regUp.eUp\n        val eLo = regLo.eUp\n\n        /* Try merging with U or L first */\n        if (Geom.edgeSign(eUp.sym?.org!!, vEvent, eUp.org!!) == 0.0) {\n            connectLeftDegenerate(tess, regUp, vEvent)\n            return\n        }\n\n        /**\n         * Connect vEvent to rightmost processed vertex of either chain.\n         * e.Sym.Org is the vertex that we will connect to vEvent.\n         */\n        val reg = if (Geom.vertLeq(eLo.sym?.org!!, eUp.sym?.org!!)) regUp else regLo\n        if (regUp.inside || reg.fixUpperEdge) {\n            val eNew = if (reg === regUp) {\n                Mesh.glMeshConnect(vEvent.anEdge?.sym!!, eUp.lNext!!)\n            } else {\n                val tempHalfEdge = Mesh.glMeshConnect(eLo.sym?.oNext?.sym!!, vEvent.anEdge!!)\n                tempHalfEdge.sym!!\n            }\n            if (reg.fixUpperEdge) {\n                if (!fixUpperEdge(reg, eNew)) throw RuntimeException()\n            } else {\n                computeWinding(tess, addRegionBelow(tess, regUp, eNew))\n            }\n            sweepEvent(tess, vEvent)\n        } else {\n            /**\n             * The new vertex is in a region which does not belong to the polygon.\n             * We don''t need to connect this vertex to the rest of the mesh.\n             */\n            addRightEdges(tess, regUp, vEvent.anEdge!!, vEvent.anEdge, null, true)\n        }\n    }\n\n    /**\n     * Does everything necessary when the sweep line crosses a vertex.\n     * Updates the mesh and the edge dictionary.\n     */\n    fun sweepEvent(tess: GLUtessellatorImpl, vEvent: GLUvertex) {\n        tess.event = vEvent /* for access in EdgeLeq() */\n        debugEvent(tess)\n\n        /**\n         * Check if this vertex is the right endpoint of an edge that is\n         * already in the dictionary.  In this case we don't need to waste\n         * time searching for the location to insert new edges.\n         */\n        var e = vEvent.anEdge!!\n        while (e.activeRegion == null) {\n            e = e.oNext!!\n            if (e === vEvent.anEdge) {\n                /* All edges go right -- not incident to any processed edges */\n                connectLeftVertex(tess, vEvent)\n                return\n            }\n        }\n\n        /**\n         * Processing consists of two phases: first we \"finish\" all the\n         * active regions where both the upper and lower edges terminate\n         * at vEvent (ie. vEvent is closing off these regions).\n         * We mark these faces \"inside\" or \"outside\" the polygon according\n         * to their winding number, and delete the edges from the dictionary.\n         * This takes care of all the left-going edges from vEvent.\n         */\n        /**\n         * Processing consists of two phases: first we \"finish\" all the\n         * active regions where both the upper and lower edges terminate\n         * at vEvent (ie. vEvent is closing off these regions).\n         * We mark these faces \"inside\" or \"outside\" the polygon according\n         * to their winding number, and delete the edges from the dictionary.\n         * This takes care of all the left-going edges from vEvent.\n         */\n        val regUp = topLeftRegion(e.activeRegion!!)!!\n        val reg = regionBelow(regUp)\n        val eTopLeft = reg.eUp\n        val eBottomLeft = finishLeftRegions(reg, null)\n\n        /**\n         * Next we process all the right-going edges from vEvent.  This\n         * involves adding the edges to the dictionary, and creating the\n         * associated \"active regions\" which record information about the\n         * regions between adjacent dictionary edges.\n         */\n        if (eBottomLeft.oNext === eTopLeft) {\n            /* No right-going edges -- add a temporary \"fixable\" edge */\n            connectRightVertex(tess, regUp, eBottomLeft)\n        } else {\n            addRightEdges(tess, regUp, eBottomLeft.oNext!!, eTopLeft, eTopLeft, true)\n        }\n    }\n\n    /**\n     * Make the sentinel coordinates big enough that they will never be\n     * merged with real input features.  (Even with the largest possible\n     * input contour and the maximum tolerance of 1.0, no merging will be\n     * done with coordinates larger than 3 * GLU_TESS_MAX_COORD).\n     */\n    private const val SENTINEL_COORD = 4.0 * GLU.GLU_TESS_MAX_COORD\n    /**\n     * We add two sentinel edges above and below all other edges,\n     * to avoid special cases at the top and bottom.\n     */\n    fun addSentinel(tess: GLUtessellatorImpl, t: Double) {\n        val e = Mesh.glMeshMakeEdge(tess.mesh!!)\n        e.org?.s = SENTINEL_COORD\n        e.org?.t = t\n        e.sym?.org?.s = -SENTINEL_COORD\n        e.sym?.org?.t = t\n        tess.event = e.sym?.org /* initialize it */\n        val reg = ActiveRegion(e)\n        reg.windingNumber = 0\n        reg.inside = false\n        reg.fixUpperEdge = false\n        reg.sentinel = true\n        reg.dirty = false\n        reg.nodeUp = Dict.dictInsert(tess.dict!!, reg) /* __gl_dictListInsertBefore */\n    }\n\n    /**\n     * We maintain an ordering of edge intersections with the sweep line.\n     * This order is maintained in a dynamic dictionary.\n     */\n    fun initEdgeDict(tess: GLUtessellatorImpl) {\n        /* __gl_dictListNewDict */\n        tess.dict = Dict.dictNewDict(\n            tess,\n            object : DictLeq {\n                override fun leq(frame: Any, key1: Any?, key2: Any?): Boolean {\n                    return edgeLeq(\n                        tess,\n                        key1 as ActiveRegion,\n                        key2 as ActiveRegion\n                    )\n                }\n            }\n        )\n        addSentinel(tess, -SENTINEL_COORD)\n        addSentinel(tess, SENTINEL_COORD)\n    }\n\n    fun doneEdgeDict(tess: GLUtessellatorImpl) {\n        while (true) {\n            val reg = Dict.dictKey(Dict.dictMin(tess.dict!!)) as ActiveRegion? ?: break\n            /**\n             * At the end of all processing, the dictionary should contain\n             * only the two sentinel edges, plus at most one \"fixable\" edge\n             * created by ConnectRightVertex().\n             */\n            deleteRegion(reg)\n            /*    __gl_meshDelete( reg.eUp )*/\n        }\n        Dict.dictDeleteDict(tess.dict!!) /* __gl_dictListDeleteDict */\n    }\n\n    /**\n     * Remove zero-length edges, and contours with fewer than 3 vertices.\n     */\n    fun removeDegenerateEdges(tess: GLUtessellatorImpl) {\n        val eHead = tess.mesh?.eHead!!\n\n        /*LINTED*/\n        var e = eHead.next!!\n        while (e !== eHead) {\n            var eNext = e.next!!\n            var eLnext = e.lNext!!\n            if (Geom.vertEq(e.org!!, e.sym?.org!!) && e.lNext?.lNext !== e) {\n                /* Zero-length edge, contour has at least 3 edges */\n                spliceMergeVertices(tess, eLnext, e) /* deletes e.Org */\n                if (!Mesh.glMeshDelete(e)) throw RuntimeException() /* e is a self-loop */\n                e = eLnext\n                eLnext = e.lNext!!\n            }\n            if (eLnext.lNext === e) {\n                /* Degenerate contour (one or two edges) */\n                if (eLnext !== e) {\n                    if (eLnext === eNext || eLnext === eNext.sym) {\n                        eNext = eNext.next!!\n                    }\n                    if (!Mesh.glMeshDelete(eLnext)) throw RuntimeException()\n                }\n                if (e === eNext || e === eNext.sym) {\n                    eNext = eNext.next!!\n                }\n                if (!Mesh.glMeshDelete(e)) throw RuntimeException()\n            }\n            e = eNext\n        }\n    }\n\n    /**\n     * Insert all vertices into the priority queue which determines the\n     * order in which vertices cross the sweep line.\n     */\n    fun initPriorityQ(tess: GLUtessellatorImpl): Boolean {\n        /* __gl_pqSortNewPriorityQ */\n        tess.pq =\n            PriorityQ.pqNewPriorityQ()\n        val pq = tess.pq!!\n        val vHead = tess.mesh?.vHead!!\n        var v = vHead.next!!\n        while (v !== vHead) {\n            v.pqHandle = pq.pqInsert(v) /* __gl_pqSortInsert */\n            v = v.next!!\n        }\n        if (!pq.pqInit()) { /* __gl_pqSortInit */\n            tess.pq?.pqDeletePriorityQ() /* __gl_pqSortDeletePriorityQ */\n            tess.pq = null\n            return false\n        }\n        return true\n    }\n\n    fun donePriorityQ(tess: GLUtessellatorImpl) {\n        tess.pq?.pqDeletePriorityQ() /* __gl_pqSortDeletePriorityQ */\n    }\n\n    /**\n     * Delete any degenerate faces with only two edges.  WalkDirtyRegions()\n     * will catch almost all of these, but it won't catch degenerate faces\n     * produced by splice operations on already-processed edges.\n     * The two places this can happen are in FinishLeftRegions(), when\n     * we splice in a \"temporary\" edge produced by ConnectRightVertex(),\n     * and in CheckForLeftSplice(), where we splice already-processed\n     * edges to ensure that our dictionary invariants are not violated\n     * by numerical errors.\n     *\n     * In both these cases it is *very* dangerous to delete the offending\n     * edge at the time, since one of the routines further up the stack\n     * will sometimes be keeping a pointer to that edge.\n     */\n    fun removeDegenerateFaces(mesh: GLUmesh): Boolean {\n        var f = mesh.fHead.next!!\n        while (f !== mesh.fHead) {\n            val fNext = f.next!!\n            val e = f.anEdge!!\n            if (e.lNext?.lNext === e) {\n                /* A face with only two edges */\n                addWinding(e.oNext!!, e)\n                if (!Mesh.glMeshDelete(e)) return false\n            }\n            f = fNext\n        }\n        return true\n    }\n\n    /**\n     * __gl_computeInterior( tess ) computes the planar arrangement specified\n     * by the given contours, and further subdivides this arrangement\n     * into regions.  Each region is marked \"inside\" if it belongs\n     * to the polygon, according to the rule given by tess.windingRule.\n     * Each interior region is guaranteed be monotone.\n     */\n    fun glComputeInterior(tess: GLUtessellatorImpl): Boolean {\n        tess.fatalError = false\n\n        /**\n         * Each vertex defines an event for our sweep line.  Start by inserting\n         * all the vertices in a priority queue.  Events are processed in\n         * lexicographic order, ie.\n         *\n         *\te1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)\n         */\n        removeDegenerateEdges(tess)\n        if (!initPriorityQ(tess)) return false /* if error */\n        initEdgeDict(tess)\n\n        /* __gl_pqSortExtractMin */\n        while (true) {\n            val v = tess.pq?.pqExtractMin() as GLUvertex? ?: break\n            while (true) {\n                var vNext = tess.pq?.pqMinimum() as GLUvertex? /* __gl_pqSortMinimum */\n                if (vNext == null || !Geom.vertEq(vNext, v)) break\n\n                /**\n                 * Merge together all vertices at exactly the same location.\n                 * This is more efficient than processing them one at a time,\n                 * simplifies the code (see ConnectLeftDegenerate), and is also\n                 * important for correct handling of certain degenerate cases.\n                 * For example, suppose there are two identical edges A and B\n                 * that belong to different contours (so without this code they would\n                 * be processed by separate sweep events).  Suppose another edge C\n                 * crosses A and B from above.  When A is processed, we split it\n                 * at its intersection point with C.  However this also splits C,\n                 * so when we insert B we may compute a slightly different\n                 * intersection point.  This might leave two edges with a small\n                 * gap between them.  This kind of error is especially obvious\n                 * when using boundary extraction (GLU_TESS_BOUNDARY_ONLY).\n                 */\n                vNext = tess.pq?.pqExtractMin() as GLUvertex /* __gl_pqSortExtractMin*/\n                spliceMergeVertices(tess, v.anEdge!!, vNext.anEdge!!)\n            }\n            sweepEvent(tess, v)\n        }\n\n        /* Set tess.event for debugging purposes */\n        /* __GL_DICTLISTKEY */\n        /* __GL_DICTLISTMIN */\n        tess.event = (Dict.dictKey(\n            Dict.dictMin(\n                tess.dict!!\n            )\n        ) as ActiveRegion).eUp.org\n        debugEvent(tess)\n        doneEdgeDict(tess)\n        donePriorityQ(tess)\n        if (!removeDegenerateFaces(tess.mesh!!)) return false\n        Mesh.glMeshCheckMesh(tess.mesh!!)\n        return true\n    }\n}","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu.tessellator\n\ninternal object TessState {\n    const val T_DORMANT = 0\n    const val T_IN_POLYGON = 1\n    const val T_IN_CONTOUR = 2\n}","package earth.worldwind.util.http\n\nimport io.ktor.client.*\nimport io.ktor.client.plugins.*\n\n/**\n * Returns new platform-dependent HTTP client instance configured by default.\n * In case some special configuration will be required on each platform, then make this function \"expected\".\n */\n@Suppress(\"FunctionName\")\nfun DefaultHttpClient(\n    connectTimeout: Long = 3000L,\n    requestTimeout: Long = 30000L,\n    config: HttpClientConfig<*>.() -> Unit = {}\n) = HttpClient {\n    config(this)\n\n    install(HttpTimeout) {\n        connectTimeoutMillis = connectTimeout\n        requestTimeoutMillis = requestTimeout\n    }\n}\n","package earth.worldwind.util.kgl\n\nexpect class KglShader {\n    companion object{ val NONE: KglShader }\n    fun isValid(): Boolean\n}\nexpect class KglProgram {\n    companion object{ val NONE: KglProgram }\n    fun isValid(): Boolean\n}\nexpect class KglUniformLocation {\n    companion object{ val NONE: KglUniformLocation }\n    fun isValid(): Boolean\n}\nexpect class KglBuffer {\n    companion object{ val NONE: KglBuffer }\n    fun isValid(): Boolean\n}\nexpect class KglTexture {\n    companion object{ val NONE: KglTexture }\n    fun isValid(): Boolean\n}\nexpect class KglFramebuffer {\n    companion object{ val NONE: KglFramebuffer }\n    fun isValid(): Boolean\n}\n\nconst val GL_ACTIVE_TEXTURE = 0x84E0\nconst val GL_DEPTH_BUFFER_BIT = 0x00000100\nconst val GL_STENCIL_BUFFER_BIT = 0x00000400\nconst val GL_COLOR_BUFFER_BIT = 0x00004000\nconst val GL_FALSE = 0\nconst val GL_TRUE = 1\nconst val GL_POINTS = 0x0000\nconst val GL_LINES = 0x0001\nconst val GL_LINE_LOOP = 0x0002\nconst val GL_LINE_STRIP = 0x0003\nconst val GL_TRIANGLES = 0x0004\nconst val GL_TRIANGLE_STRIP = 0x0005\nconst val GL_TRIANGLE_FAN = 0x0006\nconst val GL_ZERO = 0\nconst val GL_ONE = 1\nconst val GL_SRC_COLOR = 0x0300\nconst val GL_ONE_MINUS_SRC_COLOR = 0x0301\nconst val GL_SRC_ALPHA = 0x0302\nconst val GL_ONE_MINUS_SRC_ALPHA = 0x0303\nconst val GL_DST_ALPHA = 0x0304\nconst val GL_ONE_MINUS_DST_ALPHA = 0x0305\nconst val GL_DST_COLOR = 0x0306\nconst val GL_ONE_MINUS_DST_COLOR = 0x0307\nconst val GL_SRC_ALPHA_SATURATE = 0x0308\nconst val GL_FUNC_ADD = 0x8006\nconst val GL_BLEND_EQUATION = 0x8009\nconst val GL_BLEND_EQUATION_RGB = 0x8009\nconst val GL_BLEND_EQUATION_ALPHA = 0x883D\nconst val GL_FUNC_SUBTRACT = 0x800A\nconst val GL_FUNC_REVERSE_SUBTRACT = 0x800B\nconst val GL_BLEND_DST_RGB = 0x80C8\nconst val GL_BLEND_SRC_RGB = 0x80C9\nconst val GL_BLEND_DST_ALPHA = 0x80CA\nconst val GL_BLEND_SRC_ALPHA = 0x80CB\nconst val GL_CONSTANT_COLOR = 0x8001\nconst val GL_ONE_MINUS_CONSTANT_COLOR = 0x8002\nconst val GL_CONSTANT_ALPHA = 0x8003\nconst val GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004\nconst val GL_BLEND_COLOR = 0x8005\nconst val GL_ARRAY_BUFFER = 0x8892\nconst val GL_ELEMENT_ARRAY_BUFFER = 0x8893\nconst val GL_ARRAY_BUFFER_BINDING = 0x8894\nconst val GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895\nconst val GL_STREAM_DRAW = 0x88E0\nconst val GL_STATIC_DRAW = 0x88E4\nconst val GL_DYNAMIC_DRAW = 0x88E8\nconst val GL_BUFFER_SIZE = 0x8764\nconst val GL_BUFFER_USAGE = 0x8765\nconst val GL_CURRENT_VERTEX_ATTRIB = 0x8626\nconst val GL_FRONT = 0x0404\nconst val GL_BACK = 0x0405\nconst val GL_FRONT_AND_BACK = 0x0408\nconst val GL_TEXTURE_2D = 0x0DE1\nconst val GL_CULL_FACE = 0x0B44\nconst val GL_BLEND = 0x0BE2\nconst val GL_DITHER = 0x0BD0\nconst val GL_STENCIL_TEST = 0x0B90\nconst val GL_DEPTH_TEST = 0x0B71\nconst val GL_SCISSOR_TEST = 0x0C11\nconst val GL_POLYGON_OFFSET_FILL = 0x8037\nconst val GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E\nconst val GL_SAMPLE_COVERAGE = 0x80A0\nconst val GL_NO_ERROR = 0\nconst val GL_INVALID_ENUM = 0x0500\nconst val GL_INVALID_VALUE = 0x0501\nconst val GL_INVALID_OPERATION = 0x0502\nconst val GL_OUT_OF_MEMORY = 0x0505\nconst val GL_INVALID_FRAMEBUFFER_OPERATION = 0x506\nconst val GL_CW = 0x0900\nconst val GL_CCW = 0x0901\nconst val GL_LINE_WIDTH = 0x0B21\nconst val GL_ALIASED_POINT_SIZE_RANGE = 0x846D\nconst val GL_ALIASED_LINE_WIDTH_RANGE = 0x846E\nconst val GL_CULL_FACE_MODE = 0x0B45\nconst val GL_FRONT_FACE = 0x0B46\nconst val GL_DEPTH_RANGE = 0x0B70\nconst val GL_DEPTH_WRITEMASK = 0x0B72\nconst val GL_DEPTH_CLEAR_VALUE = 0x0B73\nconst val GL_DEPTH_FUNC = 0x0B74\nconst val GL_STENCIL_CLEAR_VALUE = 0x0B91\nconst val GL_STENCIL_FUNC = 0x0B92\nconst val GL_STENCIL_FAIL = 0x0B94\nconst val GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95\nconst val GL_STENCIL_PASS_DEPTH_PASS = 0x0B96\nconst val GL_STENCIL_REF = 0x0B97\nconst val GL_STENCIL_VALUE_MASK = 0x0B93\nconst val GL_STENCIL_WRITEMASK = 0x0B98\nconst val GL_STENCIL_BACK_FUNC = 0x8800\nconst val GL_STENCIL_BACK_FAIL = 0x8801\nconst val GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802\nconst val GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803\nconst val GL_STENCIL_BACK_REF = 0x8CA3\nconst val GL_STENCIL_BACK_VALUE_MASK = 0x8CA4\nconst val GL_STENCIL_BACK_WRITEMASK = 0x8CA5\nconst val GL_VIEWPORT = 0x0BA2\nconst val GL_SCISSOR_BOX = 0x0C10\nconst val GL_COLOR_CLEAR_VALUE = 0x0C22\nconst val GL_COLOR_WRITEMASK = 0x0C23\nconst val GL_UNPACK_ALIGNMENT = 0x0CF5\nconst val GL_PACK_ALIGNMENT = 0x0D05\nconst val GL_MAX_TEXTURE_SIZE = 0x0D33\nconst val GL_MAX_VIEWPORT_DIMS = 0x0D3A\nconst val GL_SUBPIXEL_BITS = 0x0D50\nconst val GL_RED_BITS = 0x0D52\nconst val GL_GREEN_BITS = 0x0D53\nconst val GL_BLUE_BITS = 0x0D54\nconst val GL_ALPHA_BITS = 0x0D55\nconst val GL_DEPTH_BITS = 0x0D56\nconst val GL_STENCIL_BITS = 0x0D57\nconst val GL_POLYGON_OFFSET_UNITS = 0x2A00\nconst val GL_POLYGON_OFFSET_FACTOR = 0x8038\nconst val GL_TEXTURE_BINDING_2D = 0x8069\nconst val GL_SAMPLE_BUFFERS = 0x80A8\nconst val GL_SAMPLES = 0x80A9\nconst val GL_SAMPLE_COVERAGE_VALUE = 0x80AA\nconst val GL_SAMPLE_COVERAGE_INVERT = 0x80AB\nconst val GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2\nconst val GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3\nconst val GL_DONT_CARE = 0x1100\nconst val GL_FASTEST = 0x1101\nconst val GL_NICEST = 0x1102\nconst val GL_GENERATE_MIPMAP_HINT = 0x8192\nconst val GL_BYTE = 0x1400\nconst val GL_UNSIGNED_BYTE = 0x1401\nconst val GL_SHORT = 0x1402\nconst val GL_UNSIGNED_SHORT = 0x1403\nconst val GL_INT = 0x1404\nconst val GL_UNSIGNED_INT = 0x1405\nconst val GL_FLOAT = 0x1406\nconst val GL_FIXED = 0x140C\nconst val GL_STENCIL_INDEX = 0x1901\nconst val GL_DEPTH_COMPONENT = 0x1902\nconst val GL_RED = 0x1903\nconst val GL_GREEN = 0x1904\nconst val GL_BLUE = 0x1905\nconst val GL_ALPHA = 0x1906\nconst val GL_RGB = 0x1907\nconst val GL_RGBA = 0x1908\nconst val GL_LUMINANCE = 0x1909\nconst val GL_LUMINANCE_ALPHA = 0x190A\nconst val GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033\nconst val GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034\nconst val GL_UNSIGNED_SHORT_5_6_5 = 0x8363\nconst val GL_FRAGMENT_SHADER = 0x8B30\nconst val GL_VERTEX_SHADER = 0x8B31\nconst val GL_MAX_VERTEX_ATTRIBS = 0x8869\nconst val GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB\nconst val GL_MAX_VARYING_VECTORS = 0x8DFC\nconst val GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D\nconst val GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C\nconst val GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872\nconst val GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD\nconst val GL_SHADER_TYPE = 0x8B4F\nconst val GL_DELETE_STATUS = 0x8B80\nconst val GL_LINK_STATUS = 0x8B82\nconst val GL_VALIDATE_STATUS = 0x8B83\nconst val GL_ATTACHED_SHADERS = 0x8B85\nconst val GL_ACTIVE_UNIFORMS = 0x8B86\nconst val GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87\nconst val GL_ACTIVE_ATTRIBUTES = 0x8B89\nconst val GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A\nconst val GL_SHADING_LANGUAGE_VERSION = 0x8B8C\nconst val GL_CURRENT_PROGRAM = 0x8B8D\nconst val GL_NEVER = 0x0200\nconst val GL_LESS = 0x0201\nconst val GL_EQUAL = 0x0202\nconst val GL_LEQUAL = 0x0203\nconst val GL_GREATER = 0x0204\nconst val GL_NOTEQUAL = 0x0205\nconst val GL_GEQUAL = 0x0206\nconst val GL_ALWAYS = 0x0207\nconst val GL_KEEP = 0x1E00\nconst val GL_REPLACE = 0x1E01\nconst val GL_INCR = 0x1E02\nconst val GL_DECR = 0x1E03\nconst val GL_INVERT = 0x150A\nconst val GL_INCR_WRAP = 0x8507\nconst val GL_DECR_WRAP = 0x8508\nconst val GL_VENDOR = 0x1F00\nconst val GL_RENDERER = 0x1F01\nconst val GL_VERSION = 0x1F02\nconst val GL_EXTENSIONS = 0x1F03\nconst val GL_NEAREST = 0x2600\nconst val GL_LINEAR = 0x2601\nconst val GL_NEAREST_MIPMAP_NEAREST = 0x2700\nconst val GL_LINEAR_MIPMAP_NEAREST = 0x2701\nconst val GL_NEAREST_MIPMAP_LINEAR = 0x2702\nconst val GL_LINEAR_MIPMAP_LINEAR = 0x2703\nconst val GL_TEXTURE_MAG_FILTER = 0x2800\nconst val GL_TEXTURE_MIN_FILTER = 0x2801\nconst val GL_TEXTURE_WRAP_S = 0x2802\nconst val GL_TEXTURE_WRAP_T = 0x2803\nconst val GL_TEXTURE = 0x1702\nconst val GL_TEXTURE_CUBE_MAP = 0x8513\nconst val GL_TEXTURE_BINDING_CUBE_MAP = 0x8514\nconst val GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515\nconst val GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516\nconst val GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517\nconst val GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518\nconst val GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519\nconst val GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A\nconst val GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C\nconst val GL_TEXTURE0 = 0x84C0\nconst val GL_TEXTURE1 = 0x84C1\nconst val GL_TEXTURE2 = 0x84C2\nconst val GL_TEXTURE3 = 0x84C3\nconst val GL_TEXTURE4 = 0x84C4\nconst val GL_TEXTURE5 = 0x84C5\nconst val GL_TEXTURE6 = 0x84C6\nconst val GL_TEXTURE7 = 0x84C7\nconst val GL_TEXTURE8 = 0x84C8\nconst val GL_TEXTURE9 = 0x84C9\nconst val GL_TEXTURE10 = 0x84CA\nconst val GL_TEXTURE11 = 0x84CB\nconst val GL_TEXTURE12 = 0x84CC\nconst val GL_TEXTURE13 = 0x84CD\nconst val GL_TEXTURE14 = 0x84CE\nconst val GL_TEXTURE15 = 0x84CF\nconst val GL_TEXTURE16 = 0x84D0\nconst val GL_TEXTURE17 = 0x84D1\nconst val GL_TEXTURE18 = 0x84D2\nconst val GL_TEXTURE19 = 0x84D3\nconst val GL_TEXTURE20 = 0x84D4\nconst val GL_TEXTURE21 = 0x84D5\nconst val GL_TEXTURE22 = 0x84D6\nconst val GL_TEXTURE23 = 0x84D7\nconst val GL_TEXTURE24 = 0x84D8\nconst val GL_TEXTURE25 = 0x84D9\nconst val GL_TEXTURE26 = 0x84DA\nconst val GL_TEXTURE27 = 0x84DB\nconst val GL_TEXTURE28 = 0x84DC\nconst val GL_TEXTURE29 = 0x84DD\nconst val GL_TEXTURE30 = 0x84DE\nconst val GL_TEXTURE31 = 0x84DF\nconst val GL_REPEAT = 0x2901\nconst val GL_CLAMP_TO_EDGE = 0x812F\nconst val GL_MIRRORED_REPEAT = 0x8370\nconst val GL_FLOAT_VEC2 = 0x8B50\nconst val GL_FLOAT_VEC3 = 0x8B51\nconst val GL_FLOAT_VEC4 = 0x8B52\nconst val GL_INT_VEC2 = 0x8B53\nconst val GL_INT_VEC3 = 0x8B54\nconst val GL_INT_VEC4 = 0x8B55\nconst val GL_BOOL = 0x8B56\nconst val GL_BOOL_VEC2 = 0x8B57\nconst val GL_BOOL_VEC3 = 0x8B58\nconst val GL_BOOL_VEC4 = 0x8B59\nconst val GL_FLOAT_MAT2 = 0x8B5A\nconst val GL_FLOAT_MAT3 = 0x8B5B\nconst val GL_FLOAT_MAT4 = 0x8B5C\nconst val GL_SAMPLER_2D = 0x8B5E\nconst val GL_SAMPLER_CUBE = 0x8B60\nconst val GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622\nconst val GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623\nconst val GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624\nconst val GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625\nconst val GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A\nconst val GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645\nconst val GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F\nconst val GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A\nconst val GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B\nconst val GL_COMPILE_STATUS = 0x8B81\nconst val GL_INFO_LOG_LENGTH = 0x8B84\nconst val GL_SHADER_SOURCE_LENGTH = 0x8B88\nconst val GL_SHADER_COMPILER = 0x8DFA\nconst val GL_SHADER_BINARY_FORMATS = 0x8DF8\nconst val GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9\nconst val GL_LOW_FLOAT = 0x8DF0\nconst val GL_MEDIUM_FLOAT = 0x8DF1\nconst val GL_HIGH_FLOAT = 0x8DF2\nconst val GL_LOW_INT = 0x8DF3\nconst val GL_MEDIUM_INT = 0x8DF4\nconst val GL_HIGH_INT = 0x8DF5\nconst val GL_FRAMEBUFFER = 0x8D40\nconst val GL_RENDERBUFFER = 0x8D41\nconst val GL_RGBA4 = 0x8056\nconst val GL_RGBA8 = 0x8058\nconst val GL_BGR = 0x80e0\nconst val GL_BGRA = 0x80e1\nconst val GL_RGB5_A1 = 0x8057\nconst val GL_RGB565 = 0x8D62\nconst val GL_DEPTH_COMPONENT16 = 0x81A5\nconst val GL_FRAMEBUFFER_COMPLETE = 0x8CD5\nconst val GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6\nconst val GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7\nconst val GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB\nconst val GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC\nconst val GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD\nconst val GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56\nconst val GL_FRAMEBUFFER_UNDEFINED = 0x8219\nconst val GL_COLOR_ATTACHMENT0 = 0x8CE0\nconst val GL_COLOR_ATTACHMENT1 = 0x8CE1\nconst val GL_COLOR_ATTACHMENT2 = 0x8CE2\nconst val GL_COLOR_ATTACHMENT3 = 0x8CE3\nconst val GL_COLOR_ATTACHMENT4 = 0x8CE4\nconst val GL_COLOR_ATTACHMENT5 = 0x8CE5\nconst val GL_COLOR_ATTACHMENT6 = 0x8CE6\nconst val GL_COLOR_ATTACHMENT7 = 0x8CE7\nconst val GL_COLOR_ATTACHMENT8 = 0x8CE8\nconst val GL_COLOR_ATTACHMENT9 = 0x8CE9\nconst val GL_COLOR_ATTACHMENT10 = 0x8CEA\nconst val GL_COLOR_ATTACHMENT11 = 0x8CEB\nconst val GL_COLOR_ATTACHMENT12 = 0x8CEC\nconst val GL_COLOR_ATTACHMENT13 = 0x8CED\nconst val GL_COLOR_ATTACHMENT14 = 0x8CEE\nconst val GL_COLOR_ATTACHMENT15 = 0x8CEF\nconst val GL_COLOR_ATTACHMENT16 = 0x8CF0\nconst val GL_COLOR_ATTACHMENT17 = 0x8CF1\nconst val GL_COLOR_ATTACHMENT18 = 0x8CF2\nconst val GL_COLOR_ATTACHMENT19 = 0x8CF3\nconst val GL_COLOR_ATTACHMENT20 = 0x8CF4\nconst val GL_COLOR_ATTACHMENT21 = 0x8CF5\nconst val GL_COLOR_ATTACHMENT22 = 0x8CF6\nconst val GL_COLOR_ATTACHMENT23 = 0x8CF7\nconst val GL_COLOR_ATTACHMENT24 = 0x8CF8\nconst val GL_COLOR_ATTACHMENT25 = 0x8CF9\nconst val GL_COLOR_ATTACHMENT26 = 0x8CFA\nconst val GL_COLOR_ATTACHMENT27 = 0x8CFB\nconst val GL_COLOR_ATTACHMENT28 = 0x8CFC\nconst val GL_COLOR_ATTACHMENT29 = 0x8CFD\nconst val GL_COLOR_ATTACHMENT30 = 0x8CFE\nconst val GL_COLOR_ATTACHMENT31 = 0x8CFF\nconst val GL_DEPTH_ATTACHMENT = 0x8D00\nconst val GL_STENCIL_ATTACHMENT = 0x8D20\nconst val GL_DEPTH_STENCIL_ATTACHMENT = 0x821A\nconst val GL_R8 = 0x8229\nconst val GL_R16 = 0x822A\nconst val GL_RG8 = 0x822B\nconst val GL_RG16 = 0x822C\nconst val GL_R16F = 0x822D\nconst val GL_R32F = 0x822E\nconst val GL_RG16F = 0x822F\nconst val GL_RG32F = 0x8230\nconst val GL_R8I = 0x8231\nconst val GL_R8UI = 0x8232\nconst val GL_R16I = 0x8233\nconst val GL_R16UI = 0x8234\nconst val GL_R32I = 0x8235\nconst val GL_R32UI = 0x8236\nconst val GL_RG8I = 0x8237\nconst val GL_RG8UI = 0x8238\nconst val GL_RG16I = 0x8239\nconst val GL_RG16UI = 0x823A\nconst val GL_RG32I = 0x823B\nconst val GL_RG32UI = 0x823C\nconst val GL_RG = 0x8227\nconst val GL_COMPRESSED_RED = 0x8225\nconst val GL_COMPRESSED_RG = 0x8226\n\ninterface Kgl {\n    fun createShader(type: Int): KglShader\n    fun shaderSource(shader: KglShader, source: String)\n    fun compileShader(shader: KglShader)\n    fun deleteShader(shader: KglShader)\n\n    fun getShaderParameteri(shader: KglShader, pname: Int): Int\n\n    fun getProgramInfoLog(program: KglProgram) : String\n    fun getShaderInfoLog(shader: KglShader) : String\n\n    fun createProgram(): KglProgram\n    fun attachShader(program: KglProgram, shader: KglShader)\n    fun linkProgram(program: KglProgram)\n    fun useProgram(program: KglProgram)\n    fun deleteProgram(program: KglProgram)\n\n    fun getProgramParameteri(program: KglProgram, pname: Int): Int\n\n    fun getUniformLocation(program: KglProgram, name: String): KglUniformLocation\n    fun bindAttribLocation(program: KglProgram, index: Int, name: String)\n\n    fun enable(cap: Int)\n    fun disable(cap: Int)\n\n    fun enableVertexAttribArray(location: Int)\n    fun disableVertexAttribArray(location: Int)\n\n    fun getParameteri(pname: Int): Int\n    fun getParameterf(pname: Int): Float\n    fun getParameteriv(pname: Int): IntArray\n    fun getParameterfv(pname: Int): FloatArray\n\n    fun createBuffer(): KglBuffer\n    fun bindBuffer(target: Int, buffer: KglBuffer)\n    fun bufferData(target: Int, size: Int, sourceData: ShortArray, usage: Int, offset: Int = 0)\n    fun bufferData(target: Int, size: Int, sourceData: FloatArray, usage: Int, offset: Int = 0)\n    fun deleteBuffer(buffer: KglBuffer)\n\n    fun vertexAttribPointer(location: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int)\n\n    fun uniform1f(location: KglUniformLocation, f: Float)\n    fun uniform1fv(location: KglUniformLocation, count: Int, value: FloatArray, offset: Int)\n    fun uniform1i(location: KglUniformLocation, i: Int)\n\n    fun uniform2f(location: KglUniformLocation, x: Float, y: Float)\n    fun uniform2fv(location: KglUniformLocation, count: Int, value: FloatArray, offset: Int)\n    fun uniform2i(location: KglUniformLocation, x: Int, y: Int)\n\n    fun uniform3f(location: KglUniformLocation, x: Float, y: Float, z: Float)\n    fun uniform3fv(location: KglUniformLocation, count: Int, value: FloatArray, offset: Int)\n    fun uniform3i(location: KglUniformLocation, x: Int, y: Int, z: Int)\n\n    fun uniform4f(location: KglUniformLocation, x: Float, y: Float, z: Float, w: Float)\n    fun uniform4fv(location: KglUniformLocation, count: Int, value: FloatArray, offset: Int)\n    fun uniform4i(location: KglUniformLocation, x: Int, y: Int, z: Int, w: Int)\n\n    fun uniformMatrix3fv(location: KglUniformLocation, count: Int, transpose: Boolean, value: FloatArray, offset: Int)\n    fun uniformMatrix4fv(location: KglUniformLocation, count: Int, transpose: Boolean, value: FloatArray, offset: Int)\n\n    fun cullFace(mode: Int)\n    fun frontFace (mode: Int)\n\n    fun polygonOffset(factor: Float, units: Float)\n\n    fun depthFunc(func: Int)\n    fun depthMask(mask: Boolean)\n\n    fun blendFunc(sFactor: Int, dFactor: Int)\n\n    fun viewport(x: Int, y: Int, width: Int, height: Int)\n    fun clearColor(r: Float, g: Float, b: Float, a: Float)\n    fun clear(mask: Int)\n\n    fun createTexture(): KglTexture\n    fun deleteTexture(texture: KglTexture)\n    fun texImage2D(target: Int, level: Int, internalFormat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, buffer: ByteArray?)\n    fun activeTexture(texture: Int)\n    fun bindTexture(target: Int, texture: KglTexture)\n    fun generateMipmap(target: Int)\n    fun texParameteri(target: Int, pname: Int, value: Int)\n\n    fun drawArrays(mode: Int, first: Int, count: Int)\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int)\n\n    fun getError(): Int\n    fun finish()\n\n    fun bindFramebuffer(target: Int, framebuffer: KglFramebuffer)\n    fun createFramebuffer(): KglFramebuffer\n    fun deleteFramebuffer(framebuffer: KglFramebuffer)\n    fun checkFramebufferStatus(target: Int): Int\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: KglTexture, level: Int)\n\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, buffer: ByteArray)\n    fun colorMask(r: Boolean, g: Boolean, b: Boolean, a: Boolean)\n    fun lineWidth(width: Float)\n    fun pixelStorei(pname: Int, param: Int)\n}\n","package earth.worldwind.util.math\n\nimport earth.worldwind.geom.Matrix4\nimport earth.worldwind.geom.Viewport\nimport kotlin.math.floor\nimport kotlin.math.ln\nimport kotlin.math.max\nimport kotlin.math.min\n\n/**\n * Restricts a value to the range [min, max] degrees, clamping values outside the range. Values less than min are\n * returned as min, and values greater than max are returned as max. Values within the range are returned\n * unmodified.\n * <br>\n * The result of this method is undefined if min is greater than max.\n *\n * @param value the values to clamp\n * @param min   the minimum value\n * @param max   the maximum value\n *\n * @return the specified values clamped to the range [min, max] degrees\n */\nfun clamp(value: Double, min: Double, max: Double) = value.coerceIn(min, max)\n\n/**\n * Returns the fractional part of a specified number\n *\n * @param value the number whose fractional part to compute\n *\n * @return The fractional part of the specified number: value - floor(value)\n */\nfun fract(value: Double) = value - floor(value)\n\n/**\n * Computes the linear interpolation of two values according to a specified fractional amount. The fractional amount\n * is interpreted as a relative proportion of the two values, where 0.0 indicates the first value, 0.5 indicates a\n * 50/50 mix of the two values, and 1.0 indicates the second value.\n * <br>\n * The result of this method is undefined if the amount is outside the range [0, 1].\n *\n * @param amount the fractional proportion of the two values in the range [0, 1]\n * @param value1 the first value\n * @param value2 the second value\n *\n * @return the interpolated value\n */\nfun interpolate(amount: Double, value1: Double, value2: Double) = (1 - amount) * value1 + amount * value2\n\n/**\n * Returns the integer modulus of a specified number. This differs from the % operator in that the result is\n * always positive when the modulus is positive. For example -1 % 10 = -1, whereas mod(-1, 10) = 1.\n *\n * @param value   the integer number whose modulus to compute\n * @param modulus the modulus\n *\n * @return the remainder after dividing the number by the modulus\n */\nfun mod(value: Int, modulus: Int) = (value % modulus + modulus) % modulus\n\n/**\n * Computes the bounding rectangle for a unit square after applying a transformation matrix to the square's four\n * corners.\n *\n * @param unitSquareTransform the matrix to apply to the unit square\n * @param result              a pre-allocated Viewport in which to return the computed bounding rectangle\n *\n * @return the result argument set to the computed bounding rectangle\n */\nfun boundingRectForUnitSquare(unitSquareTransform: Matrix4, result: Viewport): Viewport {\n    val m = unitSquareTransform.m\n\n    // transform of (0, 0)\n    val x1 = m[3]\n    val y1 = m[7]\n\n    // transform of (1, 0)\n    val x2 = m[0] + m[3]\n    val y2 = m[4] + m[7]\n\n    // transform of (0, 1)\n    val x3 = m[1] + m[3]\n    val y3 = m[5] + m[7]\n\n    // transform of (1, 1)\n    val x4 = m[0] + m[1] + m[3]\n    val y4 = m[4] + m[5] + m[7]\n    val minX = min(min(x1, x2), min(x3, x4)).toInt()\n    val maxX = max(max(x1, x2), max(x3, x4)).toInt()\n    val minY = min(min(y1, y2), min(y3, y4)).toInt()\n    val maxY = max(max(y1, y2), max(y3, y4)).toInt()\n    return result.set(minX, minY, maxX - minX, maxY - minY)\n}\n\n/**\n * Indicates whether a specified value is a power of two.\n *\n * @param value the value to test\n *\n * @return true if the specified value is a power of two, false othwerwise\n */\nfun isPowerOfTwo(value: Int) = value != 0 && value and value - 1 == 0\n\n/**\n * Returns the value that is the nearest power of 2 greater than or equal to the given value.\n *\n * @param value the reference value. The power of 2 returned is greater than or equal to this value.\n *\n * @return the value that is the nearest power of 2 greater than or equal to the reference value\n */\nfun powerOfTwoCeiling(value: Int): Int {\n    val pow = floor(ln(value.toDouble()) / ln(2.0)).toInt()\n    return 1 shl pow\n}","package earth.worldwind\n\nimport earth.worldwind.geom.LookAt\nimport earth.worldwind.geom.Vec2\nimport earth.worldwind.gesture.*\nimport earth.worldwind.gesture.GestureState.*\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.WheelEvent\nimport kotlin.math.cos\nimport kotlin.math.max\nimport kotlin.math.sin\n\n/**\n * This class provides the default window controller for WorldWind for controlling the globe via user interaction.\n */\nopen class BasicWorldWindowController(wwd: WorldWindow): WorldWindowController(wwd) {\n    val primaryDragRecognizer = DragRecognizer(wwd.canvas).also { it.addListener(this) }\n    val secondaryDragRecognizer = DragRecognizer(wwd.canvas).also {\n        it.addListener(this)\n        it.button = 2 // secondary mouse button\n    }\n    val panRecognizer = PanRecognizer(wwd.canvas).also { it.addListener(this) }\n    val pinchRecognizer = PinchRecognizer(wwd.canvas).also { it.addListener(this) }\n    val rotationRecognizer = RotationRecognizer(wwd.canvas).also { it.addListener(this) }\n    val tiltRecognizer = TiltRecognizer(wwd.canvas).also { it.addListener(this) }\n//    val tapRecognizer = TapRecognizer(wwd.canvas).also { it.addListener(this) }\n//    val clickRecognizer = ClickRecognizer(wwd.canvas).also { it.addListener(this) }\n    /**\n     * A copy of the viewing parameters at the start of a gesture as a look at view.\n     */\n    protected val beginLookAt = LookAt()\n    /**\n     * The current state of the viewing parameters during a gesture as a look at view.\n     */\n    protected val lookAt = LookAt()\n    protected val beginPoint = Vec2()\n    protected val lastPoint = Vec2()\n    protected var lastRotation = 0.0\n    protected var lastWheelEvent = 0\n    protected var activeGestures = 0\n\n    init {\n        // Establish the dependencies between gesture recognizers. The pan, pinch and rotate gesture may recognize\n        // simultaneously with each other.\n        panRecognizer.recognizeSimultaneouslyWith(pinchRecognizer)\n        panRecognizer.recognizeSimultaneouslyWith(rotationRecognizer)\n        pinchRecognizer.recognizeSimultaneouslyWith(rotationRecognizer)\n\n        // Since the tilt gesture is a subset of the pan gesture, pan will typically recognize before tilt,\n        // effectively suppressing tilt. Establish a dependency between the other touch gestures and tilt to provide\n        // tilt an opportunity to recognize.\n        panRecognizer.requireRecognizerToFail(tiltRecognizer)\n        pinchRecognizer.requireRecognizerToFail(tiltRecognizer)\n        rotationRecognizer.requireRecognizerToFail(tiltRecognizer)\n    }\n\n    override fun handleEvent(event: Event) {\n        super.handleEvent(event)\n        if (!event.defaultPrevented) {\n            if (event.type == \"wheel\") {\n                event.preventDefault()\n                handleWheelEvent(event as WheelEvent)\n            } else GestureRecognizer.allRecognizers.forEach { r -> if (r.target == wwd.canvas) r.handleEvent(event) }\n        }\n    }\n\n    override fun gestureStateChanged(recognizer: GestureRecognizer) {\n        when(recognizer) {\n            primaryDragRecognizer, panRecognizer -> handlePanOrDrag(recognizer)\n            secondaryDragRecognizer -> handleSecondaryDrag(recognizer)\n            pinchRecognizer -> handlePinch(recognizer as PinchRecognizer)\n            rotationRecognizer -> handleRotation(recognizer as RotationRecognizer)\n            tiltRecognizer -> handleTilt(recognizer)\n//            clickRecognizer, tapRecognizer -> handleClickOrTap(recognizer)\n        }\n    }\n\n//     protected open fun handleClickOrTap(recognizer: GestureRecognizer) {\n//         if (recognizer.state == RECOGNIZED) {\n//             val pickPoint = wwd.canvasCoordinates(recognizer.clientX, recognizer.clientY)\n//\n//             // Identify if the top picked object contains a URL for hyperlinking\n//             val pickList = wwd.pick(pickPoint)\n//             val userObject = pickList.topPickedObject?.userObject\n//             // If the url object was appended, open the hyperlink\n//             if (userObject is Renderable && userObject.hasUserProperty(\"url\")) {\n//                 window.open(userObject.getUserProperty(\"url\") as String, \"_blank\")\n//             }\n//         }\n//     }\n\n    protected open fun handlePanOrDrag(recognizer: GestureRecognizer) {\n        if (wwd.engine.globe.is2D) handlePanOrDrag2D(recognizer) else handlePanOrDrag3D(recognizer)\n    }\n\n    protected open fun handlePanOrDrag3D(recognizer: GestureRecognizer) {\n        val state = recognizer.state\n        val tx = recognizer.translationX\n        val ty = recognizer.translationY\n\n        when (state) {\n            BEGAN -> {\n                gestureDidBegin()\n                lastPoint.set(0.0, 0.0)\n            }\n            CHANGED -> {\n                // Convert the translation from screen coordinates to arc degrees. Use the view's range as a\n                // metric for converting screen pixels to meters, and use the globe's radius for converting from meters\n                // to arc degrees. Transform viewport pixel size to canvas client pixel size.\n                val globe = wwd.engine.globe\n                val globeRadius = max(globe.equatorialRadius, globe.polarRadius)\n                val distance = max(1.0, lookAt.range)\n                val metersPerPixel = wwd.engine.pixelSizeAtDistance(distance) * wwd.engine.densityFactor\n                val forwardMeters = (ty - lastPoint.y) * metersPerPixel\n                val sideMeters = -(tx - lastPoint.x) * metersPerPixel\n                val forwardRadians = forwardMeters / globeRadius\n                val sideRadians = sideMeters / globeRadius\n\n                // Apply the change in latitude and longitude to the view, relative to the current heading.\n                val sinHeading = sin(lookAt.heading.inRadians)\n                val cosHeading = cos(lookAt.heading.inRadians)\n                lookAt.position.apply {\n                    latitude = latitude.plusRadians(forwardRadians * cosHeading - sideRadians * sinHeading)\n                    longitude = longitude.plusRadians(forwardRadians * sinHeading + sideRadians * cosHeading)\n                }\n                lastPoint.set(tx, ty)\n                applyChanges()\n            }\n            ENDED, CANCELLED -> gestureDidEnd()\n            else -> {}\n        }\n    }\n\n    protected open fun handlePanOrDrag2D(recognizer: GestureRecognizer) {\n        val state = recognizer.state\n        val x = recognizer.clientX.toDouble()\n        val y = recognizer.clientY.toDouble()\n        val tx = recognizer.translationX\n        val ty = recognizer.translationY\n\n        when (state) {\n            BEGAN -> {\n                gestureDidBegin()\n                beginPoint.set(x, y)\n                lastPoint.set(x, y)\n            }\n            CHANGED -> {\n                val x1 = lastPoint.x\n                val y1 = lastPoint.y\n                val x2 = beginPoint.x + tx\n                val y2 = beginPoint.y + ty\n                lastPoint.set(x2, y2)\n                // Transform the original view's modelview matrix to account for the gesture's change.\n                wwd.engine.moveLookAt(lookAt, wwd.canvasCoordinates(x1, y1), wwd.canvasCoordinates(x2, y2))\n                applyChanges()\n            }\n            ENDED, CANCELLED -> gestureDidEnd()\n            else -> {}\n        }\n    }\n\n    protected open fun handleSecondaryDrag(recognizer: GestureRecognizer) {\n        val state = recognizer.state\n        val tx = recognizer.translationX\n        val ty = recognizer.translationY\n\n        when (state) {\n            BEGAN -> gestureDidBegin()\n            CHANGED -> {\n                // Compute the current translation from screen coordinates to degrees. Use the canvas dimensions as a\n                // metric for converting the gesture translation to a fraction of an angle.\n                val headingDegrees = 180.0 * tx / wwd.canvas.clientWidth\n                val tiltDegrees = 90.0 * ty / wwd.canvas.clientHeight\n\n                // Apply the change in heading and tilt to this view's corresponding properties.\n                lookAt.heading = beginLookAt.heading.plusDegrees(headingDegrees)\n                lookAt.tilt = beginLookAt.tilt.plusDegrees(tiltDegrees)\n                applyChanges()\n            }\n            ENDED, CANCELLED -> gestureDidEnd()\n            else -> {}\n        }\n    }\n\n    protected open fun handlePinch(recognizer: PinchRecognizer) {\n        val state = recognizer.state\n        val scale = recognizer.scaleWithOffset\n\n        when(state) {\n            BEGAN -> gestureDidBegin()\n            CHANGED -> if (scale != 0.0) {\n                // Apply the change in pinch scale to this view's range, relative to the range when the gesture began.\n                lookAt.range = beginLookAt.range / scale\n                applyChanges()\n            }\n            ENDED, CANCELLED -> gestureDidEnd()\n            else -> {}\n        }\n    }\n\n    protected open fun handleRotation(recognizer: RotationRecognizer) {\n        val state = recognizer.state\n        val rotation = recognizer.rotationWithOffset\n\n        when (state) {\n            BEGAN -> {\n                gestureDidBegin()\n                lastRotation = 0.0\n            }\n            CHANGED -> {\n                // Apply the change in gesture rotation to this view's current heading. We apply relative to the\n                // current heading rather than the heading when the gesture began in order to work simultaneously with\n                // pan operations that also modify the current heading.\n                lookAt.heading = lookAt.heading.minusDegrees(rotation - lastRotation)\n                lastRotation = rotation\n                applyChanges()\n            }\n            ENDED, CANCELLED -> gestureDidEnd()\n            else -> {}\n        }\n    }\n\n    protected open fun handleTilt(recognizer: GestureRecognizer) {\n        val state = recognizer.state\n        val ty = recognizer.translationY\n\n        when (state) {\n            BEGAN -> gestureDidBegin()\n            CHANGED -> {\n                // Compute the gesture translation from screen coordinates to degrees. Use the canvas dimensions as a\n                // metric for converting the translation to a fraction of an angle.\n                val tiltDegrees = -90.0 * ty / wwd.canvas.clientHeight\n                // Apply the change in heading and tilt to this view's corresponding properties.\n                lookAt.tilt = beginLookAt.tilt.plusDegrees(tiltDegrees)\n                applyChanges()\n            }\n            ENDED, CANCELLED -> gestureDidEnd()\n            else -> {}\n        }\n    }\n\n    protected open fun handleWheelEvent(event: WheelEvent) {\n        val timeStamp = event.timeStamp.toInt()\n        if (timeStamp - lastWheelEvent > 500) {\n            wwd.engine.cameraAsLookAt(lookAt)\n            lastWheelEvent = timeStamp\n        }\n\n        // Normalize the wheel delta based on the wheel delta mode. This produces a roughly consistent delta across\n        // browsers and input devices.\n        val normalizedDelta = when(event.deltaMode) {\n            WheelEvent.DOM_DELTA_PIXEL -> event.deltaY\n            WheelEvent.DOM_DELTA_LINE -> event.deltaY * 20.0\n            WheelEvent.DOM_DELTA_PAGE -> event.deltaY * 200.0\n            else -> event.deltaY\n        }\n\n        // Compute a zoom scale factor by adding a fraction of the normalized delta to 1. When multiplied by the\n        // view's range, this has the effect of zooming out or zooming in depending on whether the delta is\n        // positive or negative, respectfully.\n        val scale = 1.0 + (normalizedDelta / 1000.0)\n\n        // Apply the scale to this view's properties.\n        lookAt.range *= scale\n        applyChanges()\n    }\n\n    protected open fun applyChanges() {\n        // Update camera view\n        wwd.engine.cameraFromLookAt(lookAt)\n        wwd.requestRedraw()\n    }\n\n    protected open fun gestureDidBegin() {\n        if (activeGestures++ == 0) {\n            wwd.engine.cameraAsLookAt(beginLookAt)\n            lookAt.copy(beginLookAt)\n        }\n    }\n\n    protected open fun gestureDidEnd() {\n        // this should always be the case, but we check anyway\n        if (activeGestures > 0) activeGestures--\n    }\n}","package earth.worldwind.gesture\n\nimport earth.worldwind.gesture.GestureState.*\nimport kotlinx.browser.window\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.MouseEvent\nimport kotlin.math.sqrt\n\n/**\n * A concrete gesture recognizer subclass that looks for touch panning gestures.\n */\nopen class PanRecognizer(\n    target: EventTarget, callback: ((GestureRecognizer)->Unit)? = null\n) : GestureRecognizer(target, callback) {\n    var minNumberOfTouches = 1\n    var maxNumberOfTouches = Int.MAX_VALUE\n    var interpretDistance = 20\n\n    override fun mouseDown(event: MouseEvent) {\n        if (state == POSSIBLE) state = FAILED // touch gestures fail upon receiving a mouse event\n    }\n\n    override fun touchMove(touch: TouchWrapper) {\n        if (state == POSSIBLE) {\n            if (shouldInterpret()) state = if (shouldRecognize()) BEGAN else FAILED\n        } else if (state == BEGAN || state == CHANGED) state = CHANGED\n    }\n\n    override fun touchEnd(touch: TouchWrapper) {\n        if (touchCount == 0) { // last touch ended\n            if (state == POSSIBLE) state = FAILED else if (state == BEGAN || state == CHANGED) state = ENDED\n        }\n    }\n\n    override fun touchCancel(touch: TouchWrapper) {\n        if (touchCount == 0) { // last touch cancelled\n            if (state == POSSIBLE) state = FAILED else if (state == BEGAN || state == CHANGED) state = CANCELLED\n        }\n    }\n\n    override fun prepareToRecognize() {\n        // set translation to zero when the pan begins\n        resetTranslation()\n    }\n\n    protected open fun shouldInterpret(): Boolean {\n        val dx = translationX\n        val dy = translationY\n        val distance = sqrt(dx * dx + dy * dy)\n        return distance > interpretDistance * window.devicePixelRatio // interpret touches when the touch centroid moves far enough\n    }\n\n    protected open fun shouldRecognize() = touchCount in minNumberOfTouches..maxNumberOfTouches\n}","package earth.worldwind.gesture\n\nimport earth.worldwind.gesture.GestureState.*\nimport kotlinx.browser.window\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.MouseEvent\nimport kotlin.math.abs\nimport kotlin.math.sqrt\n\n/**\n * A concrete gesture recognizer subclass that looks for two finger pinch gestures.\n */\nopen class PinchRecognizer(\n    target: EventTarget, callback: ((GestureRecognizer)->Unit)? = null\n) : GestureRecognizer(target, callback) {\n    var referenceDistance = 0.0\n    var interpretThreshold = 20\n    var weight = 0.4\n    val scaleWithOffset get() = scale * offsetScale\n    protected var scale = 1.0\n    protected var offsetScale = 1.0\n    protected val pinchTouches = mutableListOf<TouchWrapper>()\n\n    override fun reset() {\n        super.reset()\n        scale = 1.0\n        offsetScale = 1.0\n        referenceDistance = 0.0\n        pinchTouches.clear()\n    }\n\n    override fun mouseDown(event: MouseEvent) {\n        if (state == POSSIBLE) state = FAILED // touch gestures fail upon receiving a mouse event\n    }\n\n    override fun touchStart(touch: TouchWrapper) {\n        if (pinchTouches.size < 2) {\n            pinchTouches.add(touch)\n            if (pinchTouches.size == 2) {\n                referenceDistance = currentPinchDistance()\n                offsetScale *= scale\n                scale = 1.0\n            }\n        }\n    }\n\n    override fun touchMove(touch: TouchWrapper) {\n        if (pinchTouches.size == 2) {\n            if (state == POSSIBLE) {\n                if (shouldRecognize()) state = BEGAN\n            } else if (state == BEGAN || state == CHANGED) {\n                val distance = currentPinchDistance()\n                val newScale = abs(distance / referenceDistance)\n                val w = weight\n                scale = scale * (1 - w) + newScale * w\n                state = CHANGED\n            }\n        }\n    }\n\n    override fun touchEnd(touch: TouchWrapper) {\n        pinchTouches -= touch\n\n        // Transition to the ended state if this was the last touch.\n        if (touchCount == 0) // last touch ended\n            if (state == POSSIBLE) state = FAILED else if (state == BEGAN || state == CHANGED) state = ENDED\n    }\n\n    override fun touchCancel(touch: TouchWrapper) {\n        pinchTouches -= touch\n\n        // Transition to the cancelled state if this was the last touch.\n        if (touchCount == 0) // last touch ended\n            if (state == POSSIBLE) state = FAILED else if (state == BEGAN || state == CHANGED) state = CANCELLED\n    }\n\n    override fun prepareToRecognize() {\n        referenceDistance = currentPinchDistance()\n        scale = 1.0\n    }\n\n    protected open fun shouldRecognize() =\n        abs(currentPinchDistance() - referenceDistance) > interpretThreshold * window.devicePixelRatio\n\n    protected open fun currentPinchDistance(): Double {\n        val touch0 = pinchTouches[0]\n        val touch1 = pinchTouches[1]\n        val dx = touch0.clientX - touch1.clientX\n        val dy = touch0.clientY - touch1.clientY\n        return sqrt((dx * dx + dy * dy).toDouble())\n    }\n}","package earth.worldwind.gesture\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.gesture.GestureState.*\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.MouseEvent\nimport kotlin.math.abs\nimport kotlin.math.atan2\n\n/**\n * A concrete gesture recognizer subclass that looks for two finger rotation gestures.\n */\nopen class RotationRecognizer(\n    target: EventTarget, callback: ((GestureRecognizer)->Unit)? = null\n) : GestureRecognizer(target, callback) {\n    var referenceAngle = 0.0\n    var interpretThreshold = 20\n    var weight = 0.4\n    val rotationWithOffset get() = rotation + offsetRotation\n    protected var rotation = 0.0\n    protected var offsetRotation = 0.0\n    protected val rotationTouches = mutableListOf<TouchWrapper>()\n\n    override fun reset() {\n        super.reset()\n        rotation = 0.0\n        offsetRotation = 0.0\n        referenceAngle = 0.0\n        rotationTouches.clear()\n    }\n\n    override fun mouseDown(event: MouseEvent) {\n        if (state == POSSIBLE) state = FAILED // touch gestures fail upon receiving a mouse event\n    }\n\n    override fun touchStart(touch: TouchWrapper) {\n        if (rotationTouches.size < 2) {\n            rotationTouches.add(touch)\n            if (rotationTouches.size == 2) {\n                referenceAngle = currentTouchAngle()\n                offsetRotation += rotation\n                rotation = 0.0\n            }\n        }\n    }\n\n    override fun touchMove(touch: TouchWrapper) {\n        if (rotationTouches.size == 2) {\n            if (state == POSSIBLE) {\n                if (shouldRecognize()) state = BEGAN\n            } else if (state == BEGAN || state == CHANGED) {\n                val angle = currentTouchAngle()\n                val newRotation = Angle.normalizeAngle180(angle - referenceAngle)\n                val w = weight\n                rotation = rotation * (1 - w) + newRotation * w\n                state = CHANGED\n            }\n        }\n    }\n\n    override fun touchEnd(touch: TouchWrapper) {\n        rotationTouches -= touch\n\n        // Transition to the ended state if this was the last touch.\n        if (touchCount == 0) // last touch ended\n            if (state == POSSIBLE) state = FAILED else if (state == BEGAN || state == CHANGED) state = ENDED\n    }\n\n    override fun touchCancel(touch: TouchWrapper) {\n        rotationTouches -= touch\n\n        // Transition to the cancelled state if this was the last touch.\n        if (touchCount == 0)\n            if (state == POSSIBLE) state = FAILED else if (state == BEGAN || state == CHANGED) state = CANCELLED\n    }\n\n    override fun prepareToRecognize() {\n        referenceAngle = currentTouchAngle()\n        rotation = 0.0\n    }\n\n    protected open fun shouldRecognize(): Boolean {\n        rotation = Angle.normalizeAngle180(currentTouchAngle() - referenceAngle)\n        return abs(rotation) > interpretThreshold\n    }\n\n    protected open fun currentTouchAngle(): Double {\n        val touch0 = rotationTouches[0]\n        val touch1 = rotationTouches[1]\n        val dx = touch0.clientX - touch1.clientX\n        val dy = touch0.clientY - touch1.clientY\n        return Angle.toDegrees(atan2(dy.toDouble(), dx.toDouble()))\n    }\n}","package earth.worldwind.gesture\n\nimport kotlinx.browser.window\nimport org.w3c.dom.events.EventTarget\nimport kotlin.math.abs\nimport kotlin.math.sqrt\n\n/**\n * A concrete gesture recognizer subclass that looks for two finger tilt gestures.\n */\nopen class TiltRecognizer(\n    target: EventTarget, callback: ((GestureRecognizer)->Unit)? = null\n) : PanRecognizer(target, callback) {\n    var maxTouchDistance = 300\n    var maxTouchDivergence = 50\n\n    companion object {\n        const val LEFT = 1 shl 0\n        const val RIGHT = 1 shl 1\n        const val UP = 1 shl 2\n        const val DOWN = 1 shl 3\n    }\n\n    override fun shouldInterpret(): Boolean {\n        for (i in 0 until  touchCount) {\n            val touch = touch(i)\n            val dx = touch.translationX\n            val dy = touch.translationY\n            val distance = sqrt((dx * dx + dy * dy).toDouble())\n            if (distance > interpretDistance) return true // interpret touches when any touch moves far enough\n        }\n        return false\n    }\n\n    override fun shouldRecognize(): Boolean {\n        if (touchCount < 2) return false\n        val touch0 = touch(0)\n        val touch1 = touch(1)\n        val dx = touch0.clientX - touch1.clientX\n        val dy = touch0.clientY - touch1.clientY\n        val distance = sqrt((dx * dx + dy * dy).toDouble())\n        if (distance > maxTouchDistance * window.devicePixelRatio) return false // touches must be close together\n        val tx = touch0.translationX - touch1.translationX\n        val ty = touch0.translationY - touch1.translationY\n        val divergence = sqrt((tx * tx + ty * ty).toDouble())\n        if (divergence > maxTouchDivergence * window.devicePixelRatio) return false // touches must be moving in a mostly parallel direction\n\n        val verticalMask = UP or DOWN\n        val dirMask0 = touchDirection(touch0) and verticalMask\n        val dirMask1 = touchDirection(touch1) and verticalMask\n        return (dirMask0 and dirMask1) != 0 // touches must move in the same vertical direction\n    }\n\n    protected open fun touchDirection(touch: TouchWrapper): Int {\n        val dx = touch.translationX\n        val dy = touch.translationY\n        var dirMask = 0\n        if (abs(dx) > abs(dy)) {\n            dirMask = dirMask or if (dx < 0) LEFT else 0\n            dirMask = dirMask or if (dx > 0) RIGHT else 0\n        } else {\n            dirMask = dirMask or if (dy < 0) UP else 0\n            dirMask = dirMask or if (dy > 0) DOWN else 0\n        }\n        return dirMask\n    }\n}","package earth.worldwind\n\nimport earth.worldwind.geom.Angle\nimport earth.worldwind.geom.LookAt\nimport kotlinx.browser.window\nimport org.w3c.dom.events.EventListener\nimport org.w3c.dom.events.KeyboardEvent\n\n/**\n * The KeyboardControls module provides keyboard controls for the globe.\n * Note: the canvas must be focusable this can be accomplished by establishing the \"tabindex\"\n * on the canvas element.\n */\nopen class KeyboardControls(\n    /**\n     * The WorldWindow associated with these controls.\n     */\n    protected val wwd: WorldWindow\n) {\n    /**\n     * Enable/disable keyboard events processing\n     */\n    var isEnabled = true\n    /**\n     * The incremental amount to increase or decrease the eye distance (for zoom) each cycle.\n     */\n    var zoomIncrement = 0.01f\n    /**\n     * The scale factor governing the pan speed. Increased values cause faster panning.\n     */\n    var panIncrement = 0.0000000005f\n    /**\n     * The incremental amount to increase or decrease the tilt (in degrees) each cycle.\n     */\n    var tiltIncrement = 0.5\n    /**\n     * The current state of the viewing parameters during an operation as a look at view.\n     */\n    protected val lookAt = LookAt()\n    /**\n     * Is key down?\n     */\n    protected var isKeyDown = false\n    /**\n     * Controls the globe with the keyboard.\n     */\n    protected val handleKeyDown = EventListener { event ->\n        if (!isEnabled || event !is KeyboardEvent) return@EventListener\n\n        isKeyDown = true\n        wwd.engine.cameraAsLookAt(lookAt)\n\n        // TODO: find a way to make this code portable for different keyboard layouts\n        when (event.keyCode) {\n            187, 61 -> { // + key || +/= key\n                handleZoom(\"zoomIn\")\n                event.preventDefault()\n            }\n            189, 173 -> { // - key || _/- key\n                handleZoom(\"zoomOut\")\n                event.preventDefault()\n            }\n            33 -> { // Page Up\n                handleTilt(\"tiltUp\")\n                event.preventDefault()\n            }\n            34 -> { // Page down\n                handleTilt(\"tiltDown\")\n                event.preventDefault()\n            }\n            37 -> { // Left arrow\n                handlePan(\"panLeft\")\n                event.preventDefault()\n            }\n            38 -> { // Up arrow\n                handlePan(\"panUp\")\n                event.preventDefault()\n            }\n            39 -> { // Right arrow\n                handlePan(\"panRight\")\n                event.preventDefault()\n            }\n            40 -> { // Down arrow\n                handlePan(\"panDown\")\n                event.preventDefault()\n            }\n            78 -> { // N key\n                resetHeading()\n                event.preventDefault()\n            }\n            82 -> { // R key\n                resetHeadingAndTilt()\n                event.preventDefault()\n            }\n        }\n    }\n    /**\n     * On keyboard event finished.\n     */\n    protected val handleKeyUp = EventListener { event->\n        if (isKeyDown) {\n            isKeyDown = false\n            event.preventDefault()\n        }\n    }\n\n    init {\n        // The tabIndex must be set for the keyboard controls to work\n        val tabIndex = wwd.canvas.tabIndex\n        if (tabIndex < 0) wwd.canvas.tabIndex = 0\n        // Add keyboard listeners\n        wwd.addEventListener(\"keydown\", handleKeyDown)\n        wwd.addEventListener(\"keyup\", handleKeyUp)\n        // Ensure keyboard controls are operational by setting the focus to the canvas\n        wwd.addEventListener(\"click\", EventListener { if (isEnabled) wwd.canvas.focus() })\n    }\n\n    /**\n     * Reset the view to North up.\n     */\n    protected open fun resetHeading() {\n        lookAt.heading = Angle.ZERO\n        wwd.engine.cameraFromLookAt(lookAt)\n        wwd.requestRedraw()\n    }\n\n    /**\n     * Reset the view to North up and nadir.\n     */\n    protected open fun resetHeadingAndTilt() {\n        lookAt.heading = Angle.ZERO\n        lookAt.tilt = Angle.ZERO\n        wwd.engine.cameraFromLookAt(lookAt)\n        wwd.requestRedraw()\n    }\n\n    /**\n     * This function is called by the timer to perform the Pan operation.\n     */\n    protected open fun handlePan(operation: String) {\n        if (isKeyDown) {\n            var heading = lookAt.heading\n            val distance = panIncrement * lookAt.range\n            when (operation) {\n                \"panDown\" -> heading -= Angle.POS180\n                \"panLeft\" -> heading -= Angle.POS90\n                \"panRight\" -> heading += Angle.POS90\n            }\n            lookAt.position.greatCircleLocation(heading, distance, lookAt.position)\n            wwd.engine.cameraFromLookAt(lookAt)\n            wwd.requestRedraw()\n            window.setTimeout(::handlePan, 50, operation)\n        }\n    }\n\n    /**\n     * This function is called by the timer to perform the Range operation.\n     */\n    protected open fun handleZoom(operation: String) {\n        if (isKeyDown) {\n            if (operation == \"zoomIn\") lookAt.range *= (1 - zoomIncrement)\n            else if (operation == \"zoomOut\") lookAt.range *= (1 + zoomIncrement)\n            wwd.engine.cameraFromLookAt(lookAt)\n            wwd.requestRedraw()\n            window.setTimeout(::handleZoom, 50, operation)\n        }\n    }\n\n    /**\n     * This function is called by the timer to perform the Tilt operation.\n     */\n    protected open fun handleTilt(operation: String) {\n        if (isKeyDown) {\n            if (operation == \"tiltUp\") lookAt.tilt = lookAt.tilt.minusDegrees(tiltIncrement)\n            else if (operation == \"tiltDown\") lookAt.tilt = lookAt.tilt.plusDegrees(tiltIncrement)\n            wwd.engine.cameraFromLookAt(lookAt)\n            wwd.requestRedraw()\n            window.setTimeout(::handleTilt, 50, operation)\n        }\n    }\n}","package earth.worldwind\n\nimport earth.worldwind.frame.Frame\nimport earth.worldwind.geom.Line\nimport earth.worldwind.geom.Vec2\nimport earth.worldwind.geom.Viewport\nimport earth.worldwind.gesture.SelectDragDetector\nimport earth.worldwind.render.RenderResourceCache\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.INFO\nimport earth.worldwind.util.Logger.log\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.kgl.WebKgl\nimport kotlinx.browser.window\nimport kotlinx.coroutines.cancelChildren\nimport kotlinx.coroutines.launch\nimport org.khronos.webgl.WebGLContextAttributes\nimport org.khronos.webgl.WebGLContextEvent\nimport org.khronos.webgl.WebGLRenderingContext\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\nimport kotlin.math.ceil\nimport kotlin.math.floor\nimport kotlin.math.roundToInt\n\n/**\n * Represents a WorldWind window for an HTML canvas.\n */\nopen class WorldWindow(\n    /**\n     * The HTML canvas associated with this WorldWindow.\n     */\n    val canvas: HTMLCanvasElement,\n    /**\n     * Render resource cache capacity in bytes\n     */\n    cacheCapacity: Long = RenderResourceCache.recommendedCapacity()\n) {\n    /**\n     * WebGL context associated with the HTML canvas.\n     */\n    protected val gl = createContext(canvas)\n    /**\n     * Main WorldWindow scope to execute jobs which should be cancelled on GL context lost\n     */\n    val mainScope get() = engine.renderResourceCache.mainScope\n    /**\n     * Main WorldWind engine, containing globe, terrain, renderable layers, camera, viewport and frame rendering logic.\n     */\n    open val engine = WorldWind(WebKgl(gl), RenderResourceCache(cacheCapacity))\n    /**\n     * List of registered event listeners for the specified event type on this WorldWindow's canvas.\n     */\n    protected val eventListeners = mutableMapOf<String, EventListenerEntry>()\n    /**\n     * The controller used to manipulate the globe.\n     */\n    var controller: WorldWindowController = BasicWorldWindowController(this)\n    /**\n     * The controller used to manipulate the globe with the keyboard.\n     */\n    open val keyboardControls = KeyboardControls(this)\n    /**\n     * Renderable selection and drag gestures detector. Assign [SelectDragDetector.callback] to handle events.\n     */\n    open val selectDragDetector = SelectDragDetector(this)\n    /**\n     * The list of callbacks to call immediately before and immediately after performing a redrawn. The callbacks\n     * have two arguments: this WorldWindow and the redraw stage, e.g., <code style='white-space:nowrap'>redrawCallback(worldWindow, stage);</code>.\n     * The stage will be either WorldWind.BEFORE_REDRAW or WorldWind.AFTER_REDRAW indicating whether the\n     * callback has been called either immediately before or immediately after a redrawn, respectively.\n     * Applications may add functions to this array or remove them.\n     */\n    val redrawCallbacks = mutableSetOf<(WorldWindow, RedrawStage)->Unit>()\n    protected val frame = Frame()\n    protected var redrawRequestId = 0\n    protected var isRedrawRequested = false\n\n    protected class EventListenerEntry(val callback: (Event) -> Unit) {\n        val listeners = mutableListOf<EventListener>()\n    }\n\n    init {\n        // Prevent the browser's default actions in response to mouse and touch events, which interfere with\n        // navigation. Register these event listeners  before any others to ensure that they're called last.\n        val preventDefaultListener = EventListener { e -> e.preventDefault() }\n        addEventListener(\"mousedown\", preventDefaultListener)\n        addEventListener(\"touchstart\", preventDefaultListener)\n        addEventListener(\"contextmenu\", preventDefaultListener)\n        addEventListener(\"wheel\", preventDefaultListener)\n\n        // Redirect various UI interactions to the appropriate handler.\n        val onGestureEvent = EventListener { e -> controller.handleEvent(e) }\n        if (window.navigator.maxTouchPoints == 0) {\n            // Prevent the browser's default actions in response to pointer events which interfere with navigation.\n            // This CSS style property is configured here to ensure that it's set for all applications.\n            canvas.style.setProperty(\"touch-action\", \"none\")\n\n            addEventListener(\"pointerdown\", onGestureEvent)\n            window.addEventListener(\"pointermove\", onGestureEvent, false) // get pointermove events outside event target\n            window.addEventListener(\"pointercancel\", onGestureEvent, false) // get pointercancel events outside event target\n            window.addEventListener(\"pointerup\", onGestureEvent, false) // get pointerup events outside event target\n        } else {\n            addEventListener(\"mousedown\", onGestureEvent)\n            window.addEventListener(\"mousemove\", onGestureEvent, false) // get mousemove events outside event target\n            window.addEventListener(\"mouseup\", onGestureEvent, false) // get mouseup events outside event target\n            addEventListener(\"touchstart\", onGestureEvent)\n            addEventListener(\"touchmove\", onGestureEvent)\n            addEventListener(\"touchend\", onGestureEvent)\n            addEventListener(\"touchcancel\", onGestureEvent)\n        }\n        addEventListener(\"wheel\", onGestureEvent)\n\n        // Set up to handle WebGL context events.\n        canvas.addEventListener(\"webglcontextlost\",\n            { event -> event as WebGLContextEvent\n                log(INFO, \"WebGL context event: \" + event.statusMessage)\n                // Inform WebGL that we handle context restoration, enabling the context restored event to be delivered.\n                event.preventDefault()\n                // Notify the draw context that the WebGL rendering context has been lost.\n                contextLost()\n            }, false)\n        canvas.addEventListener(\"webglcontextrestored\",\n            { event -> event as WebGLContextEvent\n                log(INFO, \"WebGL context event: \" + event.statusMessage)\n                // Notify the draw context that the WebGL rendering context has been restored.\n                contextRestored()\n            }, false)\n\n        // Set up WebGL context and start rendering to the WebGL context in an animation frame loop.\n        this.contextRestored()\n    }\n\n    /**\n     * Registers an event listener for the specified event type on this WorldWindow's canvas. This function\n     * delegates the processing of events to the WorldWindow's canvas. For details on this function and its\n     * arguments, see the W3C [org.w3c.dom.events.EventTarget] documentation.\n     * @see <a href=\"https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget\">EventTarget</a>\n     *\n     * When an event occurs, this calls the registered event listeners in order of reverse registration.\n     *\n     * @param type The event type to listen for.\n     * @param listener The [EventListener] to call when the event occurs.\n     */\n    fun addEventListener(type: String, listener: EventListener) {\n        var entry = eventListeners[type]\n        if (entry == null) {\n            entry = EventListenerEntry { event ->\n                event.asDynamic().worldWindow = this@WorldWindow\n                // calls listeners in reverse registration order\n                entry?.listeners?.forEach{ l -> l.handleEvent(event) }\n            }.also { eventListeners[type] = it }\n        }\n\n        if (!entry.listeners.contains(listener)) { // suppress duplicate listeners\n            entry.listeners.add(0, listener) // insert the listener at the beginning of the list\n            // first listener added, add the event listener callback\n            if (entry.listeners.size == 1) canvas.addEventListener(type, entry.callback, false)\n        }\n    }\n\n    /**\n     * Removes an event listener for the specified event type from this WorldWindow's canvas. The listener must be\n     * the same object passed to addEventListener. Calling removeEventListener with arguments that do not identify a\n     * currently registered listener has no effect.\n     *\n     * @param type Indicates the event type the listener registered for.\n     * @param listener The listener to remove.\n     */\n    fun removeEventListener(type: String, listener: EventListener) {\n        val entry = eventListeners[type] ?: return // no entry for the specified type\n        if (entry.listeners.remove(listener) && entry.listeners.isEmpty()) {\n            canvas.removeEventListener(type, entry.callback, false)\n        }\n    }\n\n    /**\n     * Causes this WorldWindow to redraw itself at the next available opportunity. The redrawn occurs on the main\n     * thread at a time of the browser's discretion. Applications should call redraw after changing the World\n     * Window's state, but should not expect that change to be reflected on screen immediately after this function\n     * returns. This is the preferred method for requesting a redrawn of the WorldWindow.\n     */\n    fun requestRedraw() { isRedrawRequested = true } // redraw during the next animation frame\n\n    /**\n     * Converts window coordinates to coordinates relative to this WorldWindow's canvas.\n     * @param x The X coordinate to convert.\n     * @param y The Y coordinate to convert.\n     * @returns The converted coordinates.\n     */\n    fun canvasCoordinates(x: Number, y: Number): Vec2 {\n        val bbox = canvas.getBoundingClientRect()\n        val xc = x.toDouble() - (bbox.left + canvas.clientLeft) // * canvas.width / bbox.width\n        val yc = y.toDouble() - (bbox.top + canvas.clientTop) // * canvas.height / bbox.height\n        return Vec2(xc, yc)\n    }\n\n    /**\n     * Requests the WorldWind objects displayed at a specified screen-coordinate point.\n     *\n     * If the point intersects the terrain, the returned list contains an object identifying the associated geographic\n     * position. This returns an empty list when nothing in the WorldWind scene intersects the specified point.\n     *\n     * @param pickPoint The point to examine in this WorldWindow's screen coordinates.\n     * @returns A list of picked WorldWind objects at the specified pick point.\n     */\n    fun pick(pickPoint: Vec2) = pickShapesInRegion(pickPoint.x, pickPoint.y)\n\n    /**\n     * Requests the WorldWind objects displayed within a specified screen-coordinate region. This returns all\n     * objects that intersect the specified region, regardless of whether an object is actually visible, and\n     * marks objects that are visible as on top.\n     *\n     * @param x      the X coordinate relative to this WorldWindow's canvas.\n     * @param y      the Y coordinate relative to this WorldWindow's canvas.\n     * @param width  the width in canvas pixels\n     * @param height the height in canvas pixels\n     * @param pickCenter picks top shape and terrain in rectangle center as priority\n     *\n     * @returns A list of visible WorldWind objects within the specified region.\n     */\n    fun pickShapesInRegion(\n        x: Double, y: Double, width: Double = 0.0, height: Double = 0.0, pickCenter: Boolean = true\n    ): PickedObjectList {\n        // Allocate a list in which to collect and return the picked objects.\n        val pickedObjects = PickedObjectList()\n\n        // Nothing can be picked if viewport is undefined.\n        val viewport = engine.viewport\n        if (viewport.isEmpty) return pickedObjects\n\n        // Determine pick viewport\n        val pickViewport = if (width != 0.0 && height != 0.0) Viewport(\n            floor(x).toInt(), viewport.height - ceil(y + height).toInt(), ceil(width).toInt(), ceil(height).toInt()\n        ) else Viewport(x.roundToInt() - 1, viewport.height - y.roundToInt() - 1, 3, 3)\n        if (!pickViewport.intersect(viewport)) return pickedObjects\n\n        // Prepare pick frame\n        frame.pickedObjects = pickedObjects\n        frame.pickViewport = pickViewport\n        if (pickCenter) {\n            // Compute the pick point in OpenGL screen coordinates, rounding to the nearest whole pixel. Nothing can be picked\n            // if pick point is outside the WorldWindow's viewport.\n            val px = pickViewport.x + pickViewport.width / 2.0\n            val py = pickViewport.y + pickViewport.height / 2.0\n            if(viewport.contains(px, py)) {\n                val pickRay = Line()\n                if (engine.rayThroughScreenPoint(px, viewport.height - py, pickRay)) {\n                    frame.pickPoint = Vec2(px, py)\n                    frame.pickRay = pickRay\n                }\n            }\n        }\n        frame.isPickMode = true\n        redrawFrame()\n\n        return pickedObjects\n    }\n\n    /**\n     * Notifies this draw context that the current WebGL rendering context has been lost. This function removes all\n     * cached WebGL resources and resets all properties tracking the current WebGL state.\n     */\n    protected open fun contextLost() {\n        // Stop the rendering animation frame loop, resuming only if the WebGL context is restored.\n        window.cancelAnimationFrame(redrawRequestId)\n\n        // Cancel all async jobs but keep scope reusable\n        mainScope.coroutineContext.cancelChildren()\n\n        // Remove all cached WebGL resources, which are now invalid.\n        engine.reset()\n    }\n\n    /**\n     * Notifies this draw context that the current WebGL rendering context has been restored. This function prepares\n     * this draw context to resume rendering.\n     */\n    protected open fun contextRestored() {\n        // Remove all cached resources. This cache should be already cleared when the context was lost, but\n        // asynchronous load operations that complete between context lost and context restored may populate the cache\n        // with invalid entries.\n        engine.reset()\n\n        // Specify the default WorldWind OpenGL state.\n        engine.setupDrawContext()\n\n        // Store current screen density factor\n        engine.densityFactor = window.devicePixelRatio.toFloat()\n\n        // Enable WebGL depth texture extension to be able to use GL_DEPTH_COMPONENT texture format\n        gl.getExtension(\"WEBGL_depth_texture\")\n\n        // Subscribe on events from WorldWind's global event bus.\n        mainScope.launch {\n            WorldWind.events.collect {\n                when (it) {\n                    is WorldWind.Event.RequestRedraw -> requestRedraw()\n                    is WorldWind.Event.UnmarkResourceAbsent -> {\n                        engine.renderResourceCache.absentResourceList.unmarkResourceAbsent(it.resourceId)\n                    }\n                }\n            }\n        }\n\n        // Request redraw at least once.\n        requestRedraw()\n\n        // Resume the rendering animation frame loop until the WebGL context is lost.\n        animationFrameLoop()\n    }\n\n    protected open fun animationFrameLoop() {\n        // Render to the WebGL context as needed.\n        redrawIfNeeded()\n\n        // Continue the animation frame loop until the WebGL context is lost.\n        redrawRequestId = window.requestAnimationFrame { animationFrameLoop() }\n    }\n\n    protected open fun redrawIfNeeded() {\n        // Check if the drawing buffer needs to resize to match its screen size, which requires a redrawn.\n        resize()\n\n        // Redraw the WebGL drawing buffer only when necessary.\n        if (!isRedrawRequested) return\n        isRedrawRequested = false\n        redrawFrame()\n    }\n\n    protected open fun redrawFrame() {\n        val isPickMode = frame.isPickMode\n        try {\n            // Prepare to redraw and notify redraw callbacks that a redrawn is about to occur.\n            if(!isPickMode) callRedrawCallbacks(RedrawStage.BEFORE_REDRAW)\n            // Render frame. Propagate redraw requests submitted during rendering.\n            if (engine.renderFrame(frame) || isPickMode) requestRedraw()\n            // Redraw the WebGL drawing buffer.\n            engine.drawFrame(frame)\n        } catch (e: Exception) {\n            logMessage(\n                ERROR, \"WorldWindow\", \"drawFrame\", \"Exception occurred during redrawing.\\n$e\"\n            )\n        } finally {\n            // Recycle each frame to be reused\n            frame.recycle()\n            // Notify redraw callbacks that a redrawn has completed.\n            if(!isPickMode) callRedrawCallbacks(RedrawStage.AFTER_REDRAW)\n        }\n    }\n\n    protected open fun resize() {\n        // Check if canvas size is changed\n        val width = (gl.canvas.clientWidth * engine.densityFactor).roundToInt()\n        val height = (gl.canvas.clientHeight * engine.densityFactor).roundToInt()\n\n        if (gl.canvas.width != width || gl.canvas.height != height || engine.viewport.isEmpty) {\n            // Make the canvas drawing buffer size match its screen size.\n            gl.canvas.width = width\n            gl.canvas.height = height\n\n            // Set the WebGL viewport to match the canvas drawing buffer size.\n            engine.setupViewport(gl.drawingBufferWidth, gl.drawingBufferHeight)\n\n            // Cause this WorldWindow to redraw with the new size.\n            requestRedraw()\n        }\n    }\n\n    protected open fun callRedrawCallbacks(stage: RedrawStage) = redrawCallbacks.forEach {\n        try {\n            it(this, stage)\n        } catch (e: Exception) {\n            // Keep going. Execute the rest of the callbacks.\n            log(ERROR, \"Exception calling redraw callback.\\n$e\")\n        }\n    }\n\n    companion object {\n        /**\n         * Create the WebGL context associated with the HTML canvas.\n         */\n        protected fun createContext(canvas: HTMLCanvasElement): WebGLRenderingContext {\n            // Request a WebGL context with antialiasing is disabled. Antialiasing causes gaps to appear at the edges of\n            // terrain tiles.\n            val glAttrs = WebGLContextAttributes(antialias = false)\n            val context = canvas.getContext(\"webgl\", glAttrs)\n                ?: canvas.getContext(\"experimental-webgl\", glAttrs)\n            require(context is WebGLRenderingContext) {\n                logMessage(ERROR, \"WorldWindow\", \"createContext\", \"webglNotSupported\")\n            }\n            return context\n        }\n    }\n\n    enum class RedrawStage {\n        /**\n         * Indicates that a redrawn callback has been called immediately after a redrawn.\n         */\n        AFTER_REDRAW,\n        /**\n         * Indicates that a redrawn callback has been called immediately before a redrawn.\n         */\n        BEFORE_REDRAW;\n    }\n}","package earth.worldwind.render\n\nimport dev.icerock.moko.resources.FileResource\nimport earth.worldwind.WorldWind\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.render.image.*\nimport earth.worldwind.util.AbsentResourceList\nimport earth.worldwind.util.Logger.DEBUG\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.WARN\nimport earth.worldwind.util.Logger.isLoggable\nimport earth.worldwind.util.Logger.log\nimport earth.worldwind.util.LruMemoryCache\nimport earth.worldwind.util.kgl.*\nimport kotlinx.browser.window\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.launch\nimport org.w3c.dom.Image\nimport org.w3c.dom.url.URL\nimport kotlin.time.Duration.Companion.seconds\n\nactual open class RenderResourceCache(\n    capacity: Long = recommendedCapacity(), lowWater: Long = (capacity * 0.75).toLong()\n) : LruMemoryCache<Any, RenderResource>(capacity, lowWater) {\n    companion object {\n        fun recommendedCapacity(): Long = (window.navigator.asDynamic().deviceMemory as? Number)\n            ?.let { it.toLong() * 1024 * 1024 * 1024 / 16 * 3 } ?: (512L * 1024 * 1024) // 512 Mb as backup\n    }\n\n    override var age = 0L // Manually incrementable cache age\n    var urlRetrievalQueueSize = 16\n    /**\n     * Main render resource retrieval scope\n     */\n    actual val mainScope = MainScope()\n    /**\n     * Identifies requested resources that whose retrieval failed.\n     */\n    actual val absentResourceList = AbsentResourceList<Int>(3, 60.seconds)\n    /**\n     * List of retrievals currently in progress.\n     */\n    protected val currentRetrievals = mutableSetOf<ImageSource>()\n\n    override fun clear() {\n        entries.clear() // the cache entries are invalid; clear but don't call entryRemoved\n        currentRetrievals.clear()\n        absentResourceList.clear()\n        usedCapacity = 0\n        age = 0\n    }\n\n    actual fun incAge() { ++age }\n\n    actual fun releaseEvictedResources(dc: DrawContext) {\n        // TODO Implement evicted resources management\n    }\n\n    actual fun retrieveTexture(imageSource: ImageSource, options: ImageOptions?): Texture? {\n        // Following type of image sources is already in memory, so a texture may be created and put into the cache immediately.\n        if (imageSource.isImage) {\n            val texture = createTexture(options, imageSource.asImage())\n            put(imageSource, texture, texture.byteCount)\n            return texture\n        }\n\n        // Ignore retrieval of already requested resources or marked as absent\n        if (currentRetrievals.size >= urlRetrievalQueueSize || currentRetrievals.contains(imageSource)\n            || absentResourceList.isResourceAbsent(imageSource.hashCode())) return null\n\n        // Retrieve remote image source\n        when {\n            imageSource.isResource -> retrieveRemoteImage(imageSource, options, imageSource.asResource().fileUrl)\n            imageSource.isUrl -> retrieveRemoteImage(imageSource, options, imageSource.asUrl())\n        }\n\n        return  null\n    }\n\n    actual fun retrieveTextFile(fileResource: FileResource, result: (String) -> Unit) {\n        mainScope.launch {\n            try {\n                result(fileResource.getText())\n            } catch (e: Throwable) {\n                log(ERROR, \"Resource retrieval failed ($fileResource): ${e.message}\")\n            }\n        }\n    }\n\n    protected open fun retrieveRemoteImage(imageSource: ImageSource, options: ImageOptions?, src: String) {\n        val image = Image()\n        var postprocessorExecuted = false\n        image.onload = {\n            // Check if image postprocessor is assigned and not yet executed.\n            // OnLoad event can be called second time by reassigning image.src inside postprocessor.\n            val postprocessor = imageSource.imagePostprocessor\n            if (postprocessor != null && !postprocessorExecuted) {\n                postprocessorExecuted = true // Prevent cyclic processing due to src modification inside postprocessing.\n                mainScope.launch { postprocessor.process(image) } // Apply image transformation.\n            } else retrievalSucceeded(imageSource, options, image) // Consume original or processed image as retrieved\n            if (postprocessor != null) URL.revokeObjectURL(image.src) // Revoke URL possibly created in postprocessor\n        }\n        image.onerror = { _, _, _, _, _ -> retrievalFailed(imageSource) }\n        currentRetrievals += imageSource\n        image.crossOrigin = \"anonymous\"\n        image.src = src\n    }\n\n    protected open fun createTexture(options: ImageOptions?, image: Image): Texture {\n        // Process initialWidth and initialHeight if specified\n        if (image.width == 0 || image.height == 0) {\n            // If source image has dimensions, then resize it proportionally to fit initial size restrictions\n            val ratioW = if (options != null && options.initialWidth > 0) image.width / options.initialWidth else 0\n            val ratioH = if (options != null && options.initialHeight > 0) image.height / options.initialHeight else 0\n            val ratio = if (ratioH > ratioW) ratioH else ratioW\n            if (ratio > 0) {\n                image.width = image.width / ratio\n                image.height = image.height / ratio\n            }\n        } else if (options != null && options.initialWidth > 0 && options.initialHeight > 0) {\n            // If source image has no dimensions (e.g. SVG image), then set initial size of image\n            image.width = options.initialWidth\n            image.height = options.initialHeight\n        }\n\n        // Create image texture and apply texture parameters\n        val texture = ImageTexture(image)\n        if (options?.resamplingMode == ResamplingMode.NEAREST_NEIGHBOR) {\n            texture.setTexParameter(GL_TEXTURE_MIN_FILTER, GL_NEAREST)\n            texture.setTexParameter(GL_TEXTURE_MAG_FILTER, GL_NEAREST)\n        }\n        if (options?.wrapMode == WrapMode.REPEAT) {\n            texture.setTexParameter(GL_TEXTURE_WRAP_S, GL_REPEAT)\n            texture.setTexParameter(GL_TEXTURE_WRAP_T, GL_REPEAT)\n        }\n        return texture\n    }\n\n    protected open fun retrievalSucceeded(source: ImageSource, options: ImageOptions?, image: Image) {\n        // Create texture and put it into cache.\n        val texture = createTexture(options, image)\n        put(source, texture, texture.byteCount)\n        currentRetrievals -= source\n        absentResourceList.unmarkResourceAbsent(source.hashCode())\n        WorldWind.requestRedraw()\n        if (isLoggable(DEBUG)) log(DEBUG, \"Image retrieval succeeded: $source\")\n    }\n\n    protected open fun retrievalFailed(source: ImageSource) {\n        currentRetrievals -= source\n        absentResourceList.markResourceAbsent(source.hashCode())\n        log(WARN, \"Image retrieval failed: $source\")\n    }\n}","package earth.worldwind\n\nimport earth.worldwind.gesture.GestureListener\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\n\n/**\n * This class provides a base window controller with required properties and methods which subclasses may\n * inherit from to create custom window controllers for controlling the globe via user interaction.\n */\nabstract class WorldWindowController(\n    /**\n     * The WorldWindow associated with this controller.\n     */\n    protected val wwd: WorldWindow\n): EventListener, GestureListener {\n    protected val gestureEventListeners = mutableListOf<EventListener>()\n\n    override fun handleEvent(event: Event) {\n        for (eventListener in gestureEventListeners) {\n            eventListener.handleEvent(event)\n            if (event.defaultPrevented) break\n        }\n    }\n\n    /**\n     * Registers a gesture event listener on this controller. Registering event listeners using this function\n     * enables applications to prevent the controller's default behavior.\n     *\n     * When an event occurs, application event listeners are called before WorldWindowController event listeners.\n     *\n     * @param listener The function to call when the event occurs.\n     */\n    protected open fun addGestureListener(listener: EventListener) { gestureEventListeners += listener }\n\n    /**\n     * Removes a gesture event listener from this controller. The listener must be the same object passed to\n     * addGestureListener. Calling removeGestureListener with arguments that do not identify a currently registered\n     * listener has no effect.\n     *\n     * @param listener The listener to remove. Must be the same object passed to addGestureListener.\n     */\n    protected open fun removeGestureListener(listener: EventListener) { gestureEventListeners -= listener }\n}","package earth.worldwind.gesture\n\nimport earth.worldwind.gesture.GestureState.*\nimport kotlinx.browser.window\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.MouseEvent\nimport kotlin.math.sqrt\n\n/**\n * A concrete gesture recognizer subclass that looks for single or multiple mouse clicks.\n */\nopen class ClickRecognizer(\n    target: EventTarget, callback: ((GestureRecognizer)->Unit)? = null\n) : GestureRecognizer(target, callback) {\n    var numberOfClicks = 1\n    var button: Short = 0\n    var maxMouseMovement = 5\n    var maxClickDuration = 500\n    var maxClickInterval = 400\n    protected val clicks = mutableListOf<Click>()\n    protected var timeout: Int? = null\n\n    override fun reset() {\n        super.reset()\n        clicks.clear()\n        cancelFailAfterDelay()\n    }\n\n    override fun mouseDown(event: MouseEvent) {\n        if (state != POSSIBLE) return\n        if (button != event.button) state = FAILED else {\n            clicks.add(Click(clientX, clientY))\n            failAfterDelay(maxClickDuration) // fail if the click is down too long\n        }\n    }\n\n    override fun mouseMove(event: MouseEvent) {\n        if (state != POSSIBLE) return\n        val dx = translationX\n        val dy = translationY\n        val distance = sqrt(dx * dx + dy * dy)\n        if (distance > maxMouseMovement * window.devicePixelRatio) state = FAILED\n    }\n\n    override fun mouseUp(event: MouseEvent) {\n        if (state != POSSIBLE) return\n        if (mouseButtonMask != 0) return // wait until the last button is up\n        if (clicks.size == numberOfClicks) {\n            clientX = clicks[0].clientX\n            clientY = clicks[0].clientY\n            state = RECOGNIZED\n        } else failAfterDelay(maxClickInterval) // fail if the interval between clicks is too long\n    }\n\n    override fun touchStart(touch: TouchWrapper) {\n        if (state != POSSIBLE) return\n        state = FAILED // mouse gestures fail upon receiving a touch event\n    }\n\n    protected open fun failAfterDelay(delay: Int) {\n        timeout?.let { window.clearTimeout(it) }\n        timeout = window.setTimeout({\n            timeout = null\n            if (state == POSSIBLE) state = FAILED // fail if we haven't already reached a terminal state\n        }, delay)\n    }\n\n    protected open fun cancelFailAfterDelay() { timeout?.let { window.clearTimeout(it) }.also { timeout = null } }\n}","package earth.worldwind.gesture\n\nimport earth.worldwind.gesture.GestureState.*\nimport kotlinx.browser.window\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.MouseEvent\nimport kotlin.math.sqrt\n\n/**\n * A concrete gesture recognizer subclass that looks for mouse drag gestures.\n */\nopen class DragRecognizer(\n    target: EventTarget, callback: ((GestureRecognizer)->Unit)? = null\n) : GestureRecognizer(target, callback) {\n    var button: Short = 0\n    var interpretDistance = 5\n\n    override fun mouseMove(event: MouseEvent) {\n        if (state == POSSIBLE) {\n            if (shouldInterpret()) {\n                state = if (shouldRecognize()) {\n                    resetTranslation() // set translation to zero when the drag begins\n                    BEGAN\n                } else {\n                    FAILED\n                }\n            }\n        } else if (state == BEGAN || state == CHANGED) state = CHANGED\n    }\n\n    override fun mouseUp(event: MouseEvent) {\n        if (mouseButtonMask == 0) { // last button up\n            if (state == POSSIBLE) state = FAILED else if (state == BEGAN || state == CHANGED) state = ENDED\n        }\n    }\n\n    override fun touchStart(touch: TouchWrapper) {\n        if (state == POSSIBLE) state = FAILED // mouse gestures fail upon receiving a touch event\n    }\n\n    protected open fun shouldInterpret(): Boolean {\n        val dx = translationX\n        val dy = translationY\n        val distance = sqrt(dx * dx + dy * dy)\n        return distance > interpretDistance * window.devicePixelRatio // interpret mouse movement when the cursor moves far enough\n    }\n\n    /**\n     * @return true when the specified button is the only button down\n     */\n    protected open fun shouldRecognize() = 1 shl button.toInt() == mouseButtonMask\n}","package earth.worldwind.gesture\n\nimport earth.worldwind.gesture.GestureState.*\nimport earth.worldwind.util.Logger\nimport org.w3c.dom.Touch\nimport org.w3c.dom.TouchEvent\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.pointerevents.PointerEvent\n\n/**\n * Gesture recognizers translate user input event streams into higher level actions. A gesture\n * recognizer is associated with an event target, which dispatches mouse and keyboard events to the gesture\n * recognizer. When a gesture recognizer has received enough information from the event stream to interpret the\n * action, it calls its callback functions. Callback functions may be specified at construction or added to the\n * [gestureCallbacks] list after construction.\n */\nabstract class GestureRecognizer(\n    /**\n     * Indicates the document element this gesture recognizer observes for mouse and touch events.\n     */\n    val target: EventTarget,\n    /**\n     * An optional function to call when this gesture is recognized. If non-null, the\n     * function is called when this gesture is recognized, and is passed a single argument: this gesture recognizer,\n     * e.g., <code>gestureCallback(recognizer)</code>.\n     */\n    callback: ((GestureRecognizer)->Unit)?\n): EventListener {\n    /**\n     * Indicates whether this gesture recognizer is enabled. When false, this gesture recognizer will ignore any events\n     * dispatched by its target.\n     */\n    var isEnabled = true\n    /**\n     * Indicates this gesture's current state. Possible values are [POSSIBLE], [FAILED], [RECOGNIZED], [BEGAN],\n     * [CHANGED], [CANCELLED] and [ENDED].\n     */\n    var state = POSSIBLE\n        set(newState) {\n            nextState = null // clear any pending state transition\n            when (newState) {\n                POSSIBLE -> field = newState\n                FAILED -> {\n                    field = newState\n                    updateRecognizersWaitingForFailure()\n                    resetIfEventsEnded()\n                }\n                RECOGNIZED -> {\n                    if (tryToRecognize(newState)) { // may prevent the transition to Recognized\n                        field = newState\n                        prepareToRecognize()\n                        notifyListeners()\n                        callGestureCallbacks()\n                        resetIfEventsEnded()\n                    }\n                }\n                BEGAN -> {\n                    if (tryToRecognize(newState)) { // may prevent the transition to Began\n                        field = newState\n                        prepareToRecognize()\n                        notifyListeners()\n                        callGestureCallbacks()\n                    }\n                }\n                CHANGED -> {\n                    field = newState\n                    notifyListeners()\n                    callGestureCallbacks()\n                }\n                CANCELLED -> {\n                    field = newState\n                    notifyListeners()\n                    callGestureCallbacks()\n                    resetIfEventsEnded()\n                }\n                ENDED -> {\n                    field = newState\n                    notifyListeners()\n                    callGestureCallbacks()\n                    resetIfEventsEnded()\n                }\n            }\n        }\n    /**\n     * Indicates the X coordinate of this gesture.\n     */\n    var clientX = 0\n    /**\n     * Returns the Y coordinate of this gesture.\n     */\n    var clientY = 0\n    /**\n     * Indicates this gesture's translation along the X axis since the gesture started.\n     */\n    var translationX = 0.0\n        private set\n    /**\n     * Indicates this gesture's translation along the Y axis since the gesture started.\n     */\n    var translationY = 0.0\n        private set\n    /**\n     * Indicates the currently pressed mouse buttons as a bitmask. A value of 0 indicates that no buttons are\n     * pressed. A nonzero value indicates that one or more buttons are pressed as follows: bit 1 indicates the\n     * primary button, bit 2 indicates the auxiliary button, bit 3 indicates the secondary button.\n     */\n    var mouseButtonMask = 0\n        private set\n    /**\n     * Indicates the number of active touches.\n     */\n    val touchCount get() = touches.size\n    /**\n     * The list of functions to call when this gesture is recognized. The functions have a single argument:\n     * this gesture recognizer, e.g., <code>gestureCallback(recognizer)</code>. Applications may\n     * add functions to this array or remove them.\n     */\n    val gestureCallbacks = mutableListOf<(GestureRecognizer)->Unit>()\n    private var nextState: GestureState? = null\n    private var clientStartX = 0\n    private var clientStartY = 0\n    private var translationWeight = 0.4\n    private val touches = mutableListOf<TouchWrapper>()\n    private var touchCentroidShiftX = 0\n    private var touchCentroidShiftY = 0\n    private val canRecognizeWith = mutableSetOf<GestureRecognizer>()\n    private val requiresFailureOf = mutableSetOf<GestureRecognizer>()\n    private val requiredToFailBy = mutableSetOf<GestureRecognizer>()\n    private val listenerList = mutableListOf<GestureListener>()\n\n    companion object {\n        val allRecognizers = mutableListOf<GestureRecognizer>()\n    }\n\n    init {\n        // Add the optional gesture callback.\n        callback?.let { gestureCallbacks += it }\n\n        // Add this recognizer to the list of all recognizers.\n        allRecognizers += this\n    }\n\n    /**\n     * Registers a gesture state listener on this GestureRecognizer. Registering state listeners using this function\n     * enables applications to receive notifications of gesture recognition.\n     *\n     * @param listener The function to call when the event occurs.\n     */\n    fun addListener(listener: GestureListener) { listenerList += listener }\n\n    /**\n     * Removes a gesture state listener from this GestureRecognizer. The listener must be the same object passed to\n     * addListener. Calling removeListener with arguments that do not identify a currently registered\n     * listener has no effect.\n     *\n     * @param listener The listener to remove. Must be the same object passed to addListener.\n     */\n    fun removeListener(listener: GestureListener) { listenerList -= listener }\n\n    fun touch(index: Int): TouchWrapper {\n        require(index in touches.indices) {\n            Logger.logMessage(Logger.ERROR, \"GestureRecognizer\", \"touch\", \"indexOutOfRange\")\n        }\n        return touches[index]\n    }\n\n    fun recognizeSimultaneouslyWith(recognizer: GestureRecognizer) {\n        canRecognizeWith.add(recognizer)\n        recognizer.canRecognizeWith.add(this)\n    }\n\n    fun canRecognizeSimultaneouslyWith(recognizer: GestureRecognizer) = canRecognizeWith.contains(recognizer)\n\n    fun requireRecognizerToFail(recognizer: GestureRecognizer) {\n        requiresFailureOf.add(recognizer)\n        recognizer.requiredToFailBy.add(this)\n    }\n\n    fun requiresRecognizerToFail(recognizer: GestureRecognizer) = requiresFailureOf.contains(recognizer)\n\n    fun requiredToFailByRecognizer(recognizer: GestureRecognizer) = requiredToFailBy.contains(recognizer)\n\n    open fun reset() {\n        state = POSSIBLE\n        nextState = null\n        clientX = 0\n        clientY = 0\n        clientStartX = 0\n        clientStartY = 0\n        translationX = 0.0\n        translationY = 0.0\n        mouseButtonMask = 0\n        touches.clear()\n        touchCentroidShiftX = 0\n        touchCentroidShiftY = 0\n    }\n\n    protected open fun resetTranslation() {\n        clientStartX = clientX\n        clientStartY = clientY\n        translationX = 0.0\n        translationY = 0.0\n        touchCentroidShiftX = 0\n        touchCentroidShiftY = 0\n    }\n\n    protected open fun prepareToRecognize() {}\n\n    protected open fun mouseDown(event: MouseEvent) {}\n    protected open fun mouseMove(event: MouseEvent) {}\n    protected open fun mouseUp(event: MouseEvent) {}\n\n    protected open fun touchStart(touch: TouchWrapper) {}\n    protected open fun touchMove(touch: TouchWrapper) {}\n    protected open fun touchCancel(touch: TouchWrapper) {}\n    protected open fun touchEnd(touch: TouchWrapper) {}\n    \n    protected open fun updateRecognizersWaitingForFailure() {\n        // Transition gestures that are waiting for this gesture to transition to Failed.\n        requiredToFailBy.forEach { r -> r.nextState?.let { r.state = it } }\n    }\n\n    protected open fun tryToRecognize(newState: GestureState): Boolean {\n        // Transition to Failed if another gesture can prevent this gesture from recognizing.\n        if (allRecognizers.any { r -> canBePreventedByRecognizer(r) }) {\n            state = FAILED\n            return false\n        }\n\n        // Delay the transition to Recognized/Began if this gesture is waiting for a gesture in the Possible state.\n        if (allRecognizers.any { r -> isWaitingForRecognizerToFail(r) }) {\n            nextState = newState\n            return false\n        }\n\n        // Transition to Failed state all other gestures that can be prevented from recognizing by this gesture.\n        allRecognizers.filter { r -> canPreventRecognizer(r) }.forEach { r -> r.state = FAILED }\n        return true\n    }\n\n    protected open fun canPreventRecognizer(that: GestureRecognizer) =\n        this != that && target == that.target && that.state == POSSIBLE &&\n                (requiredToFailByRecognizer(that) || !canRecognizeSimultaneouslyWith(that))\n\n    protected open fun canBePreventedByRecognizer(that: GestureRecognizer) =\n        this != that && target == that.target && that.state == RECOGNIZED &&\n                (requiresRecognizerToFail(that) || !canRecognizeSimultaneouslyWith(that))\n\n    protected open fun isWaitingForRecognizerToFail(that: GestureRecognizer) =\n        this != that && target == that.target && that.state == POSSIBLE && requiresRecognizerToFail(that)\n\n    protected open fun notifyListeners() = listenerList.forEach { l -> l.gestureStateChanged(this) }\n\n    protected open fun callGestureCallbacks() = gestureCallbacks.forEach { c -> c(this) }\n\n    override fun handleEvent(event: Event) {\n        if (!isEnabled) return\n\n        if (event.defaultPrevented && state == POSSIBLE) return // ignore cancelled events while in the Possible state\n\n        try {\n            when {\n                event.type == \"mousedown\" && event is MouseEvent -> handleMouseDown(event)\n                event.type == \"mousemove\" && event is MouseEvent -> handleMouseMove(event)\n                event.type == \"mouseup\" && event is MouseEvent -> handleMouseUp(event)\n                event.type == \"touchstart\" && event is TouchEvent -> for (i in 0 until event.changedTouches.length)\n                    handleTouchStart(wrapTouch(event.changedTouches.item(i)!!))\n                event.type == \"touchmove\" && event is TouchEvent -> for (i in 0 until event.changedTouches.length)\n                    handleTouchMove(wrapTouch(event.changedTouches.item(i)!!))\n                event.type == \"touchcancel\" && event is TouchEvent -> for (i in 0 until event.changedTouches.length)\n                    handleTouchCancel(wrapTouch(event.changedTouches.item(i)!!))\n                event.type == \"touchend\" && event is TouchEvent -> for (i in 0 until event.changedTouches.length)\n                    handleTouchEnd(wrapTouch(event.changedTouches.item(i)!!))\n                event.type == \"pointerdown\" && event is PointerEvent && event.pointerType == \"mouse\" ->\n                    handleMouseDown(event)\n                event.type == \"pointermove\" && event is PointerEvent && event.pointerType == \"mouse\" ->\n                    handleMouseMove(event)\n                event.type == \"pointercancel\" && event is PointerEvent && event.pointerType == \"mouse\" -> {\n                    // Intentionally left blank. The W3C Pointer Events specification is ambiguous on what cancel means\n                    // for mouse input, and there is no evidence that this event is actually generated (6/19/2015).\n                }\n                event.type == \"pointerup\" && event is PointerEvent && event.pointerType == \"mouse\" ->\n                    handleMouseUp(event)\n                event.type == \"pointerdown\" && event is PointerEvent && event.pointerType == \"touch\" ->\n                    handleTouchStart(wrapPointer(event))\n                event.type == \"pointermove\" && event is PointerEvent && event.pointerType == \"touch\" ->\n                    handleTouchMove(wrapPointer(event))\n                event.type == \"pointercancel\" && event is PointerEvent && event.pointerType == \"touch\" ->\n                    handleTouchCancel(wrapPointer(event))\n                event.type == \"pointerup\" && event is PointerEvent && event.pointerType == \"touch\" ->\n                    handleTouchEnd(wrapPointer(event))\n                else -> Logger.logMessage(Logger.INFO, \"GestureRecognizer\", \"handleEvent\",\n                    \"Unrecognized event type: ${event.type}\")\n            }\n        } catch (e: Exception) {\n            Logger.logMessage(Logger.ERROR, \"GestureRecognizer\", \"handleEvent\", \"Error handling event.\\n$e\")\n        }\n    }\n\n    protected open fun handleMouseDown(event: MouseEvent) {\n        if (event.type == \"mousedown\" && touches.size > 0) return // ignore synthesized mouse down events on Android Chrome\n\n        val buttonBit = 1 shl event.button.toInt()\n        if (buttonBit and mouseButtonMask != 0) return // ignore redundant mouse down events\n\n        if (mouseButtonMask == 0) { // first button down\n            clientX = event.clientX\n            clientY = event.clientY\n            clientStartX = event.clientX\n            clientStartY = event.clientY\n            translationX = 0.0\n            translationY = 0.0\n        }\n\n        mouseButtonMask = mouseButtonMask or buttonBit\n        mouseDown(event)\n    }\n\n    protected open fun handleMouseMove(event: MouseEvent) {\n        if (mouseButtonMask == 0) return // ignore mouse move events when this recognizer does not consider any button to be down\n\n        if (clientX == event.clientX && clientY == event.clientY) return // ignore redundant mouse move events\n\n        val dx = event.clientX - clientStartX\n        val dy = event.clientY - clientStartY\n        val w = translationWeight\n        clientX = event.clientX\n        clientY = event.clientY\n        translationX = translationX * (1 - w) + dx * w\n        translationY = translationY * (1 - w) + dy * w\n        mouseMove(event)\n    }\n\n    protected open fun handleMouseUp(event: MouseEvent) {\n        val buttonBit = 1 shl event.button.toInt()\n        if (buttonBit and mouseButtonMask == 0) return // ignore mouse up events for buttons this recognizer does not consider to be down\n\n        mouseButtonMask = mouseButtonMask and buttonBit.inv()\n        mouseUp(event)\n\n        if (mouseButtonMask == 0) resetIfEventsEnded() // last button up\n    }\n\n    protected open fun handleTouchStart(touch: TouchWrapper) {\n        touches.add(touch)\n\n        if (touches.size == 1) { // first touch\n            clientX = touch.clientX\n            clientY = touch.clientY\n            clientStartX = touch.clientX\n            clientStartY = touch.clientY\n            translationX = 0.0\n            translationY = 0.0\n            touchCentroidShiftX = 0\n            touchCentroidShiftY = 0\n        } else touchesAddedOrRemoved()\n\n        touchStart(touch)\n    }\n\n    protected open fun handleTouchMove(nextTouch: TouchWrapper) {\n        val touch = touchById(nextTouch.identifier) ?: return // ignore events for touches that did not start in this recognizer's target\n        if (touch.clientX == nextTouch.clientX && touch.clientY == nextTouch.clientY) return // ignore redundant touch move events, which we've encountered on Android Chrome\n\n        touch.clientX = nextTouch.clientX\n        touch.clientY = nextTouch.clientY\n\n        val centroid = touchCentroid()\n        val dx = centroid.clientX - clientStartX + touchCentroidShiftX\n        val dy = centroid.clientY - clientStartY + touchCentroidShiftY\n        val w = translationWeight\n        clientX = centroid.clientX\n        clientY = centroid.clientY\n        translationX = translationX * (1 - w) + dx * w\n        translationY = translationY * (1 - w) + dy * w\n\n        touchMove(touch)\n    }\n\n    protected open fun handleTouchCancel(touch: TouchWrapper) {\n        val touchIdx = indexOfTouchWithId(touch.identifier)\n        if (touchIdx == -1) return // ignore events for touches that did not start in this recognizer's target\n        touches.removeAt(touchIdx)\n        touchesAddedOrRemoved()\n        touchCancel(touch)\n        resetIfEventsEnded()\n    }\n\n    protected open fun handleTouchEnd(touch: TouchWrapper) {\n        val touchIdx = indexOfTouchWithId(touch.identifier)\n        if (touchIdx == -1) return // ignore events for touches that did not start in this recognizer's target\n        touches.removeAt(touchIdx)\n        touchesAddedOrRemoved()\n        touchEnd(touch)\n        resetIfEventsEnded()\n    }\n\n    protected open fun resetIfEventsEnded() {\n        if (state != POSSIBLE && mouseButtonMask == 0 && touches.size == 0) reset()\n    }\n\n    protected open fun touchesAddedOrRemoved() {\n        touchCentroidShiftX += clientX\n        touchCentroidShiftY += clientY\n        val centroid = touchCentroid()\n        clientX = centroid.clientX\n        clientY = centroid.clientY\n        touchCentroidShiftX -= clientX\n        touchCentroidShiftY -= clientY\n    }\n\n    protected open fun touchCentroid(): Click {\n        var x = 0\n        var y = 0\n\n        touches.forEach { touch ->\n            x += touch.clientX / touches.size\n            y += touch.clientY / touches.size\n        }\n\n        return Click(x, y)\n    }\n\n    protected open fun indexOfTouchWithId(identifier: Int) = touches.indexOfFirst { t -> t.identifier == identifier }\n\n    protected open fun touchById(identifier: Int) = touches.firstOrNull { t -> t.identifier == identifier }\n\n    protected open fun wrapTouch(event: Touch) = TouchWrapper(event.identifier, event.clientX, event.clientY)\n\n    protected open fun wrapPointer(event: PointerEvent) = TouchWrapper(event.pointerId, event.clientX, event.clientY)\n\n    protected class Click(\n        /**\n         * The X coordinate of the click point's location.\n         */\n        val clientX: Int,\n        /**\n         * The Y coordinate of the click point's location.\n         */\n        val clientY: Int\n    )\n}",null,"package earth.worldwind.gesture\n\nimport earth.worldwind.BasicWorldWindowController\nimport earth.worldwind.WorldWindow\nimport earth.worldwind.geom.AltitudeMode\nimport earth.worldwind.geom.Position\nimport earth.worldwind.geom.Vec2\nimport earth.worldwind.gesture.GestureState.*\nimport earth.worldwind.render.Renderable\nimport earth.worldwind.shape.Highlightable\nimport earth.worldwind.shape.Movable\nimport org.w3c.dom.TouchEvent\nimport org.w3c.dom.events.EventListener\nimport org.w3c.dom.events.MouseEvent\n\nopen class SelectDragDetector(protected val wwd: WorldWindow) {\n    /**\n     * Main interface representing all interaction callbacks\n     */\n    var callback: SelectDragCallback? = null\n    /**\n     * Enable/disable mouse events processing.\n     * If disabled, highlighting of Renderables and all callbacks will be switched off.\n     */\n    var isEnabled = true\n    /**\n     * Enable/disable dragging of flying objects using their terrain projection position\n     */\n    var isDragTerrainPosition = false\n    protected var pickedPosition: Position? = null\n    protected var pickedRenderable: Renderable? = null\n    protected val oldHighlighted = mutableSetOf<Highlightable>()\n    protected val newHighlighted = mutableSetOf<Highlightable>()\n    protected var isDragging = false\n    protected var isDraggingArmed = false\n    private val dragRefPt = Vec2()\n    private val lastTranslation = Vec2()\n\n    protected val handlePick = EventListener { event ->\n        // Do not pick new items if dragging is in progress or detector is disabled\n        if (isDragging || !isEnabled) return@EventListener\n\n        // Determine pick point from event\n        var clientX = 0\n        var clientY = 0\n        when (event) {\n            is MouseEvent -> {\n                clientX = event.clientX\n                clientY = event.clientY\n            }\n            is TouchEvent -> {\n                event.changedTouches.item(0)?.let { touch ->\n                    clientX = touch.clientX\n                    clientY = touch.clientY\n                } ?: return@EventListener\n            }\n            else -> return@EventListener\n        }\n\n        // Reset previous pick result\n        pickedPosition = null\n        pickedRenderable = null\n        lastTranslation.set(0.0, 0.0)\n\n        // Get pick point in canvas coordinates\n        val pickPoint = wwd.canvasCoordinates(clientX, clientY)\n\n        // Pick objects in selected point\n        val pickList = wwd.pick(pickPoint)\n\n        // Get picked position from terrain object, if user pressed inside the globe\n        pickedPosition = pickList.terrainPickedObject?.terrainPosition\n\n//        // NOTE Region selection use bounding box intersection with specified rectangle. Use highlighter path thickness instead.\n//        if (!pickList.hasNonTerrainObjects) {\n//            pickList = wwd.pickShapesInRegion(\n//                Viewport(pickPoint.x - SLOPE / 2 , pickPoint.y - SLOPE / 2, SLOPE, SLOPE)\n//            )\n//        }\n\n        // Redraw canvas in case we de-highlight old or highlight new renderables\n        var redrawRequired = false\n\n        // Put picked renderables into new highlighted set\n        for (obj in pickList.objects) if (!obj.isTerrain && obj.userObject is Highlightable) newHighlighted.add(obj.userObject)\n\n        // De-highlight any previously highlighted renderables which is not selected or picked\n        for (highlighted in oldHighlighted)\n            if (!newHighlighted.contains(highlighted)\n                && highlighted is Renderable && highlighted.getUserProperty(HIGHLIGHT_LOCKED_KEY) != true) {\n                highlighted.isHighlighted = false\n                oldHighlighted.remove(highlighted)\n                redrawRequired = true\n            }\n\n        // Highlight picked objects which was not highlighted yet\n        for (highlighted in newHighlighted) if (!oldHighlighted.contains(highlighted)) {\n            highlighted.isHighlighted = true\n            oldHighlighted.add(highlighted)\n            redrawRequired = true\n        }\n\n        // Clear new highlighted buffer until next frame\n        newHighlighted.clear()\n\n        // Update the window if we changed anything\n        if (redrawRequired) wwd.requestRedraw()\n\n        // Get top picked renderable to use it in listener callbacks\n        val topPickedObject = pickList.topPickedObject?.userObject\n        if (topPickedObject is Renderable) pickedRenderable = topPickedObject\n\n        // Take reference position as a backup, if user pressed outside the globe\n        if (topPickedObject is Movable && pickedPosition == null) pickedPosition = topPickedObject.referencePosition\n\n        // Determine whether the dragging flag should be \"armed\".\n        isDraggingArmed = topPickedObject is Renderable && callback?.canMoveRenderable(topPickedObject) == true\n    }\n\n    protected val handlePrimaryClick: (GestureRecognizer) -> Unit = {\n        callback?.let { callback ->\n            pickedPosition?.let { position ->\n                val renderable = pickedRenderable\n                if (renderable != null && callback.canPickRenderable(renderable))\n                    callback.onRenderablePicked(renderable, position) else callback.onTerrainPicked(position)\n            } ?: callback.onNothingPicked()\n            wwd.requestRedraw()\n        }\n    }\n\n    protected val handleSecondaryClick: (GestureRecognizer) -> Unit = {\n        callback?.let { callback ->\n            pickedPosition?.let { position ->\n                val renderable = pickedRenderable\n                if (renderable != null && callback.canPickRenderable(renderable))\n                    callback.onRenderableContext(renderable, position) else callback.onTerrainContext(position)\n            } ?: callback.onNothingContext()\n            wwd.requestRedraw()\n        }\n    }\n\n    protected val handleDrag: (GestureRecognizer) -> Unit = { recognizer ->\n        when (recognizer.state) {\n            BEGAN, CHANGED -> {\n                val callback = callback\n                val renderable = pickedRenderable\n                // Reference position is a priority during movement\n                val toPosition = if (renderable is Movable) renderable.referencePosition else pickedPosition\n                if (toPosition != null && renderable != null && callback != null) {\n                    // Signal that dragging is in progress\n                    isDragging = true\n\n                    // First we compute the screen coordinates of the position's \"ground\" point. We'll apply the\n                    // screen X and Y drag distances to this point, from which we'll compute a new position,\n                    // wherein we restore the original position's altitude.\n                    val fromPosition = Position(toPosition)\n                    val clapToGround = isDragTerrainPosition || renderable !is Movable || renderable.altitudeMode == AltitudeMode.CLAMP_TO_GROUND\n                    val movePoint = wwd.canvasCoordinates(recognizer.clientX, recognizer.clientY)\n                    if (clapToGround && wwd.engine.pickTerrainPosition(movePoint.x, movePoint.y, toPosition)\n                        || !clapToGround && wwd.engine.geographicToScreenPoint(fromPosition.latitude, fromPosition.longitude, 0.0, dragRefPt)\n                        && wwd.engine.screenPointToGroundPosition(\n                            dragRefPt.x + recognizer.translationX - lastTranslation.x,\n                            dragRefPt.y + recognizer.translationY - lastTranslation.y,\n                            toPosition\n                        )) {\n                        // Backup last translation\n                        lastTranslation.set(recognizer.translationX, recognizer.translationY)\n                        // Restore original altitude\n                        toPosition.altitude = fromPosition.altitude\n                        // Update movable position\n                        if (renderable is Movable) renderable.moveTo(wwd.engine.globe, toPosition)\n                        // Notify callback\n                        callback.onRenderableMoved(renderable, fromPosition, toPosition)\n                        // Reflect the change in position on the globe.\n                        wwd.requestRedraw()\n                    } else {\n                        // Probably clipped by near/far clipping plane or off the globe.\n                        // The position was not updated. Stop the drag.\n                        recognizer.state = CANCELLED\n                    }\n                }\n            }\n            ENDED -> {\n                val callback = callback\n                val position = pickedPosition\n                val renderable = pickedRenderable\n                if (renderable != null && position != null && callback != null) {\n                    callback.onRenderableMovingFinished(renderable, position)\n                    wwd.requestRedraw()\n                }\n                cancelDragging()\n            }\n            CANCELLED -> cancelDragging()\n            else -> {}\n        }\n    }\n\n    protected val primaryClickRecognizer = ClickRecognizer(wwd.canvas, handlePrimaryClick)\n    protected val tapRecognizer = TapRecognizer(wwd.canvas, handlePrimaryClick)\n    protected val secondaryClickRecognizer = ClickRecognizer(wwd.canvas, handleSecondaryClick).apply { button = 2 } // Secondary mouse button\n    protected val doubleTapRecognizer = TapRecognizer(wwd.canvas, handleSecondaryClick).apply { numberOfTaps = 2 } // Double tap\n    protected val dragRecognizer = object : DragRecognizer(wwd.canvas, handleDrag) {\n        override fun shouldRecognize() = super.shouldRecognize() && isDraggingArmed\n    }\n    protected val panRecognizer = object : PanRecognizer(wwd.canvas, handleDrag) {\n        override fun shouldRecognize() = super.shouldRecognize() && isDraggingArmed\n    }\n\n    companion object {\n//        const val SLOPE = 16\n        const val HIGHLIGHT_LOCKED_KEY = \"highlight_locked\"\n    }\n\n    init {\n        wwd.addEventListener(\"mousedown\", handlePick)\n        wwd.addEventListener(\"mousemove\", handlePick)\n        wwd.addEventListener(\"touchstart\", handlePick)\n        wwd.addEventListener(\"touchmove\", handlePick)\n\n        // Resolve conflict between item movement and globe rotation\n        val controller = wwd.controller\n        if (controller is BasicWorldWindowController) {\n            controller.primaryDragRecognizer.requireRecognizerToFail(dragRecognizer)\n            controller.panRecognizer.requireRecognizerToFail(panRecognizer)\n        }\n    }\n\n    protected fun cancelDragging() {\n        isDragging = false\n        isDraggingArmed = false\n    }\n}\n","package earth.worldwind.gesture\n\nimport earth.worldwind.gesture.GestureState.*\nimport kotlinx.browser.window\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.MouseEvent\nimport kotlin.math.sqrt\n\n/**\n * A concrete gesture recognizer subclass that looks for single or multiple taps.\n */\nopen class TapRecognizer(\n    target: EventTarget, callback: ((GestureRecognizer)->Unit)? = null\n) : GestureRecognizer(target, callback) {\n    var numberOfTaps = 1\n    var numberOfTouches = 1\n    var maxTouchMovement = 20\n    var maxTapDuration = 500\n    var maxTapInterval = 400\n    protected val taps = mutableListOf<TouchWrapper>()\n    protected var timeout: Int? = null\n\n    override fun reset() {\n        super.reset()\n        taps.clear()\n        cancelFailAfterDelay()\n    }\n\n    override fun mouseDown(event: MouseEvent) {\n        if (state != POSSIBLE) return\n        state = FAILED // touch gestures fail upon receiving a mouse event\n    }\n\n    override fun touchStart(touch: TouchWrapper) {\n        if (state != POSSIBLE) return\n\n        if (touchCount > numberOfTouches) {\n            state = FAILED\n        } else if (touchCount == 1) { // first touch started\n            taps.add(TouchWrapper(touchCount, clientX, clientY))\n            failAfterDelay(maxTapDuration) // fail if the tap is down too long\n        } else {\n            val tap = taps[taps.size - 1]\n            tap.identifier = touchCount // max number of simultaneous touches\n            tap.clientX = clientX // touch centroid\n            tap.clientY = clientY\n        }\n    }\n\n    override fun touchMove(touch: TouchWrapper) {\n        if (state != POSSIBLE) return\n        val dx = translationX\n        val dy = translationY\n        val distance = sqrt(dx * dx + dy * dy)\n        if (distance > maxTouchMovement * window.devicePixelRatio ) state = FAILED\n    }\n\n    override fun touchEnd(touch: TouchWrapper) {\n        if (state != POSSIBLE) return\n        if (touchCount != 0) return // wait until the last touch ends\n        val tapCount = taps.size\n        val tap = taps[tapCount - 1]\n        if (tap.identifier != numberOfTouches) {\n            state = FAILED // wrong number of touches\n        } else if (tapCount == numberOfTaps) {\n            clientX = taps[0].clientX\n            clientY = taps[0].clientY\n            state = RECOGNIZED\n        } else failAfterDelay(maxTapInterval) // fail if the interval between taps is too long\n    }\n\n    override fun touchCancel(touch: TouchWrapper) {\n        if (state != POSSIBLE) return\n        state = FAILED\n    }\n\n    protected open fun failAfterDelay(delay: Int) {\n        timeout?.let { window.clearTimeout(it) }\n        timeout = window.setTimeout({\n            timeout = null\n            if (state == POSSIBLE) state = FAILED // fail if we haven't already reached a terminal state\n        }, delay)\n    }\n\n    protected open fun cancelFailAfterDelay() = timeout?.let { window.clearTimeout(it) }.also { timeout = null }\n}","package earth.worldwind.gesture\n\n/**\n * Represents a touch point.\n */\nopen class TouchWrapper(\n    /**\n     * A number uniquely identifying the touch point\n     */\n    var identifier: Int,\n    /**\n     * The X coordinate of the touch point's location.\n     */\n    var clientX: Int,\n    /**\n     * The Y coordinate of the touch point's location.\n     */\n    var clientY: Int\n) {\n    /**\n     * Indicates this touch point's translation along the X axis since the touch started.\n     */\n    var translationX: Int\n        get() = clientX - clientStartX\n        set(value) { clientStartX = clientX - value }\n    /**\n     * Indicates this touch point's translation along the Y axis since the touch started.\n     */\n    var translationY: Int\n        get() = clientY - clientStartY\n        set(value) { clientStartY = clientY - value }\n    protected var clientStartX = clientX\n    protected var clientStartY = clientY\n}","package earth.worldwind.globe.elevation\n\nimport earth.worldwind.util.AbstractSource\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.ResourcePostprocessor\nimport org.khronos.webgl.ArrayBufferView\nimport org.w3c.dom.url.URL\n\n/**\n * Provides a mechanism for specifying elevations from a variety of sources.\n * <br>\n * ElevationSource supports following source types:\n * - Uniform Resource Locator [URL]\n * <br>\n * ElevationSource instances are intended to be used as a key into a cache or other data structure that enables sharing\n * of loaded elevation resources. File paths and URLs with the same string representation considered equals.\n */\nactual open class ElevationSource protected constructor(source: Any): AbstractSource(source) {\n    actual companion object {\n        /**\n         * Constructs an elevation source with an [URL].\n         *\n         * @param url Uniform Resource Locator\n         *\n         * @return the new elevation source\n         */\n        fun fromUrl(url: URL) = ElevationSource(url.href)\n\n        /**\n         * Constructs an elevation source with a URL string.\n         *\n         * @param urlString complete URL string\n         *\n         * @return the new elevation source\n         */\n        actual fun fromUrlString(urlString: String) = try {\n            fromUrl(URL(urlString))\n        } catch (e: Exception) {\n            logMessage(ERROR, \"ElevationSource\", \"fromUrlString\", \"invalidUrlString\", e)\n            throw e\n        }\n\n        /**\n         * Constructs an elevation source with a generic [Any] instance. The source may be any non-null object. This is\n         * equivalent to calling one of ElevationSource's type-specific factory methods when the source is a recognized type.\n         *\n         * @param source the generic source\n         *\n         * @return the new elevation source\n         */\n        actual fun fromUnrecognized(source: Any) = when(source) {\n            is URL -> fromUrl(source)\n            is String -> fromUrlString(source)\n            else -> ElevationSource(source)\n        }\n    }\n\n    /**\n     * Buffer post-processing routine.\n     */\n    @Suppress(\"UNCHECKED_CAST\")\n    val bufferPostprocessor get() = postprocessor as ResourcePostprocessor<ArrayBufferView>?\n    /**\n     * Indicates whether this elevation source is an [URL] string.\n     */\n    val isUrl get() = source is String\n\n    /**\n     * @return the source [URL]. Call [isUrl] to determine whether the source is an [URL] string.\n     */\n    fun asUrl() = source as String\n\n    override fun toString() = when (source) {\n        is String -> \"URL: $source\"\n        else -> super.toString()\n    }\n}","package earth.worldwind.globe.elevation.coverage\n\nimport earth.worldwind.geom.TileMatrix\nimport earth.worldwind.geom.TileMatrixSet\nimport earth.worldwind.globe.elevation.ElevationSource.Companion.fromUnrecognized\nimport earth.worldwind.globe.elevation.ElevationTileFactory\nimport earth.worldwind.util.Logger.DEBUG\nimport earth.worldwind.util.Logger.WARN\nimport earth.worldwind.util.Logger.isLoggable\nimport earth.worldwind.util.Logger.log\nimport io.ktor.client.fetch.*\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.await\nimport kotlinx.coroutines.cancelChildren\nimport kotlinx.coroutines.launch\nimport org.khronos.webgl.*\nimport org.khronos.webgl.ArrayBufferView\nimport org.khronos.webgl.Uint8Array\nimport kotlin.math.roundToInt\n\nactual open class TiledElevationCoverage actual constructor(\n    tileMatrixSet: TileMatrixSet, tileFactory: ElevationTileFactory\n) : AbstractTiledElevationCoverage(tileMatrixSet, tileFactory) {\n    protected actual val mainScope = MainScope()\n\n    /**\n     * This is a dummy workaround for asynchronously defined TileFactory\n     */\n    actual constructor(): this(TileMatrixSet(), object : ElevationTileFactory {\n        override fun createElevationSource(tileMatrix: TileMatrix, row: Int, column: Int) = fromUnrecognized(Any())\n    })\n\n    override fun invalidateTiles() {\n        mainScope.coroutineContext.cancelChildren() // Cancel all async jobs but keep scope reusable\n        super.invalidateTiles()\n    }\n\n    override fun retrieveTileArray(key: Long, tileMatrix: TileMatrix, row: Int, column: Int) {\n        val elevationSource = tileFactory.createElevationSource(tileMatrix, row, column)\n        if (elevationSource.isUrl) mainScope.launch {\n            val url = elevationSource.asUrl()\n            try {\n                // Ktor JS Client cannot be used here, because it is not able to return ArrayBuffer directly.\n                val response = fetch(url).await()\n                if (response.ok) {\n                    val arrayBuffer = response.arrayBuffer().await()\n                    val contentType = response.headers.get(\"Content-Type\")\n                    var message: String? = null\n                    val buffer = when {\n                        contentType.equals(\"image/bil\", true) ||\n                        contentType.equals(\"application/bil\", true) ||\n                        contentType.equals(\"application/bil16\", true) -> Int16Array(arrayBuffer)\n                        contentType.equals(\"application/bil32\", true) -> Float32Array(arrayBuffer)\n                        contentType.equals(\"image/tiff\", true) -> TODO(\"Implement Tiff parsing for JS\")\n                        contentType.equals(\"text/xml\", true) -> {\n                            message = \"Elevations retrieval failed (${response.statusText}): $url.\\n\"\n                            +String.asDynamic().fromCharCode.apply(null, Uint8Array(arrayBuffer))\n                            null\n                        }\n                        else -> {\n                            message = \"Elevations retrieval failed (Unexpected content type $contentType): $url\"\n                            null\n                        }\n                    }?.let { elevationSource.bufferPostprocessor?.process(it) ?: it } // Apply buffer transformations\n                    decodeBuffer(buffer)?.let {\n                        retrievalSucceeded(key, it, \"Elevation retrieval succeeded: $url\")\n                    } ?: retrievalFailed(key, message ?: \"Elevations retrieval failed: $url\")\n                } else {\n                    retrievalFailed(key, \"Elevations retrieval failed (${response.statusText}): $url\")\n                }\n            } catch (e: Throwable) {\n                retrievalFailed(key, \"Elevations retrieval failed (${e.message}): $url\")\n            }\n        } else retrievalFailed(key, \"Unsupported elevation source type\")\n    }\n\n    protected open fun decodeBuffer(buffer: ArrayBufferView?) = when (buffer) {\n        is Int16Array -> ShortArray(buffer.length) { buffer[it] }\n        is Float32Array -> ShortArray(buffer.length) { buffer[it].roundToInt().toShort() }\n        else -> null\n    }\n\n    protected open fun retrievalSucceeded(key: Long, value: ShortArray, message: String) {\n        retrievalSucceeded(key, value)\n        if (isLoggable(DEBUG)) log(DEBUG, message)\n    }\n\n    protected open fun retrievalFailed(key: Long, message: String) {\n        retrievalFailed(key)\n        log(WARN, message)\n    }\n}","package earth.worldwind.layer\n\nimport earth.worldwind.shape.TiledSurfaceImage\n\nactual abstract class AbstractTiledImageLayer actual constructor(name: String): RenderableLayer(name) {\n    actual var tiledSurfaceImage: TiledSurfaceImage? = null\n        protected set(value) {\n            field?.let { removeRenderable(it) }\n            value?.let { addRenderable(it) }\n            field = value\n        }\n    override var isPickEnabled = false\n    /**\n     * Determines how many levels to skip from retrieving texture during tile pyramid subdivision.\n     */\n    var levelOffset: Int\n        get() = tiledSurfaceImage?.levelOffset ?: 0\n        set(value) { tiledSurfaceImage?.levelOffset = value }\n}","package earth.worldwind.layer\n\nactual abstract class TiledImageLayer actual constructor(name: String): AbstractTiledImageLayer(name)","package earth.worldwind.layer.mercator\n\nimport earth.worldwind.geom.Angle.Companion.degrees\nimport earth.worldwind.layer.mercator.MercatorSector.Companion.gudermannianInverse\nimport earth.worldwind.util.Level\nimport kotlinx.browser.document\nimport org.khronos.webgl.get\nimport org.khronos.webgl.set\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.Image\nimport org.w3c.dom.url.URL\nimport kotlin.math.floor\n\n/**\n * Constructs a tile with a specified sector, level, row and column.\n *\n * @param sector the sector spanned by the tile\n * @param level  the tile's level in a LevelSet\n * @param row    the tile's row within the specified level\n * @param column the tile's column within the specified level\n */\nactual open class MercatorImageTile actual constructor(\n    sector: MercatorSector, level: Level, row: Int, column: Int\n): AbstractMercatorImageTile(sector, level, row, column) {\n    companion object {\n        val srcCanvas = document.createElement(\"canvas\") as HTMLCanvasElement\n        val srcCtx = srcCanvas.getContext(\"2d\") as CanvasRenderingContext2D\n        val dstCanvas = document.createElement(\"canvas\") as HTMLCanvasElement\n        val dstCtx = dstCanvas.getContext(\"2d\") as CanvasRenderingContext2D\n    }\n\n    override suspend fun process(resource: Image): Image {\n        val width = resource.width\n        val height = resource.height\n        val widthDouble = resource.width.toDouble()\n        val heightDouble = resource.height.toDouble()\n\n        // Get source image data\n        srcCanvas.width = width\n        srcCanvas.height = height\n        srcCtx.drawImage(resource, 0.0, 0.0, widthDouble, heightDouble)\n        val srcData = srcCtx.getImageData(0.0, 0.0, widthDouble, heightDouble)\n\n        // Prepare destination image data\n        dstCanvas.width = width\n        dstCanvas.height = height\n        val dstData = dstCtx.createImageData(widthDouble, heightDouble)\n\n        // Re-project mercator tile to equirectangular projection\n        val sector = sector as MercatorSector\n        val miny = sector.minLatPercent\n        val maxy = sector.maxLatPercent\n        for (y in 0 until height) {\n            val sy = 1.0 - y / (height - 1.0)\n            val lat = sy * sector.deltaLatitude.inDegrees + sector.minLatitude.inDegrees\n            val dy = (1.0 - (gudermannianInverse(lat.degrees) - miny) / (maxy - miny)).coerceIn(0.0, 1.0)\n            val srcRow = floor(dy * (height - 1)).toInt()\n            for (x in 0 until width) {\n                val src = 4 * (x + srcRow * width)\n                val dst = 4 * (x + y * width)\n                dstData.data[dst] = srcData.data[src]\n                dstData.data[dst + 1] = srcData.data[src + 1]\n                dstData.data[dst + 2] = srcData.data[src + 2]\n                dstData.data[dst + 3] = srcData.data[src + 3]\n            }\n        }\n\n        // Replace image source with transformed canvas image data\n        dstCtx.putImageData(dstData, 0.0, 0.0)\n        //resource.src = dstCanvas.toDataURL() // This approach is performance ineffective thus replaced by toBlob()\n        dstCanvas.toBlob({\n            // Setting new src will call onLoad or onError in RenderResourceCache and continue image retrieval process\n            if (it != null) resource.src = URL.createObjectURL(it)\n            // Call image.onError in RenderResourceCache to fail retrieval and mark resource as absent\n            else resource.onerror?.invoke(\"Error saving canvas to Blob\", \"\", 0, 0, null) as Unit\n        })\n        return resource // Do not call super.process to prevnt unnecessary onLoad event processing\n    }\n}","package earth.worldwind.render\n\nimport earth.worldwind.geom.Vec2\nimport earth.worldwind.render.image.CanvasTexture\nimport earth.worldwind.shape.TextAttributes\nimport kotlinx.browser.document\nimport org.w3c.dom.*\nimport kotlin.math.ceil\n\nactual open class TextRenderer actual constructor(protected val rc: RenderContext) {\n    private val lineSpacing = 0.15 // fraction of font size\n\n    /**\n     * Creates a texture for a specified text string and specified text attributes.\n     *\n     * @param text The text string.\n     * @param attributes Text font, size, color etc.\n     * @returns A texture for the specified text string.\n     */\n    actual fun renderText(text: String?, attributes: TextAttributes): Texture? =\n        if (text?.isNotEmpty() == true) CanvasTexture(drawText(text, attributes)) else null\n\n    /**\n     * Creates a 2D Canvas for a specified text string while considering current TextRenderer state regarding outline\n     * usage and color, text color, typeface, and outline width.\n     *\n     * @param text The text string.\n     * @param attributes Text font, size, color etc.\n     * @returns A 2D Canvas for the specified text string.\n     */\n    protected open fun drawText(text: String, attributes: TextAttributes): HTMLCanvasElement {\n        val canvas = document.createElement(\"canvas\") as HTMLCanvasElement\n        val ctx2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D\n\n        val textSize = textSize(ctx2D, text, attributes)\n        val lines = text.split(\"\\n\")\n        val strokeOffset = if (attributes.isOutlineEnabled) attributes.outlineWidth / 2.0 else 0.0\n\n        canvas.width = ceil(textSize.x * rc.densityFactor).toInt()\n        canvas.height = ceil(textSize.y * rc.densityFactor).toInt()\n\n        ctx2D.scale(rc.densityFactor.toDouble(), rc.densityFactor.toDouble())\n        ctx2D.font = attributes.font.toString()\n        ctx2D.textBaseline = CanvasTextBaseline.BOTTOM\n        ctx2D.textAlign = attributes.font.horizontalAlignment\n        ctx2D.fillStyle = attributes.textColor.toCssColorString()\n        ctx2D.strokeStyle = attributes.outlineColor.toCssColorString()\n        ctx2D.lineWidth = attributes.outlineWidth.toDouble()\n        ctx2D.lineCap = CanvasLineCap.ROUND\n        ctx2D.lineJoin = CanvasLineJoin.ROUND\n\n        when (attributes.font.horizontalAlignment) {\n            CanvasTextAlign.LEFT -> ctx2D.translate(strokeOffset, 0.0)\n            CanvasTextAlign.RIGHT -> ctx2D.translate(textSize.x - strokeOffset, 0.0)\n            else -> ctx2D.translate(textSize.x / 2.0, 0.0)\n        }\n\n        for (line in lines) {\n            ctx2D.translate(0.0, attributes.font.size * (1.0 + lineSpacing) + strokeOffset)\n            if (attributes.isOutlineEnabled) ctx2D.strokeText(line, 0.0, 0.0)\n            ctx2D.fillText(line, 0.0, 0.0)\n        }\n\n        return canvas\n    }\n\n    /**\n     * Returns the width and height of a specified text string considering the current typeFace and outline usage.\n     * @param ctx2D Canvas rendering context\n     * @param text The text string.\n     * @param textAttributes Text font, size, color etc.\n     * @returns A vector indicating the text's width and height, respectively, in pixels.\n     */\n    protected open fun textSize(ctx2D: CanvasRenderingContext2D, text: String, textAttributes: TextAttributes): Vec2 {\n        if (text.isEmpty()) Vec2()\n\n        ctx2D.font = textAttributes.font.toString()\n\n        val lines = text.split(\"\\n\")\n        var height = lines.size * (textAttributes.font.size * (1.0 + lineSpacing))\n        var maxWidth = 0.0\n        for (element in lines) maxWidth = maxWidth.coerceAtLeast(ctx2D.measureText(element).width)\n\n        if (textAttributes.isOutlineEnabled) {\n            maxWidth += textAttributes.outlineWidth\n            height += textAttributes.outlineWidth\n        }\n\n        return Vec2(maxWidth, height)\n    }\n}","package earth.worldwind.render.image\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.render.Texture\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.kgl.GL_RGBA\nimport earth.worldwind.util.kgl.GL_TEXTURE_2D\nimport earth.worldwind.util.kgl.GL_UNSIGNED_BYTE\nimport earth.worldwind.util.kgl.WebKgl\nimport earth.worldwind.util.math.isPowerOfTwo\nimport org.khronos.webgl.WebGLRenderingContext.Companion.UNPACK_PREMULTIPLY_ALPHA_WEBGL\nimport org.w3c.dom.HTMLCanvasElement\n\nopen class CanvasTexture(image: HTMLCanvasElement) : Texture(image.width, image.height, GL_RGBA, GL_UNSIGNED_BYTE) {\n    protected var image: HTMLCanvasElement? = image\n    override val hasMipMap = isPowerOfTwo(image.width) && isPowerOfTwo(image.height)\n\n    init {\n        coordTransform.setToVerticalFlip()\n    }\n\n    override fun release(dc: DrawContext) {\n        super.release(dc)\n        image = null // Image can be non-null if the texture has never been used\n    }\n\n    override fun allocTexImage(dc: DrawContext) {\n        try {\n            // Specify the OpenGL texture 2D object's base image data (level 0).\n            dc.gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1)\n            (dc.gl as WebKgl).gl.texImage2D(GL_TEXTURE_2D, 0, format, format, type, image)\n            dc.gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0)\n\n            // If the bitmap has power-of-two dimensions, generate the texture object's image data for image levels 1\n            // through level N, and configure the texture object's filtering modes to use those image levels.\n            if (hasMipMap) dc.gl.generateMipmap(GL_TEXTURE_2D)\n        } catch (e: Exception) {\n            // The Android utility was unable to load the texture image data.\n            logMessage(\n                ERROR, \"Texture\", \"loadTexImage\",\n                \"Exception attempting to load texture image '$image'\", e\n            )\n        } finally {\n            image = null\n        }\n    }\n}\n","package earth.worldwind.render.image\n\nimport dev.icerock.moko.resources.ImageResource\nimport earth.worldwind.util.AbstractSource\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.ResourcePostprocessor\nimport org.w3c.dom.Image\nimport org.w3c.dom.url.URL\n\n/**\n * Provides a mechanism for specifying images from a variety of sources. ImageSource retains the image source on behalf\n * of the caller, making this information available to WorldWind components that load images on the caller's behalf.\n * <br>\n * ImageSource supports following source types:\n * - Uniform Resource Locator [URL]\n * - [Image] object\n * - Multi-platform resource identifier\n * <br>\n * ImageSource instances are intended to be used as a key into a cache or other data structure that enables sharing of\n * loaded images. Images are compared by reference. URLs with the same string representation considered equals.\n */\nactual open class ImageSource protected constructor(source: Any): AbstractSource(source) {\n    actual companion object {\n        /**\n         * Constructs an image source with a multi-platform resource identifier.\n         *\n         * @param imageResource the multi-platform resource identifier\n         *\n         * @return the new image source\n         */\n        actual fun fromResource(imageResource: ImageResource) = ImageSource(imageResource)\n\n        /**\n         * Constructs an image source with an [Image]. The image's dimensions should not be greater than 2048 x 2048.\n         *\n         * @param image the [Image] to use as an image source\n         *\n         * @return the new image source\n         */\n        fun fromImage(image: Image) = ImageSource(image)\n\n        /**\n         * Constructs an image source with an [URL]. The image's dimensions should be no greater than 2048 x 2048.\n         *\n         * @param url Uniform Resource Locator\n         *\n         * @return the new image source\n         */\n        fun fromUrl(url: URL) = ImageSource(url.href)\n\n        /**\n         * Constructs an image source with a URL string. The image's dimensions should not be greater than 2048 x 2048.\n         *\n         * @param urlString complete URL string\n         *\n         * @return the new image source\n         */\n        actual fun fromUrlString(urlString: String) = try {\n            fromUrl(URL(urlString))\n        } catch (e: Exception) {\n            logMessage(ERROR, \"ImageSource\", \"fromUrlString\", \"invalidUrlString\", e)\n            throw e\n        }\n\n        /**\n         * Constructs an image source with a line stipple pattern. The result is a one-dimensional image with pixels\n         * representing the specified stipple factor and stipple pattern. Line stipple images can be used for displaying\n         * dashed shape outlines. See [earth.worldwind.shape.ShapeAttributes.outlineImageSource].\n         *\n         * @param factor  specifies the number of times each bit in the pattern is repeated before the next bit is used. For\n         * example, if the factor is 3, each bit is repeated three times before using the next bit. The\n         * specified factor must be either 0 or an integer greater than 0. A factor of 0 indicates no\n         * stippling.\n         * @param pattern specifies a number whose lower 16 bits define a pattern of which pixels in the image are white and\n         * which are transparent. Each bit corresponds to a pixel, and the pattern repeats after every n*16\n         * pixels, where n is the factor. For example, if the factor is 3, each bit in the pattern is\n         * repeated three times before using the next bit.\n         *\n         * @return the new image source\n         */\n        actual fun fromLineStipple(factor: Int, pattern: Short): ImageSource {\n            TODO(\"Not yet implemented\")\n        }\n\n        /**\n         * Constructs an image source with a generic [Any] instance. The source may be any non-null object. This is\n         * equivalent to calling one of ImageSource's type-specific factory methods when the source is a recognized type.\n         *\n         * @param source the generic source\n         *\n         * @return the new image source\n         */\n        actual fun fromUnrecognized(source: Any) = when (source) {\n            is ImageResource -> fromResource(source)\n            is Image -> fromImage(source)\n            is URL -> fromUrl(source)\n            is String -> fromUrlString(source)\n            else -> ImageSource(source)\n        }\n    }\n\n    /**\n     * Image post-processing routine.\n     */\n    @Suppress(\"UNCHECKED_CAST\")\n    val imagePostprocessor get() = postprocessor as ResourcePostprocessor<Image>?\n    /**\n     * Indicates whether this image source is a multi-platform resource.\n     */\n    val isResource get() = source is ImageResource\n    /**\n     * Indicates whether this image source is a [Image].\n     */\n    val isImage get() = source is Image\n    /**\n     * Indicates whether this image source is an [URL] string.\n     */\n    val isUrl get() = source is String\n\n    /**\n     * @return the source multi-platform resource identifier. Call isResource to determine whether the source is a\n     * Multi-platform resource.\n     */\n    fun asResource() = source as ImageResource\n\n    /**\n     * @return the source [Image]. Call [isImage] to determine whether the source is a [Image].\n     */\n    fun asImage() = source as Image\n\n    /**\n     * @return the source [URL]. Call [isUrl] to determine whether the source is an [URL] string.\n     */\n    fun asUrl() = source as String\n\n    override fun toString() = when(source) {\n        is ImageResource -> \"Resource: $source\"\n        is Image -> \"Image: $source\"\n        is String -> \"URL: $source\"\n        else -> super.toString()\n    }\n}","package earth.worldwind.render.image\n\nimport earth.worldwind.draw.DrawContext\nimport earth.worldwind.render.Texture\nimport earth.worldwind.util.Logger.ERROR\nimport earth.worldwind.util.Logger.logMessage\nimport earth.worldwind.util.kgl.GL_RGBA\nimport earth.worldwind.util.kgl.GL_TEXTURE_2D\nimport earth.worldwind.util.kgl.GL_UNSIGNED_BYTE\nimport earth.worldwind.util.kgl.WebKgl\nimport earth.worldwind.util.math.isPowerOfTwo\nimport org.khronos.webgl.WebGLRenderingContext.Companion.UNPACK_PREMULTIPLY_ALPHA_WEBGL\nimport org.w3c.dom.Image\n\nopen class ImageTexture(image: Image) : Texture(image.width, image.height, GL_RGBA, GL_UNSIGNED_BYTE) {\n    protected var image: Image? = image\n    override val hasMipMap = isPowerOfTwo(image.width) && isPowerOfTwo(image.height)\n\n    init {\n        coordTransform.setToVerticalFlip()\n    }\n\n    override fun release(dc: DrawContext) {\n        super.release(dc)\n        image = null // Image can be non-null if the texture has never been used\n    }\n\n    override fun allocTexImage(dc: DrawContext) {\n        try {\n            // Specify the OpenGL texture 2D object's base image data (level 0).\n            dc.gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1)\n            (dc.gl as WebKgl).gl.texImage2D(GL_TEXTURE_2D, 0, format, format, type, image)\n            dc.gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0)\n\n            // If the bitmap has power-of-two dimensions, generate the texture object's image data for image levels 1\n            // through level N, and configure the texture object's filtering modes to use those image levels.\n            if (hasMipMap) dc.gl.generateMipmap(GL_TEXTURE_2D)\n        } catch (e: Exception) {\n            // The Android utility was unable to load the texture image data.\n            logMessage(\n                ERROR, \"Texture\", \"loadTexImage\",\n                \"Exception attempting to load texture image '$image'\", e\n            )\n        } finally {\n            image = null\n        }\n    }\n}","package earth.worldwind.render.image\n\nimport earth.worldwind.geom.Sector\nimport earth.worldwind.util.Level\nimport earth.worldwind.util.ResourcePostprocessor\nimport earth.worldwind.util.Tile\nimport org.w3c.dom.Image\nimport org.w3c.dom.events.Event\n\nactual open class ImageTile actual constructor(\n    sector: Sector, level: Level, row: Int, column: Int\n): Tile(sector, level, row, column), ResourcePostprocessor<Image> {\n    actual var imageSource: ImageSource? = null\n    actual var cacheSource: ImageSource? = null\n\n    /**\n     * Repeat image.onLoad event defined in RenderResourceCache to continue retrieval of original unprocessed image\n     */\n    override suspend fun process(resource: Image) = resource.also { resource.onload?.invoke(Event(\"load\")) as Unit }\n}","package earth.worldwind.util\n\n/**\n * Logs selected message types to the console.\n */\nactual object Logger {\n    actual val ERROR = 1\n    actual val WARN = 2\n    actual val INFO = 3\n    actual val DEBUG = 4\n\n    /**\n     * Indicates the current logging level [ERROR], [WARN], [INFO] or [DEBUG].\n     */\n    var loggingLevel = ERROR\n\n    actual fun isLoggable(priority: Int) = priority in ERROR until loggingLevel\n\n    actual fun log(priority: Int, message: String, tr: Throwable?) {\n        if (isLoggable(priority)) {\n            val messageWithTrace = tr?.run { message + '\\n' + stackTraceToString() } ?: message\n            when (priority) {\n                ERROR -> console.error(messageWithTrace)\n                WARN -> console.warn(messageWithTrace)\n                INFO -> console.info(messageWithTrace)\n                else -> console.log(messageWithTrace)\n            }\n        }\n    }\n\n    actual fun logMessage(level: Int, className: String, methodName: String, message: String, tr: Throwable?) =\n        makeMessage(className, methodName, message).also { log(level, it, tr) }\n\n    actual fun makeMessage(className: String, methodName: String, message: String) =\n        \"$className.$methodName: ${messageTable[message] ?: message}\"\n}","package earth.worldwind.util\n\n/**\n * JS use BasicPool instead of SynchronizedPool\n */\nactual class SynchronizedPool<T>: BasicPool<T>()","package earth.worldwind.util.kgl\n\nimport org.khronos.webgl.*\n\nactual data class KglShader(val obj: WebGLShader? = null) {\n    actual companion object{ actual val NONE = KglShader() }\n    actual fun isValid() = obj != null\n}\n\nactual data class KglProgram(val obj: WebGLProgram? = null) {\n    actual companion object{ actual val NONE = KglProgram() }\n    actual fun isValid() = obj != null\n}\n\nactual data class KglUniformLocation(val obj: WebGLUniformLocation? = null) {\n    actual companion object{ actual val NONE = KglUniformLocation() }\n    actual fun isValid() = obj != null\n}\n\nactual data class KglBuffer(val obj: WebGLBuffer? = null) {\n    actual companion object{ actual val NONE = KglBuffer() }\n    actual fun isValid() = obj != null\n}\n\nactual data class KglTexture(val obj: WebGLTexture? = null) {\n    actual companion object{ actual val NONE = KglTexture() }\n    actual fun isValid() = obj != null\n}\n\nactual data class KglFramebuffer(val obj: WebGLFramebuffer? = null) {\n    actual companion object{ actual val NONE = KglFramebuffer() }\n    actual fun isValid() = obj != null\n}\n\nclass WebKgl(val gl: WebGLRenderingContext) : Kgl {\n\n    override fun getParameteri(pname: Int): Int = gl.getParameter(pname) as Int\n\n    override fun getParameterf(pname: Int): Float = gl.getParameter(pname) as Float\n\n    override fun getParameteriv(pname: Int): IntArray = gl.getParameter(pname) as IntArray\n\n    override fun getParameterfv(pname: Int): FloatArray = gl.getParameter(pname) as FloatArray\n\n    override fun createShader(type: Int) = KglShader(gl.createShader(type))\n\n    override fun shaderSource(shader: KglShader, source: String) = gl.shaderSource(shader.obj, source)\n\n    override fun compileShader(shader: KglShader) = gl.compileShader(shader.obj)\n\n    override fun deleteShader(shader: KglShader) = gl.deleteShader(shader.obj)\n\n    override fun getShaderParameteri(shader: KglShader, pname: Int): Int {\n        val value = gl.getShaderParameter(shader.obj, pname)\n        return if (value is Boolean) { if (value) GL_TRUE else GL_FALSE } else value as Int\n    }\n\n    override fun getProgramInfoLog(program: KglProgram): String = gl.getProgramInfoLog(program.obj) ?: \"\"\n\n    override fun getShaderInfoLog(shader: KglShader): String = gl.getShaderInfoLog(shader.obj) ?: \"\"\n\n    override fun createProgram() = KglProgram(gl.createProgram())\n\n    override fun deleteProgram(program: KglProgram) = gl.deleteProgram(program.obj)\n\n    override fun attachShader(program: KglProgram, shader: KglShader) = gl.attachShader(program.obj, shader.obj)\n\n    override fun linkProgram(program: KglProgram) = gl.linkProgram(program.obj)\n\n    override fun useProgram(program: KglProgram) = gl.useProgram(program.obj)\n\n    override fun getProgramParameteri(program: KglProgram, pname: Int): Int {\n        val value = gl.getProgramParameter(program.obj, pname)\n        return if (value is Boolean) { if (value) GL_TRUE else GL_FALSE } else value as Int\n    }\n\n    override fun getUniformLocation(program: KglProgram, name: String) =\n        KglUniformLocation(gl.getUniformLocation(program.obj, name))\n\n    override fun bindAttribLocation(program: KglProgram, index: Int, name: String) =\n        gl.bindAttribLocation(program.obj, index, name)\n\n    override fun createBuffer() = KglBuffer(gl.createBuffer())\n\n    override fun bindBuffer(target: Int, buffer: KglBuffer) = gl.bindBuffer(target, buffer.obj)\n\n    override fun bufferData(target: Int, size: Int, sourceData: ShortArray, usage: Int, offset: Int) {\n        val arr = sourceData.unsafeCast<Int16Array>()\n        val len = size / 2\n        gl.bufferData(target, if (offset == 0 && len == arr.length) arr else arr.subarray(offset, offset + len), usage)\n    }\n\n    override fun bufferData(target: Int, size: Int, sourceData: FloatArray, usage: Int, offset: Int) {\n        val arr = sourceData.unsafeCast<Float32Array>()\n        val len = size / 4\n        gl.bufferData(target, if (offset == 0 && len == arr.length) arr else arr.subarray(offset, offset + len), usage)\n    }\n\n    override fun deleteBuffer(buffer: KglBuffer) = gl.deleteBuffer(buffer.obj)\n\n    override fun vertexAttribPointer(\n        location: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int\n    ) = gl.vertexAttribPointer(location, size, type, normalized, stride, offset)\n\n    override fun enableVertexAttribArray(location: Int) = gl.enableVertexAttribArray(location)\n\n    override fun disableVertexAttribArray(location: Int) = gl.disableVertexAttribArray(location)\n\n    override fun enable(cap: Int) = gl.enable(cap)\n\n    override fun disable(cap: Int) = gl.disable(cap)\n\n    override fun uniform1f(location: KglUniformLocation, f: Float) =\n        gl.uniform1f(location.obj, f)\n\n    override fun uniform1fv(location: KglUniformLocation, count: Int, value: FloatArray, offset: Int) {\n        val arr = value.unsafeCast<Float32Array>()\n        val len = count * 1\n        gl.uniform1fv(location.obj, if (offset == 0 && len == arr.length) arr else arr.subarray(offset, offset + len))\n    }\n\n    override fun uniform1i(location: KglUniformLocation, i: Int) =\n        gl.uniform1i(location.obj, i)\n\n    override fun uniform2f(location: KglUniformLocation, x: Float, y: Float) =\n        gl.uniform2f(location.obj, x, y)\n\n    override fun uniform2fv(location: KglUniformLocation, count: Int, value: FloatArray, offset: Int) {\n        val arr = value.unsafeCast<Float32Array>()\n        val len = count * 2\n        gl.uniform2fv(location.obj, if (offset == 0 && len == arr.length) arr else arr.subarray(offset, offset + len))\n    }\n\n    override fun uniform2i(location: KglUniformLocation, x: Int, y: Int) =\n        gl.uniform2i(location.obj, x, y)\n\n    override fun uniform3f(location: KglUniformLocation, x: Float, y: Float, z: Float) =\n        gl.uniform3f(location.obj, x, y, z)\n\n    override fun uniform3fv(location: KglUniformLocation, count: Int, value: FloatArray, offset: Int) {\n        val arr = value.unsafeCast<Float32Array>()\n        val len = count * 3\n        gl.uniform3fv(location.obj, if (offset == 0 && len == arr.length) arr else arr.subarray(offset, offset + len))\n    }\n\n    override fun uniform3i(location: KglUniformLocation, x: Int, y: Int, z: Int) =\n        gl.uniform3i(location.obj, x, y, z)\n\n    override fun uniform4f(location: KglUniformLocation, x: Float, y: Float, z: Float, w: Float) =\n        gl.uniform4f(location.obj, x, y, z, w)\n\n    override fun uniform4fv(location: KglUniformLocation, count: Int, value: FloatArray, offset: Int) {\n        val arr = value.unsafeCast<Float32Array>()\n        val len = count * 4\n        gl.uniform4fv(location.obj, if (offset == 0 && len == arr.length) arr else arr.subarray(offset, offset + len))\n    }\n\n    override fun uniform4i(location: KglUniformLocation, x: Int, y: Int, z: Int, w: Int) = gl.uniform4i(location.obj, x, y, z, w)\n\n    override fun uniformMatrix3fv(location: KglUniformLocation, count: Int, transpose: Boolean, value: FloatArray, offset: Int) {\n        val arr = value.unsafeCast<Float32Array>()\n        val len = count * 9\n        gl.uniformMatrix3fv(location.obj, transpose, if (offset == 0 && len == arr.length) arr else arr.subarray(offset, offset + len))\n    }\n\n    override fun uniformMatrix4fv(location: KglUniformLocation, count: Int, transpose: Boolean, value: FloatArray, offset: Int) {\n        val arr = value.unsafeCast<Float32Array>()\n        val len = count * 16\n        gl.uniformMatrix4fv(location.obj, transpose, if (offset == 0 && len == arr.length) arr else arr.subarray(offset, offset + len))\n    }\n\n    override fun lineWidth(width: Float) = gl.lineWidth(width)\n\n    override fun polygonOffset(factor: Float, units: Float) = gl.polygonOffset(factor, units)\n\n    override fun cullFace(mode: Int) = gl.cullFace(mode)\n\n    override fun frontFace(mode: Int) = gl.frontFace(mode)\n\n    override fun depthFunc(func: Int) = gl.depthFunc(func)\n\n    override fun depthMask(mask: Boolean) = gl.depthMask(mask)\n\n    override fun blendFunc(sFactor: Int, dFactor: Int) = gl.blendFunc(sFactor, dFactor)\n\n    override fun colorMask(r: Boolean, g: Boolean, b: Boolean, a: Boolean) = gl.colorMask(r, g, b, a)\n\n    override fun viewport(x: Int, y: Int, width: Int, height: Int) = gl.viewport(x, y, width, height)\n\n    override fun clear(mask: Int) = gl.clear(mask)\n\n    override fun clearColor(r: Float, g: Float, b: Float, a: Float) = gl.clearColor(r, g, b, a)\n\n    override fun createTexture() = KglTexture(gl.createTexture())\n\n    override fun deleteTexture(texture: KglTexture) = gl.deleteTexture(texture.obj)\n\n    override fun texImage2D(\n        target: Int, level: Int, internalFormat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, buffer: ByteArray?\n    ) = gl.texImage2D(target, level, internalFormat, width, height, border, format, type, buffer?.unsafeCast<Int8Array>())\n\n    override fun activeTexture(texture: Int) = gl.activeTexture(texture)\n\n    override fun bindTexture(target: Int, texture: KglTexture) = gl.bindTexture(target, texture.obj)\n\n    override fun generateMipmap(target: Int) = gl.generateMipmap(target)\n\n    override fun texParameteri(target: Int, pname: Int, value: Int) = gl.texParameteri(target, pname, value)\n\n    override fun drawArrays(mode: Int, first: Int, count: Int) = gl.drawArrays(mode, first, count)\n\n    override fun drawElements(mode: Int, count: Int, type: Int, offset: Int) = gl.drawElements(mode, count, type, offset)\n\n    override fun getError() = gl.getError()\n\n    override fun finish() = gl.finish()\n\n    override fun bindFramebuffer(target: Int, framebuffer: KglFramebuffer) = gl.bindFramebuffer(target, framebuffer.obj)\n\n    override fun createFramebuffer() = KglFramebuffer(gl.createFramebuffer())\n\n    override fun deleteFramebuffer(framebuffer: KglFramebuffer) = gl.deleteFramebuffer(framebuffer.obj)\n\n    override fun checkFramebufferStatus(target: Int) = gl.checkFramebufferStatus(target)\n\n    override fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: KglTexture, level: Int) =\n        gl.framebufferTexture2D(target, attachment, textarget, texture.obj, level)\n\n    override fun readPixels(\n        x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, buffer: ByteArray\n    ) = gl.readPixels(x, y, width, height, format, type, Uint8Array(buffer.unsafeCast<Int8Array>().buffer))\n\n    override fun pixelStorei(pname: Int, param: Int) = gl.pixelStorei(pname, param)\n}\n","package earth.worldwind.util.locale\n\nimport kotlinx.browser.window\n\nactual val language = window.navigator.language.split('-')[0]\nactual val country = window.navigator.language.split('-')[1]",null,null,null,null,null,"package earth.worldwind.util.format\n\nimport kotlinx.datetime.Instant\n\nactual fun convertToInstant(t: Any) = when(t) {\n    is kotlin.js.Date -> Instant.fromEpochMilliseconds(t.getTime().toLong())\n    else -> throw IllegalArgumentException(\"Can't convert to LocalDateTime: $t\")\n}\n","/*\n* Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n* All rights reserved.\n*/\n/*\n** License Applicability. Except to the extent portions of this file are\n** made subject to an alternative license as permitted in the SGI Free\n** Software License B, Version 1.1 (the \"License\"), the contents of this\n** file are subject only to the provisions of the License. You may not use\n** this file except in compliance with the License. You may obtain a copy\n** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n**\n** http://oss.sgi.com/projects/FreeB\n**\n** Note that, as provided in the License, the Software is distributed on an\n** \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n**\n** NOTE:  The Original Code (as defined below) has been licensed to Sun\n** Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n** (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n** 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n** you under an alternative license (\"Alternative License\").  This\n** Alternative License includes all of the provisions of the SGI License\n** except that Section 2.2 and 11 are omitted.  Any differences between\n** the Alternative License and the SGI License are offered solely by Sun\n** and not by SGI.\n**\n** Original Code. The Original Code is: OpenGL Sample Implementation,\n** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n** Copyright in any portions created by third parties is as indicated\n** elsewhere herein. All Rights Reserved.\n**\n** Additional Notice Provisions: The application programming interfaces\n** established by SGI in conjunction with the Original Code are The\n** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n** Window System(R) (Version 1.3), released October 19, 1998. This software\n** was created using the OpenGL(R) version 1.2.1 Sample Implementation\n** published by SGI, but has not been independently verified as being\n** compliant with the OpenGL(R) version 1.2.1 Specification.\n**\n** Author: Eric Veach, July 1994\n** Java Port: Pepijn Van Eeckhoudt, July 2003\n** Java Port: Nathan Parker Burg, August 2003\n** Kotlin Port: Eugene Maksymenko, April 2022\n*/\npackage earth.worldwind.util.glu.tessellator\n\nimport kotlin.math.abs\n\n@Suppress(\"NAME_SHADOWING\")\ninternal object Geom {\n    /* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),\n     * evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n     * Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.\n     * If uw is vertical (and thus passes thru v), the result is zero.\n     *\n     * The calculation is extremely accurate and stable, even when v\n     * is very close to u or w.  In particular if we set v->t = 0 and\n     * let r be the negated result (this evaluates (uw)(v->s)), then\n     * r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).\n     */\n    fun edgeEval(u: GLUvertex, v: GLUvertex, w: GLUvertex): Double {\n        val gapL = v.s - u.s\n        val gapR = w.s - v.s\n        return if (gapL + gapR > 0) {\n            if (gapL < gapR) v.t - u.t + (u.t - w.t) * (gapL / (gapL + gapR))\n            else v.t - w.t + (w.t - u.t) * (gapR / (gapL + gapR))\n        } else 0.0\n        /* vertical line */\n    }\n\n    fun edgeSign(u: GLUvertex, v: GLUvertex, w: GLUvertex): Double {\n        val gapL = v.s - u.s\n        val gapR = w.s - v.s\n        return if (gapL + gapR > 0) (v.t - w.t) * gapL + (v.t - u.t) * gapR else 0.0\n        /* vertical line */\n    }\n\n    /**\n     * Define versions of EdgeSign, EdgeEval with s and t transposed.\n     */\n    fun transEval(u: GLUvertex, v: GLUvertex, w: GLUvertex): Double {\n        /* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),\n         * evaluates the t-coord of the edge uw at the s-coord of the vertex v.\n         * Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.\n         * If uw is vertical (and thus passes thru v), the result is zero.\n         *\n         * The calculation is extremely accurate and stable, even when v\n         * is very close to u or w.  In particular if we set v->s = 0 and\n         * let r be the negated result (this evaluates (uw)(v->t)), then\n         * r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).\n         */\n        val gapL = v.t - u.t\n        val gapR = w.t - v.t\n        return if (gapL + gapR > 0) {\n            if (gapL < gapR) v.s - u.s + (u.s - w.s) * (gapL / (gapL + gapR))\n            else v.s - w.s + (w.s - u.s) * (gapR / (gapL + gapR))\n        } else 0.0\n        /* vertical line */\n    }\n\n    /**\n     *  Returns a number whose sign matches TransEval(u,v,w) but which\n     * is cheaper to evaluate.  Returns > 0, == 0 , or < 0\n     * as v is above, on, or below the edge uw.\n     */\n    fun transSign(u: GLUvertex, v: GLUvertex, w: GLUvertex): Double {\n        val gapL = v.t - u.t\n        val gapR = w.t - v.t\n        return if (gapL + gapR > 0) (v.s - w.s) * gapL + (v.s - u.s) * gapR else 0.0\n        /* vertical line */\n    }\n\n    /**\n     *  For almost-degenerate situations, the results are not reliable.\n     * Unless the floating-point arithmetic can be performed without\n     * rounding errors, *any* implementation will give incorrect results\n     * on some degenerate inputs, so the client must have some way to\n     * handle this situation.\n     */\n    fun vertCCW(u: GLUvertex, v: GLUvertex, w: GLUvertex) =\n        u.s * (v.t - w.t) + v.s * (w.t - u.t) + w.s * (u.t - v.t) >= 0\n\n    /**\n     *  Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),\n     * or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces\n     * this in the rare case that one argument is slightly negative.\n     * The implementation is extremely stable numerically.\n     * In particular it guarantees that the result r satisfies\n     * MIN(x,y) <= r <= MAX(x,y), and the results are very accurate\n     * even when a and b differ greatly in magnitude.\n     */\n    fun interpolate(a: Double, x: Double, b: Double, y: Double): Double {\n        val a = if (a < 0) 0.0 else a\n        val b = if (b < 0) 0.0 else b\n        return if (a <= b) {\n            if (b == 0.0) (x + y) / 2.0\n            else x + (y - x) * (a / (a + b))\n        } else y + (x - y) * (b / (a + b))\n    }\n\n    /**\n     * Given edges (o1,d1) and (o2,d2), compute their point of intersection.\n     * The computed point is guaranteed to lie in the intersection of the\n     * bounding rectangles defined by each edge.\n     */\n    fun edgeIntersect(\n        o1: GLUvertex, d1: GLUvertex, o2: GLUvertex, d2: GLUvertex, v: GLUvertex\n    ) {\n        var o1 = o1\n        var d1 = d1\n        var o2 = o2\n        var d2 = d2\n\n        /**\n         * This is certainly not the most efficient way to find the intersection\n         * of two line segments, but it is very numerically stable.\n         *\n         * Strategy: find the two middle vertices in the VertLeq ordering,\n         * and interpolate the intersection s-value from these.  Then repeat\n         * using the TransLeq ordering to find the intersection t-value.\n         */\n        if (!vertLeq(o1, d1)) {\n            val temp = o1\n            o1 = d1\n            d1 = temp\n        }\n        if (!vertLeq(o2, d2)) {\n            val temp = o2\n            o2 = d2\n            d2 = temp\n        }\n        if (!vertLeq(o1, o2)) {\n            var temp = o1\n            o1 = o2\n            o2 = temp\n            temp = d1\n            d1 = d2\n            d2 = temp\n        }\n        if (!vertLeq(o2, d1)) {\n            /* Technically, no intersection -- do our best */\n            v.s = (o2.s + d1.s) / 2.0\n        } else if (vertLeq(d1, d2)) {\n            /* Interpolate between o2 and d1 */\n            var z1 = edgeEval(o1, o2, d1)\n            var z2 = edgeEval(o2, d1, d2)\n            if (z1 + z2 < 0) {\n                z1 = -z1\n                z2 = -z2\n            }\n            v.s = interpolate(z1, o2.s, z2, d1.s)\n        } else {\n            /* Interpolate between o2 and d2 */\n            var z1 = edgeSign(o1, o2, d1)\n            var z2 = -edgeSign(o1, d2, d1)\n            if (z1 + z2 < 0) {\n                z1 = -z1\n                z2 = -z2\n            }\n            v.s = interpolate(z1, o2.s, z2, d2.s)\n        }\n\n        /* Now repeat the process for t */\n        if (!transLeq(o1, d1)) {\n            val temp = o1\n            o1 = d1\n            d1 = temp\n        }\n        if (!transLeq(o2, d2)) {\n            val temp = o2\n            o2 = d2\n            d2 = temp\n        }\n        if (!transLeq(o1, o2)) {\n            var temp = o2\n            o2 = o1\n            o1 = temp\n            temp = d2\n            d2 = d1\n            d1 = temp\n        }\n        if (!transLeq(o2, d1)) {\n            /* Technically, no intersection -- do our best */\n            v.t = (o2.t + d1.t) / 2.0\n        } else if (transLeq(d1, d2)) {\n            /* Interpolate between o2 and d1 */\n            var z1 = transEval(o1, o2, d1)\n            var z2 = transEval(o2, d1, d2)\n            if (z1 + z2 < 0) {\n                z1 = -z1\n                z2 = -z2\n            }\n            v.t = interpolate(z1, o2.t, z2, d1.t)\n        } else {\n            /* Interpolate between o2 and d2 */\n            var z1 = transSign(o1, o2, d1)\n            var z2 = -transSign(o1, d2, d1)\n            if (z1 + z2 < 0) {\n                z1 = -z1\n                z2 = -z2\n            }\n            v.t = interpolate(z1, o2.t, z2, d2.t)\n        }\n    }\n\n    fun vertEq(u: GLUvertex, v: GLUvertex) = u.s == v.s && u.t == v.t\n\n    fun vertLeq(u: GLUvertex, v: GLUvertex) = u.s < v.s || u.s == v.s && u.t <= v.t\n\n    /* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */\n    fun transLeq(u: GLUvertex, v: GLUvertex) = u.t < v.t || u.t == v.t && u.s <= v.s\n\n    fun edgeGoesLeft(e: GLUhalfEdge) = vertLeq(e.sym?.org!!, e.org!!)\n\n    fun edgeGoesRight(e: GLUhalfEdge) = vertLeq(e.org!!, e.sym?.org!!)\n\n    fun vertL1dist(u: GLUvertex, v: GLUvertex) = abs(u.s - v.s) + abs(u.t - v.t)\n}","/*\n * Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n * All rights reserved.\n */\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\ninternal object Mesh {\n    /************************ Utility Routines  */\n    /**\n     * MakeEdge creates a new pair of half-edges which form their own loop.\n     * No vertex or face structures are allocated, but these must be assigned\n     * before the current edge operation is completed.\n     */\n    fun makeEdge(eNext: GLUhalfEdge): GLUhalfEdge {\n        var next = eNext\n        val e = GLUhalfEdge(true)\n        val eSym = GLUhalfEdge(false)\n\n        /* Make sure eNext points to the first edge of the edge pair */\n        if (!next.first) {\n            next = next.sym!!\n        }\n\n        /**\n         * Insert in circular doubly-linked list before eNext.\n         * Note that the prev pointer is stored in Sym->next.\n         */\n        val ePrev = next.sym?.next!!\n        eSym.next = ePrev\n        ePrev.sym?.next = e\n        e.next = next\n        next.sym?.next = eSym\n        e.sym = eSym\n        e.oNext = e\n        e.lNext = eSym\n        e.org = null\n        e.lFace = null\n        e.winding = 0\n        e.activeRegion = null\n        eSym.sym = e\n        eSym.oNext = eSym\n        eSym.lNext = e\n        eSym.org = null\n        eSym.lFace = null\n        eSym.winding = 0\n        eSym.activeRegion = null\n        return e\n    }\n\n    /**\n     * Splice( a, b ) is best described by the Guibas/Stolfi paper or the\n     * CS348a notes (see mesh.h).  Basically it modifies the mesh so that\n     * a->Onext and b->Onext are exchanged.  This can have various effects\n     * depending on whether a and b belong to different face or vertex rings.\n     * For more explanation see __gl_meshSplice() below.\n     */\n    fun splice(a: GLUhalfEdge, b: GLUhalfEdge) {\n        val aONext = a.oNext!!\n        val bONext = b.oNext!!\n        aONext.sym?.lNext = b\n        bONext.sym?.lNext = a\n        a.oNext = bONext\n        b.oNext = aONext\n    }\n\n    /**\n     * MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the\n     * origin of all edges in the vertex loop to which eOrig belongs. \"vNext\" gives\n     * a place to insert the new vertex in the global vertex list.  We insert\n     * the new vertex *before* vNext so that algorithms which walk the vertex\n     * list will not see the newly created vertices.\n     */\n    fun makeVertex(newVertex: GLUvertex, eOrig: GLUhalfEdge, vNext: GLUvertex) {\n        /* insert in circular doubly-linked list before vNext */\n        val vPrev = vNext.prev!!\n        newVertex.prev = vPrev\n        vPrev.next = newVertex\n        newVertex.next = vNext\n        vNext.prev = newVertex\n        newVertex.anEdge = eOrig\n        newVertex.data = null\n        /* leave coords, s, t undefined */\n\n        /* fix other edges on this vertex loop */\n        var e = eOrig\n        do {\n            e.org = newVertex\n            e = e.oNext!!\n        } while (e !== eOrig)\n    }\n\n    /**\n     * MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left\n     * face of all edges in the face loop to which eOrig belongs.  \"fNext\" gives\n     * a place to insert the new face in the global face list.  We insert\n     * the new face *before* fNext so that algorithms which walk the face\n     * list will not see the newly created faces.\n     */\n    fun makeFace(newFace: GLUface, eOrig: GLUhalfEdge, fNext: GLUface) {\n        /* insert in circular doubly-linked list before fNext */\n        val fPrev = fNext.prev!!\n        newFace.prev = fPrev\n        fPrev.next = newFace\n        newFace.next = fNext\n        fNext.prev = newFace\n        newFace.anEdge = eOrig\n        newFace.data = null\n        newFace.trail = null\n        newFace.marked = false\n\n        /**\n         * The new face is marked \"inside\" if the old one was.  This is a\n         * convenience for the common case where a face has been split in two.\n         */\n        newFace.inside = fNext.inside\n\n        /* fix other edges on this face loop */\n        var e = eOrig\n        do {\n            e.lFace = newFace\n            e = e.lNext!!\n        } while (e !== eOrig)\n    }\n\n    /**\n     * KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),\n     * and removes from the global edge list.\n     */\n    fun killEdge(eDel: GLUhalfEdge) {\n        var del = eDel\n\n        /* Half-edges are allocated in pairs, see EdgePair above */\n        if (!del.first) {\n            del = del.sym!!\n        }\n\n        /* delete from circular doubly-linked list */\n        val eNext = del.next!!\n        val ePrev = del.sym?.next!!\n        eNext.sym?.next = ePrev\n        ePrev.sym?.next = eNext\n    }\n\n    /**\n     * KillVertex( vDel ) destroys a vertex and removes it from the global\n     * vertex list.  It updates the vertex loop to point to a given new vertex.\n     */\n    fun killVertex(vDel: GLUvertex, newOrg: GLUvertex?) {\n        val eStart = vDel.anEdge!!\n\n        /* change the origin of all affected edges */\n        var e = eStart\n        do {\n            e.org = newOrg\n            e = e.oNext!!\n        } while (e !== eStart)\n\n        /* delete from circular doubly-linked list */\n        val vPrev = vDel.prev!!\n        val vNext = vDel.next!!\n        vNext.prev = vPrev\n        vPrev.next = vNext\n    }\n\n    /**\n     * KillFace( fDel ) destroys a face and removes it from the global face\n     * list.  It updates the face loop to point to a given new face.\n     */\n    fun killFace(fDel: GLUface, newLface: GLUface?) {\n        val eStart = fDel.anEdge!!\n\n        /* change the left face of all affected edges */\n        var e = eStart\n        do {\n            e.lFace = newLface\n            e = e.lNext!!\n        } while (e !== eStart)\n\n        /* delete from circular doubly-linked list */\n        val fPrev = fDel.prev!!\n        val fNext = fDel.next!!\n        fNext.prev = fPrev\n        fPrev.next = fNext\n    }\n\n    /****************** Basic Edge Operations  */\n    /**\n     * __gl_meshMakeEdge creates one edge, two vertices, and a loop (face).\n     * The loop consists of the two new half-edges.\n     */\n    fun glMeshMakeEdge(mesh: GLUmesh): GLUhalfEdge {\n        val newVertex1 = GLUvertex()\n        val newVertex2 = GLUvertex()\n        val newFace = GLUface()\n        val e = makeEdge(mesh.eHead)\n        makeVertex(newVertex1, e, mesh.vHead)\n        makeVertex(newVertex2, e.sym!!, mesh.vHead)\n        makeFace(newFace, e, mesh.fHead)\n        return e\n    }\n\n    /**\n     * __gl_meshSplice( eOrg, eDst ) is the basic operation for changing the\n     * mesh connectivity and topology.  It changes the mesh so that\n     *\teOrg->Onext <- OLD( eDst->Onext )\n     *\teDst->Onext <- OLD( eOrg->Onext )\n     * where OLD(...) means the value before the meshSplice operation.\n     *\n     * This can have two effects on the vertex structure:\n     *  - if eOrg->Org != eDst->Org, the two vertices are merged together\n     *  - if eOrg->Org == eDst->Org, the origin is split into two vertices\n     * In both cases, eDst->Org is changed and eOrg->Org is untouched.\n     *\n     * Similarly (and independently) for the face structure,\n     *  - if eOrg->Lface == eDst->Lface, one loop is split into two\n     *  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\n     * In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\n     *\n     * Some special cases:\n     * If eDst == eOrg, the operation has no effect.\n     * If eDst == eOrg->Lnext, the new face will have a single edge.\n     * If eDst == eOrg->Lprev, the old face will have a single edge.\n     * If eDst == eOrg->Onext, the new vertex will have a single edge.\n     * If eDst == eOrg->Oprev, the old vertex will have a single edge.\n     */\n    fun glMeshSplice(eOrg: GLUhalfEdge, eDst: GLUhalfEdge): Boolean {\n        var joiningLoops = false\n        var joiningVertices = false\n        if (eOrg === eDst) return true\n        if (eDst.org !== eOrg.org) {\n            /* We are merging two disjoint vertices -- destroy eDst->Org */\n            joiningVertices = true\n            killVertex(eDst.org!!, eOrg.org)\n        }\n        if (eDst.lFace !== eOrg.lFace) {\n            /* We are connecting two disjoint loops -- destroy eDst.Lface */\n            joiningLoops = true\n            killFace(eDst.lFace!!, eOrg.lFace)\n        }\n\n        /* Change the edge structure */\n        splice(eDst, eOrg)\n        if (!joiningVertices) {\n            val newVertex = GLUvertex()\n\n            /**\n             * We split one vertex into two -- the new vertex is eDst.Org.\n             * Make sure the old vertex points to a valid half-edge.\n             */\n            makeVertex(newVertex, eDst, eOrg.org!!)\n            eOrg.org?.anEdge = eOrg\n        }\n        if (!joiningLoops) {\n            val newFace = GLUface()\n\n            /**\n             * We split one loop into two -- the new loop is eDst.Lface.\n             * Make sure the old face points to a valid half-edge.\n             */\n            makeFace(newFace, eDst, eOrg.lFace!!)\n            eOrg.lFace?.anEdge = eOrg\n        }\n        return true\n    }\n\n    /**\n     * __gl_meshDelete( eDel ) removes the edge eDel.  There are several cases:\n     * if (eDel.Lface != eDel.Rface), we join two loops into one; the loop\n     * eDel.Lface is deleted.  Otherwise, we are splitting one loop into two;\n     * the newly created loop will contain eDel.Dst.  If the deletion of eDel\n     * would create isolated vertices, those are deleted as well.\n     *\n     * This function could be implemented as two calls to __gl_meshSplice\n     * plus a few calls to memFree, but this would allocate and delete\n     * unnecessary vertices and faces.\n     */\n    fun glMeshDelete(eDel: GLUhalfEdge): Boolean {\n        val eDelSym = eDel.sym!!\n        var joiningLoops = false\n\n        /** First step: disconnect the origin vertex eDel.Org.  We make all\n         * changes to get a consistent mesh in this \"intermediate\" state.\n         */\n        if (eDel.lFace !== eDel.sym?.lFace) {\n            /* We are joining two loops into one -- remove the left face */\n            joiningLoops = true\n            killFace(eDel.lFace!!, eDel.sym?.lFace)\n        }\n        if (eDel.oNext === eDel) {\n            killVertex(eDel.org!!, null)\n        } else {\n            /* Make sure that eDel.Org and eDel.Sym.Lface point to valid half-edges */\n            eDel.sym?.lFace?.anEdge = eDel.sym?.lNext\n            eDel.org?.anEdge = eDel.oNext\n            splice(eDel, eDel.sym?.lNext!!)\n            if (!joiningLoops) {\n                val newFace = GLUface()\n                /* We are splitting one loop into two -- create a new loop for eDel. */\n                makeFace(newFace, eDel, eDel.lFace!!)\n            }\n        }\n\n        /**\n         * Claim: the mesh is now in a consistent state, except that eDel.Org\n         * may have been deleted.  Now we disconnect eDel.Dst.\n         */\n        if (eDelSym.oNext === eDelSym) {\n            killVertex(eDelSym.org!!, null)\n            killFace(eDelSym.lFace!!, null)\n        } else {\n            /* Make sure that eDel.Dst and eDel.Lface point to valid half-edges */\n            eDel.lFace?.anEdge = eDelSym.sym?.lNext\n            eDelSym.org?.anEdge = eDelSym.oNext\n            splice(eDelSym, eDelSym.sym?.lNext!!)\n        }\n\n        /* Any isolated vertices or faces have already been freed. */\n        killEdge(eDel)\n        return true\n    }\n\n    /******************** Other Edge Operations  */\n    /**\n     * All these routines can be implemented with the basic edge\n     * operations above.  They are provided for convenience and efficiency.\n     */\n    /**\n     * __gl_meshAddEdgeVertex( eOrg ) creates a new edge eNew such that\n     * eNew == eOrg.Lnext, and eNew.Dst is a newly created vertex.\n     * eOrg and eNew will have the same left face.\n     */\n    fun glMeshAddEdgeVertex(eOrg: GLUhalfEdge): GLUhalfEdge {\n        val eNew = makeEdge(eOrg)\n        val eNewSym = eNew.sym!!\n\n        /* Connect the new edge appropriately */\n        splice(eNew, eOrg.lNext!!)\n\n        /* Set the vertex and face information */\n        eNew.org = eOrg.sym?.org\n        run {\n            val newVertex = GLUvertex()\n            makeVertex(newVertex, eNewSym, eNew.org!!)\n        }\n        eNewSym.lFace = eOrg.lFace\n        eNew.lFace = eNewSym.lFace\n        return eNew\n    }\n\n    /**\n     *  __gl_meshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\n     * such that eNew == eOrg.Lnext.  The new vertex is eOrg.Sym.Org == eNew.Org.\n     * eOrg and eNew will have the same left face.\n     */\n    fun glMeshSplitEdge(eOrg: GLUhalfEdge): GLUhalfEdge {\n        val tempHalfEdge = glMeshAddEdgeVertex(eOrg)\n        val eNew = tempHalfEdge.sym!!\n\n        /* Disconnect eOrg from eOrg.Sym.Org and connect it to eNew.Org */\n        splice(eOrg.sym!!, eOrg.sym?.sym?.lNext!!)\n        splice(eOrg.sym!!, eNew)\n\n        /* Set the vertex and face information */\n        eOrg.sym?.org = eNew.org\n        eNew.sym?.org?.anEdge = eNew.sym /* may have pointed to eOrg.Sym */\n        eNew.sym?.lFace = eOrg.sym?.lFace\n        eNew.winding = eOrg.winding /* copy old winding information */\n        eNew.sym?.winding = eOrg.sym!!.winding\n        return eNew\n    }\n\n    /**\n     * __gl_meshConnect( eOrg, eDst ) creates a new edge from eOrg.Sym.Org\n     * to eDst.Org, and returns the corresponding half-edge eNew.\n     * If eOrg.Lface == eDst.Lface, this splits one loop into two,\n     * and the newly created loop is eNew.Lface.  Otherwise, two disjoint\n     * loops are merged into one, and the loop eDst.Lface is destroyed.\n     *\n     * If (eOrg == eDst), the new face will have only two edges.\n     * If (eOrg.Lnext == eDst), the old face is reduced to a single edge.\n     * If (eOrg.Lnext.Lnext == eDst), the old face is reduced to two edges.\n     */\n    fun glMeshConnect(eOrg: GLUhalfEdge, eDst: GLUhalfEdge): GLUhalfEdge {\n        var joiningLoops = false\n        val eNew = makeEdge(eOrg)\n        val eNewSym = eNew.sym!!\n        if (eDst.lFace !== eOrg.lFace) {\n            /* We are connecting two disjoint loops -- destroy eDst.Lface */\n            joiningLoops = true\n            killFace(eDst.lFace!!, eOrg.lFace)\n        }\n\n        /* Connect the new edge appropriately */\n        splice(eNew, eOrg.lNext!!)\n        splice(eNewSym, eDst)\n\n        /* Set the vertex and face information */\n        eNew.org = eOrg.sym?.org\n        eNewSym.org = eDst.org\n        eNewSym.lFace = eOrg.lFace\n        eNew.lFace = eNewSym.lFace\n\n        /* Make sure the old face points to a valid half-edge */\n        eOrg.lFace?.anEdge = eNewSym\n        if (!joiningLoops) {\n            val newFace = GLUface()\n            /* We split one loop into two -- the new loop is eNew.Lface */\n            makeFace(newFace, eNew, eOrg.lFace!!)\n        }\n        return eNew\n    }\n\n    /******************** Other Operations  */\n    /**\n     * __gl_meshZapFace( fZap ) destroys a face and removes it from the\n     * global face list.  All edges of fZap will have a null pointer as their\n     * left face.  Any edges which also have a null pointer as their right face\n     * are deleted entirely (along with any isolated vertices this produces).\n     * An entire mesh can be deleted by zapping its faces, one at a time,\n     * in any order.  Zapped faces cannot be used in further mesh operations!\n     */\n    fun glMeshZapFace(fZap: GLUface) {\n        val eStart = fZap.anEdge!!\n\n        /* walk around face, deleting edges whose right face is also null */\n        var eNext = eStart.lNext!!\n        do {\n            val e = eNext\n            eNext = e.lNext!!\n            e.lFace = null\n            if (e.sym?.lFace == null) {\n                /* delete the edge -- see __gl_MeshDelete above */\n                if (e.oNext === e) {\n                    killVertex(e.org!!, null)\n                } else {\n                    /* Make sure that e.Org points to a valid half-edge */\n                    e.org?.anEdge = e.oNext\n                    splice(e, e.sym?.lNext!!)\n                }\n                val eSym = e.sym!!\n                if (eSym.oNext === eSym) {\n                    killVertex(eSym.org!!, null)\n                } else {\n                    /* Make sure that eSym.Org points to a valid half-edge */\n                    eSym.org?.anEdge = eSym.oNext\n                    splice(eSym, eSym.sym?.lNext!!)\n                }\n                killEdge(e)\n            }\n        } while (e !== eStart)\n\n        /* delete from circular doubly-linked list */\n        val fPrev = fZap.prev!!\n        val fNext = fZap.next!!\n        fNext.prev = fPrev\n        fPrev.next = fNext\n    }\n\n    /**\n     * __gl_meshNewMesh() creates a new mesh with no edges, no vertices,\n     * and no loops (what we usually call a \"face\").\n     */\n    fun glMeshNewMesh(): GLUmesh {\n        val mesh = GLUmesh()\n        val v = mesh.vHead\n        val f = mesh.fHead\n        val e = mesh.eHead\n        val eSym = mesh.eHeadSym\n        v.prev = v\n        v.next = v.prev\n        v.anEdge = null\n        v.data = null\n        f.prev = f\n        f.next = f.prev\n        f.anEdge = null\n        f.data = null\n        f.trail = null\n        f.marked = false\n        f.inside = false\n        e.next = e\n        e.sym = eSym\n        e.oNext = null\n        e.lNext = null\n        e.org = null\n        e.lFace = null\n        e.winding = 0\n        e.activeRegion = null\n        eSym.next = eSym\n        eSym.sym = e\n        eSym.oNext = null\n        eSym.lNext = null\n        eSym.org = null\n        eSym.lFace = null\n        eSym.winding = 0\n        eSym.activeRegion = null\n        return mesh\n    }\n\n    /**\n     * glMeshUnion( mesh1, mesh2 ) forms the union of all structures in\n     * both meshes, and returns the new mesh (the old meshes are destroyed).\n     */\n    fun glMeshUnion(mesh1: GLUmesh, mesh2: GLUmesh): GLUmesh {\n        val f1 = mesh1.fHead\n        val v1 = mesh1.vHead\n        val e1 = mesh1.eHead\n        val f2 = mesh2.fHead\n        val v2 = mesh2.vHead\n        val e2 = mesh2.eHead\n\n        /* Add the faces, vertices, and edges of mesh2 to those of mesh1 */\n        if (f2.next !== f2) {\n            f1.prev?.next = f2.next\n            f2.next?.prev = f1.prev\n            f2.prev?.next = f1\n            f1.prev = f2.prev\n        }\n        if (v2.next !== v2) {\n            v1.prev?.next = v2.next\n            v2.next?.prev = v1.prev\n            v2.prev?.next = v1\n            v1.prev = v2.prev\n        }\n        if (e2.next !== e2) {\n            e1.sym?.next?.sym?.next = e2.next\n            e2.next?.sym?.next = e1.sym?.next\n            e2.sym?.next?.sym?.next = e1\n            e1.sym?.next = e2.sym?.next\n        }\n        return mesh1\n    }\n\n    /**\n     * glMeshDeleteMesh( mesh ) will free all storage for any valid mesh.\n     */\n    fun glMeshDeleteMeshZap(mesh: GLUmesh) {\n        val fHead = mesh.fHead\n        while (fHead.next !== fHead) {\n            glMeshZapFace(fHead.next!!)\n        }\n    }\n\n    /**\n     * __gl_meshDeleteMesh( mesh ) will free all storage for any valid mesh.\n     */\n    fun glMeshDeleteMesh(mesh: GLUmesh) {\n        var f = mesh.fHead.next!!\n        while (f !== mesh.fHead) {\n            val fNext = f.next!!\n            f = fNext\n        }\n        var v = mesh.vHead.next!!\n        while (v !== mesh.vHead) {\n            val vNext = v.next!!\n            v = vNext\n        }\n        var e = mesh.eHead.next!!\n        while (e !== mesh.eHead) {\n            /* One call frees both e and e.Sym (see EdgePair above) */\n            val eNext = e.next!!\n            e = eNext\n        }\n    }\n\n    /**\n     * __gl_meshCheckMesh( mesh ) checks a mesh for self-consistency.\n     */\n    fun glMeshCheckMesh(mesh: GLUmesh) {\n        val fHead = mesh.fHead\n        val vHead = mesh.vHead\n        val eHead = mesh.eHead\n        var fPrev = fHead\n        while (true) {\n            val f = fPrev.next!!\n            if (f === fHead) break\n            var e = f.anEdge!!\n            do e = e.lNext!! while (e !== f.anEdge)\n            fPrev = f\n        }\n        var vPrev = vHead\n        while (true) {\n            val v = vPrev.next!!\n            if (v === vHead) break\n            var e = v.anEdge!!\n            do {\n                e = e.oNext!!\n            } while (e !== v.anEdge)\n            vPrev = v\n        }\n        var ePrev = eHead\n        while (true) {\n            val e = ePrev.next!!\n            if (e === eHead) break\n            ePrev = e\n        }\n    }\n}","/*\n * Portions Copyright (C) 2003-2006 Sun Microsystems, Inc.\n * All rights reserved.\n */\n/*\n * License Applicability. Except to the extent portions of this file are\n * made subject to an alternative license as permitted in the SGI Free\n * Software License B, Version 1.1 (the \"License\"), the contents of this\n * file are subject only to the provisions of the License. You may not use\n * this file except in compliance with the License. You may obtain a copy\n * of the License at Silicon Graphics, Inc., attn: Legal Services, 1600\n * Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:\n *\n * http://oss.sgi.com/projects/FreeB\n *\n * Note that, as provided in the License, the Software is distributed on an\n * \"AS IS\" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS\n * DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND\n * CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A\n * PARTICULAR PURPOSE, AND NON-INFRINGEMENT.\n *\n * NOTE:  The Original Code (as defined below) has been licensed to Sun\n * Microsystems, Inc. (\"Sun\") under the SGI Free Software License B\n * (Version 1.1), shown above (\"SGI License\").   Pursuant to Section\n * 3.2(3) of the SGI License, Sun is distributing the Covered Code to\n * you under an alternative license (\"Alternative License\").  This\n * Alternative License includes all of the provisions of the SGI License\n * except that Section 2.2 and 11 are omitted.  Any differences between\n * the Alternative License and the SGI License are offered solely by Sun\n * and not by SGI.\n *\n * Original Code. The Original Code is: OpenGL Sample Implementation,\n * Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,\n * Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.\n * Copyright in any portions created by third parties is as indicated\n * elsewhere herein. All Rights Reserved.\n *\n * Additional Notice Provisions: The application programming interfaces\n * established by SGI in conjunction with the Original Code are The\n * OpenGL(R) Graphics System: A Specification (Version 1.2.1), released\n * April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version\n * 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X\n * Window System(R) (Version 1.3), released October 19, 1998. This software\n * was created using the OpenGL(R) version 1.2.1 Sample Implementation\n * published by SGI, but has not been independently verified as being\n * compliant with the OpenGL(R) version 1.2.1 Specification.\n *\n * Author: Eric Veach, July 1994\n * Java Port: Pepijn Van Eeckhoudt, July 2003\n * Java Port: Nathan Parker Burg, August 2003\n * Kotlin Port: Eugene Maksymenko, April 2022\n */\npackage earth.worldwind.util.glu.tessellator\n\ninternal object TessMono {\n    /**\n     * __gl_meshTessellateMonoRegion( face ) tessellates a monotone region\n     * (what else would it do??)  The region must consist of a single\n     * loop of half-edges (see mesh.h) oriented CCW.  \"Monotone\" in this\n     * case means that any vertical line intersects the interior of the\n     * region in a single interval.\n     *\n     * Tessellation consists of adding interior edges (actually pairs of\n     * half-edges), to split the region into non-overlapping triangles.\n     *\n     * The basic idea is explained in Preparata and Shamos (which I don''t\n     * have handy right now), although their implementation is more\n     * complicated than this one.  The are two edge chains, an upper chain\n     * and a lower chain.  We process all vertices from both chains in order,\n     * from right to left.\n     *\n     * The algorithm ensures that the following invariant holds after each\n     * vertex is processed: the untessellated region consists of two\n     * chains, where one chain (say the upper) is a single edge, and\n     * the other chain is concave.  The left vertex of the single edge\n     * is always to the left of all vertices in the concave chain.\n     *\n     * Each step consists of adding the rightmost unprocessed vertex to one\n     * of the two chains, and forming a fan of triangles from the rightmost\n     * of two chain endpoints.  Determining whether we can add each triangle\n     * to the fan is a simple orientation test.  By making the fan as large\n     * as possible, we restore the invariant (check it yourself).\n     */\n    fun glMeshTessellateMonoRegion(face: GLUface) {\n        /**\n         * All edges are oriented CCW around the boundary of the region.\n         * First, find the half-edge whose origin vertex is rightmost.\n         * Since the sweep goes from left to right, face->anEdge should\n         * be close to the edge we want.\n         */\n        var up = face.anEdge!!\n        while (Geom.vertLeq(up.sym?.org!!, up.org!!)) {\n            up = up.oNext?.sym!!\n        }\n        while (Geom.vertLeq(up.org!!, up.sym?.org!!)) {\n            up = up.lNext!!\n        }\n        var lo = up.oNext?.sym!!\n        while (up.lNext !== lo) {\n            if (Geom.vertLeq(up.sym?.org!!, lo.org!!)) {\n                /**\n                 * up.Sym.Org is on the left.  It is safe to form triangles from lo.Org.\n                 * The EdgeGoesLeft test guarantees progress even when some triangles\n                 * are CW, given that the upper and lower chains are truly monotone.\n                 */\n                while (lo.lNext !== up && (Geom.edgeGoesLeft(lo.lNext!!)\n                            || Geom.edgeSign(lo.org!!, lo.sym?.org!!, lo.lNext?.sym?.org!!) <= 0)\n                ) {\n                    val tempHalfEdge = Mesh.glMeshConnect(lo.lNext!!, lo)\n                    lo = tempHalfEdge.sym!!\n                }\n                lo = lo.oNext?.sym!!\n            } else {\n                /* lo.Org is on the left.  We can make CCW triangles from up.Sym.Org. */\n                while (lo.lNext !== up && (Geom.edgeGoesRight(up.oNext?.sym!!)\n                            || Geom.edgeSign(up.sym?.org!!, up.org!!, up.oNext?.sym?.org!!) >= 0)\n                ) {\n                    val tempHalfEdge = Mesh.glMeshConnect(up, up.oNext?.sym!!)\n                    up = tempHalfEdge.sym!!\n                }\n                up = up.lNext!!\n            }\n        }\n        while (lo.lNext?.lNext !== up) {\n            val tempHalfEdge = Mesh.glMeshConnect(lo.lNext!!, lo)\n            lo = tempHalfEdge.sym!!\n        }\n    }\n\n    /**\n     * __gl_meshTessellateInterior( mesh ) tessellates each region of\n     * the mesh which is marked \"inside\" the polygon.  Each such region\n     * must be monotone.\n     */\n    fun glMeshTessellateInterior(mesh: GLUmesh): Boolean {\n        var f = mesh.fHead.next!!\n        while (f !== mesh.fHead) {\n            /* Make sure we don''t try to tessellate the new triangles. */\n            val next = f.next!!\n            if (f.inside) {\n                glMeshTessellateMonoRegion(f)\n            }\n            f = next\n        }\n        return true\n    }\n\n    /**\n     * __gl_meshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces\n     * which are not marked \"inside\" the polygon.  Since further mesh operations\n     * on NULL faces are not allowed, the main purpose is to clean up the\n     * mesh so that exterior loops are not represented in the data structure.\n     */\n    fun glMeshDiscardExterior(mesh: GLUmesh) {\n        var f = mesh.fHead.next!!\n        while (f !== mesh.fHead) {\n            /* Since f will be destroyed, save its next pointer. */\n            val next = f.next!!\n            if (!f.inside) {\n                Mesh.glMeshZapFace(f)\n            }\n            f = next\n        }\n    }\n\n    /**\n     * __gl_meshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the\n     * winding numbers on all edges so that regions marked \"inside\" the\n     * polygon have a winding number of \"value\", and regions outside\n     * have a winding number of 0.\n     *\n     * If keepOnlyBoundary is TRUE, it also deletes all edges which do not\n     * separate an interior region from an exterior one.\n     */\n    fun glMeshSetWindingNumber(mesh: GLUmesh, value: Int, keepOnlyBoundary: Boolean): Boolean {\n        var e = mesh.eHead.next!!\n        while (e !== mesh.eHead) {\n            val eNext = e.next!!\n            if (e.sym?.lFace?.inside != e.lFace?.inside) {\n\n                /* This is a boundary edge (one side is interior, one is exterior). */\n                e.winding = if (e.lFace!!.inside) value else -value\n            } else {\n\n                /* Both regions are interior, or both are exterior. */\n                if (!keepOnlyBoundary) {\n                    e.winding = 0\n                } else {\n                    if (!Mesh.glMeshDelete(e)) return false\n                }\n            }\n            e = eNext\n        }\n        return true\n    }\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(960);\n"],"names":["root","factory","exports","module","define","amd","this","createErrorType","name","init","superErrorClass","JsJodaException","message","Error","captureStackTrace","constructor","stack","apply","arguments","toString","prototype","Object","create","DateTimeException","cause","msg","DateTimeParseException","text","index","parsedString","errorIndex","UnsupportedTemporalTypeException","ArithmeticException","IllegalArgumentException","IllegalStateException","NullPointerException","_inheritsLoose","subClass","superClass","__proto__","_assertThisInitialized","self","ReferenceError","assert","assertion","error","requireNonNull","value","parameterName","requireInstance","_class","abstractMethodFail","methodName","TypeError","assert$1","freeze","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","MathUtil","intDiv","x","y","r","roundDown","safeZero","intMod","Math","ceil","floor","floorDiv","floorMod","safeAdd","verifyInt","safeToInt","safeSubtract","safeMultiply","parseInt","_parseInt","_x","isNaN","compareNumbers","a","b","smi","int","hash","number","Infinity","result","hashCode","_len","length","numbers","Array","_key","_i","_numbers","n","Enum","_name","_proto","equals","other","toJSON","TemporalAmount","get","unit","units","addTo","temporal","subtractFrom","TemporalUnit","duration","isDurationEstimated","isDateBased","isTimeBased","isSupportedBy","dateTime","periodToAdd","between","temporal1","temporal2","Duration","_TemporalAmount","seconds","nanos","_this","call","_seconds","_nanos","ofDays","days","_create","LocalTime","SECONDS_PER_DAY","ofHours","hours","SECONDS_PER_HOUR","ofMinutes","minutes","SECONDS_PER_MINUTE","ofSeconds","nanoAdjustment","secs","NANOS_PER_SECOND","nos","ofMillis","millis","mos","ofNanos","of","amount","ZERO","plus","from","forEach","startInclusive","endExclusive","until","ChronoUnit","SECONDS","isSupported","ChronoField","NANO_OF_SECOND","startNos","getLong","adjustedEnd","with","e","parse","matches","RegExp","exec","negate","dayMatch","hourMatch","minuteMatch","secondMatch","fractionMatch","daysAsSecs","_parseNumber","hoursAsSecs","minsAsSecs","negativeSecs","charAt","_parseFraction","ex","parsed","multiplier","errorText","substring","parseFloat","_createSecondsNanos","_createNegateDaysHoursMinutesSecondsNanos","negated","NANOS","isZero","isNegative","nano","withSeconds","withNanos","nanoOfSecond","checkValidIntValue","plusDuration","durationOrNumber","unitOrNumber","plusAmountUnit","plusSecondsNanos","amountToAdd","DAYS","plusNanos","MICROS","MILLIS","plusMillis","plusSeconds","multipliedBy","plusDays","daysToAdd","plusHours","hoursToAdd","plusMinutes","minutesToAdd","secondsToAdd","millisToAdd","nanosToAdd","epochSec","minus","minusDuration","minusAmountUnit","secsToSubtract","nanosToSubtract","amountToSubtract","minusDays","daysToSubtract","minusHours","hoursToSubtract","minusMinutes","minutesToSubtract","minusSeconds","secondsToSubtract","minusMillis","millisToSubtract","minusNanos","multiplicand","dividedBy","divisor","secsMod","abs","toDays","toHours","toMinutes","toMillis","round","toNanos","totalNanos","compareTo","otherDuration","cmp","nanoString","rval","slice","YearConstants","_TemporalUnit","estimatedDuration","_duration","FOREVER","e2","TemporalField","baseUnit","rangeUnit","range","rangeRefinedBy","getFrom","adjustInto","newValue","displayName","ValueRange","minSmallest","minLargest","maxSmallest","maxLargest","_minSmallest","_minLargest","_maxLargest","_maxSmallest","isFixed","minimum","largestMinimum","maximum","smallestMaximum","isValidValue","checkValidValue","field","isValidIntValue","isIntValue","str","_TemporalField","_baseUnit","_rangeUnit","_range","byName","fieldName","prop","DAY_OF_WEEK","ALIGNED_DAY_OF_WEEK_IN_MONTH","ALIGNED_DAY_OF_WEEK_IN_YEAR","DAY_OF_MONTH","DAY_OF_YEAR","EPOCH_DAY","ALIGNED_WEEK_OF_MONTH","ALIGNED_WEEK_OF_YEAR","MONTH_OF_YEAR","YEAR_OF_ERA","YEAR","ERA","NANO_OF_DAY","MICRO_OF_SECOND","MICRO_OF_DAY","MILLI_OF_SECOND","MILLI_OF_DAY","SECOND_OF_MINUTE","SECOND_OF_DAY","MINUTE_OF_HOUR","MINUTE_OF_DAY","HOUR_OF_AMPM","CLOCK_HOUR_OF_AMPM","HOUR_OF_DAY","CLOCK_HOUR_OF_DAY","AMPM_OF_DAY","TemporalQueries","zoneId","ZONE_ID","chronology","CHRONO","precision","PRECISION","zone","ZONE","offset","OFFSET","localDate","LOCAL_DATE","localTime","LOCAL_TIME","TemporalAccessor","query","_query","queryFrom","TemporalQuery","_Enum","createTemporalQuery","queryFromFunction","ExtendedTemporalQuery","_TemporalQuery","ENUMS","MONTHS","DayOfWeek","_TemporalAccessor","ordinal","_ordinal","values","valueOf","dayOfWeek","style","locale","Month","_value","months","newMonthVal","leapYear","FEBRUARY","APRIL","JUNE","SEPTEMBER","NOVEMBER","minLength","maxLength","firstDayOfYear","leap","JANUARY","MARCH","MAY","JULY","AUGUST","OCTOBER","DECEMBER","firstMonthOfQuarter","IsoChronology","INSTANCE","month","PATTERN","Period","years","_years","_months","_days","ofYears","ofMonths","ofWeeks","weeks","i","unitAmount","YEARS","startDate","endDate","LocalDate","_parse","yearMatch","monthMatch","weekMatch","val","withYears","withMonths","withDays","plusYears","yearsToAdd","plusMonths","monthsToAdd","minusYears","yearsToSubtract","minusMonths","monthsToSubtract","scalar","normalized","totalMonths","toTotalMonths","splitYears","splitMonths","obj","buf","ParsePosition","_index","_errorIndex","getIndex","setIndex","getErrorIndex","setErrorIndex","EnumMap","_map","putAll","otherMap","key","containsKey","hasOwnProperty","undefined","put","set","retainAll","keyList","map","remove","keyName","keySet","clear","ResolverStyle","STRICT","SMART","LENIENT","TemporalAdjuster","Temporal","p1","p2","minusAmount","plusAmount","endTemporal","withAdjuster","withFieldValue","adjuster","DefaultInterfaceTemporal","_Temporal","ChronoLocalDate","_DefaultInterfaceTemp","fieldOrUnit","ofEpochDay","toEpochDay","format","formatter","DateTimeFormatter","StringUtil","startsWith","pattern","indexOf","len","charCodeAt","ZoneId","systemDefault","getAvailableZoneIds","ofOffset","prefix","id","rules","isFixedOffset","Instant","EPOCH","ZoneRules","Fixed","instantOrLocalDateTime","offsetOfInstant","offsetOfLocalDateTime","instant","offsetOfEpochMilli","epochMilli","localDateTime","validOffsets","transition","standardOffset","daylightSavings","isDaylightSavings","isValidOffset","nextTransition","previousTransition","transitions","transitionRules","_ZoneRules","_offset","_proto2","SECONDS_CACHE","ID_CACHE","ZoneOffset","_ZoneId","totalSeconds","_validateTotalSeconds","_totalSeconds","_rules","_id","_buildId","absTotalSeconds","absHours","absMinutes","MINUTES_PER_HOUR","absSeconds","MAX_SECONDS","_validate","offsetId","first","ofHoursMinutesSeconds","pos","precededByColon","ch1","ch2","ofHoursMinutes","ofTotalSeconds","ofTotalMinutes","totalMinutes","totalSecs","OFFSET_SECONDS","DateTimeBuilder","fieldValues","chrono","date","time","leapSecond","excessDays","dtb","_addFieldValue","getFieldValue0","old","_putFieldValue0","resolve","resolverStyle","resolverFields","_mergeDate","_mergeTime","_resolveTimeInferZeroes","_resolveInstant","_checkDate","resolveDate","_addObject","val1","val2","ch","_ch","ap","hap","nod","cod","lod","sod","mod","los","cos","_nos","_cos","_los","hod","moh","som","hodVal","mohVal","somVal","nosVal","_hodVal","ofNanoOfDay","_excessDays","ofSecondOfDay","_excessDays2","dateOrTime","offsetSecs","atTime","atZone","INSTANT_SECONDS","_instant","build","type","DateTimeParseContext","_constructorSelf","_constructorFormatter","_constructorParam","_caseSensitive","_strict","_parsed","Parsed","symbols","_locale","_symbols","_overrideChronology","decimalStyle","_overrideZone","copy","isStrict","setStrict","strict","setLocale","startOptional","push","currentParsed","endOptional","successful","splice","isCaseSensitive","setCaseSensitive","caseSensitive","subSequenceEquals","cs1","offset1","cs2","offset2","toLowerCase","charEquals","charEqualsIgnoreCase","c1","c2","setParsedField","errorPos","successPos","currentParsedFieldValues","setParsedZone","getParsed","toParsed","setParsedLeapSecond","getEffectiveChronology","dateTimeParseContext","cloned","toBuilder","builder","overrideZone","DateTimePrintContext","localeOrFormatter","_temporal","adjust","_optional","getValueQuery","getValue","setDateTime","IsoFields","QUARTER_DAYS","Field","_isIso","_getWeekRangeByLocalDate","wby","_getWeekBasedYear","_getWeekRangeByYear","THURSDAY","WEDNESDAY","isLeapYear","_getWeek","dow0","doy0","dayOfYear","doyThu0","firstMonDoy0","withDayOfYear","week","year","doy","_dow","DAY_OF_QUARTER_FIELD","_Field","QUARTER_YEARS","qoy","QUARTER_OF_YEAR","moy","curValue","partialTemporal","yearLong","qoyLong","doq","DAY_OF_QUARTER","_qoy","max","QUARTER_OF_YEAR_FIELD","_Field2","_proto3","WEEK_OF_WEEK_BASED_YEAR_FIELD","_Field3","_proto4","WEEKS","WEEK_BASED_YEARS","wbyLong","WEEK_BASED_YEAR","dowLong","wowby","WEEK_OF_WEEK_BASED_YEAR","dow","plusWeeks","_dow2","temp","WEEK_BASED_YEAR_FIELD","_Field4","_proto5","newWby","resolved","Unit","_proto6","added","DecimalStyle","zeroChar","positiveSignChar","negativeSignChar","decimalPointChar","_zeroDigit","_zeroDigitCharCode","_positiveSign","_negativeSign","_decimalSeparator","positiveSign","withPositiveSign","negativeSign","withNegativeSign","zeroDigit","withZeroDigit","decimalSeparator","withDecimalSeparator","convertToDigit","char","convertNumberToI18N","numericText","diff","convertedText","String","fromCharCode","availableLocales","STANDARD","SignStyle","positive","fixedWidth","NORMAL","ALWAYS","EXCEEDS_PAD","NEVER","NOT_NEGATIVE","TextStyle","isStandalone","FULL_STANDALONE","SHORT_STANDALONE","NARROW_STANDALONE","asStandalone","FULL","SHORT","NARROW","asNormal","CharLiteralPrinterParser","literal","_literal","print","context","append","position","CompositePrinterParser","printerParsers","optional","_printerParsers","withOptional","setLength","FractionPrinterParser","minWidth","maxWidth","decimalPoint","fraction","convertToFraction","outputScale","min","substr","effectiveMin","effectiveMax","minEndPos","maxEndPos","total","digit","moveLeft","scale","pow","convertFromFraction","_min","decimal","EXCEED_POINTS","NumberPrinterParser","signStyle","subsequentWidth","_field","_minWidth","_maxWidth","_signStyle","_subsequentWidth","withFixedWidth","withSubsequentWidth","_isFixedWidth","contextValue","_getValue","sign","negative","effMinWidth","effMaxWidth","pass","parseLen","_parseLen","_setValue","ReducedPrinterParser","_NumberPrinterParser","width","baseValue","baseDate","_baseValue","_baseDate","absValue","basePart","isFixedWidth","PATTERNS","OffsetIdPrinterParser","noOffsetText","_checkPattern","bufPos","output","appendChar","noOffsetLen","array","arrayIndex","parseText","required","converted","replace","INSTANCE_ID","PadPrinterParserDecorator","printerParser","padWidth","padChar","_printerParser","_padWidth","_padChar","preLen","insert","endPos","resultPos","SettingsParser","SENSITIVE","INSENSITIVE","PARSER","PARSER$1","PARSER$2","StringLiteralPrinterParser","ZoneRulesProvider","getRules","ZoneRegion","ofId","ZoneIdPrinterParser","description","nextChar","newContext","nextNextChar","_parsePrefixedOffset","UTC","availableZoneIds","zoneIdTree","size","ZoneIdTree","createTreeMap","maxParseLength","treeMap","parsedZoneId","parseLength","parsedSubZoneId","isLeaf","prefixPos","toUpperCase","sortedZoneIds","sort","ZoneIdTreeMap","add","_treeMap","idLength","subZoneId","subTreeMap","MAX_WIDTH$1","DateTimeFormatterBuilder","_active","_parent","_padNextWidth","_padNextChar","_valueParserIndex","_of","parent","dtFormatterBuilder","parseCaseSensitive","_appendInternalPrinterParser","parseCaseInsensitive","parseStrict","parseLenient","appendValue","_appendValue1","_appendValue2","_appendValue4","_appendValuePrinterParser","pp","appendValueReduced","_appendValueReducedFieldWidthMaxWidthBaseDate","_appendValueReducedFieldWidthMaxWidthBaseValue","activeValueParser","basePP","_appendInternal","appendFraction","appendInstant","fractionalDigits","InstantPrinterParser","appendOffsetId","appendOffset","appendZoneId","appendPattern","_parsePattern","appendZoneText","appendText","appendLocalizedOffset","appendWeekField","FIELD_MAP","cur","start","count","pad","padNext","_parseField","zero","_start","appendLiteral","optionalStart","optionalEnd","BASE_DATE","_padNext1","_padNext2","cpp","_toPrinterParser","toFormatter","SECONDS_PER_10000_YEARS","SECONDS_0000_TO_1970","inSecs","inNanos","inSec","inNano","zeroSecs","hi","lo","ldt","LocalDateTime","ofEpochSecond","second","_zeroSecs","_hi","_lo","_ldt","div","minDigits","maxDigits","ISO_LOCAL_DATE","instantSecs","yearParsed","day","hour","secVal","nanoVal","sec","toEpochSecond","StringBuilder","_str","end","_decimalStyle","_resolverStyle","_resolverFields","_chrono","_zone","parsedExcessDays","PARSED_EXCESS_DAYS","parsedLeapSecond","PARSED_LEAP_SECOND","ofPattern","withChronology","withLocale","withResolverStyle","_formatTo","appendable","parse1","parse2","_parseToBuilder","_createError","abbr","_parseUnresolved0","parseUnresolved","MonthDay","dayOfMonth","_month","_day","now","zoneIdOrClock","now0","nowZoneId","nowClock","Clock","systemDefaultZone","system","clock","monthOrNumber","ofMonthNumber","ofNumberNumber","parseString","parseStringFormatter","FROM","monthValue","isValidYear","Year","isLeap","withMonth","withDayOfMonth","atYear","isAfter","isBefore","YearMonth","_year","ofNumberMonth","isSupportedField","isSupportedUnit","PROLEPTIC_MONTH","DECADES","CENTURIES","MILLENNIA","ERAS","MAX_VALUE","_getProlepticMonth","isValidDay","lengthOfMonth","lengthOfYear","adjusterOrField","f","withYear","newYear","calcMonths","monthsUntil","atDay","atEndOfMonth","isoYear","parseTextFormatter","isValidMonthDay","monthDay","ofYearDay","atMonth","atMonthMonth","atMonthNumber","atMonthDay","yearsUntil","TemporalAdjusters","firstDayOfMonth","Impl","FIRST_DAY_OF_MONTH","lastDayOfMonth","LAST_DAY_OF_MONTH","firstDayOfNextMonth","FIRST_DAY_OF_NEXT_MONTH","FIRST_DAY_OF_YEAR","lastDayOfYear","LAST_DAY_OF_YEAR","firstDayOfNextYear","FIRST_DAY_OF_NEXT_YEAR","firstInMonth","DayOfWeekInMonth","lastInMonth","dayOfWeekInMonth","next","RelativeDayOfWeek","nextOrSame","previous","previousOrSame","_TemporalAdjuster","_TemporalAdjuster2","_this2","_dowValue","curDow","dowDiff","_temp","_curDow","daysDiff","_TemporalAdjuster3","relative","_this3","_relative","calDow","_daysDiff","prolepticYear","_updateResolveMap","current","prolepticMonth","yoeLong","era","dom","_y","_y2","_days2","aw","ad","_y3","_weeks","_days3","_aw","_date","OffsetTime","_time","OffsetDateTime","toOffsetTime","clockOrZone","_now","ofInstant","ofTimeAndOffset","ofNumbers","minute","secsOfDay","epochSecond","ISO_OFFSET_TIME","toNanoOfDay","atDate","_toEpochNano","isEqual","_withLocalTimeOffset","toLocalTime","truncatedTo","nanosUntil","MINUTES","NANOS_PER_MINUTE","HOURS","NANOS_PER_HOUR","HALF_DAYS","withHour","withMinute","withSecond","withNano","withOffsetSameInstant","difference","withOffsetSameLocal","compare","ChronoZonedDateTime","toLocalDate","toInstant","toSecondOfDay","toLocalDateTime","thisEpochSec","otherEpochSec","ZonedDateTime","_ChronoZonedDateTime","_dateTime","of2","of3","of8","ofLocal","dt","preferredOffset","trans","offsetAfter","some","validOffset","ofInstant2","ofInstant3","ofStrict","isGap","ofLenient","zdt","_from","__from","ISO_ZONED_DATE_TIME","_resolveLocal","newDateTime","_resolveOffset","withEarlierOffsetAtOverlap","isOverlap","earlierOffset","offsetBefore","withLaterOffsetAtOverlap","laterOffset","withZoneSameLocal","withZoneSameInstant","withFixedOffsetZone","minusWeeks","toOffsetDateTime","_","ofDateTime","ofDateAndTime","ISO_OFFSET_DATE_TIME","atZoneSameInstant","atZoneSimilarLocal","toZonedDateTime","_withDateTimeOffset","DAYS_PER_CYCLE","DAYS_0000_TO_1970","_ChronoLocalDate","epochDay","adjustCycles","doyEst","yearEst","zeroDay","marchDoy0","marchMonth0","_resolvePreviousValid","_get0","_prolepticMonth","m","newMonth","weeksToAdd","mjDay","weeksToSubtract","until1","until2","daysUntil","_monthsUntil","packed1","packed2","calcDate","atTime1","atTime4","_atTimeOffsetTime","atStartOfDay","atStartOfDayWithZone","MIDNIGHT","dateTimeAfter","_compareTo0","otherDate","yearValue","dayValue","ChronoLocalDateTime","_ChronoLocalDateTime","_ofEpochMillis","localSecond","localEpochDay","ISO_LOCAL_DATE_TIME","_withDateTime","newDate","newTime","MICROS_PER_DAY","MILLIS_PER_DAY","_plusWithOverflow","totDays","NANOS_PER_DAY","MINUTES_PER_DAY","HOURS_PER_DAY","totNanos","curNoD","newNoD","timeUntil","endTime","atOffset","_hour","_minute","_second","_nanoOfSecond","_nano","secondOfDay","nanoOfDay","ISO_LOCAL_TIME","ham","unitDur","dur","mofd","newMofd","sofd","newSofd","nofd","newNofd","hourValue","minuteValue","secondValue","nanoValue","NANOS_PER_MILLI","systemUTC","ofEpochMilli","ISO_INSTANT","MIN_SECONDS","nval","_nval","_plus","_nanosUntil","toEpochMilli","_secondsUntil","secsDiff","nanosDiff","otherInstant","SystemClock","fixed","fixedInstant","FixedClock","baseClock","OffsetClock","withZone","_Clock","Date","getTime","_Clock2","_zoneId","_Clock3","_baseClock","ZoneOffsetTransition","_transition","_offsetBefore","_offsetAfter","dateTimeBefore","durationSeconds","d","SystemDefaultZoneRules","offsetInMinutes","getTimezoneOffset","offsetInMinutesBeforePossibleTransition","offsetInMinutesAfterPossibleTransition","_throwNotSupported","SystemDefaultZoneId","ZoneIdFactory","SYSTEM_DEFAULT_ZONE_ID_INSTANCE","isInit","MIN_VALUE","MIN","MAX","NOON","_init$k","isoWeekOfWeekyear","isoWeekyear","MONDAY","TUESDAY","FRIDAY","SATURDAY","SUNDAY","EPOCH_0","SYSTEM","BASIC_ISO_DATE","ISO_OFFSET_DATE","ISO_ORDINAL_DATE","ISO_WEEK_DATE","ToNativeJsConverter","zonedDateTime","toDate","convert","NativeJsTemporal","_epochMilli","nativeJs","jsJoda","used","jsJodaExports","use","fn","ImageResource","AbstractTutorial","Color","MGRSGraticuleLayer","listOf","ShowTessellationLayer","SurfaceImage","window","document","getElementById","mapOf","BasicTutorial","wwd","CameraViewTutorial","LookAtViewTutorial","PlacemarksTutorial","PathsTutorial","PolygonsTutorial","EllipsesTutorial","LabelsTutorial","SightlineTutorial","SurfaceImageTutorial","ShowTessellationTutorial","MGRSGraticuleTutorial","WmsLayerTutorial","WmtsLayerTutorial","currentTutorial","GoogleLayer","AtmosphereLayer","BasicElevationCoverage","innerHTML","select","onchange","event","target","tutorials","actionName","actionsContainer","onclick","tutorial","aircraft","airport","heading","tilt","LookAt","Position","renderable","FileResource","po","Globe","Wgs84Projection","BasicTessellator","BasicFrameController","asSharedFlow","LayerList","Camera","GoToAnimator","RenderContext","DrawContext","gl","initLocation","initAltitude","VertexAttrib","DrawElements","lhs","rhs","DrawShapeState","dc","DrawableQueue","p","rExtremes","pdr","s","sExtremes","pds","t","tExtremes","pdt","tmp","aExtremes","bExtremes","plane","dq1","effectiveRadius","bq1","bq2","z","Vec3","Ellipsoid","Viewport","distance","Location","latitude","longitude","sector","Vec2","gridEasting","gridNorthing","east","easting","north","northing","roundMGRS","setNumber","aaPattern","getGridValues","errorCode","latDeg","getLatitudeLetter","letters","makeMGRSString","intValue","j","sEast","iEast","sNorth","iNorth","PolarCoordConverter","ElevationModel","AbstractElevationCoverage","tileMatrixSet","tileFactory","AbsentResourceList","WmsElevationCoverage","BasicTerrain","LruMemoryCache","Tile","level","row","column","lazy","RenderableLayer","imageSource","surfaceImage","imageOptions","AbstractLayer","AbstractShaderProgram","ImageOptions","AbstractAtmosphereProgram","getDeltaLongitude","deltaLon","midPoint","greatCircleMidPoint","azimuth","rc","pixelSizeMeters","pixelSizeDegrees","GraticuleSupport","AbstractGraticuleLayer","scaleModulo","maxResolution","params","o","applyOpacity","opacity","color","compArray","colorValue","path","attrs","lineWidth","getLineShapeAttributes","rectangle","coerceAtLeast","coerceAtMost","minLat","maxLat","x1","getGridColumn","gridSector","x2","getGridRow","y1","y2","getGridRectangleForSector","vs","gridRectangle","col","zoneList","MGRSGridZone","getVisibleZones","minLon","maxLon","AbstractUTMGraticuleLayer","MGRSOverview","setSquareName","mgrs","sz","tenMeterDegree","AbstractGraticuleTile","layer","utm","point","altitudeAboveGround","UTMSquareSector","UTMZone","hemisphere","UTMZoneSector","SWEasting","SWNorthing","locations","posNext","locationsCrossDateLine","corners","lonSign","corner","lat","lon","Sector","ImageTile","minLatPercent","maxLatPercent","minLongitude","maxLongitude","TiledImageLayer","MercatorSector","tileOrigin","firstLevelDelta","numLevels","tileSize","transparent","TiledSurfaceImage","levelSet","MercatorTiledImageLayer","starDataSource","TiledElevationCoverage","resolution","buildTileMatrixSet","imageFormat","buildTileFactory","serviceAddress","coverage","lc","wmsLayers","wmsLayerConfig","config","levelSetConfig","emptyList","createWmsSurfaceImage","l","determineCoordSysCompatibleTileMatrixSets","wmtsLayer","CompatibleTileMatrixSet","tileMatrixSetIds","tileMatrixSetId","compatibleSet","capabilities","previousHeight","tileMatrix","topLeftCornerValue","determineCompatibleTileMatrixSet","compatibleTileMatrixSets","resourceUrl","compatibleTileMatrixSet","WmtsTileFactory","dcp","getMethods","constraints","determineKvpUrl","baseUrl","kvpServiceAddress","styleIdentifier","buildWmtsKvpTemplate","createWmtsTileFactory","boundingBox","imageSize","createWmtsLevelSet","createWmtsSurfaceImage","red","green","blue","alpha","TextRenderer","AbstractBufferObject","BoundingBox","AbstractShape","attributes","center","majorRadius","minorRadius","RenderData","BoundingSphere","positions","AbstractRenderable","imageColor","imageOffset","labelAttributes","leaderAttributes","GLUtessellatorCallbackAdapter","mutableListOf","interiorColor","outlineColor","font","textColor","textOffset","roundToInt","tileWidth","tileHeight","Level","keepWidth","roundUp","nextDigit","pointPos","mb","upperCase","offsetAt","tz","takeLast","invalidFormat","insertField","setDone","toInt","padStart","padEnd","fractionPartLength","roundToLong","fl","rest","fractionalFormat","ExponentFormatter","StringFormat","args","GLUvertex","GLUface","GLUhalfEdge","newState","makeDormant","gotoState","vertexData","coords","addVertex","vertex","CachedVertex","u","v","PriorityQ","PQnode","PQhandleElem","PriorityQHeap","eStart","render","RenderFan","RenderStrip","RenderTriangle","eDst","eSrc","HttpClient","unitSquareTransform","minX","minY","maxX","maxY","modulus","WorldWindowController","EventListener","keyCode","preventDefault","tabIndex","focus","WebKgl","cacheCapacity","BasicWorldWindowController","KeyboardControls","SelectDragDetector","Frame","preventDefaultListener","navigator","maxTouchPoints","setProperty","onGestureEvent","addEventListener","statusMessage","GestureRecognizer","callback","DragRecognizer","PanRecognizer","clientX","clientY","changedTouches","item","pickPoint","pickList","redrawRequired","highlighted","topPickedObject","recognizer","toPosition","clapToGround","movePoint","fromPosition","ClickRecognizer","TapRecognizer","controller","AbstractSource","source","AbstractTiledElevationCoverage","MainScope","AbstractTiledImageLayer","createElement","getContext","AbstractMercatorImageTile","family","weight","postprocessor","URL","revokeObjectURL","src","capacity","lowWater","Texture","image","height","isPowerOfTwo","BasicPool","language","identifier","positionCopy","r8","g8","b8","removeAll","fromPoint","toPoint","to","lookAt","elevation","dot","altitude","radius","sinFovY2","frame","pickMode","isRedrawRequested","far","eyeAltitude","near","maxDepthValue","distanceToSurface","maxNearDistance","projection","modelview","altitudeMode","coerceIn","pool","BasicDrawableTerrain","instance","bufferBound","attribLocation","depthAttachment","colorAttachment","framebuffer","program","textureUnit","textureUnitIndex","texture","buffer","pixelCount","pixelBuffer","idx","resultSet","matrix","prim","mode","DrawableLines","drawable","groupId","order","newEntries","entry","depth","sortWith","DrawableScreenTexture","that","DrawableShape","DrawableSightline","depthTexture","terrain","terrainOrigin","DrawableSurfaceColor","DrawableSurfaceShape","scratchList","shapeCount","terrainSector","shape","primIdx","DrawableSurfaceTexture","texCoordMatrix","usingTerrainAttrs","jIdx","textureSector","bindTexture","DrawableTessellation","pickedObjectId","BasicShaderProgram","pickRay","pickedObjects","pickViewport","objectFound","pickPointOnly","radians","degrees","angle","normalizedLat","a1","a2","stride","rMin","rMax","sMin","sMax","tMin","tMax","rSum","sSum","tSum","rLen","cx","cy","cz","rx2","ry2","rz2","sLen","tLen","heights","maxHeight","minHeight","globe","points","centroidLat","centroidLon","adjustExtremes","swapAxes","minDist2","dist2","intersectsAt","frustum","nr","roll","w","viewport","bln","blf","brn","brf","tln","tlf","trn","trf","subViewport","mvpInv","left","bottom","right","top","va","vb","nl","nb","nt","nn","nf","pointA","pointB","elements","vert1x","vert1y","vert1z","vert2x","vert2y","vert2z","vert0x","vert0y","vert0z","vy","edge2z","vz","edge2y","edge2x","vx","edge1x","px","edge1y","py","edge1z","pz","det","epsilon","sx","sy","invDet","tx","ty","qx","qy","qz","offsetIn","timeZone","offsetSec","offsetHours","latDegrees","lonDegrees","latitudeDegrees","longitudeDegrees","latitudeRadians","longitudeRadians","location","lat1","lat2","lon1","lon2","azimuthRadians","lat1Radians","lat2Radians","lon1Radians","lon2Radians","distanceRadians","lonRadians","endLatRadians","endLonRadians","dLon","dLat","latRadians","q","xScale","yScale","dst","srcDeltaLon","dstDeltaLon","srcDeltaLat","dstDeltaLat","xs","xt","ys","yt","ma0","ma","ma1","ma2","contentEquals","contentHashCode","big","vv","sum","A","k","dum","imax","ii","ip","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","zScale","c","viewportWidth","viewportHeight","nearDistance","nearHeight","aspect","nearWidth","farDistance","mx","my","mz","c11","c22","c33","c12","c13","c23","numPoints","dx","dy","dz","ma3","mr1","mr2","mr3","mr4","depthOffset","cr","sr","u2","u2p1","i1","i2","i3","itemp","result1","result2","result3","sw","mw","nw","fw","nearResult","nx","ny","nz","farResult","fx","fy","fz","Offset","vector","da","db","line","lDotV","magnitude","lower","upper","deltaLatDegrees","minLatDegrees","deltaLonDegrees","minLonDegrees","maxLatDegrees","maxLonDegrees","empty","deltaLatitudeDegrees","deltaLongitudeDegrees","toLong","lOrd","lRow","lCol","deltaLat","matrixWidth","matrixHeight","TileMatrix","tileMatrices","TileMatrixSet","nearestIdx","nearestDelta2","degreesPerPixel","delta","delta2","MGRSCoordConverter","converter","MGRSCoord","ltr2LowValue","falseEasting","falseNorthing","convertUPSToMGRS","ups","convertUTMToMGRS","invF","sLat","cLat","powEs","dLam","rho","tempPhi","Easting","maxEasting","minEasting","Northing","maxNorthing","minNorthing","phi","sinPhi","aOrNull","fOrNull","TMCoordConverter","err","originLatitude","centralMeridian","TMCoord","cm","scaleFactor","tn","tn2","tn3","tn4","tn5","tempLong","tempOrigin","c3","c5","tan2","tan4","eta","eta2","eta3","tmd","sn","eta4","c7","tan6","t1","t2","t3","t4","t5","t6","t7","t8","t9","ftphi","t10","de","t11","t12","t13","t14","t15","t16","t17","UPSCoordConverter","UPSCoord","UTMCoordConverter","UTMCoord","tempZone","tm","numLat","numLon","verticalExaggeration","origin","rowStride","retrieve","maxTimestamp","timestamp","gridWidth","gridHeight","targetIdx","targetPixelSpan","TileBlock","tileBlock","rasterWidth","rasterHeight","uIdx","matrixMinLon","matrixMaxLon","i0","matrixDeltaLon","fract","vIdx","matrixMinLat","matrixMaxLat","matrixDeltaLat","j0","tileArray","intersection","uMin","uMax","vMin","vMax","rowMin","rowMax","colMin","colMax","rIdx","hIdx","j1","wIdx","row0","col0","col1","row1","i0j0","i1j0","i0j1","i1j1","rowJMin","jMin","rowJMax","jMax","colIMin","iMin","colIMax","iMax","rpm","cosLat","sinLon","ec2","sinLat","cosLon","eqr2","pol2","ux","uy","uz","ez","ey","elevIndex","lonIndex","rowIndex","latIndex","eqr","colIndex","hgt","xOffset","yOffset","zOffset","resultIndex","skip","zpx","ra2","e4","evoluteBorderTest","zpxSqrt","h","s2","lambda","m2","tile","found","triStripElements","si","ti","tileRowStride","i00","i01","sf","tf","f00","i10","f10","f01","i11","f11","TerrainTile","child","vertexTexCoords","lineElements","tIdx","sIdx","ds","toShort","ve","borderHeight","invWavelength","kr","km","g","fragMode","direction","eyePoint","equatorialRadius","ar","lightLocation","SkyProgram","GroundProgram","altitudes","DrawableGroundAtmosphere","nightTexture","textureBound","DrawableSkyAtmosphere","renderingParams","paramsKey","needsToUpdate","calculateLookAtProperties","getLabelOffset","labelOffsetDegrees","labelPos","pathType","surfacePoint","p1In","p2In","outPoint","greatCircleIntersectionAtLongitude","inPoint","greatCircleIntersectionAtLatitude","elevationTimestamp","heightLimits","extent","getExtent","GraticuleRenderingParams","ge","computePositionFromUTM","computePositionFromUPS","rows","startEasting","startNorthing","UTMSquareZone","utmZone","utmZoneSector","squares","squaresArray","cols","applyRenderingParams","initRenderingParams","selectMGRSRenderables","gz","neighbor","graticuleType","setSquareNames","createSquaresUPS","createSquaresUTM","polyline","lineSector","gt","zoneNumber","toList","latitude1","latitude2","UTMExtremes","levelExtremes","pixelSize","labelNorthing","labelHemisphere","labelEasting","eastingOffset","northingOffset","extremes","gridStep","gridStepTimesTen","viewFrustum","isPointInRange","currentHemisphere","sb","drawMetricLabels","UTMSquareGrid","sg","createSubGrids","GridElement","pA","pB","centerPoint","isNorthNeighborInView","isEastNeighborInView","squareGrid","firstRow","dLatPercent","firstCol","d1","firstRowPercent","lastRow","firstColLon","lastCol","d2","d0","t0","northRow","westCol","childLevel","eastCol","southRow","starData","sunCelestialLocation","StarFieldProgram","DrawableLambda","sunBuffer","sunTexture","positionIndex","starInfo","indexes","declination","rightAscension","pointSize","raIndex","decIndex","magIndex","metadata","starMetaInfo","numDays","minMag","maxMag","tileSector","urlString","wmsCapabilities","withContext","matchingCoordinateSystems","toMutableSet","wmsLayerCoordinateSystems","toSet","WmsLayerConfig","wmsVersion","imageFormats","LevelSetConfig","minScaleDenominator","layerCapabilities","layerCapability","minRadiansPerPixel","flipRow","toDouble","lowerValues","upperValues","bb","gg","rr","hsv","attachment","currentFramebuffer","textureName","tanFov2","modelPoint","ew","TextCacheKey","zOrder","cameraDistance","sortOrder","pickedObject","powerOfTwoCeiling","bytesPerRow","widthPow2","byteCount","heightPow2","hasMipMap","currentTexture","param","currentBuffer","currentProgram","fs","enable","sightline","visibleColor","occludedColor","drawableCount","highlightAttributes","boundingSector","minDistance2","distance2","metersPerPixel","intervals","Range","topRange","outlineRange","toShortArray","elementBuffer","drawState","side","outline","calculatedIntervals","sanitizedIntervals","spineCount","isStandardAxisOrientation","majorArcRadians","globeRadius","minorArcRadians","spineIdx","deltaRadians","azimuthDegrees","headingAdjustment","arcRadius","loc","arrayOffset","spineRadius","offsetVertexIndex","texCoord2d","isExtrudedSkirt","maxRadius","subdivisionCount","actualRotation","boundingRectForUnitSquare","SightlineProgram","FloatBufferObject","vertexCount","begin","numSubsegments","dist","deltaDist","alt","deltaAlt","intermediate","visibilityScale","activeTexture","offsetX","offsetY","scaleX","scaleY","absTilt","camera","actualTilt","labelTexture","polygonData","data","outData","boundaryEdge","errnum","noIntermediatePoints","tess","v0","v1","v2","errNum","errStr","increment","newArray","SurfaceTextureProgram","retrieveCurrentLevel","currentAncestorTile","currentAncestorTexture","ancestorTile","ancestorTexture","cacheSource","isCacheAbsent","permanent","resourceId","timeSinceLastMark","last","levelNumber","radiansPerPixel","newEntry","oldEntry","spaceRequired","sortedWith","meanLongitude","eclipticLongitude","CelestialLocation","GMST","celestialLocation","dayFraction","maxLatitude","tileDelta","firstRowLat","distanceToCamera","detailFactor","childRow","childCol","childSector","latMin","latMid","lonMin","lonMid","lonMax","latMax","cache","cacheSize","latAbsDifference","cameraPosition","lonDifference","nearestLat","nearestLon","fractionWidth","take","monthNumber","createStringField","createIntegerField","createOctalField","createHexField","createFloat","createScientific","createAutoFloat","createCharacter","createTimeField","endStage","Specification","reason","convertToInstant","tessellator","which","aCallback","coords_offset","Dict","leq","dict","node","newNode","aNode","aDict","GLUtessellatorImpl","tooLarge","requireState","flushCache","clamped","cacheVertex","mesh","printStackTrace","weights","gapL","gapR","o1","o2","z1","z2","eNext","eSym","ePrev","aONext","bONext","vNext","newVertex","vPrev","eOrig","fNext","newFace","fPrev","del","eDel","vDel","newOrg","fDel","newLface","newVertex1","newVertex2","joiningLoops","joiningVertices","eOrg","eDelSym","eNew","eNewSym","tempHalfEdge","GLUmesh","fHead","vHead","eHead","maxVal","minVal","minVert","maxVert","norm","maxLen2","tNorm","tLen2","area","computedNormal","sUnit","tUnit","PriorityQSort","curr","hCurr","hChild","hParent","free","keyNew","hMin","Stack","seed","piv","lt","swap","pqKeys","heapMin","sortMin","addToTrail","marked","fOrig","trail","freeTrail","headSize","tailSize","isEven","eTail","edgeState","check","vc","xc","yc","zc","vn","yp","zp","xp","key1","key2","reg1","reg2","e1","reg","newEdge","regionAbove","org","regionBelow","ActiveRegion","eNewUp","regNew","regAbove","regPrev","regFirst","regLast","eTopLeft","firstTime","eFirst","regUp","eLast","addWinding","cleanUp","isect","needed","orgUp","dstUp","orgLo","dstLo","weights1","weights2","regLo","eUp","eLo","orgMin","eBottomLeft","degenerate","vEvent","eTopRight","eLnext","pq","up","face","keepOnlyBoundary","defaultPrevented","state","forwardRadians","cosHeading","sideRadians","sinHeading","clientWidth","clientHeight","headingDegrees","tiltDegrees","rotation","timeStamp","deltaMode","WheelEvent","DOM_DELTA_PIXEL","deltaY","DOM_DELTA_LINE","DOM_DELTA_PAGE","operation","setTimeout","canvas","glAttrs","handleEvent","listener","getBoundingClientRect","bbox","clientLeft","clientTop","PickedObjectList","pickCenter","cancelAnimationFrame","devicePixelRatio","getExtension","requestAnimationFrame","isPickMode","drawingBufferWidth","drawingBufferHeight","stage","button","Click","delay","pointerType","buttonBit","touch","nextTouch","centroid","touchIdx","TouchWrapper","pointerId","newScale","touch0","touch1","newRotation","tap","tapCount","dirMask","ElevationSource","url","href","fetch","ok","arrayBuffer","statusText","headers","Int16Array","Float32Array","Uint8Array","elevationSource","resource","drawImage","widthDouble","heightDouble","getImageData","createImageData","miny","maxy","srcRow","putImageData","dstData","toBlob","it","createObjectURL","onerror","deviceMemory","options","Image","onload","crossOrigin","ratioH","ratioW","ratio","ImageTexture","CanvasTexture","ctx2D","textBaseline","textAlign","fillStyle","strokeStyle","lineCap","lineJoin","translate","strokeOffset","textSize","lines","strokeText","fillText","textAttributes","element","measureText","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","ImageSource","imageResource","Event","priority","tr","stackTraceToString","console","messageWithTrace","warn","info","log","className","getParameter","pname","KglShader","createShader","shaderSource","shader","compileShader","deleteShader","getShaderParameter","getProgramInfoLog","getShaderInfoLog","KglProgram","createProgram","deleteProgram","attachShader","linkProgram","useProgram","getProgramParameter","KglUniformLocation","getUniformLocation","bindAttribLocation","KglBuffer","createBuffer","bindBuffer","bufferData","arr","subarray","usage","deleteBuffer","vertexAttribPointer","enableVertexAttribArray","disableVertexAttribArray","cap","disable","uniform1f","uniform1i","uniform2f","uniform3f","uniform3fv","uniform4f","uniform4fv","uniformMatrix3fv","transpose","uniformMatrix4fv","polygonOffset","factor","frontFace","depthFunc","func","depthMask","mask","blendFunc","sFactor","dFactor","colorMask","KglTexture","createTexture","internalFormat","border","generateMipmap","texParameteri","drawArrays","drawElements","bindFramebuffer","KglFramebuffer","createFramebuffer","framebufferTexture2D","textarget","readPixels","pixelStorei","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","defineProperty","enumerable","globalThis","Function","Symbol","toStringTag","scriptUrl","importScripts","currentScript","scripts","getElementsByTagName","__webpack_exports__"],"sourceRoot":""}